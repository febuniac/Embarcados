
Avaliacao1-menu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006e48  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406e48  00406e48  00016e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000087c  20400000  00406e50  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000019c  2040087c  004076cc  0002087c  2**2
                  ALLOC
  4 .stack        00002000  20400a18  00407868  0002087c  2**0
                  ALLOC
  5 .heap         00000200  20402a18  00409868  0002087c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002087c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000208aa  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000abf3  00000000  00000000  00020903  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001665  00000000  00000000  0002b4f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000073cc  00000000  00000000  0002cb5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000bf8  00000000  00000000  00033f27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b28  00000000  00000000  00034b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001d638  00000000  00000000  00035647  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009a64  00000000  00000000  00052c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008a7a2  00000000  00000000  0005c6e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003ce0  00000000  00000000  000e6e88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20402a18 	.word	0x20402a18
  400004:	0040148d 	.word	0x0040148d
  400008:	0040153d 	.word	0x0040153d
  40000c:	0040153d 	.word	0x0040153d
  400010:	0040153d 	.word	0x0040153d
  400014:	0040153d 	.word	0x0040153d
  400018:	0040153d 	.word	0x0040153d
	...
  40002c:	0040153d 	.word	0x0040153d
  400030:	0040153d 	.word	0x0040153d
  400034:	00000000 	.word	0x00000000
  400038:	0040153d 	.word	0x0040153d
  40003c:	0040153d 	.word	0x0040153d
  400040:	0040153d 	.word	0x0040153d
  400044:	0040153d 	.word	0x0040153d
  400048:	00401bc1 	.word	0x00401bc1
  40004c:	0040153d 	.word	0x0040153d
  400050:	0040153d 	.word	0x0040153d
  400054:	0040153d 	.word	0x0040153d
  400058:	0040153d 	.word	0x0040153d
  40005c:	0040153d 	.word	0x0040153d
  400060:	0040153d 	.word	0x0040153d
  400064:	00000000 	.word	0x00000000
  400068:	00400819 	.word	0x00400819
  40006c:	00400831 	.word	0x00400831
  400070:	00400849 	.word	0x00400849
  400074:	0040153d 	.word	0x0040153d
  400078:	0040153d 	.word	0x0040153d
  40007c:	0040153d 	.word	0x0040153d
  400080:	00400861 	.word	0x00400861
  400084:	00400879 	.word	0x00400879
  400088:	0040153d 	.word	0x0040153d
  40008c:	0040153d 	.word	0x0040153d
  400090:	0040153d 	.word	0x0040153d
  400094:	0040153d 	.word	0x0040153d
  400098:	0040153d 	.word	0x0040153d
  40009c:	0040153d 	.word	0x0040153d
  4000a0:	00401b7d 	.word	0x00401b7d
  4000a4:	0040153d 	.word	0x0040153d
  4000a8:	0040153d 	.word	0x0040153d
  4000ac:	0040153d 	.word	0x0040153d
  4000b0:	0040153d 	.word	0x0040153d
  4000b4:	0040153d 	.word	0x0040153d
  4000b8:	0040153d 	.word	0x0040153d
  4000bc:	0040153d 	.word	0x0040153d
  4000c0:	0040153d 	.word	0x0040153d
  4000c4:	0040153d 	.word	0x0040153d
  4000c8:	0040153d 	.word	0x0040153d
  4000cc:	0040153d 	.word	0x0040153d
  4000d0:	00000000 	.word	0x00000000
  4000d4:	0040153d 	.word	0x0040153d
  4000d8:	00000000 	.word	0x00000000
  4000dc:	0040153d 	.word	0x0040153d
  4000e0:	0040153d 	.word	0x0040153d
  4000e4:	0040153d 	.word	0x0040153d
  4000e8:	0040153d 	.word	0x0040153d
  4000ec:	0040153d 	.word	0x0040153d
  4000f0:	0040153d 	.word	0x0040153d
  4000f4:	0040153d 	.word	0x0040153d
  4000f8:	0040153d 	.word	0x0040153d
  4000fc:	0040153d 	.word	0x0040153d
  400100:	0040153d 	.word	0x0040153d
  400104:	0040153d 	.word	0x0040153d
  400108:	0040153d 	.word	0x0040153d
  40010c:	0040153d 	.word	0x0040153d
  400110:	0040153d 	.word	0x0040153d
	...
  400120:	0040153d 	.word	0x0040153d
  400124:	0040153d 	.word	0x0040153d
  400128:	0040153d 	.word	0x0040153d
  40012c:	0040153d 	.word	0x0040153d
  400130:	0040153d 	.word	0x0040153d
  400134:	00000000 	.word	0x00000000
  400138:	0040153d 	.word	0x0040153d
  40013c:	0040153d 	.word	0x0040153d

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040087c 	.word	0x2040087c
  40015c:	00000000 	.word	0x00000000
  400160:	00406e50 	.word	0x00406e50

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400880 	.word	0x20400880
  400190:	00406e50 	.word	0x00406e50
  400194:	00406e50 	.word	0x00406e50
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d831      	bhi.n	40020e <osc_enable+0x72>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b11      	ldr	r3, [pc, #68]	; (400218 <osc_enable+0x7c>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e01a      	b.n	40020e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0f      	ldr	r3, [pc, #60]	; (400218 <osc_enable+0x7c>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e016      	b.n	40020e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0e      	ldr	r3, [pc, #56]	; (40021c <osc_enable+0x80>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e012      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0c      	ldr	r3, [pc, #48]	; (40021c <osc_enable+0x80>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00e      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b0a      	ldr	r3, [pc, #40]	; (40021c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e00a      	b.n	40020e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	213e      	movs	r1, #62	; 0x3e
  4001fa:	2000      	movs	r0, #0
  4001fc:	4b08      	ldr	r3, [pc, #32]	; (400220 <osc_enable+0x84>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e005      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	213e      	movs	r1, #62	; 0x3e
  400204:	2001      	movs	r0, #1
  400206:	4b06      	ldr	r3, [pc, #24]	; (400220 <osc_enable+0x84>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	e000      	b.n	40020e <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  40020c:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  40020e:	bf00      	nop
  400210:	3708      	adds	r7, #8
  400212:	46bd      	mov	sp, r7
  400214:	bd80      	pop	{r7, pc}
  400216:	bf00      	nop
  400218:	00400991 	.word	0x00400991
  40021c:	004009fd 	.word	0x004009fd
  400220:	00400a6d 	.word	0x00400a6d

00400224 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400224:	b580      	push	{r7, lr}
  400226:	b082      	sub	sp, #8
  400228:	af00      	add	r7, sp, #0
  40022a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40022c:	687b      	ldr	r3, [r7, #4]
  40022e:	2b07      	cmp	r3, #7
  400230:	d826      	bhi.n	400280 <osc_is_ready+0x5c>
  400232:	a201      	add	r2, pc, #4	; (adr r2, 400238 <osc_is_ready+0x14>)
  400234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400238:	00400259 	.word	0x00400259
  40023c:	0040025d 	.word	0x0040025d
  400240:	0040025d 	.word	0x0040025d
  400244:	0040026f 	.word	0x0040026f
  400248:	0040026f 	.word	0x0040026f
  40024c:	0040026f 	.word	0x0040026f
  400250:	0040026f 	.word	0x0040026f
  400254:	0040026f 	.word	0x0040026f
	case OSC_SLCK_32K_RC:
		return 1;
  400258:	2301      	movs	r3, #1
  40025a:	e012      	b.n	400282 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40025c:	4b0b      	ldr	r3, [pc, #44]	; (40028c <osc_is_ready+0x68>)
  40025e:	4798      	blx	r3
  400260:	4603      	mov	r3, r0
  400262:	2b00      	cmp	r3, #0
  400264:	bf14      	ite	ne
  400266:	2301      	movne	r3, #1
  400268:	2300      	moveq	r3, #0
  40026a:	b2db      	uxtb	r3, r3
  40026c:	e009      	b.n	400282 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026e:	4b08      	ldr	r3, [pc, #32]	; (400290 <osc_is_ready+0x6c>)
  400270:	4798      	blx	r3
  400272:	4603      	mov	r3, r0
  400274:	2b00      	cmp	r3, #0
  400276:	bf14      	ite	ne
  400278:	2301      	movne	r3, #1
  40027a:	2300      	moveq	r3, #0
  40027c:	b2db      	uxtb	r3, r3
  40027e:	e000      	b.n	400282 <osc_is_ready+0x5e>
	}

	return 0;
  400280:	2300      	movs	r3, #0
}
  400282:	4618      	mov	r0, r3
  400284:	3708      	adds	r7, #8
  400286:	46bd      	mov	sp, r7
  400288:	bd80      	pop	{r7, pc}
  40028a:	bf00      	nop
  40028c:	004009c9 	.word	0x004009c9
  400290:	00400ae5 	.word	0x00400ae5

00400294 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400294:	b480      	push	{r7}
  400296:	b083      	sub	sp, #12
  400298:	af00      	add	r7, sp, #0
  40029a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40029c:	687b      	ldr	r3, [r7, #4]
  40029e:	2b07      	cmp	r3, #7
  4002a0:	d825      	bhi.n	4002ee <osc_get_rate+0x5a>
  4002a2:	a201      	add	r2, pc, #4	; (adr r2, 4002a8 <osc_get_rate+0x14>)
  4002a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002a8:	004002c9 	.word	0x004002c9
  4002ac:	004002cf 	.word	0x004002cf
  4002b0:	004002d5 	.word	0x004002d5
  4002b4:	004002db 	.word	0x004002db
  4002b8:	004002df 	.word	0x004002df
  4002bc:	004002e3 	.word	0x004002e3
  4002c0:	004002e7 	.word	0x004002e7
  4002c4:	004002eb 	.word	0x004002eb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002cc:	e010      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d2:	e00d      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d8:	e00a      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <osc_get_rate+0x68>)
  4002dc:	e008      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002de:	4b08      	ldr	r3, [pc, #32]	; (400300 <osc_get_rate+0x6c>)
  4002e0:	e006      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002e2:	4b08      	ldr	r3, [pc, #32]	; (400304 <osc_get_rate+0x70>)
  4002e4:	e004      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002e6:	4b07      	ldr	r3, [pc, #28]	; (400304 <osc_get_rate+0x70>)
  4002e8:	e002      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002ea:	4b06      	ldr	r3, [pc, #24]	; (400304 <osc_get_rate+0x70>)
  4002ec:	e000      	b.n	4002f0 <osc_get_rate+0x5c>
	}

	return 0;
  4002ee:	2300      	movs	r3, #0
}
  4002f0:	4618      	mov	r0, r3
  4002f2:	370c      	adds	r7, #12
  4002f4:	46bd      	mov	sp, r7
  4002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002fa:	4770      	bx	lr
  4002fc:	003d0900 	.word	0x003d0900
  400300:	007a1200 	.word	0x007a1200
  400304:	00b71b00 	.word	0x00b71b00

00400308 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400308:	b580      	push	{r7, lr}
  40030a:	b082      	sub	sp, #8
  40030c:	af00      	add	r7, sp, #0
  40030e:	4603      	mov	r3, r0
  400310:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400312:	bf00      	nop
  400314:	79fb      	ldrb	r3, [r7, #7]
  400316:	4618      	mov	r0, r3
  400318:	4b05      	ldr	r3, [pc, #20]	; (400330 <osc_wait_ready+0x28>)
  40031a:	4798      	blx	r3
  40031c:	4603      	mov	r3, r0
  40031e:	f083 0301 	eor.w	r3, r3, #1
  400322:	b2db      	uxtb	r3, r3
  400324:	2b00      	cmp	r3, #0
  400326:	d1f5      	bne.n	400314 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400328:	bf00      	nop
  40032a:	3708      	adds	r7, #8
  40032c:	46bd      	mov	sp, r7
  40032e:	bd80      	pop	{r7, pc}
  400330:	00400225 	.word	0x00400225

00400334 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400334:	b580      	push	{r7, lr}
  400336:	b086      	sub	sp, #24
  400338:	af00      	add	r7, sp, #0
  40033a:	60f8      	str	r0, [r7, #12]
  40033c:	607a      	str	r2, [r7, #4]
  40033e:	603b      	str	r3, [r7, #0]
  400340:	460b      	mov	r3, r1
  400342:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	2b00      	cmp	r3, #0
  400348:	d107      	bne.n	40035a <pll_config_init+0x26>
  40034a:	683b      	ldr	r3, [r7, #0]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d104      	bne.n	40035a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400350:	68fb      	ldr	r3, [r7, #12]
  400352:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400356:	601a      	str	r2, [r3, #0]
  400358:	e019      	b.n	40038e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40035a:	7afb      	ldrb	r3, [r7, #11]
  40035c:	4618      	mov	r0, r3
  40035e:	4b0e      	ldr	r3, [pc, #56]	; (400398 <pll_config_init+0x64>)
  400360:	4798      	blx	r3
  400362:	4602      	mov	r2, r0
  400364:	687b      	ldr	r3, [r7, #4]
  400366:	fbb2 f3f3 	udiv	r3, r2, r3
  40036a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40036c:	697b      	ldr	r3, [r7, #20]
  40036e:	683a      	ldr	r2, [r7, #0]
  400370:	fb02 f303 	mul.w	r3, r2, r3
  400374:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400376:	683b      	ldr	r3, [r7, #0]
  400378:	3b01      	subs	r3, #1
  40037a:	041a      	lsls	r2, r3, #16
  40037c:	4b07      	ldr	r3, [pc, #28]	; (40039c <pll_config_init+0x68>)
  40037e:	4013      	ands	r3, r2
  400380:	687a      	ldr	r2, [r7, #4]
  400382:	b2d2      	uxtb	r2, r2
  400384:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400386:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40038a:	68fb      	ldr	r3, [r7, #12]
  40038c:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  40038e:	bf00      	nop
  400390:	3718      	adds	r7, #24
  400392:	46bd      	mov	sp, r7
  400394:	bd80      	pop	{r7, pc}
  400396:	bf00      	nop
  400398:	00400295 	.word	0x00400295
  40039c:	07ff0000 	.word	0x07ff0000

004003a0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003a0:	b580      	push	{r7, lr}
  4003a2:	b082      	sub	sp, #8
  4003a4:	af00      	add	r7, sp, #0
  4003a6:	6078      	str	r0, [r7, #4]
  4003a8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003aa:	683b      	ldr	r3, [r7, #0]
  4003ac:	2b00      	cmp	r3, #0
  4003ae:	d108      	bne.n	4003c2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003b0:	4b09      	ldr	r3, [pc, #36]	; (4003d8 <pll_enable+0x38>)
  4003b2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003b4:	4a09      	ldr	r2, [pc, #36]	; (4003dc <pll_enable+0x3c>)
  4003b6:	687b      	ldr	r3, [r7, #4]
  4003b8:	681b      	ldr	r3, [r3, #0]
  4003ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003be:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003c0:	e005      	b.n	4003ce <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003c2:	4a06      	ldr	r2, [pc, #24]	; (4003dc <pll_enable+0x3c>)
  4003c4:	687b      	ldr	r3, [r7, #4]
  4003c6:	681b      	ldr	r3, [r3, #0]
  4003c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003cc:	61d3      	str	r3, [r2, #28]
	}
}
  4003ce:	bf00      	nop
  4003d0:	3708      	adds	r7, #8
  4003d2:	46bd      	mov	sp, r7
  4003d4:	bd80      	pop	{r7, pc}
  4003d6:	bf00      	nop
  4003d8:	00400b01 	.word	0x00400b01
  4003dc:	400e0600 	.word	0x400e0600

004003e0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003e0:	b580      	push	{r7, lr}
  4003e2:	b082      	sub	sp, #8
  4003e4:	af00      	add	r7, sp, #0
  4003e6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e8:	687b      	ldr	r3, [r7, #4]
  4003ea:	2b00      	cmp	r3, #0
  4003ec:	d103      	bne.n	4003f6 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003ee:	4b05      	ldr	r3, [pc, #20]	; (400404 <pll_is_locked+0x24>)
  4003f0:	4798      	blx	r3
  4003f2:	4603      	mov	r3, r0
  4003f4:	e002      	b.n	4003fc <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4003f6:	4b04      	ldr	r3, [pc, #16]	; (400408 <pll_is_locked+0x28>)
  4003f8:	4798      	blx	r3
  4003fa:	4603      	mov	r3, r0
	}
}
  4003fc:	4618      	mov	r0, r3
  4003fe:	3708      	adds	r7, #8
  400400:	46bd      	mov	sp, r7
  400402:	bd80      	pop	{r7, pc}
  400404:	00400b1d 	.word	0x00400b1d
  400408:	00400b39 	.word	0x00400b39

0040040c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40040c:	b580      	push	{r7, lr}
  40040e:	b082      	sub	sp, #8
  400410:	af00      	add	r7, sp, #0
  400412:	4603      	mov	r3, r0
  400414:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400416:	79fb      	ldrb	r3, [r7, #7]
  400418:	3b03      	subs	r3, #3
  40041a:	2b04      	cmp	r3, #4
  40041c:	d808      	bhi.n	400430 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40041e:	79fb      	ldrb	r3, [r7, #7]
  400420:	4618      	mov	r0, r3
  400422:	4b06      	ldr	r3, [pc, #24]	; (40043c <pll_enable_source+0x30>)
  400424:	4798      	blx	r3
		osc_wait_ready(e_src);
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	4618      	mov	r0, r3
  40042a:	4b05      	ldr	r3, [pc, #20]	; (400440 <pll_enable_source+0x34>)
  40042c:	4798      	blx	r3
		break;
  40042e:	e000      	b.n	400432 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400430:	bf00      	nop
	}
}
  400432:	bf00      	nop
  400434:	3708      	adds	r7, #8
  400436:	46bd      	mov	sp, r7
  400438:	bd80      	pop	{r7, pc}
  40043a:	bf00      	nop
  40043c:	0040019d 	.word	0x0040019d
  400440:	00400309 	.word	0x00400309

00400444 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400444:	b580      	push	{r7, lr}
  400446:	b082      	sub	sp, #8
  400448:	af00      	add	r7, sp, #0
  40044a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40044c:	bf00      	nop
  40044e:	6878      	ldr	r0, [r7, #4]
  400450:	4b04      	ldr	r3, [pc, #16]	; (400464 <pll_wait_for_lock+0x20>)
  400452:	4798      	blx	r3
  400454:	4603      	mov	r3, r0
  400456:	2b00      	cmp	r3, #0
  400458:	d0f9      	beq.n	40044e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40045a:	2300      	movs	r3, #0
}
  40045c:	4618      	mov	r0, r3
  40045e:	3708      	adds	r7, #8
  400460:	46bd      	mov	sp, r7
  400462:	bd80      	pop	{r7, pc}
  400464:	004003e1 	.word	0x004003e1

00400468 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400468:	b580      	push	{r7, lr}
  40046a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40046c:	2006      	movs	r0, #6
  40046e:	4b05      	ldr	r3, [pc, #20]	; (400484 <sysclk_get_main_hz+0x1c>)
  400470:	4798      	blx	r3
  400472:	4602      	mov	r2, r0
  400474:	4613      	mov	r3, r2
  400476:	009b      	lsls	r3, r3, #2
  400478:	4413      	add	r3, r2
  40047a:	009a      	lsls	r2, r3, #2
  40047c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40047e:	4618      	mov	r0, r3
  400480:	bd80      	pop	{r7, pc}
  400482:	bf00      	nop
  400484:	00400295 	.word	0x00400295

00400488 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400488:	b580      	push	{r7, lr}
  40048a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40048c:	4b02      	ldr	r3, [pc, #8]	; (400498 <sysclk_get_cpu_hz+0x10>)
  40048e:	4798      	blx	r3
  400490:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400492:	4618      	mov	r0, r3
  400494:	bd80      	pop	{r7, pc}
  400496:	bf00      	nop
  400498:	00400469 	.word	0x00400469

0040049c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40049c:	b590      	push	{r4, r7, lr}
  40049e:	b083      	sub	sp, #12
  4004a0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004a2:	4813      	ldr	r0, [pc, #76]	; (4004f0 <sysclk_init+0x54>)
  4004a4:	4b13      	ldr	r3, [pc, #76]	; (4004f4 <sysclk_init+0x58>)
  4004a6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004a8:	2006      	movs	r0, #6
  4004aa:	4b13      	ldr	r3, [pc, #76]	; (4004f8 <sysclk_init+0x5c>)
  4004ac:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004ae:	1d38      	adds	r0, r7, #4
  4004b0:	2319      	movs	r3, #25
  4004b2:	2201      	movs	r2, #1
  4004b4:	2106      	movs	r1, #6
  4004b6:	4c11      	ldr	r4, [pc, #68]	; (4004fc <sysclk_init+0x60>)
  4004b8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ba:	1d3b      	adds	r3, r7, #4
  4004bc:	2100      	movs	r1, #0
  4004be:	4618      	mov	r0, r3
  4004c0:	4b0f      	ldr	r3, [pc, #60]	; (400500 <sysclk_init+0x64>)
  4004c2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004c4:	2000      	movs	r0, #0
  4004c6:	4b0f      	ldr	r3, [pc, #60]	; (400504 <sysclk_init+0x68>)
  4004c8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004ca:	2002      	movs	r0, #2
  4004cc:	4b0e      	ldr	r3, [pc, #56]	; (400508 <sysclk_init+0x6c>)
  4004ce:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004d0:	2000      	movs	r0, #0
  4004d2:	4b0e      	ldr	r3, [pc, #56]	; (40050c <sysclk_init+0x70>)
  4004d4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004d6:	4b0e      	ldr	r3, [pc, #56]	; (400510 <sysclk_init+0x74>)
  4004d8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004da:	4b0e      	ldr	r3, [pc, #56]	; (400514 <sysclk_init+0x78>)
  4004dc:	4798      	blx	r3
  4004de:	4603      	mov	r3, r0
  4004e0:	4618      	mov	r0, r3
  4004e2:	4b04      	ldr	r3, [pc, #16]	; (4004f4 <sysclk_init+0x58>)
  4004e4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004e6:	bf00      	nop
  4004e8:	370c      	adds	r7, #12
  4004ea:	46bd      	mov	sp, r7
  4004ec:	bd90      	pop	{r4, r7, pc}
  4004ee:	bf00      	nop
  4004f0:	11e1a300 	.word	0x11e1a300
  4004f4:	004016b1 	.word	0x004016b1
  4004f8:	0040040d 	.word	0x0040040d
  4004fc:	00400335 	.word	0x00400335
  400500:	004003a1 	.word	0x004003a1
  400504:	00400445 	.word	0x00400445
  400508:	00400891 	.word	0x00400891
  40050c:	0040090d 	.word	0x0040090d
  400510:	00401545 	.word	0x00401545
  400514:	00400489 	.word	0x00400489

00400518 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400518:	b480      	push	{r7}
  40051a:	b085      	sub	sp, #20
  40051c:	af00      	add	r7, sp, #0
  40051e:	60f8      	str	r0, [r7, #12]
  400520:	60b9      	str	r1, [r7, #8]
  400522:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400524:	687b      	ldr	r3, [r7, #4]
  400526:	2b00      	cmp	r3, #0
  400528:	d003      	beq.n	400532 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40052a:	68fb      	ldr	r3, [r7, #12]
  40052c:	68ba      	ldr	r2, [r7, #8]
  40052e:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400530:	e002      	b.n	400538 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400532:	68fb      	ldr	r3, [r7, #12]
  400534:	68ba      	ldr	r2, [r7, #8]
  400536:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  400538:	bf00      	nop
  40053a:	3714      	adds	r7, #20
  40053c:	46bd      	mov	sp, r7
  40053e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400542:	4770      	bx	lr

00400544 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  400544:	b480      	push	{r7}
  400546:	b083      	sub	sp, #12
  400548:	af00      	add	r7, sp, #0
  40054a:	6078      	str	r0, [r7, #4]
  40054c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  40054e:	687b      	ldr	r3, [r7, #4]
  400550:	683a      	ldr	r2, [r7, #0]
  400552:	631a      	str	r2, [r3, #48]	; 0x30
}
  400554:	bf00      	nop
  400556:	370c      	adds	r7, #12
  400558:	46bd      	mov	sp, r7
  40055a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40055e:	4770      	bx	lr

00400560 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  400560:	b480      	push	{r7}
  400562:	b083      	sub	sp, #12
  400564:	af00      	add	r7, sp, #0
  400566:	6078      	str	r0, [r7, #4]
  400568:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  40056a:	687b      	ldr	r3, [r7, #4]
  40056c:	683a      	ldr	r2, [r7, #0]
  40056e:	635a      	str	r2, [r3, #52]	; 0x34
}
  400570:	bf00      	nop
  400572:	370c      	adds	r7, #12
  400574:	46bd      	mov	sp, r7
  400576:	f85d 7b04 	ldr.w	r7, [sp], #4
  40057a:	4770      	bx	lr

0040057c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40057c:	b480      	push	{r7}
  40057e:	b087      	sub	sp, #28
  400580:	af00      	add	r7, sp, #0
  400582:	60f8      	str	r0, [r7, #12]
  400584:	60b9      	str	r1, [r7, #8]
  400586:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400588:	68fb      	ldr	r3, [r7, #12]
  40058a:	687a      	ldr	r2, [r7, #4]
  40058c:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40058e:	68bb      	ldr	r3, [r7, #8]
  400590:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400594:	d04a      	beq.n	40062c <pio_set_peripheral+0xb0>
  400596:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40059a:	d808      	bhi.n	4005ae <pio_set_peripheral+0x32>
  40059c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4005a0:	d016      	beq.n	4005d0 <pio_set_peripheral+0x54>
  4005a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4005a6:	d02c      	beq.n	400602 <pio_set_peripheral+0x86>
  4005a8:	2b00      	cmp	r3, #0
  4005aa:	d069      	beq.n	400680 <pio_set_peripheral+0x104>
  4005ac:	e064      	b.n	400678 <pio_set_peripheral+0xfc>
  4005ae:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4005b2:	d065      	beq.n	400680 <pio_set_peripheral+0x104>
  4005b4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4005b8:	d803      	bhi.n	4005c2 <pio_set_peripheral+0x46>
  4005ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4005be:	d04a      	beq.n	400656 <pio_set_peripheral+0xda>
  4005c0:	e05a      	b.n	400678 <pio_set_peripheral+0xfc>
  4005c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4005c6:	d05b      	beq.n	400680 <pio_set_peripheral+0x104>
  4005c8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4005cc:	d058      	beq.n	400680 <pio_set_peripheral+0x104>
  4005ce:	e053      	b.n	400678 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005d0:	68fb      	ldr	r3, [r7, #12]
  4005d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4005d4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4005d6:	68fb      	ldr	r3, [r7, #12]
  4005d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005da:	687b      	ldr	r3, [r7, #4]
  4005dc:	43d9      	mvns	r1, r3
  4005de:	697b      	ldr	r3, [r7, #20]
  4005e0:	400b      	ands	r3, r1
  4005e2:	401a      	ands	r2, r3
  4005e4:	68fb      	ldr	r3, [r7, #12]
  4005e6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005e8:	68fb      	ldr	r3, [r7, #12]
  4005ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4005ec:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4005ee:	68fb      	ldr	r3, [r7, #12]
  4005f0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4005f2:	687b      	ldr	r3, [r7, #4]
  4005f4:	43d9      	mvns	r1, r3
  4005f6:	697b      	ldr	r3, [r7, #20]
  4005f8:	400b      	ands	r3, r1
  4005fa:	401a      	ands	r2, r3
  4005fc:	68fb      	ldr	r3, [r7, #12]
  4005fe:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400600:	e03a      	b.n	400678 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400602:	68fb      	ldr	r3, [r7, #12]
  400604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400606:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400608:	687a      	ldr	r2, [r7, #4]
  40060a:	697b      	ldr	r3, [r7, #20]
  40060c:	431a      	orrs	r2, r3
  40060e:	68fb      	ldr	r3, [r7, #12]
  400610:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400612:	68fb      	ldr	r3, [r7, #12]
  400614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400616:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400618:	68fb      	ldr	r3, [r7, #12]
  40061a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40061c:	687b      	ldr	r3, [r7, #4]
  40061e:	43d9      	mvns	r1, r3
  400620:	697b      	ldr	r3, [r7, #20]
  400622:	400b      	ands	r3, r1
  400624:	401a      	ands	r2, r3
  400626:	68fb      	ldr	r3, [r7, #12]
  400628:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40062a:	e025      	b.n	400678 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40062c:	68fb      	ldr	r3, [r7, #12]
  40062e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400630:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400632:	68fb      	ldr	r3, [r7, #12]
  400634:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400636:	687b      	ldr	r3, [r7, #4]
  400638:	43d9      	mvns	r1, r3
  40063a:	697b      	ldr	r3, [r7, #20]
  40063c:	400b      	ands	r3, r1
  40063e:	401a      	ands	r2, r3
  400640:	68fb      	ldr	r3, [r7, #12]
  400642:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400644:	68fb      	ldr	r3, [r7, #12]
  400646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400648:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40064a:	687a      	ldr	r2, [r7, #4]
  40064c:	697b      	ldr	r3, [r7, #20]
  40064e:	431a      	orrs	r2, r3
  400650:	68fb      	ldr	r3, [r7, #12]
  400652:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400654:	e010      	b.n	400678 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400656:	68fb      	ldr	r3, [r7, #12]
  400658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40065a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40065c:	687a      	ldr	r2, [r7, #4]
  40065e:	697b      	ldr	r3, [r7, #20]
  400660:	431a      	orrs	r2, r3
  400662:	68fb      	ldr	r3, [r7, #12]
  400664:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400666:	68fb      	ldr	r3, [r7, #12]
  400668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40066a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40066c:	687a      	ldr	r2, [r7, #4]
  40066e:	697b      	ldr	r3, [r7, #20]
  400670:	431a      	orrs	r2, r3
  400672:	68fb      	ldr	r3, [r7, #12]
  400674:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400676:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400678:	68fb      	ldr	r3, [r7, #12]
  40067a:	687a      	ldr	r2, [r7, #4]
  40067c:	605a      	str	r2, [r3, #4]
  40067e:	e000      	b.n	400682 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  400680:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  400682:	371c      	adds	r7, #28
  400684:	46bd      	mov	sp, r7
  400686:	f85d 7b04 	ldr.w	r7, [sp], #4
  40068a:	4770      	bx	lr

0040068c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40068c:	b580      	push	{r7, lr}
  40068e:	b084      	sub	sp, #16
  400690:	af00      	add	r7, sp, #0
  400692:	60f8      	str	r0, [r7, #12]
  400694:	60b9      	str	r1, [r7, #8]
  400696:	607a      	str	r2, [r7, #4]
  400698:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40069a:	68b9      	ldr	r1, [r7, #8]
  40069c:	68f8      	ldr	r0, [r7, #12]
  40069e:	4b12      	ldr	r3, [pc, #72]	; (4006e8 <pio_set_output+0x5c>)
  4006a0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4006a2:	69ba      	ldr	r2, [r7, #24]
  4006a4:	68b9      	ldr	r1, [r7, #8]
  4006a6:	68f8      	ldr	r0, [r7, #12]
  4006a8:	4b10      	ldr	r3, [pc, #64]	; (4006ec <pio_set_output+0x60>)
  4006aa:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4006ac:	683b      	ldr	r3, [r7, #0]
  4006ae:	2b00      	cmp	r3, #0
  4006b0:	d003      	beq.n	4006ba <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4006b2:	68fb      	ldr	r3, [r7, #12]
  4006b4:	68ba      	ldr	r2, [r7, #8]
  4006b6:	651a      	str	r2, [r3, #80]	; 0x50
  4006b8:	e002      	b.n	4006c0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4006ba:	68fb      	ldr	r3, [r7, #12]
  4006bc:	68ba      	ldr	r2, [r7, #8]
  4006be:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4006c0:	687b      	ldr	r3, [r7, #4]
  4006c2:	2b00      	cmp	r3, #0
  4006c4:	d003      	beq.n	4006ce <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  4006c6:	68fb      	ldr	r3, [r7, #12]
  4006c8:	68ba      	ldr	r2, [r7, #8]
  4006ca:	631a      	str	r2, [r3, #48]	; 0x30
  4006cc:	e002      	b.n	4006d4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4006ce:	68fb      	ldr	r3, [r7, #12]
  4006d0:	68ba      	ldr	r2, [r7, #8]
  4006d2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4006d4:	68fb      	ldr	r3, [r7, #12]
  4006d6:	68ba      	ldr	r2, [r7, #8]
  4006d8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4006da:	68fb      	ldr	r3, [r7, #12]
  4006dc:	68ba      	ldr	r2, [r7, #8]
  4006de:	601a      	str	r2, [r3, #0]
}
  4006e0:	bf00      	nop
  4006e2:	3710      	adds	r7, #16
  4006e4:	46bd      	mov	sp, r7
  4006e6:	bd80      	pop	{r7, pc}
  4006e8:	00400719 	.word	0x00400719
  4006ec:	00400519 	.word	0x00400519

004006f0 <pio_get_output_data_status>:
 * \retval 1 At least one PIO is configured to output a high level.
 * \retval 0 All PIOs are configured to output a low level.
 */
uint32_t pio_get_output_data_status(const Pio *p_pio,
		const uint32_t ul_mask)
{
  4006f0:	b480      	push	{r7}
  4006f2:	b083      	sub	sp, #12
  4006f4:	af00      	add	r7, sp, #0
  4006f6:	6078      	str	r0, [r7, #4]
  4006f8:	6039      	str	r1, [r7, #0]
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  4006fa:	687b      	ldr	r3, [r7, #4]
  4006fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4006fe:	683b      	ldr	r3, [r7, #0]
  400700:	4013      	ands	r3, r2
  400702:	2b00      	cmp	r3, #0
  400704:	d101      	bne.n	40070a <pio_get_output_data_status+0x1a>
		return 0;
  400706:	2300      	movs	r3, #0
  400708:	e000      	b.n	40070c <pio_get_output_data_status+0x1c>
	} else {
		return 1;
  40070a:	2301      	movs	r3, #1
	}
}
  40070c:	4618      	mov	r0, r3
  40070e:	370c      	adds	r7, #12
  400710:	46bd      	mov	sp, r7
  400712:	f85d 7b04 	ldr.w	r7, [sp], #4
  400716:	4770      	bx	lr

00400718 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400718:	b480      	push	{r7}
  40071a:	b083      	sub	sp, #12
  40071c:	af00      	add	r7, sp, #0
  40071e:	6078      	str	r0, [r7, #4]
  400720:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400722:	687b      	ldr	r3, [r7, #4]
  400724:	683a      	ldr	r2, [r7, #0]
  400726:	645a      	str	r2, [r3, #68]	; 0x44
}
  400728:	bf00      	nop
  40072a:	370c      	adds	r7, #12
  40072c:	46bd      	mov	sp, r7
  40072e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400732:	4770      	bx	lr

00400734 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400734:	b480      	push	{r7}
  400736:	b083      	sub	sp, #12
  400738:	af00      	add	r7, sp, #0
  40073a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40073c:	687b      	ldr	r3, [r7, #4]
  40073e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400740:	4618      	mov	r0, r3
  400742:	370c      	adds	r7, #12
  400744:	46bd      	mov	sp, r7
  400746:	f85d 7b04 	ldr.w	r7, [sp], #4
  40074a:	4770      	bx	lr

0040074c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  40074c:	b480      	push	{r7}
  40074e:	b083      	sub	sp, #12
  400750:	af00      	add	r7, sp, #0
  400752:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400754:	687b      	ldr	r3, [r7, #4]
  400756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400758:	4618      	mov	r0, r3
  40075a:	370c      	adds	r7, #12
  40075c:	46bd      	mov	sp, r7
  40075e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400762:	4770      	bx	lr

00400764 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400764:	b580      	push	{r7, lr}
  400766:	b084      	sub	sp, #16
  400768:	af00      	add	r7, sp, #0
  40076a:	6078      	str	r0, [r7, #4]
  40076c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40076e:	6878      	ldr	r0, [r7, #4]
  400770:	4b26      	ldr	r3, [pc, #152]	; (40080c <pio_handler_process+0xa8>)
  400772:	4798      	blx	r3
  400774:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400776:	6878      	ldr	r0, [r7, #4]
  400778:	4b25      	ldr	r3, [pc, #148]	; (400810 <pio_handler_process+0xac>)
  40077a:	4798      	blx	r3
  40077c:	4602      	mov	r2, r0
  40077e:	68fb      	ldr	r3, [r7, #12]
  400780:	4013      	ands	r3, r2
  400782:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400784:	68fb      	ldr	r3, [r7, #12]
  400786:	2b00      	cmp	r3, #0
  400788:	d03c      	beq.n	400804 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40078a:	2300      	movs	r3, #0
  40078c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40078e:	e034      	b.n	4007fa <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400790:	4a20      	ldr	r2, [pc, #128]	; (400814 <pio_handler_process+0xb0>)
  400792:	68bb      	ldr	r3, [r7, #8]
  400794:	011b      	lsls	r3, r3, #4
  400796:	4413      	add	r3, r2
  400798:	681a      	ldr	r2, [r3, #0]
  40079a:	683b      	ldr	r3, [r7, #0]
  40079c:	429a      	cmp	r2, r3
  40079e:	d126      	bne.n	4007ee <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4007a0:	4a1c      	ldr	r2, [pc, #112]	; (400814 <pio_handler_process+0xb0>)
  4007a2:	68bb      	ldr	r3, [r7, #8]
  4007a4:	011b      	lsls	r3, r3, #4
  4007a6:	4413      	add	r3, r2
  4007a8:	3304      	adds	r3, #4
  4007aa:	681a      	ldr	r2, [r3, #0]
  4007ac:	68fb      	ldr	r3, [r7, #12]
  4007ae:	4013      	ands	r3, r2
  4007b0:	2b00      	cmp	r3, #0
  4007b2:	d01c      	beq.n	4007ee <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4007b4:	4a17      	ldr	r2, [pc, #92]	; (400814 <pio_handler_process+0xb0>)
  4007b6:	68bb      	ldr	r3, [r7, #8]
  4007b8:	011b      	lsls	r3, r3, #4
  4007ba:	4413      	add	r3, r2
  4007bc:	330c      	adds	r3, #12
  4007be:	681b      	ldr	r3, [r3, #0]
  4007c0:	4914      	ldr	r1, [pc, #80]	; (400814 <pio_handler_process+0xb0>)
  4007c2:	68ba      	ldr	r2, [r7, #8]
  4007c4:	0112      	lsls	r2, r2, #4
  4007c6:	440a      	add	r2, r1
  4007c8:	6810      	ldr	r0, [r2, #0]
  4007ca:	4912      	ldr	r1, [pc, #72]	; (400814 <pio_handler_process+0xb0>)
  4007cc:	68ba      	ldr	r2, [r7, #8]
  4007ce:	0112      	lsls	r2, r2, #4
  4007d0:	440a      	add	r2, r1
  4007d2:	3204      	adds	r2, #4
  4007d4:	6812      	ldr	r2, [r2, #0]
  4007d6:	4611      	mov	r1, r2
  4007d8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4007da:	4a0e      	ldr	r2, [pc, #56]	; (400814 <pio_handler_process+0xb0>)
  4007dc:	68bb      	ldr	r3, [r7, #8]
  4007de:	011b      	lsls	r3, r3, #4
  4007e0:	4413      	add	r3, r2
  4007e2:	3304      	adds	r3, #4
  4007e4:	681b      	ldr	r3, [r3, #0]
  4007e6:	43db      	mvns	r3, r3
  4007e8:	68fa      	ldr	r2, [r7, #12]
  4007ea:	4013      	ands	r3, r2
  4007ec:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4007ee:	68bb      	ldr	r3, [r7, #8]
  4007f0:	3301      	adds	r3, #1
  4007f2:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4007f4:	68bb      	ldr	r3, [r7, #8]
  4007f6:	2b06      	cmp	r3, #6
  4007f8:	d803      	bhi.n	400802 <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4007fa:	68fb      	ldr	r3, [r7, #12]
  4007fc:	2b00      	cmp	r3, #0
  4007fe:	d1c7      	bne.n	400790 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400800:	e000      	b.n	400804 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  400802:	bf00      	nop
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400804:	bf00      	nop
  400806:	3710      	adds	r7, #16
  400808:	46bd      	mov	sp, r7
  40080a:	bd80      	pop	{r7, pc}
  40080c:	00400735 	.word	0x00400735
  400810:	0040074d 	.word	0x0040074d
  400814:	20400898 	.word	0x20400898

00400818 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400818:	b580      	push	{r7, lr}
  40081a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  40081c:	210a      	movs	r1, #10
  40081e:	4802      	ldr	r0, [pc, #8]	; (400828 <PIOA_Handler+0x10>)
  400820:	4b02      	ldr	r3, [pc, #8]	; (40082c <PIOA_Handler+0x14>)
  400822:	4798      	blx	r3
}
  400824:	bf00      	nop
  400826:	bd80      	pop	{r7, pc}
  400828:	400e0e00 	.word	0x400e0e00
  40082c:	00400765 	.word	0x00400765

00400830 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400830:	b580      	push	{r7, lr}
  400832:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400834:	210b      	movs	r1, #11
  400836:	4802      	ldr	r0, [pc, #8]	; (400840 <PIOB_Handler+0x10>)
  400838:	4b02      	ldr	r3, [pc, #8]	; (400844 <PIOB_Handler+0x14>)
  40083a:	4798      	blx	r3
}
  40083c:	bf00      	nop
  40083e:	bd80      	pop	{r7, pc}
  400840:	400e1000 	.word	0x400e1000
  400844:	00400765 	.word	0x00400765

00400848 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400848:	b580      	push	{r7, lr}
  40084a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  40084c:	210c      	movs	r1, #12
  40084e:	4802      	ldr	r0, [pc, #8]	; (400858 <PIOC_Handler+0x10>)
  400850:	4b02      	ldr	r3, [pc, #8]	; (40085c <PIOC_Handler+0x14>)
  400852:	4798      	blx	r3
}
  400854:	bf00      	nop
  400856:	bd80      	pop	{r7, pc}
  400858:	400e1200 	.word	0x400e1200
  40085c:	00400765 	.word	0x00400765

00400860 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400860:	b580      	push	{r7, lr}
  400862:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  400864:	2110      	movs	r1, #16
  400866:	4802      	ldr	r0, [pc, #8]	; (400870 <PIOD_Handler+0x10>)
  400868:	4b02      	ldr	r3, [pc, #8]	; (400874 <PIOD_Handler+0x14>)
  40086a:	4798      	blx	r3
}
  40086c:	bf00      	nop
  40086e:	bd80      	pop	{r7, pc}
  400870:	400e1400 	.word	0x400e1400
  400874:	00400765 	.word	0x00400765

00400878 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400878:	b580      	push	{r7, lr}
  40087a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  40087c:	2111      	movs	r1, #17
  40087e:	4802      	ldr	r0, [pc, #8]	; (400888 <PIOE_Handler+0x10>)
  400880:	4b02      	ldr	r3, [pc, #8]	; (40088c <PIOE_Handler+0x14>)
  400882:	4798      	blx	r3
}
  400884:	bf00      	nop
  400886:	bd80      	pop	{r7, pc}
  400888:	400e1600 	.word	0x400e1600
  40088c:	00400765 	.word	0x00400765

00400890 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400890:	b480      	push	{r7}
  400892:	b083      	sub	sp, #12
  400894:	af00      	add	r7, sp, #0
  400896:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  400898:	687b      	ldr	r3, [r7, #4]
  40089a:	3b01      	subs	r3, #1
  40089c:	2b03      	cmp	r3, #3
  40089e:	d81a      	bhi.n	4008d6 <pmc_mck_set_division+0x46>
  4008a0:	a201      	add	r2, pc, #4	; (adr r2, 4008a8 <pmc_mck_set_division+0x18>)
  4008a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4008a6:	bf00      	nop
  4008a8:	004008b9 	.word	0x004008b9
  4008ac:	004008bf 	.word	0x004008bf
  4008b0:	004008c7 	.word	0x004008c7
  4008b4:	004008cf 	.word	0x004008cf
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4008b8:	2300      	movs	r3, #0
  4008ba:	607b      	str	r3, [r7, #4]
			break;
  4008bc:	e00e      	b.n	4008dc <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  4008be:	f44f 7380 	mov.w	r3, #256	; 0x100
  4008c2:	607b      	str	r3, [r7, #4]
			break;
  4008c4:	e00a      	b.n	4008dc <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4008c6:	f44f 7340 	mov.w	r3, #768	; 0x300
  4008ca:	607b      	str	r3, [r7, #4]
			break;
  4008cc:	e006      	b.n	4008dc <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4008ce:	f44f 7300 	mov.w	r3, #512	; 0x200
  4008d2:	607b      	str	r3, [r7, #4]
			break;
  4008d4:	e002      	b.n	4008dc <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4008d6:	2300      	movs	r3, #0
  4008d8:	607b      	str	r3, [r7, #4]
			break;
  4008da:	bf00      	nop
	}
	PMC->PMC_MCKR =
  4008dc:	490a      	ldr	r1, [pc, #40]	; (400908 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4008de:	4b0a      	ldr	r3, [pc, #40]	; (400908 <pmc_mck_set_division+0x78>)
  4008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4008e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  4008e6:	687b      	ldr	r3, [r7, #4]
  4008e8:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  4008ea:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4008ec:	bf00      	nop
  4008ee:	4b06      	ldr	r3, [pc, #24]	; (400908 <pmc_mck_set_division+0x78>)
  4008f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4008f2:	f003 0308 	and.w	r3, r3, #8
  4008f6:	2b00      	cmp	r3, #0
  4008f8:	d0f9      	beq.n	4008ee <pmc_mck_set_division+0x5e>
}
  4008fa:	bf00      	nop
  4008fc:	370c      	adds	r7, #12
  4008fe:	46bd      	mov	sp, r7
  400900:	f85d 7b04 	ldr.w	r7, [sp], #4
  400904:	4770      	bx	lr
  400906:	bf00      	nop
  400908:	400e0600 	.word	0x400e0600

0040090c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40090c:	b480      	push	{r7}
  40090e:	b085      	sub	sp, #20
  400910:	af00      	add	r7, sp, #0
  400912:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400914:	491d      	ldr	r1, [pc, #116]	; (40098c <pmc_switch_mck_to_pllack+0x80>)
  400916:	4b1d      	ldr	r3, [pc, #116]	; (40098c <pmc_switch_mck_to_pllack+0x80>)
  400918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40091a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40091e:	687b      	ldr	r3, [r7, #4]
  400920:	4313      	orrs	r3, r2
  400922:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400928:	60fb      	str	r3, [r7, #12]
  40092a:	e007      	b.n	40093c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40092c:	68fb      	ldr	r3, [r7, #12]
  40092e:	2b00      	cmp	r3, #0
  400930:	d101      	bne.n	400936 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400932:	2301      	movs	r3, #1
  400934:	e023      	b.n	40097e <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  400936:	68fb      	ldr	r3, [r7, #12]
  400938:	3b01      	subs	r3, #1
  40093a:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40093c:	4b13      	ldr	r3, [pc, #76]	; (40098c <pmc_switch_mck_to_pllack+0x80>)
  40093e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400940:	f003 0308 	and.w	r3, r3, #8
  400944:	2b00      	cmp	r3, #0
  400946:	d0f1      	beq.n	40092c <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400948:	4a10      	ldr	r2, [pc, #64]	; (40098c <pmc_switch_mck_to_pllack+0x80>)
  40094a:	4b10      	ldr	r3, [pc, #64]	; (40098c <pmc_switch_mck_to_pllack+0x80>)
  40094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40094e:	f023 0303 	bic.w	r3, r3, #3
  400952:	f043 0302 	orr.w	r3, r3, #2
  400956:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40095c:	60fb      	str	r3, [r7, #12]
  40095e:	e007      	b.n	400970 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400960:	68fb      	ldr	r3, [r7, #12]
  400962:	2b00      	cmp	r3, #0
  400964:	d101      	bne.n	40096a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400966:	2301      	movs	r3, #1
  400968:	e009      	b.n	40097e <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40096a:	68fb      	ldr	r3, [r7, #12]
  40096c:	3b01      	subs	r3, #1
  40096e:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400970:	4b06      	ldr	r3, [pc, #24]	; (40098c <pmc_switch_mck_to_pllack+0x80>)
  400972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400974:	f003 0308 	and.w	r3, r3, #8
  400978:	2b00      	cmp	r3, #0
  40097a:	d0f1      	beq.n	400960 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40097c:	2300      	movs	r3, #0
}
  40097e:	4618      	mov	r0, r3
  400980:	3714      	adds	r7, #20
  400982:	46bd      	mov	sp, r7
  400984:	f85d 7b04 	ldr.w	r7, [sp], #4
  400988:	4770      	bx	lr
  40098a:	bf00      	nop
  40098c:	400e0600 	.word	0x400e0600

00400990 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400990:	b480      	push	{r7}
  400992:	b083      	sub	sp, #12
  400994:	af00      	add	r7, sp, #0
  400996:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400998:	687b      	ldr	r3, [r7, #4]
  40099a:	2b01      	cmp	r3, #1
  40099c:	d105      	bne.n	4009aa <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40099e:	4907      	ldr	r1, [pc, #28]	; (4009bc <pmc_switch_sclk_to_32kxtal+0x2c>)
  4009a0:	4b06      	ldr	r3, [pc, #24]	; (4009bc <pmc_switch_sclk_to_32kxtal+0x2c>)
  4009a2:	689a      	ldr	r2, [r3, #8]
  4009a4:	4b06      	ldr	r3, [pc, #24]	; (4009c0 <pmc_switch_sclk_to_32kxtal+0x30>)
  4009a6:	4313      	orrs	r3, r2
  4009a8:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4009aa:	4b04      	ldr	r3, [pc, #16]	; (4009bc <pmc_switch_sclk_to_32kxtal+0x2c>)
  4009ac:	4a05      	ldr	r2, [pc, #20]	; (4009c4 <pmc_switch_sclk_to_32kxtal+0x34>)
  4009ae:	601a      	str	r2, [r3, #0]
}
  4009b0:	bf00      	nop
  4009b2:	370c      	adds	r7, #12
  4009b4:	46bd      	mov	sp, r7
  4009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009ba:	4770      	bx	lr
  4009bc:	400e1810 	.word	0x400e1810
  4009c0:	a5100000 	.word	0xa5100000
  4009c4:	a5000008 	.word	0xa5000008

004009c8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4009c8:	b480      	push	{r7}
  4009ca:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4009cc:	4b09      	ldr	r3, [pc, #36]	; (4009f4 <pmc_osc_is_ready_32kxtal+0x2c>)
  4009ce:	695b      	ldr	r3, [r3, #20]
  4009d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4009d4:	2b00      	cmp	r3, #0
  4009d6:	d007      	beq.n	4009e8 <pmc_osc_is_ready_32kxtal+0x20>
  4009d8:	4b07      	ldr	r3, [pc, #28]	; (4009f8 <pmc_osc_is_ready_32kxtal+0x30>)
  4009da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4009dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4009e0:	2b00      	cmp	r3, #0
  4009e2:	d001      	beq.n	4009e8 <pmc_osc_is_ready_32kxtal+0x20>
  4009e4:	2301      	movs	r3, #1
  4009e6:	e000      	b.n	4009ea <pmc_osc_is_ready_32kxtal+0x22>
  4009e8:	2300      	movs	r3, #0
}
  4009ea:	4618      	mov	r0, r3
  4009ec:	46bd      	mov	sp, r7
  4009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009f2:	4770      	bx	lr
  4009f4:	400e1810 	.word	0x400e1810
  4009f8:	400e0600 	.word	0x400e0600

004009fc <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4009fc:	b480      	push	{r7}
  4009fe:	b083      	sub	sp, #12
  400a00:	af00      	add	r7, sp, #0
  400a02:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400a04:	4915      	ldr	r1, [pc, #84]	; (400a5c <pmc_switch_mainck_to_fastrc+0x60>)
  400a06:	4b15      	ldr	r3, [pc, #84]	; (400a5c <pmc_switch_mainck_to_fastrc+0x60>)
  400a08:	6a1a      	ldr	r2, [r3, #32]
  400a0a:	4b15      	ldr	r3, [pc, #84]	; (400a60 <pmc_switch_mainck_to_fastrc+0x64>)
  400a0c:	4313      	orrs	r3, r2
  400a0e:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400a10:	bf00      	nop
  400a12:	4b12      	ldr	r3, [pc, #72]	; (400a5c <pmc_switch_mainck_to_fastrc+0x60>)
  400a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400a1a:	2b00      	cmp	r3, #0
  400a1c:	d0f9      	beq.n	400a12 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400a1e:	490f      	ldr	r1, [pc, #60]	; (400a5c <pmc_switch_mainck_to_fastrc+0x60>)
  400a20:	4b0e      	ldr	r3, [pc, #56]	; (400a5c <pmc_switch_mainck_to_fastrc+0x60>)
  400a22:	6a1a      	ldr	r2, [r3, #32]
  400a24:	4b0f      	ldr	r3, [pc, #60]	; (400a64 <pmc_switch_mainck_to_fastrc+0x68>)
  400a26:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400a28:	687a      	ldr	r2, [r7, #4]
  400a2a:	4313      	orrs	r3, r2
  400a2c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400a30:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400a32:	bf00      	nop
  400a34:	4b09      	ldr	r3, [pc, #36]	; (400a5c <pmc_switch_mainck_to_fastrc+0x60>)
  400a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400a3c:	2b00      	cmp	r3, #0
  400a3e:	d0f9      	beq.n	400a34 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400a40:	4906      	ldr	r1, [pc, #24]	; (400a5c <pmc_switch_mainck_to_fastrc+0x60>)
  400a42:	4b06      	ldr	r3, [pc, #24]	; (400a5c <pmc_switch_mainck_to_fastrc+0x60>)
  400a44:	6a1a      	ldr	r2, [r3, #32]
  400a46:	4b08      	ldr	r3, [pc, #32]	; (400a68 <pmc_switch_mainck_to_fastrc+0x6c>)
  400a48:	4013      	ands	r3, r2
  400a4a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400a4e:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400a50:	bf00      	nop
  400a52:	370c      	adds	r7, #12
  400a54:	46bd      	mov	sp, r7
  400a56:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a5a:	4770      	bx	lr
  400a5c:	400e0600 	.word	0x400e0600
  400a60:	00370008 	.word	0x00370008
  400a64:	ffc8ff8f 	.word	0xffc8ff8f
  400a68:	fec8ffff 	.word	0xfec8ffff

00400a6c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400a6c:	b480      	push	{r7}
  400a6e:	b083      	sub	sp, #12
  400a70:	af00      	add	r7, sp, #0
  400a72:	6078      	str	r0, [r7, #4]
  400a74:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400a76:	687b      	ldr	r3, [r7, #4]
  400a78:	2b00      	cmp	r3, #0
  400a7a:	d008      	beq.n	400a8e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a7c:	4913      	ldr	r1, [pc, #76]	; (400acc <pmc_switch_mainck_to_xtal+0x60>)
  400a7e:	4b13      	ldr	r3, [pc, #76]	; (400acc <pmc_switch_mainck_to_xtal+0x60>)
  400a80:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400a82:	4a13      	ldr	r2, [pc, #76]	; (400ad0 <pmc_switch_mainck_to_xtal+0x64>)
  400a84:	401a      	ands	r2, r3
  400a86:	4b13      	ldr	r3, [pc, #76]	; (400ad4 <pmc_switch_mainck_to_xtal+0x68>)
  400a88:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a8a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400a8c:	e018      	b.n	400ac0 <pmc_switch_mainck_to_xtal+0x54>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a8e:	490f      	ldr	r1, [pc, #60]	; (400acc <pmc_switch_mainck_to_xtal+0x60>)
  400a90:	4b0e      	ldr	r3, [pc, #56]	; (400acc <pmc_switch_mainck_to_xtal+0x60>)
  400a92:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400a94:	4b10      	ldr	r3, [pc, #64]	; (400ad8 <pmc_switch_mainck_to_xtal+0x6c>)
  400a96:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400a98:	683a      	ldr	r2, [r7, #0]
  400a9a:	0212      	lsls	r2, r2, #8
  400a9c:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400a9e:	431a      	orrs	r2, r3
  400aa0:	4b0e      	ldr	r3, [pc, #56]	; (400adc <pmc_switch_mainck_to_xtal+0x70>)
  400aa2:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400aa4:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400aa6:	bf00      	nop
  400aa8:	4b08      	ldr	r3, [pc, #32]	; (400acc <pmc_switch_mainck_to_xtal+0x60>)
  400aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400aac:	f003 0301 	and.w	r3, r3, #1
  400ab0:	2b00      	cmp	r3, #0
  400ab2:	d0f9      	beq.n	400aa8 <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400ab4:	4905      	ldr	r1, [pc, #20]	; (400acc <pmc_switch_mainck_to_xtal+0x60>)
  400ab6:	4b05      	ldr	r3, [pc, #20]	; (400acc <pmc_switch_mainck_to_xtal+0x60>)
  400ab8:	6a1a      	ldr	r2, [r3, #32]
  400aba:	4b09      	ldr	r3, [pc, #36]	; (400ae0 <pmc_switch_mainck_to_xtal+0x74>)
  400abc:	4313      	orrs	r3, r2
  400abe:	620b      	str	r3, [r1, #32]
	}
}
  400ac0:	bf00      	nop
  400ac2:	370c      	adds	r7, #12
  400ac4:	46bd      	mov	sp, r7
  400ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400aca:	4770      	bx	lr
  400acc:	400e0600 	.word	0x400e0600
  400ad0:	fec8fffc 	.word	0xfec8fffc
  400ad4:	01370002 	.word	0x01370002
  400ad8:	ffc8fffc 	.word	0xffc8fffc
  400adc:	00370001 	.word	0x00370001
  400ae0:	01370000 	.word	0x01370000

00400ae4 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400ae4:	b480      	push	{r7}
  400ae6:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400ae8:	4b04      	ldr	r3, [pc, #16]	; (400afc <pmc_osc_is_ready_mainck+0x18>)
  400aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400af0:	4618      	mov	r0, r3
  400af2:	46bd      	mov	sp, r7
  400af4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400af8:	4770      	bx	lr
  400afa:	bf00      	nop
  400afc:	400e0600 	.word	0x400e0600

00400b00 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400b00:	b480      	push	{r7}
  400b02:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400b04:	4b04      	ldr	r3, [pc, #16]	; (400b18 <pmc_disable_pllack+0x18>)
  400b06:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400b0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400b0c:	bf00      	nop
  400b0e:	46bd      	mov	sp, r7
  400b10:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b14:	4770      	bx	lr
  400b16:	bf00      	nop
  400b18:	400e0600 	.word	0x400e0600

00400b1c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400b1c:	b480      	push	{r7}
  400b1e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400b20:	4b04      	ldr	r3, [pc, #16]	; (400b34 <pmc_is_locked_pllack+0x18>)
  400b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400b24:	f003 0302 	and.w	r3, r3, #2
}
  400b28:	4618      	mov	r0, r3
  400b2a:	46bd      	mov	sp, r7
  400b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b30:	4770      	bx	lr
  400b32:	bf00      	nop
  400b34:	400e0600 	.word	0x400e0600

00400b38 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  400b38:	b480      	push	{r7}
  400b3a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  400b3c:	4b04      	ldr	r3, [pc, #16]	; (400b50 <pmc_is_locked_upll+0x18>)
  400b3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  400b44:	4618      	mov	r0, r3
  400b46:	46bd      	mov	sp, r7
  400b48:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b4c:	4770      	bx	lr
  400b4e:	bf00      	nop
  400b50:	400e0600 	.word	0x400e0600

00400b54 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400b54:	b480      	push	{r7}
  400b56:	b083      	sub	sp, #12
  400b58:	af00      	add	r7, sp, #0
  400b5a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  400b5c:	687b      	ldr	r3, [r7, #4]
  400b5e:	2b3f      	cmp	r3, #63	; 0x3f
  400b60:	d901      	bls.n	400b66 <pmc_enable_periph_clk+0x12>
		return 1;
  400b62:	2301      	movs	r3, #1
  400b64:	e02f      	b.n	400bc6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400b66:	687b      	ldr	r3, [r7, #4]
  400b68:	2b1f      	cmp	r3, #31
  400b6a:	d813      	bhi.n	400b94 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400b6c:	4b19      	ldr	r3, [pc, #100]	; (400bd4 <pmc_enable_periph_clk+0x80>)
  400b6e:	699a      	ldr	r2, [r3, #24]
  400b70:	2101      	movs	r1, #1
  400b72:	687b      	ldr	r3, [r7, #4]
  400b74:	fa01 f303 	lsl.w	r3, r1, r3
  400b78:	401a      	ands	r2, r3
  400b7a:	2101      	movs	r1, #1
  400b7c:	687b      	ldr	r3, [r7, #4]
  400b7e:	fa01 f303 	lsl.w	r3, r1, r3
  400b82:	429a      	cmp	r2, r3
  400b84:	d01e      	beq.n	400bc4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400b86:	4a13      	ldr	r2, [pc, #76]	; (400bd4 <pmc_enable_periph_clk+0x80>)
  400b88:	2101      	movs	r1, #1
  400b8a:	687b      	ldr	r3, [r7, #4]
  400b8c:	fa01 f303 	lsl.w	r3, r1, r3
  400b90:	6113      	str	r3, [r2, #16]
  400b92:	e017      	b.n	400bc4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400b94:	687b      	ldr	r3, [r7, #4]
  400b96:	3b20      	subs	r3, #32
  400b98:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400b9a:	4b0e      	ldr	r3, [pc, #56]	; (400bd4 <pmc_enable_periph_clk+0x80>)
  400b9c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400ba0:	2101      	movs	r1, #1
  400ba2:	687b      	ldr	r3, [r7, #4]
  400ba4:	fa01 f303 	lsl.w	r3, r1, r3
  400ba8:	401a      	ands	r2, r3
  400baa:	2101      	movs	r1, #1
  400bac:	687b      	ldr	r3, [r7, #4]
  400bae:	fa01 f303 	lsl.w	r3, r1, r3
  400bb2:	429a      	cmp	r2, r3
  400bb4:	d006      	beq.n	400bc4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400bb6:	4a07      	ldr	r2, [pc, #28]	; (400bd4 <pmc_enable_periph_clk+0x80>)
  400bb8:	2101      	movs	r1, #1
  400bba:	687b      	ldr	r3, [r7, #4]
  400bbc:	fa01 f303 	lsl.w	r3, r1, r3
  400bc0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400bc4:	2300      	movs	r3, #0
}
  400bc6:	4618      	mov	r0, r3
  400bc8:	370c      	adds	r7, #12
  400bca:	46bd      	mov	sp, r7
  400bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bd0:	4770      	bx	lr
  400bd2:	bf00      	nop
  400bd4:	400e0600 	.word	0x400e0600

00400bd8 <rtc_set_hour_mode>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
  400bd8:	b480      	push	{r7}
  400bda:	b083      	sub	sp, #12
  400bdc:	af00      	add	r7, sp, #0
  400bde:	6078      	str	r0, [r7, #4]
  400be0:	6039      	str	r1, [r7, #0]
	if (ul_mode) {
  400be2:	683b      	ldr	r3, [r7, #0]
  400be4:	2b00      	cmp	r3, #0
  400be6:	d006      	beq.n	400bf6 <rtc_set_hour_mode+0x1e>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  400be8:	687b      	ldr	r3, [r7, #4]
  400bea:	685b      	ldr	r3, [r3, #4]
  400bec:	f043 0201 	orr.w	r2, r3, #1
  400bf0:	687b      	ldr	r3, [r7, #4]
  400bf2:	605a      	str	r2, [r3, #4]
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
	}
}
  400bf4:	e005      	b.n	400c02 <rtc_set_hour_mode+0x2a>
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  400bf6:	687b      	ldr	r3, [r7, #4]
  400bf8:	685b      	ldr	r3, [r3, #4]
  400bfa:	f023 0201 	bic.w	r2, r3, #1
  400bfe:	687b      	ldr	r3, [r7, #4]
  400c00:	605a      	str	r2, [r3, #4]
	}
}
  400c02:	bf00      	nop
  400c04:	370c      	adds	r7, #12
  400c06:	46bd      	mov	sp, r7
  400c08:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c0c:	4770      	bx	lr
  400c0e:	bf00      	nop

00400c10 <rtc_enable_interrupt>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
  400c10:	b480      	push	{r7}
  400c12:	b083      	sub	sp, #12
  400c14:	af00      	add	r7, sp, #0
  400c16:	6078      	str	r0, [r7, #4]
  400c18:	6039      	str	r1, [r7, #0]
	p_rtc->RTC_IER = ul_sources;
  400c1a:	687b      	ldr	r3, [r7, #4]
  400c1c:	683a      	ldr	r2, [r7, #0]
  400c1e:	621a      	str	r2, [r3, #32]
}
  400c20:	bf00      	nop
  400c22:	370c      	adds	r7, #12
  400c24:	46bd      	mov	sp, r7
  400c26:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c2a:	4770      	bx	lr

00400c2c <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  400c2c:	b480      	push	{r7}
  400c2e:	b087      	sub	sp, #28
  400c30:	af00      	add	r7, sp, #0
  400c32:	60f8      	str	r0, [r7, #12]
  400c34:	60b9      	str	r1, [r7, #8]
  400c36:	607a      	str	r2, [r7, #4]
  400c38:	603b      	str	r3, [r7, #0]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  400c3a:	68fb      	ldr	r3, [r7, #12]
  400c3c:	689b      	ldr	r3, [r3, #8]
  400c3e:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  400c40:	e002      	b.n	400c48 <rtc_get_time+0x1c>
		ul_time = p_rtc->RTC_TIMR;
  400c42:	68fb      	ldr	r3, [r7, #12]
  400c44:	689b      	ldr	r3, [r3, #8]
  400c46:	617b      	str	r3, [r7, #20]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
	while (ul_time != p_rtc->RTC_TIMR) {
  400c48:	68fb      	ldr	r3, [r7, #12]
  400c4a:	689a      	ldr	r2, [r3, #8]
  400c4c:	697b      	ldr	r3, [r7, #20]
  400c4e:	429a      	cmp	r2, r3
  400c50:	d1f7      	bne.n	400c42 <rtc_get_time+0x16>
		ul_time = p_rtc->RTC_TIMR;
	}

	/* Hour */
	if (pul_hour) {
  400c52:	68bb      	ldr	r3, [r7, #8]
  400c54:	2b00      	cmp	r3, #0
  400c56:	d01c      	beq.n	400c92 <rtc_get_time+0x66>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  400c58:	697b      	ldr	r3, [r7, #20]
  400c5a:	0c1b      	lsrs	r3, r3, #16
  400c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  400c60:	613b      	str	r3, [r7, #16]
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400c62:	693b      	ldr	r3, [r7, #16]
  400c64:	091a      	lsrs	r2, r3, #4
  400c66:	4613      	mov	r3, r2
  400c68:	009b      	lsls	r3, r3, #2
  400c6a:	4413      	add	r3, r2
  400c6c:	005b      	lsls	r3, r3, #1
  400c6e:	461a      	mov	r2, r3
  400c70:	693b      	ldr	r3, [r7, #16]
  400c72:	f003 030f 	and.w	r3, r3, #15
  400c76:	441a      	add	r2, r3
  400c78:	68bb      	ldr	r3, [r7, #8]
  400c7a:	601a      	str	r2, [r3, #0]

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  400c7c:	697b      	ldr	r3, [r7, #20]
  400c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  400c82:	2b00      	cmp	r3, #0
  400c84:	d005      	beq.n	400c92 <rtc_get_time+0x66>
			*pul_hour += 12;
  400c86:	68bb      	ldr	r3, [r7, #8]
  400c88:	681b      	ldr	r3, [r3, #0]
  400c8a:	f103 020c 	add.w	r2, r3, #12
  400c8e:	68bb      	ldr	r3, [r7, #8]
  400c90:	601a      	str	r2, [r3, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  400c92:	687b      	ldr	r3, [r7, #4]
  400c94:	2b00      	cmp	r3, #0
  400c96:	d011      	beq.n	400cbc <rtc_get_time+0x90>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  400c98:	697b      	ldr	r3, [r7, #20]
  400c9a:	0a1b      	lsrs	r3, r3, #8
  400c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  400ca0:	613b      	str	r3, [r7, #16]
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  400ca2:	693b      	ldr	r3, [r7, #16]
  400ca4:	091a      	lsrs	r2, r3, #4
  400ca6:	4613      	mov	r3, r2
  400ca8:	009b      	lsls	r3, r3, #2
  400caa:	4413      	add	r3, r2
  400cac:	005b      	lsls	r3, r3, #1
  400cae:	461a      	mov	r2, r3
  400cb0:	693b      	ldr	r3, [r7, #16]
  400cb2:	f003 030f 	and.w	r3, r3, #15
  400cb6:	441a      	add	r2, r3
  400cb8:	687b      	ldr	r3, [r7, #4]
  400cba:	601a      	str	r2, [r3, #0]
	}

	/* Second */
	if (pul_second) {
  400cbc:	683b      	ldr	r3, [r7, #0]
  400cbe:	2b00      	cmp	r3, #0
  400cc0:	d010      	beq.n	400ce4 <rtc_get_time+0xb8>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
  400cc2:	697b      	ldr	r3, [r7, #20]
  400cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  400cc8:	613b      	str	r3, [r7, #16]
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400cca:	693b      	ldr	r3, [r7, #16]
  400ccc:	091a      	lsrs	r2, r3, #4
  400cce:	4613      	mov	r3, r2
  400cd0:	009b      	lsls	r3, r3, #2
  400cd2:	4413      	add	r3, r2
  400cd4:	005b      	lsls	r3, r3, #1
  400cd6:	461a      	mov	r2, r3
  400cd8:	693b      	ldr	r3, [r7, #16]
  400cda:	f003 030f 	and.w	r3, r3, #15
  400cde:	441a      	add	r2, r3
  400ce0:	683b      	ldr	r3, [r7, #0]
  400ce2:	601a      	str	r2, [r3, #0]
	}
}
  400ce4:	bf00      	nop
  400ce6:	371c      	adds	r7, #28
  400ce8:	46bd      	mov	sp, r7
  400cea:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cee:	4770      	bx	lr

00400cf0 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400cf0:	b480      	push	{r7}
  400cf2:	b087      	sub	sp, #28
  400cf4:	af00      	add	r7, sp, #0
  400cf6:	60f8      	str	r0, [r7, #12]
  400cf8:	60b9      	str	r1, [r7, #8]
  400cfa:	607a      	str	r2, [r7, #4]
  400cfc:	603b      	str	r3, [r7, #0]
	uint32_t ul_time = 0;
  400cfe:	2300      	movs	r3, #0
  400d00:	617b      	str	r3, [r7, #20]

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400d02:	68fb      	ldr	r3, [r7, #12]
  400d04:	685b      	ldr	r3, [r3, #4]
  400d06:	f003 0301 	and.w	r3, r3, #1
  400d0a:	2b00      	cmp	r3, #0
  400d0c:	d009      	beq.n	400d22 <rtc_set_time+0x32>
		if (ul_hour > 12) {
  400d0e:	68bb      	ldr	r3, [r7, #8]
  400d10:	2b0c      	cmp	r3, #12
  400d12:	d906      	bls.n	400d22 <rtc_set_time+0x32>
			ul_hour -= 12;
  400d14:	68bb      	ldr	r3, [r7, #8]
  400d16:	3b0c      	subs	r3, #12
  400d18:	60bb      	str	r3, [r7, #8]
			ul_time |= RTC_TIMR_AMPM;
  400d1a:	697b      	ldr	r3, [r7, #20]
  400d1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  400d20:	617b      	str	r3, [r7, #20]
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400d22:	68bb      	ldr	r3, [r7, #8]
  400d24:	4a33      	ldr	r2, [pc, #204]	; (400df4 <rtc_set_time+0x104>)
  400d26:	fba2 2303 	umull	r2, r3, r2, r3
  400d2a:	08db      	lsrs	r3, r3, #3
  400d2c:	0518      	lsls	r0, r3, #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  400d2e:	68b9      	ldr	r1, [r7, #8]
  400d30:	4b30      	ldr	r3, [pc, #192]	; (400df4 <rtc_set_time+0x104>)
  400d32:	fba3 2301 	umull	r2, r3, r3, r1
  400d36:	08da      	lsrs	r2, r3, #3
  400d38:	4613      	mov	r3, r2
  400d3a:	009b      	lsls	r3, r3, #2
  400d3c:	4413      	add	r3, r2
  400d3e:	005b      	lsls	r3, r3, #1
  400d40:	1aca      	subs	r2, r1, r3
  400d42:	0413      	lsls	r3, r2, #16
			ul_time |= RTC_TIMR_AMPM;
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400d44:	4303      	orrs	r3, r0
  400d46:	697a      	ldr	r2, [r7, #20]
  400d48:	4313      	orrs	r3, r2
  400d4a:	617b      	str	r3, [r7, #20]
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  400d4c:	687b      	ldr	r3, [r7, #4]
  400d4e:	4a29      	ldr	r2, [pc, #164]	; (400df4 <rtc_set_time+0x104>)
  400d50:	fba2 2303 	umull	r2, r3, r2, r3
  400d54:	08db      	lsrs	r3, r3, #3
  400d56:	0318      	lsls	r0, r3, #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400d58:	6879      	ldr	r1, [r7, #4]
  400d5a:	4b26      	ldr	r3, [pc, #152]	; (400df4 <rtc_set_time+0x104>)
  400d5c:	fba3 2301 	umull	r2, r3, r3, r1
  400d60:	08da      	lsrs	r2, r3, #3
  400d62:	4613      	mov	r3, r2
  400d64:	009b      	lsls	r3, r3, #2
  400d66:	4413      	add	r3, r2
  400d68:	005b      	lsls	r3, r3, #1
  400d6a:	1aca      	subs	r2, r1, r3
  400d6c:	0213      	lsls	r3, r2, #8
	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  400d6e:	4303      	orrs	r3, r0
  400d70:	697a      	ldr	r2, [r7, #20]
  400d72:	4313      	orrs	r3, r2
  400d74:	617b      	str	r3, [r7, #20]
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400d76:	683b      	ldr	r3, [r7, #0]
  400d78:	4a1e      	ldr	r2, [pc, #120]	; (400df4 <rtc_set_time+0x104>)
  400d7a:	fba2 2303 	umull	r2, r3, r2, r3
  400d7e:	08db      	lsrs	r3, r3, #3
  400d80:	0118      	lsls	r0, r3, #4
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400d82:	6839      	ldr	r1, [r7, #0]
  400d84:	4b1b      	ldr	r3, [pc, #108]	; (400df4 <rtc_set_time+0x104>)
  400d86:	fba3 2301 	umull	r2, r3, r3, r1
  400d8a:	08da      	lsrs	r2, r3, #3
  400d8c:	4613      	mov	r3, r2
  400d8e:	009b      	lsls	r3, r3, #2
  400d90:	4413      	add	r3, r2
  400d92:	005b      	lsls	r3, r3, #1
  400d94:	1aca      	subs	r2, r1, r3
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400d96:	ea40 0302 	orr.w	r3, r0, r2
  400d9a:	697a      	ldr	r2, [r7, #20]
  400d9c:	4313      	orrs	r3, r2
  400d9e:	617b      	str	r3, [r7, #20]
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);

	/* Update time register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400da0:	68fb      	ldr	r3, [r7, #12]
  400da2:	681b      	ldr	r3, [r3, #0]
  400da4:	f043 0201 	orr.w	r2, r3, #1
  400da8:	68fb      	ldr	r3, [r7, #12]
  400daa:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400dac:	bf00      	nop
  400dae:	68fb      	ldr	r3, [r7, #12]
  400db0:	699b      	ldr	r3, [r3, #24]
  400db2:	f003 0301 	and.w	r3, r3, #1
  400db6:	2b00      	cmp	r3, #0
  400db8:	d0f9      	beq.n	400dae <rtc_set_time+0xbe>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400dba:	68fb      	ldr	r3, [r7, #12]
  400dbc:	2201      	movs	r2, #1
  400dbe:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_TIMR = ul_time;
  400dc0:	68fb      	ldr	r3, [r7, #12]
  400dc2:	697a      	ldr	r2, [r7, #20]
  400dc4:	609a      	str	r2, [r3, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400dc6:	68fb      	ldr	r3, [r7, #12]
  400dc8:	681b      	ldr	r3, [r3, #0]
  400dca:	f023 0201 	bic.w	r2, r3, #1
  400dce:	68fb      	ldr	r3, [r7, #12]
  400dd0:	601a      	str	r2, [r3, #0]
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  400dd2:	68fb      	ldr	r3, [r7, #12]
  400dd4:	69db      	ldr	r3, [r3, #28]
  400dd6:	f043 0204 	orr.w	r2, r3, #4
  400dda:	68fb      	ldr	r3, [r7, #12]
  400ddc:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  400dde:	68fb      	ldr	r3, [r7, #12]
  400de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  400de2:	f003 0301 	and.w	r3, r3, #1
}
  400de6:	4618      	mov	r0, r3
  400de8:	371c      	adds	r7, #28
  400dea:	46bd      	mov	sp, r7
  400dec:	f85d 7b04 	ldr.w	r7, [sp], #4
  400df0:	4770      	bx	lr
  400df2:	bf00      	nop
  400df4:	cccccccd 	.word	0xcccccccd

00400df8 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  400df8:	b480      	push	{r7}
  400dfa:	b087      	sub	sp, #28
  400dfc:	af00      	add	r7, sp, #0
  400dfe:	60f8      	str	r0, [r7, #12]
  400e00:	60b9      	str	r1, [r7, #8]
  400e02:	607a      	str	r2, [r7, #4]
  400e04:	603b      	str	r3, [r7, #0]
	uint32_t ul_date = 0;
  400e06:	2300      	movs	r3, #0
  400e08:	617b      	str	r3, [r7, #20]

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400e0a:	68bb      	ldr	r3, [r7, #8]
  400e0c:	4a46      	ldr	r2, [pc, #280]	; (400f28 <rtc_set_date+0x130>)
  400e0e:	fba2 2303 	umull	r2, r3, r2, r3
  400e12:	099b      	lsrs	r3, r3, #6
  400e14:	0118      	lsls	r0, r3, #4
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  400e16:	68bb      	ldr	r3, [r7, #8]
  400e18:	4a44      	ldr	r2, [pc, #272]	; (400f2c <rtc_set_date+0x134>)
  400e1a:	fba2 2303 	umull	r2, r3, r2, r3
  400e1e:	0959      	lsrs	r1, r3, #5
  400e20:	4b43      	ldr	r3, [pc, #268]	; (400f30 <rtc_set_date+0x138>)
  400e22:	fba3 2301 	umull	r2, r3, r3, r1
  400e26:	08da      	lsrs	r2, r3, #3
  400e28:	4613      	mov	r3, r2
  400e2a:	009b      	lsls	r3, r3, #2
  400e2c:	4413      	add	r3, r2
  400e2e:	005b      	lsls	r3, r3, #1
  400e30:	1aca      	subs	r2, r1, r3
{
	uint32_t ul_date = 0;

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
  400e32:	ea40 0302 	orr.w	r3, r0, r2
		uint32_t ul_day, uint32_t ul_week)
{
	uint32_t ul_date = 0;

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400e36:	697a      	ldr	r2, [r7, #20]
  400e38:	4313      	orrs	r3, r2
  400e3a:	617b      	str	r3, [r7, #20]
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400e3c:	68bb      	ldr	r3, [r7, #8]
  400e3e:	4a3c      	ldr	r2, [pc, #240]	; (400f30 <rtc_set_date+0x138>)
  400e40:	fba2 2303 	umull	r2, r3, r2, r3
  400e44:	08d9      	lsrs	r1, r3, #3
  400e46:	4b3a      	ldr	r3, [pc, #232]	; (400f30 <rtc_set_date+0x138>)
  400e48:	fba3 2301 	umull	r2, r3, r3, r1
  400e4c:	08da      	lsrs	r2, r3, #3
  400e4e:	4613      	mov	r3, r2
  400e50:	009b      	lsls	r3, r3, #2
  400e52:	4413      	add	r3, r2
  400e54:	005b      	lsls	r3, r3, #1
  400e56:	1aca      	subs	r2, r1, r3
  400e58:	0310      	lsls	r0, r2, #12
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400e5a:	68b9      	ldr	r1, [r7, #8]
  400e5c:	4b34      	ldr	r3, [pc, #208]	; (400f30 <rtc_set_date+0x138>)
  400e5e:	fba3 2301 	umull	r2, r3, r3, r1
  400e62:	08da      	lsrs	r2, r3, #3
  400e64:	4613      	mov	r3, r2
  400e66:	009b      	lsls	r3, r3, #2
  400e68:	4413      	add	r3, r2
  400e6a:	005b      	lsls	r3, r3, #1
  400e6c:	1aca      	subs	r2, r1, r3
  400e6e:	0213      	lsls	r3, r2, #8
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
  400e70:	4303      	orrs	r3, r0
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400e72:	697a      	ldr	r2, [r7, #20]
  400e74:	4313      	orrs	r3, r2
  400e76:	617b      	str	r3, [r7, #20]
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400e78:	687b      	ldr	r3, [r7, #4]
  400e7a:	4a2d      	ldr	r2, [pc, #180]	; (400f30 <rtc_set_date+0x138>)
  400e7c:	fba2 2303 	umull	r2, r3, r2, r3
  400e80:	08db      	lsrs	r3, r3, #3
  400e82:	0518      	lsls	r0, r3, #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  400e84:	6879      	ldr	r1, [r7, #4]
  400e86:	4b2a      	ldr	r3, [pc, #168]	; (400f30 <rtc_set_date+0x138>)
  400e88:	fba3 2301 	umull	r2, r3, r3, r1
  400e8c:	08da      	lsrs	r2, r3, #3
  400e8e:	4613      	mov	r3, r2
  400e90:	009b      	lsls	r3, r3, #2
  400e92:	4413      	add	r3, r2
  400e94:	005b      	lsls	r3, r3, #1
  400e96:	1aca      	subs	r2, r1, r3
  400e98:	0413      	lsls	r3, r2, #16
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400e9a:	4303      	orrs	r3, r0
  400e9c:	697a      	ldr	r2, [r7, #20]
  400e9e:	4313      	orrs	r3, r2
  400ea0:	617b      	str	r3, [r7, #20]
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  400ea2:	6a3b      	ldr	r3, [r7, #32]
  400ea4:	055b      	lsls	r3, r3, #21
  400ea6:	697a      	ldr	r2, [r7, #20]
  400ea8:	4313      	orrs	r3, r2
  400eaa:	617b      	str	r3, [r7, #20]

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400eac:	683b      	ldr	r3, [r7, #0]
  400eae:	4a20      	ldr	r2, [pc, #128]	; (400f30 <rtc_set_date+0x138>)
  400eb0:	fba2 2303 	umull	r2, r3, r2, r3
  400eb4:	08db      	lsrs	r3, r3, #3
  400eb6:	0718      	lsls	r0, r3, #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  400eb8:	6839      	ldr	r1, [r7, #0]
  400eba:	4b1d      	ldr	r3, [pc, #116]	; (400f30 <rtc_set_date+0x138>)
  400ebc:	fba3 2301 	umull	r2, r3, r3, r1
  400ec0:	08da      	lsrs	r2, r3, #3
  400ec2:	4613      	mov	r3, r2
  400ec4:	009b      	lsls	r3, r3, #2
  400ec6:	4413      	add	r3, r2
  400ec8:	005b      	lsls	r3, r3, #1
  400eca:	1aca      	subs	r2, r1, r3
  400ecc:	0613      	lsls	r3, r2, #24

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400ece:	4303      	orrs	r3, r0
  400ed0:	697a      	ldr	r2, [r7, #20]
  400ed2:	4313      	orrs	r3, r2
  400ed4:	617b      	str	r3, [r7, #20]
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);

	/* Update calendar register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  400ed6:	68fb      	ldr	r3, [r7, #12]
  400ed8:	681b      	ldr	r3, [r3, #0]
  400eda:	f043 0202 	orr.w	r2, r3, #2
  400ede:	68fb      	ldr	r3, [r7, #12]
  400ee0:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400ee2:	bf00      	nop
  400ee4:	68fb      	ldr	r3, [r7, #12]
  400ee6:	699b      	ldr	r3, [r3, #24]
  400ee8:	f003 0301 	and.w	r3, r3, #1
  400eec:	2b00      	cmp	r3, #0
  400eee:	d0f9      	beq.n	400ee4 <rtc_set_date+0xec>

	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400ef0:	68fb      	ldr	r3, [r7, #12]
  400ef2:	2201      	movs	r2, #1
  400ef4:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_CALR = ul_date;
  400ef6:	68fb      	ldr	r3, [r7, #12]
  400ef8:	697a      	ldr	r2, [r7, #20]
  400efa:	60da      	str	r2, [r3, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  400efc:	68fb      	ldr	r3, [r7, #12]
  400efe:	681b      	ldr	r3, [r3, #0]
  400f00:	f023 0202 	bic.w	r2, r3, #2
  400f04:	68fb      	ldr	r3, [r7, #12]
  400f06:	601a      	str	r2, [r3, #0]
	/* Clear SECENV in SCCR */
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  400f08:	68fb      	ldr	r3, [r7, #12]
  400f0a:	69db      	ldr	r3, [r3, #28]
  400f0c:	f043 0204 	orr.w	r2, r3, #4
  400f10:	68fb      	ldr	r3, [r7, #12]
  400f12:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  400f14:	68fb      	ldr	r3, [r7, #12]
  400f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  400f18:	f003 0302 	and.w	r3, r3, #2
}
  400f1c:	4618      	mov	r0, r3
  400f1e:	371c      	adds	r7, #28
  400f20:	46bd      	mov	sp, r7
  400f22:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f26:	4770      	bx	lr
  400f28:	10624dd3 	.word	0x10624dd3
  400f2c:	51eb851f 	.word	0x51eb851f
  400f30:	cccccccd 	.word	0xcccccccd

00400f34 <rtc_get_status>:
 * \param p_rtc Pointer to an RTC instance.
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
  400f34:	b480      	push	{r7}
  400f36:	b083      	sub	sp, #12
  400f38:	af00      	add	r7, sp, #0
  400f3a:	6078      	str	r0, [r7, #4]
	return (p_rtc->RTC_SR);
  400f3c:	687b      	ldr	r3, [r7, #4]
  400f3e:	699b      	ldr	r3, [r3, #24]
}
  400f40:	4618      	mov	r0, r3
  400f42:	370c      	adds	r7, #12
  400f44:	46bd      	mov	sp, r7
  400f46:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f4a:	4770      	bx	lr

00400f4c <rtc_clear_status>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
  400f4c:	b480      	push	{r7}
  400f4e:	b083      	sub	sp, #12
  400f50:	af00      	add	r7, sp, #0
  400f52:	6078      	str	r0, [r7, #4]
  400f54:	6039      	str	r1, [r7, #0]
	p_rtc->RTC_SCCR = ul_clear;
  400f56:	687b      	ldr	r3, [r7, #4]
  400f58:	683a      	ldr	r2, [r7, #0]
  400f5a:	61da      	str	r2, [r3, #28]
}
  400f5c:	bf00      	nop
  400f5e:	370c      	adds	r7, #12
  400f60:	46bd      	mov	sp, r7
  400f62:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f66:	4770      	bx	lr

00400f68 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400f68:	b480      	push	{r7}
  400f6a:	b087      	sub	sp, #28
  400f6c:	af00      	add	r7, sp, #0
  400f6e:	60f8      	str	r0, [r7, #12]
  400f70:	60b9      	str	r1, [r7, #8]
  400f72:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400f74:	68fa      	ldr	r2, [r7, #12]
  400f76:	68bb      	ldr	r3, [r7, #8]
  400f78:	019b      	lsls	r3, r3, #6
  400f7a:	4413      	add	r3, r2
  400f7c:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400f7e:	697b      	ldr	r3, [r7, #20]
  400f80:	2202      	movs	r2, #2
  400f82:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400f84:	697b      	ldr	r3, [r7, #20]
  400f86:	f04f 32ff 	mov.w	r2, #4294967295
  400f8a:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400f8c:	697b      	ldr	r3, [r7, #20]
  400f8e:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400f90:	697b      	ldr	r3, [r7, #20]
  400f92:	687a      	ldr	r2, [r7, #4]
  400f94:	605a      	str	r2, [r3, #4]
}
  400f96:	bf00      	nop
  400f98:	371c      	adds	r7, #28
  400f9a:	46bd      	mov	sp, r7
  400f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fa0:	4770      	bx	lr
  400fa2:	bf00      	nop

00400fa4 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400fa4:	b480      	push	{r7}
  400fa6:	b083      	sub	sp, #12
  400fa8:	af00      	add	r7, sp, #0
  400faa:	6078      	str	r0, [r7, #4]
  400fac:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400fae:	687a      	ldr	r2, [r7, #4]
  400fb0:	683b      	ldr	r3, [r7, #0]
  400fb2:	019b      	lsls	r3, r3, #6
  400fb4:	4413      	add	r3, r2
  400fb6:	2205      	movs	r2, #5
  400fb8:	601a      	str	r2, [r3, #0]
}
  400fba:	bf00      	nop
  400fbc:	370c      	adds	r7, #12
  400fbe:	46bd      	mov	sp, r7
  400fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fc4:	4770      	bx	lr
  400fc6:	bf00      	nop

00400fc8 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  400fc8:	b480      	push	{r7}
  400fca:	b085      	sub	sp, #20
  400fcc:	af00      	add	r7, sp, #0
  400fce:	60f8      	str	r0, [r7, #12]
  400fd0:	60b9      	str	r1, [r7, #8]
  400fd2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400fd4:	68fa      	ldr	r2, [r7, #12]
  400fd6:	68bb      	ldr	r3, [r7, #8]
  400fd8:	019b      	lsls	r3, r3, #6
  400fda:	4413      	add	r3, r2
  400fdc:	331c      	adds	r3, #28
  400fde:	687a      	ldr	r2, [r7, #4]
  400fe0:	601a      	str	r2, [r3, #0]
}
  400fe2:	bf00      	nop
  400fe4:	3714      	adds	r7, #20
  400fe6:	46bd      	mov	sp, r7
  400fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fec:	4770      	bx	lr
  400fee:	bf00      	nop

00400ff0 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  400ff0:	b480      	push	{r7}
  400ff2:	b087      	sub	sp, #28
  400ff4:	af00      	add	r7, sp, #0
  400ff6:	60f8      	str	r0, [r7, #12]
  400ff8:	60b9      	str	r1, [r7, #8]
  400ffa:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400ffc:	68fa      	ldr	r2, [r7, #12]
  400ffe:	68bb      	ldr	r3, [r7, #8]
  401000:	019b      	lsls	r3, r3, #6
  401002:	4413      	add	r3, r2
  401004:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  401006:	697b      	ldr	r3, [r7, #20]
  401008:	687a      	ldr	r2, [r7, #4]
  40100a:	625a      	str	r2, [r3, #36]	; 0x24
}
  40100c:	bf00      	nop
  40100e:	371c      	adds	r7, #28
  401010:	46bd      	mov	sp, r7
  401012:	f85d 7b04 	ldr.w	r7, [sp], #4
  401016:	4770      	bx	lr

00401018 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  401018:	b480      	push	{r7}
  40101a:	b085      	sub	sp, #20
  40101c:	af00      	add	r7, sp, #0
  40101e:	6078      	str	r0, [r7, #4]
  401020:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401022:	687a      	ldr	r2, [r7, #4]
  401024:	683b      	ldr	r3, [r7, #0]
  401026:	019b      	lsls	r3, r3, #6
  401028:	4413      	add	r3, r2
  40102a:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  40102c:	68fb      	ldr	r3, [r7, #12]
  40102e:	6a1b      	ldr	r3, [r3, #32]
}
  401030:	4618      	mov	r0, r3
  401032:	3714      	adds	r7, #20
  401034:	46bd      	mov	sp, r7
  401036:	f85d 7b04 	ldr.w	r7, [sp], #4
  40103a:	4770      	bx	lr

0040103c <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  40103c:	b480      	push	{r7}
  40103e:	b08d      	sub	sp, #52	; 0x34
  401040:	af00      	add	r7, sp, #0
  401042:	60f8      	str	r0, [r7, #12]
  401044:	60b9      	str	r1, [r7, #8]
  401046:	607a      	str	r2, [r7, #4]
  401048:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40104a:	2302      	movs	r3, #2
  40104c:	613b      	str	r3, [r7, #16]
  40104e:	2308      	movs	r3, #8
  401050:	617b      	str	r3, [r7, #20]
  401052:	2320      	movs	r3, #32
  401054:	61bb      	str	r3, [r7, #24]
  401056:	2380      	movs	r3, #128	; 0x80
  401058:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40105a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40105c:	0bdb      	lsrs	r3, r3, #15
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40105e:	623b      	str	r3, [r7, #32]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  401060:	2300      	movs	r3, #0
  401062:	62fb      	str	r3, [r7, #44]	; 0x2c
  401064:	e01a      	b.n	40109c <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  401066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401068:	009b      	lsls	r3, r3, #2
  40106a:	f107 0230 	add.w	r2, r7, #48	; 0x30
  40106e:	4413      	add	r3, r2
  401070:	f853 3c20 	ldr.w	r3, [r3, #-32]
  401074:	68ba      	ldr	r2, [r7, #8]
  401076:	fbb2 f3f3 	udiv	r3, r2, r3
  40107a:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  40107c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40107e:	0c1b      	lsrs	r3, r3, #16
  401080:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  401082:	68fa      	ldr	r2, [r7, #12]
  401084:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401086:	429a      	cmp	r2, r3
  401088:	d901      	bls.n	40108e <tc_find_mck_divisor+0x52>
			return 0;
  40108a:	2300      	movs	r3, #0
  40108c:	e023      	b.n	4010d6 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  40108e:	68fa      	ldr	r2, [r7, #12]
  401090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401092:	429a      	cmp	r2, r3
  401094:	d206      	bcs.n	4010a4 <tc_find_mck_divisor+0x68>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  401096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401098:	3301      	adds	r3, #1
  40109a:	62fb      	str	r3, [r7, #44]	; 0x2c
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  40109c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40109e:	2b04      	cmp	r3, #4
  4010a0:	d9e1      	bls.n	401066 <tc_find_mck_divisor+0x2a>
  4010a2:	e000      	b.n	4010a6 <tc_find_mck_divisor+0x6a>
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
		} else if (ul_freq >= ul_low) {
			break;
  4010a4:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  4010a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010a8:	2b04      	cmp	r3, #4
  4010aa:	d901      	bls.n	4010b0 <tc_find_mck_divisor+0x74>
		return 0;
  4010ac:	2300      	movs	r3, #0
  4010ae:	e012      	b.n	4010d6 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  4010b0:	687b      	ldr	r3, [r7, #4]
  4010b2:	2b00      	cmp	r3, #0
  4010b4:	d008      	beq.n	4010c8 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  4010b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010b8:	009b      	lsls	r3, r3, #2
  4010ba:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4010be:	4413      	add	r3, r2
  4010c0:	f853 2c20 	ldr.w	r2, [r3, #-32]
  4010c4:	687b      	ldr	r3, [r7, #4]
  4010c6:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  4010c8:	683b      	ldr	r3, [r7, #0]
  4010ca:	2b00      	cmp	r3, #0
  4010cc:	d002      	beq.n	4010d4 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  4010ce:	683b      	ldr	r3, [r7, #0]
  4010d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  4010d2:	601a      	str	r2, [r3, #0]
	}

	return 1;
  4010d4:	2301      	movs	r3, #1
}
  4010d6:	4618      	mov	r0, r3
  4010d8:	3734      	adds	r7, #52	; 0x34
  4010da:	46bd      	mov	sp, r7
  4010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010e0:	4770      	bx	lr
  4010e2:	bf00      	nop

004010e4 <uart_is_tx_empty>:
 *
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t uart_is_tx_empty(Uart *p_uart)
{
  4010e4:	b480      	push	{r7}
  4010e6:	b083      	sub	sp, #12
  4010e8:	af00      	add	r7, sp, #0
  4010ea:	6078      	str	r0, [r7, #4]
	return (p_uart->UART_SR & UART_SR_TXEMPTY) > 0;
  4010ec:	687b      	ldr	r3, [r7, #4]
  4010ee:	695b      	ldr	r3, [r3, #20]
  4010f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
  4010f4:	2b00      	cmp	r3, #0
  4010f6:	bf14      	ite	ne
  4010f8:	2301      	movne	r3, #1
  4010fa:	2300      	moveq	r3, #0
  4010fc:	b2db      	uxtb	r3, r3
}
  4010fe:	4618      	mov	r0, r3
  401100:	370c      	adds	r7, #12
  401102:	46bd      	mov	sp, r7
  401104:	f85d 7b04 	ldr.w	r7, [sp], #4
  401108:	4770      	bx	lr
  40110a:	bf00      	nop

0040110c <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  40110c:	b480      	push	{r7}
  40110e:	b083      	sub	sp, #12
  401110:	af00      	add	r7, sp, #0
  401112:	6078      	str	r0, [r7, #4]
  401114:	460b      	mov	r3, r1
  401116:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401118:	687b      	ldr	r3, [r7, #4]
  40111a:	695b      	ldr	r3, [r3, #20]
  40111c:	f003 0302 	and.w	r3, r3, #2
  401120:	2b00      	cmp	r3, #0
  401122:	d101      	bne.n	401128 <uart_write+0x1c>
		return 1;
  401124:	2301      	movs	r3, #1
  401126:	e003      	b.n	401130 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401128:	78fa      	ldrb	r2, [r7, #3]
  40112a:	687b      	ldr	r3, [r7, #4]
  40112c:	61da      	str	r2, [r3, #28]
	return 0;
  40112e:	2300      	movs	r3, #0
}
  401130:	4618      	mov	r0, r3
  401132:	370c      	adds	r7, #12
  401134:	46bd      	mov	sp, r7
  401136:	f85d 7b04 	ldr.w	r7, [sp], #4
  40113a:	4770      	bx	lr

0040113c <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  40113c:	b480      	push	{r7}
  40113e:	b083      	sub	sp, #12
  401140:	af00      	add	r7, sp, #0
  401142:	6078      	str	r0, [r7, #4]
  401144:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401146:	687b      	ldr	r3, [r7, #4]
  401148:	695b      	ldr	r3, [r3, #20]
  40114a:	f003 0301 	and.w	r3, r3, #1
  40114e:	2b00      	cmp	r3, #0
  401150:	d101      	bne.n	401156 <uart_read+0x1a>
		return 1;
  401152:	2301      	movs	r3, #1
  401154:	e005      	b.n	401162 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401156:	687b      	ldr	r3, [r7, #4]
  401158:	699b      	ldr	r3, [r3, #24]
  40115a:	b2da      	uxtb	r2, r3
  40115c:	683b      	ldr	r3, [r7, #0]
  40115e:	701a      	strb	r2, [r3, #0]
	return 0;
  401160:	2300      	movs	r3, #0
}
  401162:	4618      	mov	r0, r3
  401164:	370c      	adds	r7, #12
  401166:	46bd      	mov	sp, r7
  401168:	f85d 7b04 	ldr.w	r7, [sp], #4
  40116c:	4770      	bx	lr
  40116e:	bf00      	nop

00401170 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401170:	b480      	push	{r7}
  401172:	b089      	sub	sp, #36	; 0x24
  401174:	af00      	add	r7, sp, #0
  401176:	60f8      	str	r0, [r7, #12]
  401178:	60b9      	str	r1, [r7, #8]
  40117a:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40117c:	68bb      	ldr	r3, [r7, #8]
  40117e:	011a      	lsls	r2, r3, #4
  401180:	687b      	ldr	r3, [r7, #4]
  401182:	429a      	cmp	r2, r3
  401184:	d802      	bhi.n	40118c <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  401186:	2310      	movs	r3, #16
  401188:	61fb      	str	r3, [r7, #28]
  40118a:	e001      	b.n	401190 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  40118c:	2308      	movs	r3, #8
  40118e:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401190:	687b      	ldr	r3, [r7, #4]
  401192:	00da      	lsls	r2, r3, #3
  401194:	69fb      	ldr	r3, [r7, #28]
  401196:	68b9      	ldr	r1, [r7, #8]
  401198:	fb01 f303 	mul.w	r3, r1, r3
  40119c:	085b      	lsrs	r3, r3, #1
  40119e:	441a      	add	r2, r3
  4011a0:	69fb      	ldr	r3, [r7, #28]
  4011a2:	68b9      	ldr	r1, [r7, #8]
  4011a4:	fb01 f303 	mul.w	r3, r1, r3
  4011a8:	fbb2 f3f3 	udiv	r3, r2, r3
  4011ac:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  4011ae:	69bb      	ldr	r3, [r7, #24]
  4011b0:	08db      	lsrs	r3, r3, #3
  4011b2:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  4011b4:	69bb      	ldr	r3, [r7, #24]
  4011b6:	f003 0307 	and.w	r3, r3, #7
  4011ba:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4011bc:	697b      	ldr	r3, [r7, #20]
  4011be:	2b00      	cmp	r3, #0
  4011c0:	d003      	beq.n	4011ca <usart_set_async_baudrate+0x5a>
  4011c2:	697b      	ldr	r3, [r7, #20]
  4011c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4011c8:	d301      	bcc.n	4011ce <usart_set_async_baudrate+0x5e>
		return 1;
  4011ca:	2301      	movs	r3, #1
  4011cc:	e00f      	b.n	4011ee <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  4011ce:	69fb      	ldr	r3, [r7, #28]
  4011d0:	2b08      	cmp	r3, #8
  4011d2:	d105      	bne.n	4011e0 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4011d4:	68fb      	ldr	r3, [r7, #12]
  4011d6:	685b      	ldr	r3, [r3, #4]
  4011d8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4011dc:	68fb      	ldr	r3, [r7, #12]
  4011de:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4011e0:	693b      	ldr	r3, [r7, #16]
  4011e2:	041a      	lsls	r2, r3, #16
  4011e4:	697b      	ldr	r3, [r7, #20]
  4011e6:	431a      	orrs	r2, r3
  4011e8:	68fb      	ldr	r3, [r7, #12]
  4011ea:	621a      	str	r2, [r3, #32]

	return 0;
  4011ec:	2300      	movs	r3, #0
}
  4011ee:	4618      	mov	r0, r3
  4011f0:	3724      	adds	r7, #36	; 0x24
  4011f2:	46bd      	mov	sp, r7
  4011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011f8:	4770      	bx	lr
  4011fa:	bf00      	nop

004011fc <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4011fc:	b580      	push	{r7, lr}
  4011fe:	b082      	sub	sp, #8
  401200:	af00      	add	r7, sp, #0
  401202:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401204:	6878      	ldr	r0, [r7, #4]
  401206:	4b0d      	ldr	r3, [pc, #52]	; (40123c <usart_reset+0x40>)
  401208:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40120a:	687b      	ldr	r3, [r7, #4]
  40120c:	2200      	movs	r2, #0
  40120e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  401210:	687b      	ldr	r3, [r7, #4]
  401212:	2200      	movs	r2, #0
  401214:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401216:	687b      	ldr	r3, [r7, #4]
  401218:	2200      	movs	r2, #0
  40121a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  40121c:	6878      	ldr	r0, [r7, #4]
  40121e:	4b08      	ldr	r3, [pc, #32]	; (401240 <usart_reset+0x44>)
  401220:	4798      	blx	r3
	usart_reset_rx(p_usart);
  401222:	6878      	ldr	r0, [r7, #4]
  401224:	4b07      	ldr	r3, [pc, #28]	; (401244 <usart_reset+0x48>)
  401226:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401228:	6878      	ldr	r0, [r7, #4]
  40122a:	4b07      	ldr	r3, [pc, #28]	; (401248 <usart_reset+0x4c>)
  40122c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40122e:	6878      	ldr	r0, [r7, #4]
  401230:	4b06      	ldr	r3, [pc, #24]	; (40124c <usart_reset+0x50>)
  401232:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  401234:	bf00      	nop
  401236:	3708      	adds	r7, #8
  401238:	46bd      	mov	sp, r7
  40123a:	bd80      	pop	{r7, pc}
  40123c:	004013e5 	.word	0x004013e5
  401240:	004012f1 	.word	0x004012f1
  401244:	00401329 	.word	0x00401329
  401248:	00401345 	.word	0x00401345
  40124c:	00401361 	.word	0x00401361

00401250 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401250:	b580      	push	{r7, lr}
  401252:	b084      	sub	sp, #16
  401254:	af00      	add	r7, sp, #0
  401256:	60f8      	str	r0, [r7, #12]
  401258:	60b9      	str	r1, [r7, #8]
  40125a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  40125c:	68f8      	ldr	r0, [r7, #12]
  40125e:	4b1a      	ldr	r3, [pc, #104]	; (4012c8 <usart_init_rs232+0x78>)
  401260:	4798      	blx	r3

	ul_reg_val = 0;
  401262:	4b1a      	ldr	r3, [pc, #104]	; (4012cc <usart_init_rs232+0x7c>)
  401264:	2200      	movs	r2, #0
  401266:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401268:	68bb      	ldr	r3, [r7, #8]
  40126a:	2b00      	cmp	r3, #0
  40126c:	d009      	beq.n	401282 <usart_init_rs232+0x32>
  40126e:	68bb      	ldr	r3, [r7, #8]
  401270:	681b      	ldr	r3, [r3, #0]
  401272:	687a      	ldr	r2, [r7, #4]
  401274:	4619      	mov	r1, r3
  401276:	68f8      	ldr	r0, [r7, #12]
  401278:	4b15      	ldr	r3, [pc, #84]	; (4012d0 <usart_init_rs232+0x80>)
  40127a:	4798      	blx	r3
  40127c:	4603      	mov	r3, r0
  40127e:	2b00      	cmp	r3, #0
  401280:	d001      	beq.n	401286 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  401282:	2301      	movs	r3, #1
  401284:	e01b      	b.n	4012be <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401286:	68bb      	ldr	r3, [r7, #8]
  401288:	685a      	ldr	r2, [r3, #4]
  40128a:	68bb      	ldr	r3, [r7, #8]
  40128c:	689b      	ldr	r3, [r3, #8]
  40128e:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401290:	68bb      	ldr	r3, [r7, #8]
  401292:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401294:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401296:	68bb      	ldr	r3, [r7, #8]
  401298:	68db      	ldr	r3, [r3, #12]
  40129a:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40129c:	4b0b      	ldr	r3, [pc, #44]	; (4012cc <usart_init_rs232+0x7c>)
  40129e:	681b      	ldr	r3, [r3, #0]
  4012a0:	4313      	orrs	r3, r2
  4012a2:	4a0a      	ldr	r2, [pc, #40]	; (4012cc <usart_init_rs232+0x7c>)
  4012a4:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  4012a6:	4b09      	ldr	r3, [pc, #36]	; (4012cc <usart_init_rs232+0x7c>)
  4012a8:	681b      	ldr	r3, [r3, #0]
  4012aa:	4a08      	ldr	r2, [pc, #32]	; (4012cc <usart_init_rs232+0x7c>)
  4012ac:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  4012ae:	68fb      	ldr	r3, [r7, #12]
  4012b0:	685a      	ldr	r2, [r3, #4]
  4012b2:	4b06      	ldr	r3, [pc, #24]	; (4012cc <usart_init_rs232+0x7c>)
  4012b4:	681b      	ldr	r3, [r3, #0]
  4012b6:	431a      	orrs	r2, r3
  4012b8:	68fb      	ldr	r3, [r7, #12]
  4012ba:	605a      	str	r2, [r3, #4]

	return 0;
  4012bc:	2300      	movs	r3, #0
}
  4012be:	4618      	mov	r0, r3
  4012c0:	3710      	adds	r7, #16
  4012c2:	46bd      	mov	sp, r7
  4012c4:	bd80      	pop	{r7, pc}
  4012c6:	bf00      	nop
  4012c8:	004011fd 	.word	0x004011fd
  4012cc:	20400908 	.word	0x20400908
  4012d0:	00401171 	.word	0x00401171

004012d4 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4012d4:	b480      	push	{r7}
  4012d6:	b083      	sub	sp, #12
  4012d8:	af00      	add	r7, sp, #0
  4012da:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4012dc:	687b      	ldr	r3, [r7, #4]
  4012de:	2240      	movs	r2, #64	; 0x40
  4012e0:	601a      	str	r2, [r3, #0]
}
  4012e2:	bf00      	nop
  4012e4:	370c      	adds	r7, #12
  4012e6:	46bd      	mov	sp, r7
  4012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012ec:	4770      	bx	lr
  4012ee:	bf00      	nop

004012f0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4012f0:	b480      	push	{r7}
  4012f2:	b083      	sub	sp, #12
  4012f4:	af00      	add	r7, sp, #0
  4012f6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4012f8:	687b      	ldr	r3, [r7, #4]
  4012fa:	2288      	movs	r2, #136	; 0x88
  4012fc:	601a      	str	r2, [r3, #0]
}
  4012fe:	bf00      	nop
  401300:	370c      	adds	r7, #12
  401302:	46bd      	mov	sp, r7
  401304:	f85d 7b04 	ldr.w	r7, [sp], #4
  401308:	4770      	bx	lr
  40130a:	bf00      	nop

0040130c <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  40130c:	b480      	push	{r7}
  40130e:	b083      	sub	sp, #12
  401310:	af00      	add	r7, sp, #0
  401312:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401314:	687b      	ldr	r3, [r7, #4]
  401316:	2210      	movs	r2, #16
  401318:	601a      	str	r2, [r3, #0]
}
  40131a:	bf00      	nop
  40131c:	370c      	adds	r7, #12
  40131e:	46bd      	mov	sp, r7
  401320:	f85d 7b04 	ldr.w	r7, [sp], #4
  401324:	4770      	bx	lr
  401326:	bf00      	nop

00401328 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  401328:	b480      	push	{r7}
  40132a:	b083      	sub	sp, #12
  40132c:	af00      	add	r7, sp, #0
  40132e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401330:	687b      	ldr	r3, [r7, #4]
  401332:	2224      	movs	r2, #36	; 0x24
  401334:	601a      	str	r2, [r3, #0]
}
  401336:	bf00      	nop
  401338:	370c      	adds	r7, #12
  40133a:	46bd      	mov	sp, r7
  40133c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401340:	4770      	bx	lr
  401342:	bf00      	nop

00401344 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401344:	b480      	push	{r7}
  401346:	b083      	sub	sp, #12
  401348:	af00      	add	r7, sp, #0
  40134a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  40134c:	687b      	ldr	r3, [r7, #4]
  40134e:	f44f 7280 	mov.w	r2, #256	; 0x100
  401352:	601a      	str	r2, [r3, #0]
}
  401354:	bf00      	nop
  401356:	370c      	adds	r7, #12
  401358:	46bd      	mov	sp, r7
  40135a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40135e:	4770      	bx	lr

00401360 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401360:	b480      	push	{r7}
  401362:	b083      	sub	sp, #12
  401364:	af00      	add	r7, sp, #0
  401366:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401368:	687b      	ldr	r3, [r7, #4]
  40136a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40136e:	601a      	str	r2, [r3, #0]
}
  401370:	bf00      	nop
  401372:	370c      	adds	r7, #12
  401374:	46bd      	mov	sp, r7
  401376:	f85d 7b04 	ldr.w	r7, [sp], #4
  40137a:	4770      	bx	lr

0040137c <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  40137c:	b480      	push	{r7}
  40137e:	b083      	sub	sp, #12
  401380:	af00      	add	r7, sp, #0
  401382:	6078      	str	r0, [r7, #4]
  401384:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401386:	687b      	ldr	r3, [r7, #4]
  401388:	695b      	ldr	r3, [r3, #20]
  40138a:	f003 0302 	and.w	r3, r3, #2
  40138e:	2b00      	cmp	r3, #0
  401390:	d101      	bne.n	401396 <usart_write+0x1a>
		return 1;
  401392:	2301      	movs	r3, #1
  401394:	e005      	b.n	4013a2 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401396:	683b      	ldr	r3, [r7, #0]
  401398:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40139c:	687b      	ldr	r3, [r7, #4]
  40139e:	61da      	str	r2, [r3, #28]
	return 0;
  4013a0:	2300      	movs	r3, #0
}
  4013a2:	4618      	mov	r0, r3
  4013a4:	370c      	adds	r7, #12
  4013a6:	46bd      	mov	sp, r7
  4013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013ac:	4770      	bx	lr
  4013ae:	bf00      	nop

004013b0 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4013b0:	b480      	push	{r7}
  4013b2:	b083      	sub	sp, #12
  4013b4:	af00      	add	r7, sp, #0
  4013b6:	6078      	str	r0, [r7, #4]
  4013b8:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4013ba:	687b      	ldr	r3, [r7, #4]
  4013bc:	695b      	ldr	r3, [r3, #20]
  4013be:	f003 0301 	and.w	r3, r3, #1
  4013c2:	2b00      	cmp	r3, #0
  4013c4:	d101      	bne.n	4013ca <usart_read+0x1a>
		return 1;
  4013c6:	2301      	movs	r3, #1
  4013c8:	e006      	b.n	4013d8 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4013ca:	687b      	ldr	r3, [r7, #4]
  4013cc:	699b      	ldr	r3, [r3, #24]
  4013ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4013d2:	683b      	ldr	r3, [r7, #0]
  4013d4:	601a      	str	r2, [r3, #0]

	return 0;
  4013d6:	2300      	movs	r3, #0
}
  4013d8:	4618      	mov	r0, r3
  4013da:	370c      	adds	r7, #12
  4013dc:	46bd      	mov	sp, r7
  4013de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013e2:	4770      	bx	lr

004013e4 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4013e4:	b480      	push	{r7}
  4013e6:	b083      	sub	sp, #12
  4013e8:	af00      	add	r7, sp, #0
  4013ea:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4013ec:	687b      	ldr	r3, [r7, #4]
  4013ee:	4a04      	ldr	r2, [pc, #16]	; (401400 <usart_disable_writeprotect+0x1c>)
  4013f0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4013f4:	bf00      	nop
  4013f6:	370c      	adds	r7, #12
  4013f8:	46bd      	mov	sp, r7
  4013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013fe:	4770      	bx	lr
  401400:	55534100 	.word	0x55534100

00401404 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401404:	b480      	push	{r7}
  401406:	b083      	sub	sp, #12
  401408:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40140a:	f3ef 8310 	mrs	r3, PRIMASK
  40140e:	607b      	str	r3, [r7, #4]
  return(result);
  401410:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401412:	2b00      	cmp	r3, #0
  401414:	bf0c      	ite	eq
  401416:	2301      	moveq	r3, #1
  401418:	2300      	movne	r3, #0
  40141a:	b2db      	uxtb	r3, r3
  40141c:	603b      	str	r3, [r7, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40141e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401420:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401424:	4b04      	ldr	r3, [pc, #16]	; (401438 <cpu_irq_save+0x34>)
  401426:	2200      	movs	r2, #0
  401428:	701a      	strb	r2, [r3, #0]
	return flags;
  40142a:	683b      	ldr	r3, [r7, #0]
}
  40142c:	4618      	mov	r0, r3
  40142e:	370c      	adds	r7, #12
  401430:	46bd      	mov	sp, r7
  401432:	f85d 7b04 	ldr.w	r7, [sp], #4
  401436:	4770      	bx	lr
  401438:	20400000 	.word	0x20400000

0040143c <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  40143c:	b480      	push	{r7}
  40143e:	b083      	sub	sp, #12
  401440:	af00      	add	r7, sp, #0
  401442:	6078      	str	r0, [r7, #4]
	return (flags);
  401444:	687b      	ldr	r3, [r7, #4]
  401446:	2b00      	cmp	r3, #0
  401448:	bf14      	ite	ne
  40144a:	2301      	movne	r3, #1
  40144c:	2300      	moveq	r3, #0
  40144e:	b2db      	uxtb	r3, r3
}
  401450:	4618      	mov	r0, r3
  401452:	370c      	adds	r7, #12
  401454:	46bd      	mov	sp, r7
  401456:	f85d 7b04 	ldr.w	r7, [sp], #4
  40145a:	4770      	bx	lr

0040145c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  40145c:	b580      	push	{r7, lr}
  40145e:	b082      	sub	sp, #8
  401460:	af00      	add	r7, sp, #0
  401462:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401464:	6878      	ldr	r0, [r7, #4]
  401466:	4b07      	ldr	r3, [pc, #28]	; (401484 <cpu_irq_restore+0x28>)
  401468:	4798      	blx	r3
  40146a:	4603      	mov	r3, r0
  40146c:	2b00      	cmp	r3, #0
  40146e:	d005      	beq.n	40147c <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401470:	4b05      	ldr	r3, [pc, #20]	; (401488 <cpu_irq_restore+0x2c>)
  401472:	2201      	movs	r2, #1
  401474:	701a      	strb	r2, [r3, #0]
  401476:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40147a:	b662      	cpsie	i
}
  40147c:	bf00      	nop
  40147e:	3708      	adds	r7, #8
  401480:	46bd      	mov	sp, r7
  401482:	bd80      	pop	{r7, pc}
  401484:	0040143d 	.word	0x0040143d
  401488:	20400000 	.word	0x20400000

0040148c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40148c:	b580      	push	{r7, lr}
  40148e:	b084      	sub	sp, #16
  401490:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  401492:	4b1e      	ldr	r3, [pc, #120]	; (40150c <Reset_Handler+0x80>)
  401494:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  401496:	4b1e      	ldr	r3, [pc, #120]	; (401510 <Reset_Handler+0x84>)
  401498:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  40149a:	68fa      	ldr	r2, [r7, #12]
  40149c:	68bb      	ldr	r3, [r7, #8]
  40149e:	429a      	cmp	r2, r3
  4014a0:	d00c      	beq.n	4014bc <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  4014a2:	e007      	b.n	4014b4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  4014a4:	68bb      	ldr	r3, [r7, #8]
  4014a6:	1d1a      	adds	r2, r3, #4
  4014a8:	60ba      	str	r2, [r7, #8]
  4014aa:	68fa      	ldr	r2, [r7, #12]
  4014ac:	1d11      	adds	r1, r2, #4
  4014ae:	60f9      	str	r1, [r7, #12]
  4014b0:	6812      	ldr	r2, [r2, #0]
  4014b2:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  4014b4:	68bb      	ldr	r3, [r7, #8]
  4014b6:	4a17      	ldr	r2, [pc, #92]	; (401514 <Reset_Handler+0x88>)
  4014b8:	4293      	cmp	r3, r2
  4014ba:	d3f3      	bcc.n	4014a4 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4014bc:	4b16      	ldr	r3, [pc, #88]	; (401518 <Reset_Handler+0x8c>)
  4014be:	60bb      	str	r3, [r7, #8]
  4014c0:	e004      	b.n	4014cc <Reset_Handler+0x40>
                *pDest++ = 0;
  4014c2:	68bb      	ldr	r3, [r7, #8]
  4014c4:	1d1a      	adds	r2, r3, #4
  4014c6:	60ba      	str	r2, [r7, #8]
  4014c8:	2200      	movs	r2, #0
  4014ca:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4014cc:	68bb      	ldr	r3, [r7, #8]
  4014ce:	4a13      	ldr	r2, [pc, #76]	; (40151c <Reset_Handler+0x90>)
  4014d0:	4293      	cmp	r3, r2
  4014d2:	d3f6      	bcc.n	4014c2 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4014d4:	4b12      	ldr	r3, [pc, #72]	; (401520 <Reset_Handler+0x94>)
  4014d6:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4014d8:	4a12      	ldr	r2, [pc, #72]	; (401524 <Reset_Handler+0x98>)
  4014da:	68fb      	ldr	r3, [r7, #12]
  4014dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4014e0:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  4014e2:	4b11      	ldr	r3, [pc, #68]	; (401528 <Reset_Handler+0x9c>)
  4014e4:	4798      	blx	r3
  4014e6:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  4014e8:	4a10      	ldr	r2, [pc, #64]	; (40152c <Reset_Handler+0xa0>)
  4014ea:	4b10      	ldr	r3, [pc, #64]	; (40152c <Reset_Handler+0xa0>)
  4014ec:	681b      	ldr	r3, [r3, #0]
  4014ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4014f2:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4014f4:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4014f8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  4014fc:	6878      	ldr	r0, [r7, #4]
  4014fe:	4b0c      	ldr	r3, [pc, #48]	; (401530 <Reset_Handler+0xa4>)
  401500:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  401502:	4b0c      	ldr	r3, [pc, #48]	; (401534 <Reset_Handler+0xa8>)
  401504:	4798      	blx	r3

        /* Branch to main function */
        main();
  401506:	4b0c      	ldr	r3, [pc, #48]	; (401538 <Reset_Handler+0xac>)
  401508:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  40150a:	e7fe      	b.n	40150a <Reset_Handler+0x7e>
  40150c:	00406e50 	.word	0x00406e50
  401510:	20400000 	.word	0x20400000
  401514:	2040087c 	.word	0x2040087c
  401518:	2040087c 	.word	0x2040087c
  40151c:	20400a18 	.word	0x20400a18
  401520:	00400000 	.word	0x00400000
  401524:	e000ed00 	.word	0xe000ed00
  401528:	00401405 	.word	0x00401405
  40152c:	e000ed88 	.word	0xe000ed88
  401530:	0040145d 	.word	0x0040145d
  401534:	0040202d 	.word	0x0040202d
  401538:	00401f09 	.word	0x00401f09

0040153c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40153c:	b480      	push	{r7}
  40153e:	af00      	add	r7, sp, #0
        while (1) {
        }
  401540:	e7fe      	b.n	401540 <Dummy_Handler+0x4>
  401542:	bf00      	nop

00401544 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  401544:	b480      	push	{r7}
  401546:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401548:	4b52      	ldr	r3, [pc, #328]	; (401694 <SystemCoreClockUpdate+0x150>)
  40154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40154c:	f003 0303 	and.w	r3, r3, #3
  401550:	2b01      	cmp	r3, #1
  401552:	d014      	beq.n	40157e <SystemCoreClockUpdate+0x3a>
  401554:	2b01      	cmp	r3, #1
  401556:	d302      	bcc.n	40155e <SystemCoreClockUpdate+0x1a>
  401558:	2b02      	cmp	r3, #2
  40155a:	d038      	beq.n	4015ce <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  40155c:	e07a      	b.n	401654 <SystemCoreClockUpdate+0x110>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40155e:	4b4e      	ldr	r3, [pc, #312]	; (401698 <SystemCoreClockUpdate+0x154>)
  401560:	695b      	ldr	r3, [r3, #20]
  401562:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401566:	2b00      	cmp	r3, #0
  401568:	d004      	beq.n	401574 <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40156a:	4b4c      	ldr	r3, [pc, #304]	; (40169c <SystemCoreClockUpdate+0x158>)
  40156c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401570:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  401572:	e06f      	b.n	401654 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401574:	4b49      	ldr	r3, [pc, #292]	; (40169c <SystemCoreClockUpdate+0x158>)
  401576:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40157a:	601a      	str	r2, [r3, #0]
      }
    break;
  40157c:	e06a      	b.n	401654 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40157e:	4b45      	ldr	r3, [pc, #276]	; (401694 <SystemCoreClockUpdate+0x150>)
  401580:	6a1b      	ldr	r3, [r3, #32]
  401582:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401586:	2b00      	cmp	r3, #0
  401588:	d003      	beq.n	401592 <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40158a:	4b44      	ldr	r3, [pc, #272]	; (40169c <SystemCoreClockUpdate+0x158>)
  40158c:	4a44      	ldr	r2, [pc, #272]	; (4016a0 <SystemCoreClockUpdate+0x15c>)
  40158e:	601a      	str	r2, [r3, #0]

          default:
          break;
        }
      }
    break;
  401590:	e060      	b.n	401654 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401592:	4b42      	ldr	r3, [pc, #264]	; (40169c <SystemCoreClockUpdate+0x158>)
  401594:	4a43      	ldr	r2, [pc, #268]	; (4016a4 <SystemCoreClockUpdate+0x160>)
  401596:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401598:	4b3e      	ldr	r3, [pc, #248]	; (401694 <SystemCoreClockUpdate+0x150>)
  40159a:	6a1b      	ldr	r3, [r3, #32]
  40159c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4015a0:	2b10      	cmp	r3, #16
  4015a2:	d004      	beq.n	4015ae <SystemCoreClockUpdate+0x6a>
  4015a4:	2b20      	cmp	r3, #32
  4015a6:	d008      	beq.n	4015ba <SystemCoreClockUpdate+0x76>
  4015a8:	2b00      	cmp	r3, #0
  4015aa:	d00e      	beq.n	4015ca <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  4015ac:	e00e      	b.n	4015cc <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4015ae:	4b3b      	ldr	r3, [pc, #236]	; (40169c <SystemCoreClockUpdate+0x158>)
  4015b0:	681b      	ldr	r3, [r3, #0]
  4015b2:	005b      	lsls	r3, r3, #1
  4015b4:	4a39      	ldr	r2, [pc, #228]	; (40169c <SystemCoreClockUpdate+0x158>)
  4015b6:	6013      	str	r3, [r2, #0]
          break;
  4015b8:	e008      	b.n	4015cc <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4015ba:	4b38      	ldr	r3, [pc, #224]	; (40169c <SystemCoreClockUpdate+0x158>)
  4015bc:	681a      	ldr	r2, [r3, #0]
  4015be:	4613      	mov	r3, r2
  4015c0:	005b      	lsls	r3, r3, #1
  4015c2:	4413      	add	r3, r2
  4015c4:	4a35      	ldr	r2, [pc, #212]	; (40169c <SystemCoreClockUpdate+0x158>)
  4015c6:	6013      	str	r3, [r2, #0]
          break;
  4015c8:	e000      	b.n	4015cc <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  4015ca:	bf00      	nop

          default:
          break;
        }
      }
    break;
  4015cc:	e042      	b.n	401654 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4015ce:	4b31      	ldr	r3, [pc, #196]	; (401694 <SystemCoreClockUpdate+0x150>)
  4015d0:	6a1b      	ldr	r3, [r3, #32]
  4015d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4015d6:	2b00      	cmp	r3, #0
  4015d8:	d003      	beq.n	4015e2 <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4015da:	4b30      	ldr	r3, [pc, #192]	; (40169c <SystemCoreClockUpdate+0x158>)
  4015dc:	4a30      	ldr	r2, [pc, #192]	; (4016a0 <SystemCoreClockUpdate+0x15c>)
  4015de:	601a      	str	r2, [r3, #0]
  4015e0:	e01c      	b.n	40161c <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4015e2:	4b2e      	ldr	r3, [pc, #184]	; (40169c <SystemCoreClockUpdate+0x158>)
  4015e4:	4a2f      	ldr	r2, [pc, #188]	; (4016a4 <SystemCoreClockUpdate+0x160>)
  4015e6:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4015e8:	4b2a      	ldr	r3, [pc, #168]	; (401694 <SystemCoreClockUpdate+0x150>)
  4015ea:	6a1b      	ldr	r3, [r3, #32]
  4015ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4015f0:	2b10      	cmp	r3, #16
  4015f2:	d004      	beq.n	4015fe <SystemCoreClockUpdate+0xba>
  4015f4:	2b20      	cmp	r3, #32
  4015f6:	d008      	beq.n	40160a <SystemCoreClockUpdate+0xc6>
  4015f8:	2b00      	cmp	r3, #0
  4015fa:	d00e      	beq.n	40161a <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  4015fc:	e00e      	b.n	40161c <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4015fe:	4b27      	ldr	r3, [pc, #156]	; (40169c <SystemCoreClockUpdate+0x158>)
  401600:	681b      	ldr	r3, [r3, #0]
  401602:	005b      	lsls	r3, r3, #1
  401604:	4a25      	ldr	r2, [pc, #148]	; (40169c <SystemCoreClockUpdate+0x158>)
  401606:	6013      	str	r3, [r2, #0]
          break;
  401608:	e008      	b.n	40161c <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  40160a:	4b24      	ldr	r3, [pc, #144]	; (40169c <SystemCoreClockUpdate+0x158>)
  40160c:	681a      	ldr	r2, [r3, #0]
  40160e:	4613      	mov	r3, r2
  401610:	005b      	lsls	r3, r3, #1
  401612:	4413      	add	r3, r2
  401614:	4a21      	ldr	r2, [pc, #132]	; (40169c <SystemCoreClockUpdate+0x158>)
  401616:	6013      	str	r3, [r2, #0]
          break;
  401618:	e000      	b.n	40161c <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  40161a:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40161c:	4b1d      	ldr	r3, [pc, #116]	; (401694 <SystemCoreClockUpdate+0x150>)
  40161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401620:	f003 0303 	and.w	r3, r3, #3
  401624:	2b02      	cmp	r3, #2
  401626:	d114      	bne.n	401652 <SystemCoreClockUpdate+0x10e>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401628:	4b1a      	ldr	r3, [pc, #104]	; (401694 <SystemCoreClockUpdate+0x150>)
  40162a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40162c:	4b1e      	ldr	r3, [pc, #120]	; (4016a8 <SystemCoreClockUpdate+0x164>)
  40162e:	4013      	ands	r3, r2
  401630:	0c1b      	lsrs	r3, r3, #16
  401632:	3301      	adds	r3, #1
  401634:	4a19      	ldr	r2, [pc, #100]	; (40169c <SystemCoreClockUpdate+0x158>)
  401636:	6812      	ldr	r2, [r2, #0]
  401638:	fb02 f303 	mul.w	r3, r2, r3
  40163c:	4a17      	ldr	r2, [pc, #92]	; (40169c <SystemCoreClockUpdate+0x158>)
  40163e:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401640:	4b14      	ldr	r3, [pc, #80]	; (401694 <SystemCoreClockUpdate+0x150>)
  401642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401644:	b2db      	uxtb	r3, r3
  401646:	4a15      	ldr	r2, [pc, #84]	; (40169c <SystemCoreClockUpdate+0x158>)
  401648:	6812      	ldr	r2, [r2, #0]
  40164a:	fbb2 f3f3 	udiv	r3, r2, r3
  40164e:	4a13      	ldr	r2, [pc, #76]	; (40169c <SystemCoreClockUpdate+0x158>)
  401650:	6013      	str	r3, [r2, #0]
      }
    break;
  401652:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401654:	4b0f      	ldr	r3, [pc, #60]	; (401694 <SystemCoreClockUpdate+0x150>)
  401656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401658:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40165c:	2b70      	cmp	r3, #112	; 0x70
  40165e:	d108      	bne.n	401672 <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  401660:	4b0e      	ldr	r3, [pc, #56]	; (40169c <SystemCoreClockUpdate+0x158>)
  401662:	681b      	ldr	r3, [r3, #0]
  401664:	4a11      	ldr	r2, [pc, #68]	; (4016ac <SystemCoreClockUpdate+0x168>)
  401666:	fba2 2303 	umull	r2, r3, r2, r3
  40166a:	085b      	lsrs	r3, r3, #1
  40166c:	4a0b      	ldr	r2, [pc, #44]	; (40169c <SystemCoreClockUpdate+0x158>)
  40166e:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  401670:	e00a      	b.n	401688 <SystemCoreClockUpdate+0x144>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401672:	4b08      	ldr	r3, [pc, #32]	; (401694 <SystemCoreClockUpdate+0x150>)
  401674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401676:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40167a:	091b      	lsrs	r3, r3, #4
  40167c:	4a07      	ldr	r2, [pc, #28]	; (40169c <SystemCoreClockUpdate+0x158>)
  40167e:	6812      	ldr	r2, [r2, #0]
  401680:	fa22 f303 	lsr.w	r3, r2, r3
  401684:	4a05      	ldr	r2, [pc, #20]	; (40169c <SystemCoreClockUpdate+0x158>)
  401686:	6013      	str	r3, [r2, #0]
  }
}
  401688:	bf00      	nop
  40168a:	46bd      	mov	sp, r7
  40168c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401690:	4770      	bx	lr
  401692:	bf00      	nop
  401694:	400e0600 	.word	0x400e0600
  401698:	400e1810 	.word	0x400e1810
  40169c:	20400004 	.word	0x20400004
  4016a0:	00b71b00 	.word	0x00b71b00
  4016a4:	003d0900 	.word	0x003d0900
  4016a8:	07ff0000 	.word	0x07ff0000
  4016ac:	aaaaaaab 	.word	0xaaaaaaab

004016b0 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  4016b0:	b480      	push	{r7}
  4016b2:	b083      	sub	sp, #12
  4016b4:	af00      	add	r7, sp, #0
  4016b6:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4016b8:	687b      	ldr	r3, [r7, #4]
  4016ba:	4a19      	ldr	r2, [pc, #100]	; (401720 <system_init_flash+0x70>)
  4016bc:	4293      	cmp	r3, r2
  4016be:	d804      	bhi.n	4016ca <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4016c0:	4b18      	ldr	r3, [pc, #96]	; (401724 <system_init_flash+0x74>)
  4016c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4016c6:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4016c8:	e023      	b.n	401712 <system_init_flash+0x62>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4016ca:	687b      	ldr	r3, [r7, #4]
  4016cc:	4a16      	ldr	r2, [pc, #88]	; (401728 <system_init_flash+0x78>)
  4016ce:	4293      	cmp	r3, r2
  4016d0:	d803      	bhi.n	4016da <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4016d2:	4b14      	ldr	r3, [pc, #80]	; (401724 <system_init_flash+0x74>)
  4016d4:	4a15      	ldr	r2, [pc, #84]	; (40172c <system_init_flash+0x7c>)
  4016d6:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4016d8:	e01b      	b.n	401712 <system_init_flash+0x62>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4016da:	687b      	ldr	r3, [r7, #4]
  4016dc:	4a14      	ldr	r2, [pc, #80]	; (401730 <system_init_flash+0x80>)
  4016de:	4293      	cmp	r3, r2
  4016e0:	d803      	bhi.n	4016ea <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4016e2:	4b10      	ldr	r3, [pc, #64]	; (401724 <system_init_flash+0x74>)
  4016e4:	4a13      	ldr	r2, [pc, #76]	; (401734 <system_init_flash+0x84>)
  4016e6:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4016e8:	e013      	b.n	401712 <system_init_flash+0x62>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4016ea:	687b      	ldr	r3, [r7, #4]
  4016ec:	4a12      	ldr	r2, [pc, #72]	; (401738 <system_init_flash+0x88>)
  4016ee:	4293      	cmp	r3, r2
  4016f0:	d803      	bhi.n	4016fa <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4016f2:	4b0c      	ldr	r3, [pc, #48]	; (401724 <system_init_flash+0x74>)
  4016f4:	4a11      	ldr	r2, [pc, #68]	; (40173c <system_init_flash+0x8c>)
  4016f6:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4016f8:	e00b      	b.n	401712 <system_init_flash+0x62>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4016fa:	687b      	ldr	r3, [r7, #4]
  4016fc:	4a10      	ldr	r2, [pc, #64]	; (401740 <system_init_flash+0x90>)
  4016fe:	4293      	cmp	r3, r2
  401700:	d804      	bhi.n	40170c <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401702:	4b08      	ldr	r3, [pc, #32]	; (401724 <system_init_flash+0x74>)
  401704:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401708:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  40170a:	e002      	b.n	401712 <system_init_flash+0x62>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40170c:	4b05      	ldr	r3, [pc, #20]	; (401724 <system_init_flash+0x74>)
  40170e:	4a0d      	ldr	r2, [pc, #52]	; (401744 <system_init_flash+0x94>)
  401710:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401712:	bf00      	nop
  401714:	370c      	adds	r7, #12
  401716:	46bd      	mov	sp, r7
  401718:	f85d 7b04 	ldr.w	r7, [sp], #4
  40171c:	4770      	bx	lr
  40171e:	bf00      	nop
  401720:	01312cff 	.word	0x01312cff
  401724:	400e0c00 	.word	0x400e0c00
  401728:	026259ff 	.word	0x026259ff
  40172c:	04000100 	.word	0x04000100
  401730:	039386ff 	.word	0x039386ff
  401734:	04000200 	.word	0x04000200
  401738:	04c4b3ff 	.word	0x04c4b3ff
  40173c:	04000300 	.word	0x04000300
  401740:	05f5e0ff 	.word	0x05f5e0ff
  401744:	04000500 	.word	0x04000500

00401748 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401748:	b480      	push	{r7}
  40174a:	b085      	sub	sp, #20
  40174c:	af00      	add	r7, sp, #0
  40174e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401750:	4b10      	ldr	r3, [pc, #64]	; (401794 <_sbrk+0x4c>)
  401752:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401754:	4b10      	ldr	r3, [pc, #64]	; (401798 <_sbrk+0x50>)
  401756:	681b      	ldr	r3, [r3, #0]
  401758:	2b00      	cmp	r3, #0
  40175a:	d102      	bne.n	401762 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  40175c:	4b0e      	ldr	r3, [pc, #56]	; (401798 <_sbrk+0x50>)
  40175e:	4a0f      	ldr	r2, [pc, #60]	; (40179c <_sbrk+0x54>)
  401760:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401762:	4b0d      	ldr	r3, [pc, #52]	; (401798 <_sbrk+0x50>)
  401764:	681b      	ldr	r3, [r3, #0]
  401766:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401768:	68ba      	ldr	r2, [r7, #8]
  40176a:	687b      	ldr	r3, [r7, #4]
  40176c:	441a      	add	r2, r3
  40176e:	68fb      	ldr	r3, [r7, #12]
  401770:	429a      	cmp	r2, r3
  401772:	dd02      	ble.n	40177a <_sbrk+0x32>
		return (caddr_t) -1;	
  401774:	f04f 33ff 	mov.w	r3, #4294967295
  401778:	e006      	b.n	401788 <_sbrk+0x40>
	}

	heap += incr;
  40177a:	4b07      	ldr	r3, [pc, #28]	; (401798 <_sbrk+0x50>)
  40177c:	681a      	ldr	r2, [r3, #0]
  40177e:	687b      	ldr	r3, [r7, #4]
  401780:	4413      	add	r3, r2
  401782:	4a05      	ldr	r2, [pc, #20]	; (401798 <_sbrk+0x50>)
  401784:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401786:	68bb      	ldr	r3, [r7, #8]
}
  401788:	4618      	mov	r0, r3
  40178a:	3714      	adds	r7, #20
  40178c:	46bd      	mov	sp, r7
  40178e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401792:	4770      	bx	lr
  401794:	2045fffc 	.word	0x2045fffc
  401798:	2040090c 	.word	0x2040090c
  40179c:	20402c18 	.word	0x20402c18

004017a0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4017a0:	b480      	push	{r7}
  4017a2:	b083      	sub	sp, #12
  4017a4:	af00      	add	r7, sp, #0
  4017a6:	4603      	mov	r3, r0
  4017a8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4017aa:	4909      	ldr	r1, [pc, #36]	; (4017d0 <NVIC_EnableIRQ+0x30>)
  4017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4017b0:	095b      	lsrs	r3, r3, #5
  4017b2:	79fa      	ldrb	r2, [r7, #7]
  4017b4:	f002 021f 	and.w	r2, r2, #31
  4017b8:	2001      	movs	r0, #1
  4017ba:	fa00 f202 	lsl.w	r2, r0, r2
  4017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4017c2:	bf00      	nop
  4017c4:	370c      	adds	r7, #12
  4017c6:	46bd      	mov	sp, r7
  4017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4017cc:	4770      	bx	lr
  4017ce:	bf00      	nop
  4017d0:	e000e100 	.word	0xe000e100

004017d4 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4017d4:	b480      	push	{r7}
  4017d6:	b083      	sub	sp, #12
  4017d8:	af00      	add	r7, sp, #0
  4017da:	4603      	mov	r3, r0
  4017dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4017de:	4909      	ldr	r1, [pc, #36]	; (401804 <NVIC_DisableIRQ+0x30>)
  4017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4017e4:	095b      	lsrs	r3, r3, #5
  4017e6:	79fa      	ldrb	r2, [r7, #7]
  4017e8:	f002 021f 	and.w	r2, r2, #31
  4017ec:	2001      	movs	r0, #1
  4017ee:	fa00 f202 	lsl.w	r2, r0, r2
  4017f2:	3320      	adds	r3, #32
  4017f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4017f8:	bf00      	nop
  4017fa:	370c      	adds	r7, #12
  4017fc:	46bd      	mov	sp, r7
  4017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  401802:	4770      	bx	lr
  401804:	e000e100 	.word	0xe000e100

00401808 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  401808:	b480      	push	{r7}
  40180a:	b083      	sub	sp, #12
  40180c:	af00      	add	r7, sp, #0
  40180e:	4603      	mov	r3, r0
  401810:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401812:	4909      	ldr	r1, [pc, #36]	; (401838 <NVIC_ClearPendingIRQ+0x30>)
  401814:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401818:	095b      	lsrs	r3, r3, #5
  40181a:	79fa      	ldrb	r2, [r7, #7]
  40181c:	f002 021f 	and.w	r2, r2, #31
  401820:	2001      	movs	r0, #1
  401822:	fa00 f202 	lsl.w	r2, r0, r2
  401826:	3360      	adds	r3, #96	; 0x60
  401828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40182c:	bf00      	nop
  40182e:	370c      	adds	r7, #12
  401830:	46bd      	mov	sp, r7
  401832:	f85d 7b04 	ldr.w	r7, [sp], #4
  401836:	4770      	bx	lr
  401838:	e000e100 	.word	0xe000e100

0040183c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40183c:	b480      	push	{r7}
  40183e:	b083      	sub	sp, #12
  401840:	af00      	add	r7, sp, #0
  401842:	4603      	mov	r3, r0
  401844:	6039      	str	r1, [r7, #0]
  401846:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401848:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40184c:	2b00      	cmp	r3, #0
  40184e:	da0b      	bge.n	401868 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401850:	490d      	ldr	r1, [pc, #52]	; (401888 <NVIC_SetPriority+0x4c>)
  401852:	79fb      	ldrb	r3, [r7, #7]
  401854:	f003 030f 	and.w	r3, r3, #15
  401858:	3b04      	subs	r3, #4
  40185a:	683a      	ldr	r2, [r7, #0]
  40185c:	b2d2      	uxtb	r2, r2
  40185e:	0152      	lsls	r2, r2, #5
  401860:	b2d2      	uxtb	r2, r2
  401862:	440b      	add	r3, r1
  401864:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  401866:	e009      	b.n	40187c <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401868:	4908      	ldr	r1, [pc, #32]	; (40188c <NVIC_SetPriority+0x50>)
  40186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40186e:	683a      	ldr	r2, [r7, #0]
  401870:	b2d2      	uxtb	r2, r2
  401872:	0152      	lsls	r2, r2, #5
  401874:	b2d2      	uxtb	r2, r2
  401876:	440b      	add	r3, r1
  401878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  40187c:	bf00      	nop
  40187e:	370c      	adds	r7, #12
  401880:	46bd      	mov	sp, r7
  401882:	f85d 7b04 	ldr.w	r7, [sp], #4
  401886:	4770      	bx	lr
  401888:	e000ed00 	.word	0xe000ed00
  40188c:	e000e100 	.word	0xe000e100

00401890 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401890:	b480      	push	{r7}
  401892:	b083      	sub	sp, #12
  401894:	af00      	add	r7, sp, #0
  401896:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401898:	687b      	ldr	r3, [r7, #4]
  40189a:	2b07      	cmp	r3, #7
  40189c:	d825      	bhi.n	4018ea <osc_get_rate+0x5a>
  40189e:	a201      	add	r2, pc, #4	; (adr r2, 4018a4 <osc_get_rate+0x14>)
  4018a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4018a4:	004018c5 	.word	0x004018c5
  4018a8:	004018cb 	.word	0x004018cb
  4018ac:	004018d1 	.word	0x004018d1
  4018b0:	004018d7 	.word	0x004018d7
  4018b4:	004018db 	.word	0x004018db
  4018b8:	004018df 	.word	0x004018df
  4018bc:	004018e3 	.word	0x004018e3
  4018c0:	004018e7 	.word	0x004018e7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4018c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4018c8:	e010      	b.n	4018ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4018ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4018ce:	e00d      	b.n	4018ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4018d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4018d4:	e00a      	b.n	4018ec <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4018d6:	4b08      	ldr	r3, [pc, #32]	; (4018f8 <osc_get_rate+0x68>)
  4018d8:	e008      	b.n	4018ec <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4018da:	4b08      	ldr	r3, [pc, #32]	; (4018fc <osc_get_rate+0x6c>)
  4018dc:	e006      	b.n	4018ec <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4018de:	4b08      	ldr	r3, [pc, #32]	; (401900 <osc_get_rate+0x70>)
  4018e0:	e004      	b.n	4018ec <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4018e2:	4b07      	ldr	r3, [pc, #28]	; (401900 <osc_get_rate+0x70>)
  4018e4:	e002      	b.n	4018ec <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4018e6:	4b06      	ldr	r3, [pc, #24]	; (401900 <osc_get_rate+0x70>)
  4018e8:	e000      	b.n	4018ec <osc_get_rate+0x5c>
	}

	return 0;
  4018ea:	2300      	movs	r3, #0
}
  4018ec:	4618      	mov	r0, r3
  4018ee:	370c      	adds	r7, #12
  4018f0:	46bd      	mov	sp, r7
  4018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018f6:	4770      	bx	lr
  4018f8:	003d0900 	.word	0x003d0900
  4018fc:	007a1200 	.word	0x007a1200
  401900:	00b71b00 	.word	0x00b71b00

00401904 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401904:	b580      	push	{r7, lr}
  401906:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401908:	2006      	movs	r0, #6
  40190a:	4b05      	ldr	r3, [pc, #20]	; (401920 <sysclk_get_main_hz+0x1c>)
  40190c:	4798      	blx	r3
  40190e:	4602      	mov	r2, r0
  401910:	4613      	mov	r3, r2
  401912:	009b      	lsls	r3, r3, #2
  401914:	4413      	add	r3, r2
  401916:	009a      	lsls	r2, r3, #2
  401918:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40191a:	4618      	mov	r0, r3
  40191c:	bd80      	pop	{r7, pc}
  40191e:	bf00      	nop
  401920:	00401891 	.word	0x00401891

00401924 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401924:	b580      	push	{r7, lr}
  401926:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401928:	4b02      	ldr	r3, [pc, #8]	; (401934 <sysclk_get_cpu_hz+0x10>)
  40192a:	4798      	blx	r3
  40192c:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40192e:	4618      	mov	r0, r3
  401930:	bd80      	pop	{r7, pc}
  401932:	bf00      	nop
  401934:	00401905 	.word	0x00401905

00401938 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  401938:	b580      	push	{r7, lr}
  40193a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40193c:	4b02      	ldr	r3, [pc, #8]	; (401948 <sysclk_get_peripheral_hz+0x10>)
  40193e:	4798      	blx	r3
  401940:	4603      	mov	r3, r0
  401942:	085b      	lsrs	r3, r3, #1
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  401944:	4618      	mov	r0, r3
  401946:	bd80      	pop	{r7, pc}
  401948:	00401905 	.word	0x00401905

0040194c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40194c:	b580      	push	{r7, lr}
  40194e:	b082      	sub	sp, #8
  401950:	af00      	add	r7, sp, #0
  401952:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401954:	6878      	ldr	r0, [r7, #4]
  401956:	4b03      	ldr	r3, [pc, #12]	; (401964 <sysclk_enable_peripheral_clock+0x18>)
  401958:	4798      	blx	r3
}
  40195a:	bf00      	nop
  40195c:	3708      	adds	r7, #8
  40195e:	46bd      	mov	sp, r7
  401960:	bd80      	pop	{r7, pc}
  401962:	bf00      	nop
  401964:	00400b55 	.word	0x00400b55

00401968 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  401968:	b580      	push	{r7, lr}
  40196a:	b082      	sub	sp, #8
  40196c:	af00      	add	r7, sp, #0
  40196e:	6078      	str	r0, [r7, #4]
  401970:	460b      	mov	r3, r1
  401972:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401974:	687b      	ldr	r3, [r7, #4]
  401976:	4a36      	ldr	r2, [pc, #216]	; (401a50 <usart_serial_putchar+0xe8>)
  401978:	4293      	cmp	r3, r2
  40197a:	d10a      	bne.n	401992 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  40197c:	bf00      	nop
  40197e:	78fb      	ldrb	r3, [r7, #3]
  401980:	4619      	mov	r1, r3
  401982:	6878      	ldr	r0, [r7, #4]
  401984:	4b33      	ldr	r3, [pc, #204]	; (401a54 <usart_serial_putchar+0xec>)
  401986:	4798      	blx	r3
  401988:	4603      	mov	r3, r0
  40198a:	2b00      	cmp	r3, #0
  40198c:	d1f7      	bne.n	40197e <usart_serial_putchar+0x16>
		return 1;
  40198e:	2301      	movs	r3, #1
  401990:	e05a      	b.n	401a48 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401992:	687b      	ldr	r3, [r7, #4]
  401994:	4a30      	ldr	r2, [pc, #192]	; (401a58 <usart_serial_putchar+0xf0>)
  401996:	4293      	cmp	r3, r2
  401998:	d10a      	bne.n	4019b0 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40199a:	bf00      	nop
  40199c:	78fb      	ldrb	r3, [r7, #3]
  40199e:	4619      	mov	r1, r3
  4019a0:	6878      	ldr	r0, [r7, #4]
  4019a2:	4b2c      	ldr	r3, [pc, #176]	; (401a54 <usart_serial_putchar+0xec>)
  4019a4:	4798      	blx	r3
  4019a6:	4603      	mov	r3, r0
  4019a8:	2b00      	cmp	r3, #0
  4019aa:	d1f7      	bne.n	40199c <usart_serial_putchar+0x34>
		return 1;
  4019ac:	2301      	movs	r3, #1
  4019ae:	e04b      	b.n	401a48 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4019b0:	687b      	ldr	r3, [r7, #4]
  4019b2:	4a2a      	ldr	r2, [pc, #168]	; (401a5c <usart_serial_putchar+0xf4>)
  4019b4:	4293      	cmp	r3, r2
  4019b6:	d10a      	bne.n	4019ce <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  4019b8:	bf00      	nop
  4019ba:	78fb      	ldrb	r3, [r7, #3]
  4019bc:	4619      	mov	r1, r3
  4019be:	6878      	ldr	r0, [r7, #4]
  4019c0:	4b24      	ldr	r3, [pc, #144]	; (401a54 <usart_serial_putchar+0xec>)
  4019c2:	4798      	blx	r3
  4019c4:	4603      	mov	r3, r0
  4019c6:	2b00      	cmp	r3, #0
  4019c8:	d1f7      	bne.n	4019ba <usart_serial_putchar+0x52>
		return 1;
  4019ca:	2301      	movs	r3, #1
  4019cc:	e03c      	b.n	401a48 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4019ce:	687b      	ldr	r3, [r7, #4]
  4019d0:	4a23      	ldr	r2, [pc, #140]	; (401a60 <usart_serial_putchar+0xf8>)
  4019d2:	4293      	cmp	r3, r2
  4019d4:	d10a      	bne.n	4019ec <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  4019d6:	bf00      	nop
  4019d8:	78fb      	ldrb	r3, [r7, #3]
  4019da:	4619      	mov	r1, r3
  4019dc:	6878      	ldr	r0, [r7, #4]
  4019de:	4b1d      	ldr	r3, [pc, #116]	; (401a54 <usart_serial_putchar+0xec>)
  4019e0:	4798      	blx	r3
  4019e2:	4603      	mov	r3, r0
  4019e4:	2b00      	cmp	r3, #0
  4019e6:	d1f7      	bne.n	4019d8 <usart_serial_putchar+0x70>
		return 1;
  4019e8:	2301      	movs	r3, #1
  4019ea:	e02d      	b.n	401a48 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4019ec:	687b      	ldr	r3, [r7, #4]
  4019ee:	4a1d      	ldr	r2, [pc, #116]	; (401a64 <usart_serial_putchar+0xfc>)
  4019f0:	4293      	cmp	r3, r2
  4019f2:	d10a      	bne.n	401a0a <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  4019f4:	bf00      	nop
  4019f6:	78fb      	ldrb	r3, [r7, #3]
  4019f8:	4619      	mov	r1, r3
  4019fa:	6878      	ldr	r0, [r7, #4]
  4019fc:	4b1a      	ldr	r3, [pc, #104]	; (401a68 <usart_serial_putchar+0x100>)
  4019fe:	4798      	blx	r3
  401a00:	4603      	mov	r3, r0
  401a02:	2b00      	cmp	r3, #0
  401a04:	d1f7      	bne.n	4019f6 <usart_serial_putchar+0x8e>
		return 1;
  401a06:	2301      	movs	r3, #1
  401a08:	e01e      	b.n	401a48 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401a0a:	687b      	ldr	r3, [r7, #4]
  401a0c:	4a17      	ldr	r2, [pc, #92]	; (401a6c <usart_serial_putchar+0x104>)
  401a0e:	4293      	cmp	r3, r2
  401a10:	d10a      	bne.n	401a28 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  401a12:	bf00      	nop
  401a14:	78fb      	ldrb	r3, [r7, #3]
  401a16:	4619      	mov	r1, r3
  401a18:	6878      	ldr	r0, [r7, #4]
  401a1a:	4b13      	ldr	r3, [pc, #76]	; (401a68 <usart_serial_putchar+0x100>)
  401a1c:	4798      	blx	r3
  401a1e:	4603      	mov	r3, r0
  401a20:	2b00      	cmp	r3, #0
  401a22:	d1f7      	bne.n	401a14 <usart_serial_putchar+0xac>
		return 1;
  401a24:	2301      	movs	r3, #1
  401a26:	e00f      	b.n	401a48 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401a28:	687b      	ldr	r3, [r7, #4]
  401a2a:	4a11      	ldr	r2, [pc, #68]	; (401a70 <usart_serial_putchar+0x108>)
  401a2c:	4293      	cmp	r3, r2
  401a2e:	d10a      	bne.n	401a46 <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  401a30:	bf00      	nop
  401a32:	78fb      	ldrb	r3, [r7, #3]
  401a34:	4619      	mov	r1, r3
  401a36:	6878      	ldr	r0, [r7, #4]
  401a38:	4b0b      	ldr	r3, [pc, #44]	; (401a68 <usart_serial_putchar+0x100>)
  401a3a:	4798      	blx	r3
  401a3c:	4603      	mov	r3, r0
  401a3e:	2b00      	cmp	r3, #0
  401a40:	d1f7      	bne.n	401a32 <usart_serial_putchar+0xca>
		return 1;
  401a42:	2301      	movs	r3, #1
  401a44:	e000      	b.n	401a48 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  401a46:	2300      	movs	r3, #0
}
  401a48:	4618      	mov	r0, r3
  401a4a:	3708      	adds	r7, #8
  401a4c:	46bd      	mov	sp, r7
  401a4e:	bd80      	pop	{r7, pc}
  401a50:	400e0800 	.word	0x400e0800
  401a54:	0040110d 	.word	0x0040110d
  401a58:	400e0a00 	.word	0x400e0a00
  401a5c:	400e1a00 	.word	0x400e1a00
  401a60:	400e1c00 	.word	0x400e1c00
  401a64:	40024000 	.word	0x40024000
  401a68:	0040137d 	.word	0x0040137d
  401a6c:	40028000 	.word	0x40028000
  401a70:	4002c000 	.word	0x4002c000

00401a74 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401a74:	b580      	push	{r7, lr}
  401a76:	b084      	sub	sp, #16
  401a78:	af00      	add	r7, sp, #0
  401a7a:	6078      	str	r0, [r7, #4]
  401a7c:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  401a7e:	2300      	movs	r3, #0
  401a80:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401a82:	687b      	ldr	r3, [r7, #4]
  401a84:	4a34      	ldr	r2, [pc, #208]	; (401b58 <usart_serial_getchar+0xe4>)
  401a86:	4293      	cmp	r3, r2
  401a88:	d107      	bne.n	401a9a <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  401a8a:	bf00      	nop
  401a8c:	6839      	ldr	r1, [r7, #0]
  401a8e:	6878      	ldr	r0, [r7, #4]
  401a90:	4b32      	ldr	r3, [pc, #200]	; (401b5c <usart_serial_getchar+0xe8>)
  401a92:	4798      	blx	r3
  401a94:	4603      	mov	r3, r0
  401a96:	2b00      	cmp	r3, #0
  401a98:	d1f8      	bne.n	401a8c <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401a9a:	687b      	ldr	r3, [r7, #4]
  401a9c:	4a30      	ldr	r2, [pc, #192]	; (401b60 <usart_serial_getchar+0xec>)
  401a9e:	4293      	cmp	r3, r2
  401aa0:	d107      	bne.n	401ab2 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  401aa2:	bf00      	nop
  401aa4:	6839      	ldr	r1, [r7, #0]
  401aa6:	6878      	ldr	r0, [r7, #4]
  401aa8:	4b2c      	ldr	r3, [pc, #176]	; (401b5c <usart_serial_getchar+0xe8>)
  401aaa:	4798      	blx	r3
  401aac:	4603      	mov	r3, r0
  401aae:	2b00      	cmp	r3, #0
  401ab0:	d1f8      	bne.n	401aa4 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401ab2:	687b      	ldr	r3, [r7, #4]
  401ab4:	4a2b      	ldr	r2, [pc, #172]	; (401b64 <usart_serial_getchar+0xf0>)
  401ab6:	4293      	cmp	r3, r2
  401ab8:	d107      	bne.n	401aca <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  401aba:	bf00      	nop
  401abc:	6839      	ldr	r1, [r7, #0]
  401abe:	6878      	ldr	r0, [r7, #4]
  401ac0:	4b26      	ldr	r3, [pc, #152]	; (401b5c <usart_serial_getchar+0xe8>)
  401ac2:	4798      	blx	r3
  401ac4:	4603      	mov	r3, r0
  401ac6:	2b00      	cmp	r3, #0
  401ac8:	d1f8      	bne.n	401abc <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401aca:	687b      	ldr	r3, [r7, #4]
  401acc:	4a26      	ldr	r2, [pc, #152]	; (401b68 <usart_serial_getchar+0xf4>)
  401ace:	4293      	cmp	r3, r2
  401ad0:	d107      	bne.n	401ae2 <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  401ad2:	bf00      	nop
  401ad4:	6839      	ldr	r1, [r7, #0]
  401ad6:	6878      	ldr	r0, [r7, #4]
  401ad8:	4b20      	ldr	r3, [pc, #128]	; (401b5c <usart_serial_getchar+0xe8>)
  401ada:	4798      	blx	r3
  401adc:	4603      	mov	r3, r0
  401ade:	2b00      	cmp	r3, #0
  401ae0:	d1f8      	bne.n	401ad4 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401ae2:	687b      	ldr	r3, [r7, #4]
  401ae4:	4a21      	ldr	r2, [pc, #132]	; (401b6c <usart_serial_getchar+0xf8>)
  401ae6:	4293      	cmp	r3, r2
  401ae8:	d10d      	bne.n	401b06 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  401aea:	bf00      	nop
  401aec:	f107 030c 	add.w	r3, r7, #12
  401af0:	4619      	mov	r1, r3
  401af2:	6878      	ldr	r0, [r7, #4]
  401af4:	4b1e      	ldr	r3, [pc, #120]	; (401b70 <usart_serial_getchar+0xfc>)
  401af6:	4798      	blx	r3
  401af8:	4603      	mov	r3, r0
  401afa:	2b00      	cmp	r3, #0
  401afc:	d1f6      	bne.n	401aec <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  401afe:	68fb      	ldr	r3, [r7, #12]
  401b00:	b2da      	uxtb	r2, r3
  401b02:	683b      	ldr	r3, [r7, #0]
  401b04:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401b06:	687b      	ldr	r3, [r7, #4]
  401b08:	4a1a      	ldr	r2, [pc, #104]	; (401b74 <usart_serial_getchar+0x100>)
  401b0a:	4293      	cmp	r3, r2
  401b0c:	d10d      	bne.n	401b2a <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  401b0e:	bf00      	nop
  401b10:	f107 030c 	add.w	r3, r7, #12
  401b14:	4619      	mov	r1, r3
  401b16:	6878      	ldr	r0, [r7, #4]
  401b18:	4b15      	ldr	r3, [pc, #84]	; (401b70 <usart_serial_getchar+0xfc>)
  401b1a:	4798      	blx	r3
  401b1c:	4603      	mov	r3, r0
  401b1e:	2b00      	cmp	r3, #0
  401b20:	d1f6      	bne.n	401b10 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  401b22:	68fb      	ldr	r3, [r7, #12]
  401b24:	b2da      	uxtb	r2, r3
  401b26:	683b      	ldr	r3, [r7, #0]
  401b28:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401b2a:	687b      	ldr	r3, [r7, #4]
  401b2c:	4a12      	ldr	r2, [pc, #72]	; (401b78 <usart_serial_getchar+0x104>)
  401b2e:	4293      	cmp	r3, r2
  401b30:	d10d      	bne.n	401b4e <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  401b32:	bf00      	nop
  401b34:	f107 030c 	add.w	r3, r7, #12
  401b38:	4619      	mov	r1, r3
  401b3a:	6878      	ldr	r0, [r7, #4]
  401b3c:	4b0c      	ldr	r3, [pc, #48]	; (401b70 <usart_serial_getchar+0xfc>)
  401b3e:	4798      	blx	r3
  401b40:	4603      	mov	r3, r0
  401b42:	2b00      	cmp	r3, #0
  401b44:	d1f6      	bne.n	401b34 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  401b46:	68fb      	ldr	r3, [r7, #12]
  401b48:	b2da      	uxtb	r2, r3
  401b4a:	683b      	ldr	r3, [r7, #0]
  401b4c:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401b4e:	bf00      	nop
  401b50:	3710      	adds	r7, #16
  401b52:	46bd      	mov	sp, r7
  401b54:	bd80      	pop	{r7, pc}
  401b56:	bf00      	nop
  401b58:	400e0800 	.word	0x400e0800
  401b5c:	0040113d 	.word	0x0040113d
  401b60:	400e0a00 	.word	0x400e0a00
  401b64:	400e1a00 	.word	0x400e1a00
  401b68:	400e1c00 	.word	0x400e1c00
  401b6c:	40024000 	.word	0x40024000
  401b70:	004013b1 	.word	0x004013b1
  401b74:	40028000 	.word	0x40028000
  401b78:	4002c000 	.word	0x4002c000

00401b7c <TC1_Handler>:
/* Handlers                                                             */
/************************************************************************/
/**
 *  Interrupt handler for TC1 interrupt. 
 */
void TC1_Handler(void){
  401b7c:	b580      	push	{r7, lr}
  401b7e:	b082      	sub	sp, #8
  401b80:	af00      	add	r7, sp, #0
	volatile uint32_t ul_dummy;

    /****************************************************************
	* Devemos indicar ao TC que a interrupção foi satisfeita.
    ******************************************************************/
	ul_dummy = tc_get_status(TC0, 1);
  401b82:	2101      	movs	r1, #1
  401b84:	4809      	ldr	r0, [pc, #36]	; (401bac <TC1_Handler+0x30>)
  401b86:	4b0a      	ldr	r3, [pc, #40]	; (401bb0 <TC1_Handler+0x34>)
  401b88:	4798      	blx	r3
  401b8a:	4603      	mov	r3, r0
  401b8c:	607b      	str	r3, [r7, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  401b8e:	687b      	ldr	r3, [r7, #4]

	/** Muda o estado do LED */
    if(flag_led0)
  401b90:	4b08      	ldr	r3, [pc, #32]	; (401bb4 <TC1_Handler+0x38>)
  401b92:	781b      	ldrb	r3, [r3, #0]
  401b94:	b2db      	uxtb	r3, r3
  401b96:	2b00      	cmp	r3, #0
  401b98:	d004      	beq.n	401ba4 <TC1_Handler+0x28>
        pin_toggle(LED_PIO, LED_PIN_MASK);
  401b9a:	f44f 7180 	mov.w	r1, #256	; 0x100
  401b9e:	4806      	ldr	r0, [pc, #24]	; (401bb8 <TC1_Handler+0x3c>)
  401ba0:	4b06      	ldr	r3, [pc, #24]	; (401bbc <TC1_Handler+0x40>)
  401ba2:	4798      	blx	r3
		 
}
  401ba4:	bf00      	nop
  401ba6:	3708      	adds	r7, #8
  401ba8:	46bd      	mov	sp, r7
  401baa:	bd80      	pop	{r7, pc}
  401bac:	4000c000 	.word	0x4000c000
  401bb0:	00401019 	.word	0x00401019
  401bb4:	20400910 	.word	0x20400910
  401bb8:	400e1200 	.word	0x400e1200
  401bbc:	00401e19 	.word	0x00401e19

00401bc0 <RTC_Handler>:

/**
 * \brief Interrupt handler for the RTC. Refresh the display.
 */
void RTC_Handler(void)
{
  401bc0:	b580      	push	{r7, lr}
  401bc2:	b082      	sub	sp, #8
  401bc4:	af00      	add	r7, sp, #0
	uint32_t ul_status = rtc_get_status(RTC);
  401bc6:	480f      	ldr	r0, [pc, #60]	; (401c04 <RTC_Handler+0x44>)
  401bc8:	4b0f      	ldr	r3, [pc, #60]	; (401c08 <RTC_Handler+0x48>)
  401bca:	4798      	blx	r3
  401bcc:	6078      	str	r0, [r7, #4]

	/* Second increment interrupt */
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  401bce:	687b      	ldr	r3, [r7, #4]
  401bd0:	f003 0304 	and.w	r3, r3, #4
  401bd4:	2b00      	cmp	r3, #0
  401bd6:	d004      	beq.n	401be2 <RTC_Handler+0x22>
	
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  401bd8:	2104      	movs	r1, #4
  401bda:	480a      	ldr	r0, [pc, #40]	; (401c04 <RTC_Handler+0x44>)
  401bdc:	4b0b      	ldr	r3, [pc, #44]	; (401c0c <RTC_Handler+0x4c>)
  401bde:	4798      	blx	r3
      flag_led0 = 0;    
       
			rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
		}
	}
}
  401be0:	e00b      	b.n	401bfa <RTC_Handler+0x3a>
	
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);

	} else {
		/* Time or date alarm */
		if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  401be2:	687b      	ldr	r3, [r7, #4]
  401be4:	f003 0302 	and.w	r3, r3, #2
  401be8:	2b00      	cmp	r3, #0
  401bea:	d006      	beq.n	401bfa <RTC_Handler+0x3a>
      flag_led0 = 0;    
  401bec:	4b08      	ldr	r3, [pc, #32]	; (401c10 <RTC_Handler+0x50>)
  401bee:	2200      	movs	r2, #0
  401bf0:	701a      	strb	r2, [r3, #0]
       
			rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  401bf2:	2102      	movs	r1, #2
  401bf4:	4803      	ldr	r0, [pc, #12]	; (401c04 <RTC_Handler+0x44>)
  401bf6:	4b05      	ldr	r3, [pc, #20]	; (401c0c <RTC_Handler+0x4c>)
  401bf8:	4798      	blx	r3
		}
	}
}
  401bfa:	bf00      	nop
  401bfc:	3708      	adds	r7, #8
  401bfe:	46bd      	mov	sp, r7
  401c00:	bd80      	pop	{r7, pc}
  401c02:	bf00      	nop
  401c04:	400e1860 	.word	0x400e1860
  401c08:	00400f35 	.word	0x00400f35
  401c0c:	00400f4d 	.word	0x00400f4d
  401c10:	20400910 	.word	0x20400910

00401c14 <LED_init>:
/************************************************************************/

/**
 * @Brief Inicializa o pino do LED
 */
void LED_init(int estado){
  401c14:	b590      	push	{r4, r7, lr}
  401c16:	b085      	sub	sp, #20
  401c18:	af02      	add	r7, sp, #8
  401c1a:	6078      	str	r0, [r7, #4]
    pmc_enable_periph_clk(LED_PIO_ID);
  401c1c:	200c      	movs	r0, #12
  401c1e:	4b07      	ldr	r3, [pc, #28]	; (401c3c <LED_init+0x28>)
  401c20:	4798      	blx	r3
    pio_set_output(LED_PIO, LED_PIN_MASK, estado, 0, 0 );
  401c22:	687a      	ldr	r2, [r7, #4]
  401c24:	2300      	movs	r3, #0
  401c26:	9300      	str	r3, [sp, #0]
  401c28:	2300      	movs	r3, #0
  401c2a:	f44f 7180 	mov.w	r1, #256	; 0x100
  401c2e:	4804      	ldr	r0, [pc, #16]	; (401c40 <LED_init+0x2c>)
  401c30:	4c04      	ldr	r4, [pc, #16]	; (401c44 <LED_init+0x30>)
  401c32:	47a0      	blx	r4
};
  401c34:	bf00      	nop
  401c36:	370c      	adds	r7, #12
  401c38:	46bd      	mov	sp, r7
  401c3a:	bd90      	pop	{r4, r7, pc}
  401c3c:	00400b55 	.word	0x00400b55
  401c40:	400e1200 	.word	0x400e1200
  401c44:	0040068d 	.word	0x0040068d

00401c48 <TC1_init>:

/**
 * Configura TimerCounter (TC0) para gerar uma interrupcao no canal 0-(ID_TC1) 
 * a cada 250 ms (4Hz)
 */
void TC1_init(int freq_TC){   
  401c48:	b590      	push	{r4, r7, lr}
  401c4a:	b089      	sub	sp, #36	; 0x24
  401c4c:	af02      	add	r7, sp, #8
  401c4e:	6078      	str	r0, [r7, #4]
    uint32_t ul_div;
    uint32_t ul_tcclks;
    uint32_t ul_sysclk = sysclk_get_cpu_hz();
  401c50:	4b1b      	ldr	r3, [pc, #108]	; (401cc0 <TC1_init+0x78>)
  401c52:	4798      	blx	r3
  401c54:	6178      	str	r0, [r7, #20]
    
    uint32_t channel = 1;
  401c56:	2301      	movs	r3, #1
  401c58:	613b      	str	r3, [r7, #16]
    
    /* Configura o PMC */
    pmc_enable_periph_clk(ID_TC1);    
  401c5a:	2018      	movs	r0, #24
  401c5c:	4b19      	ldr	r3, [pc, #100]	; (401cc4 <TC1_init+0x7c>)
  401c5e:	4798      	blx	r3
	
	//int freq_TC=4;//4Hz (4 vezes pos segundo led pisca)
    
	/** Configura o TC para operar em  4Mhz e interrupçcão no RC compare */
    tc_find_mck_divisor(freq_TC, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401c60:	6878      	ldr	r0, [r7, #4]
  401c62:	f107 0108 	add.w	r1, r7, #8
  401c66:	f107 020c 	add.w	r2, r7, #12
  401c6a:	697b      	ldr	r3, [r7, #20]
  401c6c:	9300      	str	r3, [sp, #0]
  401c6e:	460b      	mov	r3, r1
  401c70:	6979      	ldr	r1, [r7, #20]
  401c72:	4c15      	ldr	r4, [pc, #84]	; (401cc8 <TC1_init+0x80>)
  401c74:	47a0      	blx	r4
    tc_init(TC0, channel, ul_tcclks | TC_CMR_CPCTRG);
  401c76:	68bb      	ldr	r3, [r7, #8]
  401c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  401c7c:	461a      	mov	r2, r3
  401c7e:	6939      	ldr	r1, [r7, #16]
  401c80:	4812      	ldr	r0, [pc, #72]	; (401ccc <TC1_init+0x84>)
  401c82:	4b13      	ldr	r3, [pc, #76]	; (401cd0 <TC1_init+0x88>)
  401c84:	4798      	blx	r3
    tc_write_rc(TC0, channel, (ul_sysclk / ul_div) / freq_TC);
  401c86:	68fb      	ldr	r3, [r7, #12]
  401c88:	697a      	ldr	r2, [r7, #20]
  401c8a:	fbb2 f2f3 	udiv	r2, r2, r3
  401c8e:	687b      	ldr	r3, [r7, #4]
  401c90:	fbb2 f3f3 	udiv	r3, r2, r3
  401c94:	461a      	mov	r2, r3
  401c96:	6939      	ldr	r1, [r7, #16]
  401c98:	480c      	ldr	r0, [pc, #48]	; (401ccc <TC1_init+0x84>)
  401c9a:	4b0e      	ldr	r3, [pc, #56]	; (401cd4 <TC1_init+0x8c>)
  401c9c:	4798      	blx	r3

    /* Configura e ativa interrupçcão no TC canal 0 */
    NVIC_EnableIRQ((IRQn_Type) ID_TC1);
  401c9e:	2018      	movs	r0, #24
  401ca0:	4b0d      	ldr	r3, [pc, #52]	; (401cd8 <TC1_init+0x90>)
  401ca2:	4798      	blx	r3
    tc_enable_interrupt(TC0, channel, TC_IER_CPCS);
  401ca4:	2210      	movs	r2, #16
  401ca6:	6939      	ldr	r1, [r7, #16]
  401ca8:	4808      	ldr	r0, [pc, #32]	; (401ccc <TC1_init+0x84>)
  401caa:	4b0c      	ldr	r3, [pc, #48]	; (401cdc <TC1_init+0x94>)
  401cac:	4798      	blx	r3

    /* Inicializa o canal 0 do TC */
    tc_start(TC0, channel);
  401cae:	6939      	ldr	r1, [r7, #16]
  401cb0:	4806      	ldr	r0, [pc, #24]	; (401ccc <TC1_init+0x84>)
  401cb2:	4b0b      	ldr	r3, [pc, #44]	; (401ce0 <TC1_init+0x98>)
  401cb4:	4798      	blx	r3
}
  401cb6:	bf00      	nop
  401cb8:	371c      	adds	r7, #28
  401cba:	46bd      	mov	sp, r7
  401cbc:	bd90      	pop	{r4, r7, pc}
  401cbe:	bf00      	nop
  401cc0:	00401925 	.word	0x00401925
  401cc4:	00400b55 	.word	0x00400b55
  401cc8:	0040103d 	.word	0x0040103d
  401ccc:	4000c000 	.word	0x4000c000
  401cd0:	00400f69 	.word	0x00400f69
  401cd4:	00400fc9 	.word	0x00400fc9
  401cd8:	004017a1 	.word	0x004017a1
  401cdc:	00400ff1 	.word	0x00400ff1
  401ce0:	00400fa5 	.word	0x00400fa5

00401ce4 <RTC_init>:

/**
 * Configura o RTC para funcionar com interrupcao de alarme
 */
void RTC_init(){
  401ce4:	b590      	push	{r4, r7, lr}
  401ce6:	b083      	sub	sp, #12
  401ce8:	af02      	add	r7, sp, #8
    /* Configura o PMC */
    pmc_enable_periph_clk(ID_RTC);
  401cea:	2002      	movs	r0, #2
  401cec:	4b14      	ldr	r3, [pc, #80]	; (401d40 <RTC_init+0x5c>)
  401cee:	4798      	blx	r3
        
    /* Default RTC configuration, 24-hour mode */
    rtc_set_hour_mode(RTC, 0);
  401cf0:	2100      	movs	r1, #0
  401cf2:	4814      	ldr	r0, [pc, #80]	; (401d44 <RTC_init+0x60>)
  401cf4:	4b14      	ldr	r3, [pc, #80]	; (401d48 <RTC_init+0x64>)
  401cf6:	4798      	blx	r3

    /* Configura data e hora manualmente */
    rtc_set_date(RTC, YEAR, MOUNTH, DAY, WEEK);
  401cf8:	230d      	movs	r3, #13
  401cfa:	9300      	str	r3, [sp, #0]
  401cfc:	2314      	movs	r3, #20
  401cfe:	2209      	movs	r2, #9
  401d00:	f240 71e1 	movw	r1, #2017	; 0x7e1
  401d04:	480f      	ldr	r0, [pc, #60]	; (401d44 <RTC_init+0x60>)
  401d06:	4c11      	ldr	r4, [pc, #68]	; (401d4c <RTC_init+0x68>)
  401d08:	47a0      	blx	r4
    rtc_set_time(RTC, HOUR, MINUTE, SECOND);
  401d0a:	2300      	movs	r3, #0
  401d0c:	2205      	movs	r2, #5
  401d0e:	2109      	movs	r1, #9
  401d10:	480c      	ldr	r0, [pc, #48]	; (401d44 <RTC_init+0x60>)
  401d12:	4c0f      	ldr	r4, [pc, #60]	; (401d50 <RTC_init+0x6c>)
  401d14:	47a0      	blx	r4

    /* Configure RTC interrupts */
	//NVIC chama os handlers
    NVIC_DisableIRQ(RTC_IRQn);
  401d16:	2002      	movs	r0, #2
  401d18:	4b0e      	ldr	r3, [pc, #56]	; (401d54 <RTC_init+0x70>)
  401d1a:	4798      	blx	r3
    NVIC_ClearPendingIRQ(RTC_IRQn);
  401d1c:	2002      	movs	r0, #2
  401d1e:	4b0e      	ldr	r3, [pc, #56]	; (401d58 <RTC_init+0x74>)
  401d20:	4798      	blx	r3
    NVIC_SetPriority(RTC_IRQn, 0);
  401d22:	2100      	movs	r1, #0
  401d24:	2002      	movs	r0, #2
  401d26:	4b0d      	ldr	r3, [pc, #52]	; (401d5c <RTC_init+0x78>)
  401d28:	4798      	blx	r3
    NVIC_EnableIRQ(RTC_IRQn);
  401d2a:	2002      	movs	r0, #2
  401d2c:	4b0c      	ldr	r3, [pc, #48]	; (401d60 <RTC_init+0x7c>)
  401d2e:	4798      	blx	r3
    
    /* Ativa interrupcao via alarme */
    rtc_enable_interrupt(RTC,  RTC_IER_ALREN); 
  401d30:	2102      	movs	r1, #2
  401d32:	4804      	ldr	r0, [pc, #16]	; (401d44 <RTC_init+0x60>)
  401d34:	4b0b      	ldr	r3, [pc, #44]	; (401d64 <RTC_init+0x80>)
  401d36:	4798      	blx	r3
	
}
  401d38:	bf00      	nop
  401d3a:	3704      	adds	r7, #4
  401d3c:	46bd      	mov	sp, r7
  401d3e:	bd90      	pop	{r4, r7, pc}
  401d40:	00400b55 	.word	0x00400b55
  401d44:	400e1860 	.word	0x400e1860
  401d48:	00400bd9 	.word	0x00400bd9
  401d4c:	00400df9 	.word	0x00400df9
  401d50:	00400cf1 	.word	0x00400cf1
  401d54:	004017d5 	.word	0x004017d5
  401d58:	00401809 	.word	0x00401809
  401d5c:	0040183d 	.word	0x0040183d
  401d60:	004017a1 	.word	0x004017a1
  401d64:	00400c11 	.word	0x00400c11

00401d68 <USART1_init>:
/**
 * \brief Configure USART peripheral
 */
static void USART1_init(void){
  401d68:	b580      	push	{r7, lr}
  401d6a:	b086      	sub	sp, #24
  401d6c:	af00      	add	r7, sp, #0

  /* Configura USART1 Pinos */
  sysclk_enable_peripheral_clock(ID_PIOB);
  401d6e:	200b      	movs	r0, #11
  401d70:	4b1f      	ldr	r3, [pc, #124]	; (401df0 <USART1_init+0x88>)
  401d72:	4798      	blx	r3
  sysclk_enable_peripheral_clock(ID_PIOA);
  401d74:	200a      	movs	r0, #10
  401d76:	4b1e      	ldr	r3, [pc, #120]	; (401df0 <USART1_init+0x88>)
  401d78:	4798      	blx	r3
  pio_set_peripheral(PIOB, PIO_PERIPH_D, PIO_PB4);  // RX
  401d7a:	2210      	movs	r2, #16
  401d7c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401d80:	481c      	ldr	r0, [pc, #112]	; (401df4 <USART1_init+0x8c>)
  401d82:	4b1d      	ldr	r3, [pc, #116]	; (401df8 <USART1_init+0x90>)
  401d84:	4798      	blx	r3
  pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA21); // TX
  401d86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401d8a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d8e:	481b      	ldr	r0, [pc, #108]	; (401dfc <USART1_init+0x94>)
  401d90:	4b19      	ldr	r3, [pc, #100]	; (401df8 <USART1_init+0x90>)
  401d92:	4798      	blx	r3
  MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401d94:	4a1a      	ldr	r2, [pc, #104]	; (401e00 <USART1_init+0x98>)
  401d96:	4b1a      	ldr	r3, [pc, #104]	; (401e00 <USART1_init+0x98>)
  401d98:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  401d9c:	f043 0310 	orr.w	r3, r3, #16
  401da0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

  /* Configura opcoes USART */
  const sam_usart_opt_t usart_settings = {
  401da4:	463b      	mov	r3, r7
  401da6:	2200      	movs	r2, #0
  401da8:	601a      	str	r2, [r3, #0]
  401daa:	605a      	str	r2, [r3, #4]
  401dac:	609a      	str	r2, [r3, #8]
  401dae:	60da      	str	r2, [r3, #12]
  401db0:	611a      	str	r2, [r3, #16]
  401db2:	615a      	str	r2, [r3, #20]
  401db4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401db8:	603b      	str	r3, [r7, #0]
  401dba:	23c0      	movs	r3, #192	; 0xc0
  401dbc:	607b      	str	r3, [r7, #4]
  401dbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401dc2:	60bb      	str	r3, [r7, #8]
    .stop_bits    = US_MR_NBSTOP_1_BIT    ,
    .channel_mode = US_MR_CHMODE_NORMAL
  };

  /* Ativa Clock periferico USART0 */
  sysclk_enable_peripheral_clock(USART_COM_ID);
  401dc4:	200e      	movs	r0, #14
  401dc6:	4b0a      	ldr	r3, [pc, #40]	; (401df0 <USART1_init+0x88>)
  401dc8:	4798      	blx	r3

  /* Configura USART para operar em modo RS232 */
  usart_init_rs232(USART_COM, &usart_settings, sysclk_get_peripheral_hz());
  401dca:	4b0e      	ldr	r3, [pc, #56]	; (401e04 <USART1_init+0x9c>)
  401dcc:	4798      	blx	r3
  401dce:	4602      	mov	r2, r0
  401dd0:	463b      	mov	r3, r7
  401dd2:	4619      	mov	r1, r3
  401dd4:	480c      	ldr	r0, [pc, #48]	; (401e08 <USART1_init+0xa0>)
  401dd6:	4b0d      	ldr	r3, [pc, #52]	; (401e0c <USART1_init+0xa4>)
  401dd8:	4798      	blx	r3

  /* Enable the receiver and transmitter. */
	usart_enable_tx(USART_COM);
  401dda:	480b      	ldr	r0, [pc, #44]	; (401e08 <USART1_init+0xa0>)
  401ddc:	4b0c      	ldr	r3, [pc, #48]	; (401e10 <USART1_init+0xa8>)
  401dde:	4798      	blx	r3
	usart_enable_rx(USART_COM);
  401de0:	4809      	ldr	r0, [pc, #36]	; (401e08 <USART1_init+0xa0>)
  401de2:	4b0c      	ldr	r3, [pc, #48]	; (401e14 <USART1_init+0xac>)
  401de4:	4798      	blx	r3
}
  401de6:	bf00      	nop
  401de8:	3718      	adds	r7, #24
  401dea:	46bd      	mov	sp, r7
  401dec:	bd80      	pop	{r7, pc}
  401dee:	bf00      	nop
  401df0:	0040194d 	.word	0x0040194d
  401df4:	400e1000 	.word	0x400e1000
  401df8:	0040057d 	.word	0x0040057d
  401dfc:	400e0e00 	.word	0x400e0e00
  401e00:	40088000 	.word	0x40088000
  401e04:	00401939 	.word	0x00401939
  401e08:	40028000 	.word	0x40028000
  401e0c:	00401251 	.word	0x00401251
  401e10:	004012d5 	.word	0x004012d5
  401e14:	0040130d 	.word	0x0040130d

00401e18 <pin_toggle>:

/** 
 *  Toggle pin controlado pelo PIO (out)
 */
void pin_toggle(Pio *pio, uint32_t mask){
  401e18:	b580      	push	{r7, lr}
  401e1a:	b082      	sub	sp, #8
  401e1c:	af00      	add	r7, sp, #0
  401e1e:	6078      	str	r0, [r7, #4]
  401e20:	6039      	str	r1, [r7, #0]
   if(pio_get_output_data_status(pio, mask))
  401e22:	6839      	ldr	r1, [r7, #0]
  401e24:	6878      	ldr	r0, [r7, #4]
  401e26:	4b09      	ldr	r3, [pc, #36]	; (401e4c <pin_toggle+0x34>)
  401e28:	4798      	blx	r3
  401e2a:	4603      	mov	r3, r0
  401e2c:	2b00      	cmp	r3, #0
  401e2e:	d004      	beq.n	401e3a <pin_toggle+0x22>
    pio_clear(pio, mask);
  401e30:	6839      	ldr	r1, [r7, #0]
  401e32:	6878      	ldr	r0, [r7, #4]
  401e34:	4b06      	ldr	r3, [pc, #24]	; (401e50 <pin_toggle+0x38>)
  401e36:	4798      	blx	r3
   else
    pio_set(pio,mask);
}
  401e38:	e003      	b.n	401e42 <pin_toggle+0x2a>
 */
void pin_toggle(Pio *pio, uint32_t mask){
   if(pio_get_output_data_status(pio, mask))
    pio_clear(pio, mask);
   else
    pio_set(pio,mask);
  401e3a:	6839      	ldr	r1, [r7, #0]
  401e3c:	6878      	ldr	r0, [r7, #4]
  401e3e:	4b05      	ldr	r3, [pc, #20]	; (401e54 <pin_toggle+0x3c>)
  401e40:	4798      	blx	r3
}
  401e42:	bf00      	nop
  401e44:	3708      	adds	r7, #8
  401e46:	46bd      	mov	sp, r7
  401e48:	bd80      	pop	{r7, pc}
  401e4a:	bf00      	nop
  401e4c:	004006f1 	.word	0x004006f1
  401e50:	00400561 	.word	0x00400561
  401e54:	00400545 	.word	0x00400545

00401e58 <usart_puts>:
};

/**
 *  Envia para o UART uma string
 */
uint32_t usart_puts(uint8_t *pstring){
  401e58:	b580      	push	{r7, lr}
  401e5a:	b084      	sub	sp, #16
  401e5c:	af00      	add	r7, sp, #0
  401e5e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0 ;
  401e60:	2300      	movs	r3, #0
  401e62:	60fb      	str	r3, [r7, #12]

  while(*(pstring + i)){
  401e64:	e010      	b.n	401e88 <usart_puts+0x30>
    usart_serial_putchar(USART_COM, *(pstring+i++));
  401e66:	68fb      	ldr	r3, [r7, #12]
  401e68:	1c5a      	adds	r2, r3, #1
  401e6a:	60fa      	str	r2, [r7, #12]
  401e6c:	687a      	ldr	r2, [r7, #4]
  401e6e:	4413      	add	r3, r2
  401e70:	781b      	ldrb	r3, [r3, #0]
  401e72:	4619      	mov	r1, r3
  401e74:	480a      	ldr	r0, [pc, #40]	; (401ea0 <usart_puts+0x48>)
  401e76:	4b0b      	ldr	r3, [pc, #44]	; (401ea4 <usart_puts+0x4c>)
  401e78:	4798      	blx	r3
    while(!uart_is_tx_empty(USART_COM)){};
  401e7a:	bf00      	nop
  401e7c:	4808      	ldr	r0, [pc, #32]	; (401ea0 <usart_puts+0x48>)
  401e7e:	4b0a      	ldr	r3, [pc, #40]	; (401ea8 <usart_puts+0x50>)
  401e80:	4798      	blx	r3
  401e82:	4603      	mov	r3, r0
  401e84:	2b00      	cmp	r3, #0
  401e86:	d0f9      	beq.n	401e7c <usart_puts+0x24>
 *  Envia para o UART uma string
 */
uint32_t usart_puts(uint8_t *pstring){
  uint32_t i = 0 ;

  while(*(pstring + i)){
  401e88:	687a      	ldr	r2, [r7, #4]
  401e8a:	68fb      	ldr	r3, [r7, #12]
  401e8c:	4413      	add	r3, r2
  401e8e:	781b      	ldrb	r3, [r3, #0]
  401e90:	2b00      	cmp	r3, #0
  401e92:	d1e8      	bne.n	401e66 <usart_puts+0xe>
    usart_serial_putchar(USART_COM, *(pstring+i++));
    while(!uart_is_tx_empty(USART_COM)){};
  }
  return(i);
  401e94:	68fb      	ldr	r3, [r7, #12]
}
  401e96:	4618      	mov	r0, r3
  401e98:	3710      	adds	r7, #16
  401e9a:	46bd      	mov	sp, r7
  401e9c:	bd80      	pop	{r7, pc}
  401e9e:	bf00      	nop
  401ea0:	40028000 	.word	0x40028000
  401ea4:	00401969 	.word	0x00401969
  401ea8:	004010e5 	.word	0x004010e5

00401eac <usart_gets>:

/**
 * Busca do UART uma mensagem enviada pelo computador terminada em \n
 */
uint32_t usart_gets(uint8_t *pstring){
  401eac:	b580      	push	{r7, lr}
  401eae:	b084      	sub	sp, #16
  401eb0:	af00      	add	r7, sp, #0
  401eb2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0 ;
  401eb4:	2300      	movs	r3, #0
  401eb6:	60fb      	str	r3, [r7, #12]
  usart_serial_getchar(USART_COM, (pstring+i));
  401eb8:	687a      	ldr	r2, [r7, #4]
  401eba:	68fb      	ldr	r3, [r7, #12]
  401ebc:	4413      	add	r3, r2
  401ebe:	4619      	mov	r1, r3
  401ec0:	480f      	ldr	r0, [pc, #60]	; (401f00 <usart_gets+0x54>)
  401ec2:	4b10      	ldr	r3, [pc, #64]	; (401f04 <usart_gets+0x58>)
  401ec4:	4798      	blx	r3
  while(*(pstring+i) != '\n'){
  401ec6:	e009      	b.n	401edc <usart_gets+0x30>
    usart_serial_getchar(USART_COM, (pstring+(++i)));
  401ec8:	68fb      	ldr	r3, [r7, #12]
  401eca:	3301      	adds	r3, #1
  401ecc:	60fb      	str	r3, [r7, #12]
  401ece:	687a      	ldr	r2, [r7, #4]
  401ed0:	68fb      	ldr	r3, [r7, #12]
  401ed2:	4413      	add	r3, r2
  401ed4:	4619      	mov	r1, r3
  401ed6:	480a      	ldr	r0, [pc, #40]	; (401f00 <usart_gets+0x54>)
  401ed8:	4b0a      	ldr	r3, [pc, #40]	; (401f04 <usart_gets+0x58>)
  401eda:	4798      	blx	r3
 * Busca do UART uma mensagem enviada pelo computador terminada em \n
 */
uint32_t usart_gets(uint8_t *pstring){
  uint32_t i = 0 ;
  usart_serial_getchar(USART_COM, (pstring+i));
  while(*(pstring+i) != '\n'){
  401edc:	687a      	ldr	r2, [r7, #4]
  401ede:	68fb      	ldr	r3, [r7, #12]
  401ee0:	4413      	add	r3, r2
  401ee2:	781b      	ldrb	r3, [r3, #0]
  401ee4:	2b0a      	cmp	r3, #10
  401ee6:	d1ef      	bne.n	401ec8 <usart_gets+0x1c>
    usart_serial_getchar(USART_COM, (pstring+(++i)));
  }
  *(pstring+i+1)= 0x00;
  401ee8:	68fb      	ldr	r3, [r7, #12]
  401eea:	3301      	adds	r3, #1
  401eec:	687a      	ldr	r2, [r7, #4]
  401eee:	4413      	add	r3, r2
  401ef0:	2200      	movs	r2, #0
  401ef2:	701a      	strb	r2, [r3, #0]
  return(i);
  401ef4:	68fb      	ldr	r3, [r7, #12]

}
  401ef6:	4618      	mov	r0, r3
  401ef8:	3710      	adds	r7, #16
  401efa:	46bd      	mov	sp, r7
  401efc:	bd80      	pop	{r7, pc}
  401efe:	bf00      	nop
  401f00:	40028000 	.word	0x40028000
  401f04:	00401a75 	.word	0x00401a75

00401f08 <main>:

/************************************************************************/
/* Main Code	                                                        */
/************************************************************************/
int main(void){
  401f08:	b590      	push	{r4, r7, lr}
  401f0a:	b08b      	sub	sp, #44	; 0x2c
  401f0c:	af02      	add	r7, sp, #8
	/* Initialize the SAM system */
	sysclk_init();
  401f0e:	4b33      	ldr	r3, [pc, #204]	; (401fdc <main+0xd4>)
  401f10:	4798      	blx	r3

	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401f12:	4b33      	ldr	r3, [pc, #204]	; (401fe0 <main+0xd8>)
  401f14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401f18:	605a      	str	r2, [r3, #4]
	
  /** Inicializa USART */
  USART1_init();
  401f1a:	4b32      	ldr	r3, [pc, #200]	; (401fe4 <main+0xdc>)
  401f1c:	4798      	blx	r3
  //ledConfig(1);
  
  /* Configura Leds */
    LED_init(1);
  401f1e:	2001      	movs	r0, #1
  401f20:	4b31      	ldr	r3, [pc, #196]	; (401fe8 <main+0xe0>)
  401f22:	4798      	blx	r3
    
	/** Configura timer 0 */
    TC1_init(4);//faz o led piscar em detrminada frequência
  401f24:	2004      	movs	r0, #4
  401f26:	4b31      	ldr	r3, [pc, #196]	; (401fec <main+0xe4>)
  401f28:	4798      	blx	r3
	
    /** Configura RTC */
    RTC_init();
  401f2a:	4b31      	ldr	r3, [pc, #196]	; (401ff0 <main+0xe8>)
  401f2c:	4798      	blx	r3
	
	
	char str[10];
	int freq_TC = 4;
  401f2e:	2304      	movs	r3, #4
  401f30:	61fb      	str	r3, [r7, #28]
	uint32_t hour;
	uint32_t minute;
	uint32_t second;
  /** Super loop */
	while (1) {
		usart_gets(str);
  401f32:	f107 0310 	add.w	r3, r7, #16
  401f36:	4618      	mov	r0, r3
  401f38:	4b2e      	ldr	r3, [pc, #184]	; (401ff4 <main+0xec>)
  401f3a:	4798      	blx	r3
		//usart_puts(str);
		
		if(str[0] == 'm'){
  401f3c:	7c3b      	ldrb	r3, [r7, #16]
  401f3e:	2b6d      	cmp	r3, #109	; 0x6d
  401f40:	d106      	bne.n	401f50 <main+0x48>
			usart_puts("Menu: m- aparece menu \n l-pisca led \n t-le hora atual \n o- desliga led \n a - aumenta frequência \n d - Diminui Frequência \n h - mostra a hora	  \n");
  401f42:	482d      	ldr	r0, [pc, #180]	; (401ff8 <main+0xf0>)
  401f44:	4b2d      	ldr	r3, [pc, #180]	; (401ffc <main+0xf4>)
  401f46:	4798      	blx	r3
			usart_puts(bufferRX);		
  401f48:	482d      	ldr	r0, [pc, #180]	; (402000 <main+0xf8>)
  401f4a:	4b2c      	ldr	r3, [pc, #176]	; (401ffc <main+0xf4>)
  401f4c:	4798      	blx	r3
  401f4e:	e7f0      	b.n	401f32 <main+0x2a>
		}
		
		else if (str[0] == 'l') {
  401f50:	7c3b      	ldrb	r3, [r7, #16]
  401f52:	2b6c      	cmp	r3, #108	; 0x6c
  401f54:	d106      	bne.n	401f64 <main+0x5c>
			usart_puts("Olhe! O LED pisca!!! \n");
  401f56:	482b      	ldr	r0, [pc, #172]	; (402004 <main+0xfc>)
  401f58:	4b28      	ldr	r3, [pc, #160]	; (401ffc <main+0xf4>)
  401f5a:	4798      	blx	r3
			flag_led0 = 1;
  401f5c:	4b2a      	ldr	r3, [pc, #168]	; (402008 <main+0x100>)
  401f5e:	2201      	movs	r2, #1
  401f60:	701a      	strb	r2, [r3, #0]
  401f62:	e7e6      	b.n	401f32 <main+0x2a>
		}
		
		else if (str[0] == 'o') {
  401f64:	7c3b      	ldrb	r3, [r7, #16]
  401f66:	2b6f      	cmp	r3, #111	; 0x6f
  401f68:	d106      	bne.n	401f78 <main+0x70>
			usart_puts("Parou de Piscar \n!");
  401f6a:	4828      	ldr	r0, [pc, #160]	; (40200c <main+0x104>)
  401f6c:	4b23      	ldr	r3, [pc, #140]	; (401ffc <main+0xf4>)
  401f6e:	4798      	blx	r3
			flag_led0 = 0;
  401f70:	4b25      	ldr	r3, [pc, #148]	; (402008 <main+0x100>)
  401f72:	2200      	movs	r2, #0
  401f74:	701a      	strb	r2, [r3, #0]
  401f76:	e7dc      	b.n	401f32 <main+0x2a>
		}
		
		else if (str[0] == 'a') {
  401f78:	7c3b      	ldrb	r3, [r7, #16]
  401f7a:	2b61      	cmp	r3, #97	; 0x61
  401f7c:	d109      	bne.n	401f92 <main+0x8a>
			usart_puts("Aumenta Freq \n!");
  401f7e:	4824      	ldr	r0, [pc, #144]	; (402010 <main+0x108>)
  401f80:	4b1e      	ldr	r3, [pc, #120]	; (401ffc <main+0xf4>)
  401f82:	4798      	blx	r3
			TC1_init(freq_TC+=2);
  401f84:	69fb      	ldr	r3, [r7, #28]
  401f86:	3302      	adds	r3, #2
  401f88:	61fb      	str	r3, [r7, #28]
  401f8a:	69f8      	ldr	r0, [r7, #28]
  401f8c:	4b17      	ldr	r3, [pc, #92]	; (401fec <main+0xe4>)
  401f8e:	4798      	blx	r3
  401f90:	e7cf      	b.n	401f32 <main+0x2a>
		}
		
		else if (str[0] == 'd') {
  401f92:	7c3b      	ldrb	r3, [r7, #16]
  401f94:	2b64      	cmp	r3, #100	; 0x64
  401f96:	d109      	bne.n	401fac <main+0xa4>
			usart_puts("Diminui Freq \n!");
  401f98:	481e      	ldr	r0, [pc, #120]	; (402014 <main+0x10c>)
  401f9a:	4b18      	ldr	r3, [pc, #96]	; (401ffc <main+0xf4>)
  401f9c:	4798      	blx	r3
			TC1_init(freq_TC-=2);
  401f9e:	69fb      	ldr	r3, [r7, #28]
  401fa0:	3b02      	subs	r3, #2
  401fa2:	61fb      	str	r3, [r7, #28]
  401fa4:	69f8      	ldr	r0, [r7, #28]
  401fa6:	4b11      	ldr	r3, [pc, #68]	; (401fec <main+0xe4>)
  401fa8:	4798      	blx	r3
  401faa:	e7c2      	b.n	401f32 <main+0x2a>
		}
		
		else if (str[0] == 'h') {
  401fac:	7c3b      	ldrb	r3, [r7, #16]
  401fae:	2b68      	cmp	r3, #104	; 0x68
  401fb0:	d1bf      	bne.n	401f32 <main+0x2a>
			//usart_puts("Horário \n!");
			rtc_get_time(RTC,&hour,&minute,&second);		
  401fb2:	1d3b      	adds	r3, r7, #4
  401fb4:	f107 0208 	add.w	r2, r7, #8
  401fb8:	f107 010c 	add.w	r1, r7, #12
  401fbc:	4816      	ldr	r0, [pc, #88]	; (402018 <main+0x110>)
  401fbe:	4c17      	ldr	r4, [pc, #92]	; (40201c <main+0x114>)
  401fc0:	47a0      	blx	r4
			sprintf(bufferTX, "%d : %d : %d \n",hour,minute,second);
  401fc2:	68fa      	ldr	r2, [r7, #12]
  401fc4:	68b9      	ldr	r1, [r7, #8]
  401fc6:	687b      	ldr	r3, [r7, #4]
  401fc8:	9300      	str	r3, [sp, #0]
  401fca:	460b      	mov	r3, r1
  401fcc:	4914      	ldr	r1, [pc, #80]	; (402020 <main+0x118>)
  401fce:	4815      	ldr	r0, [pc, #84]	; (402024 <main+0x11c>)
  401fd0:	4c15      	ldr	r4, [pc, #84]	; (402028 <main+0x120>)
  401fd2:	47a0      	blx	r4
			usart_puts(bufferTX);
  401fd4:	4813      	ldr	r0, [pc, #76]	; (402024 <main+0x11c>)
  401fd6:	4b09      	ldr	r3, [pc, #36]	; (401ffc <main+0xf4>)
  401fd8:	4798      	blx	r3
		}	
	}
  401fda:	e7aa      	b.n	401f32 <main+0x2a>
  401fdc:	0040049d 	.word	0x0040049d
  401fe0:	400e1850 	.word	0x400e1850
  401fe4:	00401d69 	.word	0x00401d69
  401fe8:	00401c15 	.word	0x00401c15
  401fec:	00401c49 	.word	0x00401c49
  401ff0:	00401ce5 	.word	0x00401ce5
  401ff4:	00401ead 	.word	0x00401ead
  401ff8:	00406bac 	.word	0x00406bac
  401ffc:	00401e59 	.word	0x00401e59
  402000:	2040094c 	.word	0x2040094c
  402004:	00406c40 	.word	0x00406c40
  402008:	20400910 	.word	0x20400910
  40200c:	00406c58 	.word	0x00406c58
  402010:	00406c6c 	.word	0x00406c6c
  402014:	00406c7c 	.word	0x00406c7c
  402018:	400e1860 	.word	0x400e1860
  40201c:	00400c2d 	.word	0x00400c2d
  402020:	00406c8c 	.word	0x00406c8c
  402024:	204009b0 	.word	0x204009b0
  402028:	00402119 	.word	0x00402119

0040202c <__libc_init_array>:
  40202c:	b570      	push	{r4, r5, r6, lr}
  40202e:	4e0f      	ldr	r6, [pc, #60]	; (40206c <__libc_init_array+0x40>)
  402030:	4d0f      	ldr	r5, [pc, #60]	; (402070 <__libc_init_array+0x44>)
  402032:	1b76      	subs	r6, r6, r5
  402034:	10b6      	asrs	r6, r6, #2
  402036:	bf18      	it	ne
  402038:	2400      	movne	r4, #0
  40203a:	d005      	beq.n	402048 <__libc_init_array+0x1c>
  40203c:	3401      	adds	r4, #1
  40203e:	f855 3b04 	ldr.w	r3, [r5], #4
  402042:	4798      	blx	r3
  402044:	42a6      	cmp	r6, r4
  402046:	d1f9      	bne.n	40203c <__libc_init_array+0x10>
  402048:	4e0a      	ldr	r6, [pc, #40]	; (402074 <__libc_init_array+0x48>)
  40204a:	4d0b      	ldr	r5, [pc, #44]	; (402078 <__libc_init_array+0x4c>)
  40204c:	1b76      	subs	r6, r6, r5
  40204e:	f004 fee9 	bl	406e24 <_init>
  402052:	10b6      	asrs	r6, r6, #2
  402054:	bf18      	it	ne
  402056:	2400      	movne	r4, #0
  402058:	d006      	beq.n	402068 <__libc_init_array+0x3c>
  40205a:	3401      	adds	r4, #1
  40205c:	f855 3b04 	ldr.w	r3, [r5], #4
  402060:	4798      	blx	r3
  402062:	42a6      	cmp	r6, r4
  402064:	d1f9      	bne.n	40205a <__libc_init_array+0x2e>
  402066:	bd70      	pop	{r4, r5, r6, pc}
  402068:	bd70      	pop	{r4, r5, r6, pc}
  40206a:	bf00      	nop
  40206c:	00406e30 	.word	0x00406e30
  402070:	00406e30 	.word	0x00406e30
  402074:	00406e38 	.word	0x00406e38
  402078:	00406e30 	.word	0x00406e30

0040207c <memset>:
  40207c:	b470      	push	{r4, r5, r6}
  40207e:	0784      	lsls	r4, r0, #30
  402080:	d046      	beq.n	402110 <memset+0x94>
  402082:	1e54      	subs	r4, r2, #1
  402084:	2a00      	cmp	r2, #0
  402086:	d041      	beq.n	40210c <memset+0x90>
  402088:	b2cd      	uxtb	r5, r1
  40208a:	4603      	mov	r3, r0
  40208c:	e002      	b.n	402094 <memset+0x18>
  40208e:	1e62      	subs	r2, r4, #1
  402090:	b3e4      	cbz	r4, 40210c <memset+0x90>
  402092:	4614      	mov	r4, r2
  402094:	f803 5b01 	strb.w	r5, [r3], #1
  402098:	079a      	lsls	r2, r3, #30
  40209a:	d1f8      	bne.n	40208e <memset+0x12>
  40209c:	2c03      	cmp	r4, #3
  40209e:	d92e      	bls.n	4020fe <memset+0x82>
  4020a0:	b2cd      	uxtb	r5, r1
  4020a2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4020a6:	2c0f      	cmp	r4, #15
  4020a8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4020ac:	d919      	bls.n	4020e2 <memset+0x66>
  4020ae:	f103 0210 	add.w	r2, r3, #16
  4020b2:	4626      	mov	r6, r4
  4020b4:	3e10      	subs	r6, #16
  4020b6:	2e0f      	cmp	r6, #15
  4020b8:	f842 5c10 	str.w	r5, [r2, #-16]
  4020bc:	f842 5c0c 	str.w	r5, [r2, #-12]
  4020c0:	f842 5c08 	str.w	r5, [r2, #-8]
  4020c4:	f842 5c04 	str.w	r5, [r2, #-4]
  4020c8:	f102 0210 	add.w	r2, r2, #16
  4020cc:	d8f2      	bhi.n	4020b4 <memset+0x38>
  4020ce:	f1a4 0210 	sub.w	r2, r4, #16
  4020d2:	f022 020f 	bic.w	r2, r2, #15
  4020d6:	f004 040f 	and.w	r4, r4, #15
  4020da:	3210      	adds	r2, #16
  4020dc:	2c03      	cmp	r4, #3
  4020de:	4413      	add	r3, r2
  4020e0:	d90d      	bls.n	4020fe <memset+0x82>
  4020e2:	461e      	mov	r6, r3
  4020e4:	4622      	mov	r2, r4
  4020e6:	3a04      	subs	r2, #4
  4020e8:	2a03      	cmp	r2, #3
  4020ea:	f846 5b04 	str.w	r5, [r6], #4
  4020ee:	d8fa      	bhi.n	4020e6 <memset+0x6a>
  4020f0:	1f22      	subs	r2, r4, #4
  4020f2:	f022 0203 	bic.w	r2, r2, #3
  4020f6:	3204      	adds	r2, #4
  4020f8:	4413      	add	r3, r2
  4020fa:	f004 0403 	and.w	r4, r4, #3
  4020fe:	b12c      	cbz	r4, 40210c <memset+0x90>
  402100:	b2c9      	uxtb	r1, r1
  402102:	441c      	add	r4, r3
  402104:	f803 1b01 	strb.w	r1, [r3], #1
  402108:	42a3      	cmp	r3, r4
  40210a:	d1fb      	bne.n	402104 <memset+0x88>
  40210c:	bc70      	pop	{r4, r5, r6}
  40210e:	4770      	bx	lr
  402110:	4614      	mov	r4, r2
  402112:	4603      	mov	r3, r0
  402114:	e7c2      	b.n	40209c <memset+0x20>
  402116:	bf00      	nop

00402118 <sprintf>:
  402118:	b40e      	push	{r1, r2, r3}
  40211a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40211c:	b09c      	sub	sp, #112	; 0x70
  40211e:	ab21      	add	r3, sp, #132	; 0x84
  402120:	490f      	ldr	r1, [pc, #60]	; (402160 <sprintf+0x48>)
  402122:	f853 2b04 	ldr.w	r2, [r3], #4
  402126:	9301      	str	r3, [sp, #4]
  402128:	4605      	mov	r5, r0
  40212a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40212e:	6808      	ldr	r0, [r1, #0]
  402130:	9502      	str	r5, [sp, #8]
  402132:	f44f 7702 	mov.w	r7, #520	; 0x208
  402136:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40213a:	a902      	add	r1, sp, #8
  40213c:	9506      	str	r5, [sp, #24]
  40213e:	f8ad 7014 	strh.w	r7, [sp, #20]
  402142:	9404      	str	r4, [sp, #16]
  402144:	9407      	str	r4, [sp, #28]
  402146:	f8ad 6016 	strh.w	r6, [sp, #22]
  40214a:	f000 f80b 	bl	402164 <_svfprintf_r>
  40214e:	9b02      	ldr	r3, [sp, #8]
  402150:	2200      	movs	r2, #0
  402152:	701a      	strb	r2, [r3, #0]
  402154:	b01c      	add	sp, #112	; 0x70
  402156:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40215a:	b003      	add	sp, #12
  40215c:	4770      	bx	lr
  40215e:	bf00      	nop
  402160:	20400430 	.word	0x20400430

00402164 <_svfprintf_r>:
  402164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402168:	b0c1      	sub	sp, #260	; 0x104
  40216a:	460c      	mov	r4, r1
  40216c:	9109      	str	r1, [sp, #36]	; 0x24
  40216e:	4615      	mov	r5, r2
  402170:	930e      	str	r3, [sp, #56]	; 0x38
  402172:	900a      	str	r0, [sp, #40]	; 0x28
  402174:	f002 fb28 	bl	4047c8 <_localeconv_r>
  402178:	6803      	ldr	r3, [r0, #0]
  40217a:	9317      	str	r3, [sp, #92]	; 0x5c
  40217c:	4618      	mov	r0, r3
  40217e:	f003 f9ff 	bl	405580 <strlen>
  402182:	89a3      	ldrh	r3, [r4, #12]
  402184:	9016      	str	r0, [sp, #88]	; 0x58
  402186:	061e      	lsls	r6, r3, #24
  402188:	d503      	bpl.n	402192 <_svfprintf_r+0x2e>
  40218a:	6923      	ldr	r3, [r4, #16]
  40218c:	2b00      	cmp	r3, #0
  40218e:	f001 8119 	beq.w	4033c4 <_svfprintf_r+0x1260>
  402192:	2300      	movs	r3, #0
  402194:	461a      	mov	r2, r3
  402196:	9312      	str	r3, [sp, #72]	; 0x48
  402198:	9325      	str	r3, [sp, #148]	; 0x94
  40219a:	9324      	str	r3, [sp, #144]	; 0x90
  40219c:	9319      	str	r3, [sp, #100]	; 0x64
  40219e:	930b      	str	r3, [sp, #44]	; 0x2c
  4021a0:	f8df a464 	ldr.w	sl, [pc, #1124]	; 402608 <_svfprintf_r+0x4a4>
  4021a4:	9214      	str	r2, [sp, #80]	; 0x50
  4021a6:	ab30      	add	r3, sp, #192	; 0xc0
  4021a8:	9323      	str	r3, [sp, #140]	; 0x8c
  4021aa:	4699      	mov	r9, r3
  4021ac:	9215      	str	r2, [sp, #84]	; 0x54
  4021ae:	46a8      	mov	r8, r5
  4021b0:	f898 3000 	ldrb.w	r3, [r8]
  4021b4:	4644      	mov	r4, r8
  4021b6:	b1eb      	cbz	r3, 4021f4 <_svfprintf_r+0x90>
  4021b8:	2b25      	cmp	r3, #37	; 0x25
  4021ba:	d102      	bne.n	4021c2 <_svfprintf_r+0x5e>
  4021bc:	e01a      	b.n	4021f4 <_svfprintf_r+0x90>
  4021be:	2b25      	cmp	r3, #37	; 0x25
  4021c0:	d003      	beq.n	4021ca <_svfprintf_r+0x66>
  4021c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4021c6:	2b00      	cmp	r3, #0
  4021c8:	d1f9      	bne.n	4021be <_svfprintf_r+0x5a>
  4021ca:	ebc8 0504 	rsb	r5, r8, r4
  4021ce:	b18d      	cbz	r5, 4021f4 <_svfprintf_r+0x90>
  4021d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4021d2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4021d4:	f8c9 8000 	str.w	r8, [r9]
  4021d8:	3301      	adds	r3, #1
  4021da:	442a      	add	r2, r5
  4021dc:	2b07      	cmp	r3, #7
  4021de:	f8c9 5004 	str.w	r5, [r9, #4]
  4021e2:	9225      	str	r2, [sp, #148]	; 0x94
  4021e4:	9324      	str	r3, [sp, #144]	; 0x90
  4021e6:	f300 80a6 	bgt.w	402336 <_svfprintf_r+0x1d2>
  4021ea:	f109 0908 	add.w	r9, r9, #8
  4021ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4021f0:	442b      	add	r3, r5
  4021f2:	930b      	str	r3, [sp, #44]	; 0x2c
  4021f4:	7823      	ldrb	r3, [r4, #0]
  4021f6:	2b00      	cmp	r3, #0
  4021f8:	f000 80a6 	beq.w	402348 <_svfprintf_r+0x1e4>
  4021fc:	2300      	movs	r3, #0
  4021fe:	461a      	mov	r2, r3
  402200:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  402204:	4619      	mov	r1, r3
  402206:	930c      	str	r3, [sp, #48]	; 0x30
  402208:	9307      	str	r3, [sp, #28]
  40220a:	f04f 3bff 	mov.w	fp, #4294967295
  40220e:	7863      	ldrb	r3, [r4, #1]
  402210:	f104 0801 	add.w	r8, r4, #1
  402214:	465d      	mov	r5, fp
  402216:	f108 0801 	add.w	r8, r8, #1
  40221a:	f1a3 0020 	sub.w	r0, r3, #32
  40221e:	2858      	cmp	r0, #88	; 0x58
  402220:	f200 8425 	bhi.w	402a6e <_svfprintf_r+0x90a>
  402224:	e8df f010 	tbh	[pc, r0, lsl #1]
  402228:	04230388 	.word	0x04230388
  40222c:	03900423 	.word	0x03900423
  402230:	04230423 	.word	0x04230423
  402234:	04230423 	.word	0x04230423
  402238:	04230423 	.word	0x04230423
  40223c:	03a50397 	.word	0x03a50397
  402240:	005d0423 	.word	0x005d0423
  402244:	042300e2 	.word	0x042300e2
  402248:	010500fe 	.word	0x010500fe
  40224c:	01050105 	.word	0x01050105
  402250:	01050105 	.word	0x01050105
  402254:	01050105 	.word	0x01050105
  402258:	01050105 	.word	0x01050105
  40225c:	04230423 	.word	0x04230423
  402260:	04230423 	.word	0x04230423
  402264:	04230423 	.word	0x04230423
  402268:	04230423 	.word	0x04230423
  40226c:	04230423 	.word	0x04230423
  402270:	02810115 	.word	0x02810115
  402274:	02810423 	.word	0x02810423
  402278:	04230423 	.word	0x04230423
  40227c:	04230423 	.word	0x04230423
  402280:	042302c6 	.word	0x042302c6
  402284:	02cd0423 	.word	0x02cd0423
  402288:	04230423 	.word	0x04230423
  40228c:	04230423 	.word	0x04230423
  402290:	02f70423 	.word	0x02f70423
  402294:	04230423 	.word	0x04230423
  402298:	04230325 	.word	0x04230325
  40229c:	04230423 	.word	0x04230423
  4022a0:	04230423 	.word	0x04230423
  4022a4:	04230423 	.word	0x04230423
  4022a8:	04230423 	.word	0x04230423
  4022ac:	03660423 	.word	0x03660423
  4022b0:	02810379 	.word	0x02810379
  4022b4:	02810281 	.word	0x02810281
  4022b8:	03790381 	.word	0x03790381
  4022bc:	04230423 	.word	0x04230423
  4022c0:	042303d1 	.word	0x042303d1
  4022c4:	00a303db 	.word	0x00a303db
  4022c8:	03ee0064 	.word	0x03ee0064
  4022cc:	03f50423 	.word	0x03f50423
  4022d0:	03aa0423 	.word	0x03aa0423
  4022d4:	04230423 	.word	0x04230423
  4022d8:	03bc      	.short	0x03bc
  4022da:	980c      	ldr	r0, [sp, #48]	; 0x30
  4022dc:	930e      	str	r3, [sp, #56]	; 0x38
  4022de:	4240      	negs	r0, r0
  4022e0:	900c      	str	r0, [sp, #48]	; 0x30
  4022e2:	9b07      	ldr	r3, [sp, #28]
  4022e4:	f043 0304 	orr.w	r3, r3, #4
  4022e8:	9307      	str	r3, [sp, #28]
  4022ea:	f898 3000 	ldrb.w	r3, [r8]
  4022ee:	e792      	b.n	402216 <_svfprintf_r+0xb2>
  4022f0:	980e      	ldr	r0, [sp, #56]	; 0x38
  4022f2:	46ab      	mov	fp, r5
  4022f4:	2100      	movs	r1, #0
  4022f6:	6804      	ldr	r4, [r0, #0]
  4022f8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4022fc:	1d07      	adds	r7, r0, #4
  4022fe:	9807      	ldr	r0, [sp, #28]
  402300:	2330      	movs	r3, #48	; 0x30
  402302:	2278      	movs	r2, #120	; 0x78
  402304:	458b      	cmp	fp, r1
  402306:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40230a:	f04f 0500 	mov.w	r5, #0
  40230e:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  402312:	f040 0302 	orr.w	r3, r0, #2
  402316:	f2c0 83c7 	blt.w	402aa8 <_svfprintf_r+0x944>
  40231a:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  40231e:	f043 0302 	orr.w	r3, r3, #2
  402322:	9307      	str	r3, [sp, #28]
  402324:	ea54 0305 	orrs.w	r3, r4, r5
  402328:	970e      	str	r7, [sp, #56]	; 0x38
  40232a:	f000 8393 	beq.w	402a54 <_svfprintf_r+0x8f0>
  40232e:	460f      	mov	r7, r1
  402330:	9211      	str	r2, [sp, #68]	; 0x44
  402332:	48b3      	ldr	r0, [pc, #716]	; (402600 <_svfprintf_r+0x49c>)
  402334:	e2ce      	b.n	4028d4 <_svfprintf_r+0x770>
  402336:	aa23      	add	r2, sp, #140	; 0x8c
  402338:	9909      	ldr	r1, [sp, #36]	; 0x24
  40233a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40233c:	f003 f98e 	bl	40565c <__ssprint_r>
  402340:	b948      	cbnz	r0, 402356 <_svfprintf_r+0x1f2>
  402342:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402346:	e752      	b.n	4021ee <_svfprintf_r+0x8a>
  402348:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40234a:	b123      	cbz	r3, 402356 <_svfprintf_r+0x1f2>
  40234c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40234e:	9909      	ldr	r1, [sp, #36]	; 0x24
  402350:	aa23      	add	r2, sp, #140	; 0x8c
  402352:	f003 f983 	bl	40565c <__ssprint_r>
  402356:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402358:	899b      	ldrh	r3, [r3, #12]
  40235a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40235e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402360:	bf18      	it	ne
  402362:	f04f 33ff 	movne.w	r3, #4294967295
  402366:	4618      	mov	r0, r3
  402368:	b041      	add	sp, #260	; 0x104
  40236a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40236e:	9311      	str	r3, [sp, #68]	; 0x44
  402370:	46ab      	mov	fp, r5
  402372:	2a00      	cmp	r2, #0
  402374:	f041 8223 	bne.w	4037be <_svfprintf_r+0x165a>
  402378:	9a07      	ldr	r2, [sp, #28]
  40237a:	f012 0320 	ands.w	r3, r2, #32
  40237e:	f000 822e 	beq.w	4027de <_svfprintf_r+0x67a>
  402382:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  402384:	3707      	adds	r7, #7
  402386:	f027 0307 	bic.w	r3, r7, #7
  40238a:	2700      	movs	r7, #0
  40238c:	f103 0108 	add.w	r1, r3, #8
  402390:	45bb      	cmp	fp, r7
  402392:	910e      	str	r1, [sp, #56]	; 0x38
  402394:	e9d3 4500 	ldrd	r4, r5, [r3]
  402398:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40239c:	f2c0 8752 	blt.w	403244 <_svfprintf_r+0x10e0>
  4023a0:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  4023a4:	9307      	str	r3, [sp, #28]
  4023a6:	ea54 0305 	orrs.w	r3, r4, r5
  4023aa:	f000 8375 	beq.w	402a98 <_svfprintf_r+0x934>
  4023ae:	ae30      	add	r6, sp, #192	; 0xc0
  4023b0:	08e2      	lsrs	r2, r4, #3
  4023b2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4023b6:	08e9      	lsrs	r1, r5, #3
  4023b8:	f004 0307 	and.w	r3, r4, #7
  4023bc:	460d      	mov	r5, r1
  4023be:	4614      	mov	r4, r2
  4023c0:	3330      	adds	r3, #48	; 0x30
  4023c2:	ea54 0205 	orrs.w	r2, r4, r5
  4023c6:	f806 3d01 	strb.w	r3, [r6, #-1]!
  4023ca:	d1f1      	bne.n	4023b0 <_svfprintf_r+0x24c>
  4023cc:	9a07      	ldr	r2, [sp, #28]
  4023ce:	07d1      	lsls	r1, r2, #31
  4023d0:	f140 8084 	bpl.w	4024dc <_svfprintf_r+0x378>
  4023d4:	2b30      	cmp	r3, #48	; 0x30
  4023d6:	f000 8081 	beq.w	4024dc <_svfprintf_r+0x378>
  4023da:	2230      	movs	r2, #48	; 0x30
  4023dc:	1e73      	subs	r3, r6, #1
  4023de:	f806 2c01 	strb.w	r2, [r6, #-1]
  4023e2:	aa30      	add	r2, sp, #192	; 0xc0
  4023e4:	1ad2      	subs	r2, r2, r3
  4023e6:	920d      	str	r2, [sp, #52]	; 0x34
  4023e8:	461e      	mov	r6, r3
  4023ea:	e07a      	b.n	4024e2 <_svfprintf_r+0x37e>
  4023ec:	f898 3000 	ldrb.w	r3, [r8]
  4023f0:	2b2a      	cmp	r3, #42	; 0x2a
  4023f2:	f108 0401 	add.w	r4, r8, #1
  4023f6:	f001 81b1 	beq.w	40375c <_svfprintf_r+0x15f8>
  4023fa:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4023fe:	2809      	cmp	r0, #9
  402400:	bf98      	it	ls
  402402:	2500      	movls	r5, #0
  402404:	f201 8164 	bhi.w	4036d0 <_svfprintf_r+0x156c>
  402408:	f814 3b01 	ldrb.w	r3, [r4], #1
  40240c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  402410:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  402414:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402418:	2809      	cmp	r0, #9
  40241a:	d9f5      	bls.n	402408 <_svfprintf_r+0x2a4>
  40241c:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  402420:	46a0      	mov	r8, r4
  402422:	e6fa      	b.n	40221a <_svfprintf_r+0xb6>
  402424:	9b07      	ldr	r3, [sp, #28]
  402426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40242a:	9307      	str	r3, [sp, #28]
  40242c:	f898 3000 	ldrb.w	r3, [r8]
  402430:	e6f1      	b.n	402216 <_svfprintf_r+0xb2>
  402432:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402436:	2300      	movs	r3, #0
  402438:	461c      	mov	r4, r3
  40243a:	f818 3b01 	ldrb.w	r3, [r8], #1
  40243e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402442:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  402446:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40244a:	2809      	cmp	r0, #9
  40244c:	d9f5      	bls.n	40243a <_svfprintf_r+0x2d6>
  40244e:	940c      	str	r4, [sp, #48]	; 0x30
  402450:	e6e3      	b.n	40221a <_svfprintf_r+0xb6>
  402452:	9311      	str	r3, [sp, #68]	; 0x44
  402454:	46ab      	mov	fp, r5
  402456:	2a00      	cmp	r2, #0
  402458:	f041 81c9 	bne.w	4037ee <_svfprintf_r+0x168a>
  40245c:	9b07      	ldr	r3, [sp, #28]
  40245e:	f043 0310 	orr.w	r3, r3, #16
  402462:	9307      	str	r3, [sp, #28]
  402464:	9b07      	ldr	r3, [sp, #28]
  402466:	0698      	lsls	r0, r3, #26
  402468:	f140 8530 	bpl.w	402ecc <_svfprintf_r+0xd68>
  40246c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40246e:	3707      	adds	r7, #7
  402470:	f027 0707 	bic.w	r7, r7, #7
  402474:	e9d7 2300 	ldrd	r2, r3, [r7]
  402478:	f107 0108 	add.w	r1, r7, #8
  40247c:	910e      	str	r1, [sp, #56]	; 0x38
  40247e:	4614      	mov	r4, r2
  402480:	461d      	mov	r5, r3
  402482:	2a00      	cmp	r2, #0
  402484:	f173 0300 	sbcs.w	r3, r3, #0
  402488:	f2c0 855b 	blt.w	402f42 <_svfprintf_r+0xdde>
  40248c:	f1bb 0f00 	cmp.w	fp, #0
  402490:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  402494:	f2c0 8538 	blt.w	402f08 <_svfprintf_r+0xda4>
  402498:	9b07      	ldr	r3, [sp, #28]
  40249a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40249e:	9307      	str	r3, [sp, #28]
  4024a0:	ea54 0305 	orrs.w	r3, r4, r5
  4024a4:	f000 81db 	beq.w	40285e <_svfprintf_r+0x6fa>
  4024a8:	2d00      	cmp	r5, #0
  4024aa:	bf08      	it	eq
  4024ac:	2c0a      	cmpeq	r4, #10
  4024ae:	f0c0 81db 	bcc.w	402868 <_svfprintf_r+0x704>
  4024b2:	ae30      	add	r6, sp, #192	; 0xc0
  4024b4:	4620      	mov	r0, r4
  4024b6:	4629      	mov	r1, r5
  4024b8:	220a      	movs	r2, #10
  4024ba:	2300      	movs	r3, #0
  4024bc:	f004 f9ea 	bl	406894 <__aeabi_uldivmod>
  4024c0:	3230      	adds	r2, #48	; 0x30
  4024c2:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4024c6:	4620      	mov	r0, r4
  4024c8:	4629      	mov	r1, r5
  4024ca:	2300      	movs	r3, #0
  4024cc:	220a      	movs	r2, #10
  4024ce:	f004 f9e1 	bl	406894 <__aeabi_uldivmod>
  4024d2:	4604      	mov	r4, r0
  4024d4:	460d      	mov	r5, r1
  4024d6:	ea54 0305 	orrs.w	r3, r4, r5
  4024da:	d1eb      	bne.n	4024b4 <_svfprintf_r+0x350>
  4024dc:	ab30      	add	r3, sp, #192	; 0xc0
  4024de:	1b9b      	subs	r3, r3, r6
  4024e0:	930d      	str	r3, [sp, #52]	; 0x34
  4024e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4024e4:	455b      	cmp	r3, fp
  4024e6:	bfb8      	it	lt
  4024e8:	465b      	movlt	r3, fp
  4024ea:	9308      	str	r3, [sp, #32]
  4024ec:	2300      	movs	r3, #0
  4024ee:	9313      	str	r3, [sp, #76]	; 0x4c
  4024f0:	b117      	cbz	r7, 4024f8 <_svfprintf_r+0x394>
  4024f2:	9b08      	ldr	r3, [sp, #32]
  4024f4:	3301      	adds	r3, #1
  4024f6:	9308      	str	r3, [sp, #32]
  4024f8:	9b07      	ldr	r3, [sp, #28]
  4024fa:	f013 0302 	ands.w	r3, r3, #2
  4024fe:	930f      	str	r3, [sp, #60]	; 0x3c
  402500:	d002      	beq.n	402508 <_svfprintf_r+0x3a4>
  402502:	9b08      	ldr	r3, [sp, #32]
  402504:	3302      	adds	r3, #2
  402506:	9308      	str	r3, [sp, #32]
  402508:	9b07      	ldr	r3, [sp, #28]
  40250a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40250e:	9310      	str	r3, [sp, #64]	; 0x40
  402510:	f040 82d7 	bne.w	402ac2 <_svfprintf_r+0x95e>
  402514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402516:	9a08      	ldr	r2, [sp, #32]
  402518:	1a9d      	subs	r5, r3, r2
  40251a:	2d00      	cmp	r5, #0
  40251c:	f340 82d1 	ble.w	402ac2 <_svfprintf_r+0x95e>
  402520:	2d10      	cmp	r5, #16
  402522:	9925      	ldr	r1, [sp, #148]	; 0x94
  402524:	9a24      	ldr	r2, [sp, #144]	; 0x90
  402526:	4f37      	ldr	r7, [pc, #220]	; (402604 <_svfprintf_r+0x4a0>)
  402528:	dd27      	ble.n	40257a <_svfprintf_r+0x416>
  40252a:	9618      	str	r6, [sp, #96]	; 0x60
  40252c:	4648      	mov	r0, r9
  40252e:	2410      	movs	r4, #16
  402530:	46b9      	mov	r9, r7
  402532:	9e09      	ldr	r6, [sp, #36]	; 0x24
  402534:	462f      	mov	r7, r5
  402536:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  402538:	e004      	b.n	402544 <_svfprintf_r+0x3e0>
  40253a:	3f10      	subs	r7, #16
  40253c:	2f10      	cmp	r7, #16
  40253e:	f100 0008 	add.w	r0, r0, #8
  402542:	dd16      	ble.n	402572 <_svfprintf_r+0x40e>
  402544:	3201      	adds	r2, #1
  402546:	4b2f      	ldr	r3, [pc, #188]	; (402604 <_svfprintf_r+0x4a0>)
  402548:	9224      	str	r2, [sp, #144]	; 0x90
  40254a:	3110      	adds	r1, #16
  40254c:	2a07      	cmp	r2, #7
  40254e:	9125      	str	r1, [sp, #148]	; 0x94
  402550:	e880 0018 	stmia.w	r0, {r3, r4}
  402554:	ddf1      	ble.n	40253a <_svfprintf_r+0x3d6>
  402556:	aa23      	add	r2, sp, #140	; 0x8c
  402558:	4631      	mov	r1, r6
  40255a:	4628      	mov	r0, r5
  40255c:	f003 f87e 	bl	40565c <__ssprint_r>
  402560:	2800      	cmp	r0, #0
  402562:	f47f aef8 	bne.w	402356 <_svfprintf_r+0x1f2>
  402566:	3f10      	subs	r7, #16
  402568:	2f10      	cmp	r7, #16
  40256a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40256c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40256e:	a830      	add	r0, sp, #192	; 0xc0
  402570:	dce8      	bgt.n	402544 <_svfprintf_r+0x3e0>
  402572:	9e18      	ldr	r6, [sp, #96]	; 0x60
  402574:	463d      	mov	r5, r7
  402576:	464f      	mov	r7, r9
  402578:	4681      	mov	r9, r0
  40257a:	3201      	adds	r2, #1
  40257c:	186c      	adds	r4, r5, r1
  40257e:	2a07      	cmp	r2, #7
  402580:	9425      	str	r4, [sp, #148]	; 0x94
  402582:	9224      	str	r2, [sp, #144]	; 0x90
  402584:	f8c9 7000 	str.w	r7, [r9]
  402588:	f8c9 5004 	str.w	r5, [r9, #4]
  40258c:	f300 8428 	bgt.w	402de0 <_svfprintf_r+0xc7c>
  402590:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  402594:	f109 0908 	add.w	r9, r9, #8
  402598:	b177      	cbz	r7, 4025b8 <_svfprintf_r+0x454>
  40259a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40259c:	3301      	adds	r3, #1
  40259e:	3401      	adds	r4, #1
  4025a0:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  4025a4:	2201      	movs	r2, #1
  4025a6:	2b07      	cmp	r3, #7
  4025a8:	9425      	str	r4, [sp, #148]	; 0x94
  4025aa:	9324      	str	r3, [sp, #144]	; 0x90
  4025ac:	e889 0006 	stmia.w	r9, {r1, r2}
  4025b0:	f300 83a0 	bgt.w	402cf4 <_svfprintf_r+0xb90>
  4025b4:	f109 0908 	add.w	r9, r9, #8
  4025b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4025ba:	b16b      	cbz	r3, 4025d8 <_svfprintf_r+0x474>
  4025bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4025be:	3301      	adds	r3, #1
  4025c0:	3402      	adds	r4, #2
  4025c2:	a91c      	add	r1, sp, #112	; 0x70
  4025c4:	2202      	movs	r2, #2
  4025c6:	2b07      	cmp	r3, #7
  4025c8:	9425      	str	r4, [sp, #148]	; 0x94
  4025ca:	9324      	str	r3, [sp, #144]	; 0x90
  4025cc:	e889 0006 	stmia.w	r9, {r1, r2}
  4025d0:	f300 839c 	bgt.w	402d0c <_svfprintf_r+0xba8>
  4025d4:	f109 0908 	add.w	r9, r9, #8
  4025d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4025da:	2b80      	cmp	r3, #128	; 0x80
  4025dc:	f000 82d5 	beq.w	402b8a <_svfprintf_r+0xa26>
  4025e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4025e2:	ebc3 070b 	rsb	r7, r3, fp
  4025e6:	2f00      	cmp	r7, #0
  4025e8:	dd39      	ble.n	40265e <_svfprintf_r+0x4fa>
  4025ea:	4a07      	ldr	r2, [pc, #28]	; (402608 <_svfprintf_r+0x4a4>)
  4025ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4025ee:	920f      	str	r2, [sp, #60]	; 0x3c
  4025f0:	2f10      	cmp	r7, #16
  4025f2:	dd28      	ble.n	402646 <_svfprintf_r+0x4e2>
  4025f4:	4622      	mov	r2, r4
  4025f6:	f04f 0b10 	mov.w	fp, #16
  4025fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4025fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4025fe:	e00a      	b.n	402616 <_svfprintf_r+0x4b2>
  402600:	00406cd8 	.word	0x00406cd8
  402604:	00406cf8 	.word	0x00406cf8
  402608:	00406ca4 	.word	0x00406ca4
  40260c:	3f10      	subs	r7, #16
  40260e:	2f10      	cmp	r7, #16
  402610:	f109 0908 	add.w	r9, r9, #8
  402614:	dd16      	ble.n	402644 <_svfprintf_r+0x4e0>
  402616:	3301      	adds	r3, #1
  402618:	3210      	adds	r2, #16
  40261a:	2b07      	cmp	r3, #7
  40261c:	9225      	str	r2, [sp, #148]	; 0x94
  40261e:	9324      	str	r3, [sp, #144]	; 0x90
  402620:	e889 0c00 	stmia.w	r9, {sl, fp}
  402624:	ddf2      	ble.n	40260c <_svfprintf_r+0x4a8>
  402626:	aa23      	add	r2, sp, #140	; 0x8c
  402628:	4621      	mov	r1, r4
  40262a:	4628      	mov	r0, r5
  40262c:	f003 f816 	bl	40565c <__ssprint_r>
  402630:	2800      	cmp	r0, #0
  402632:	f47f ae90 	bne.w	402356 <_svfprintf_r+0x1f2>
  402636:	3f10      	subs	r7, #16
  402638:	2f10      	cmp	r7, #16
  40263a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40263c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40263e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402642:	dce8      	bgt.n	402616 <_svfprintf_r+0x4b2>
  402644:	4614      	mov	r4, r2
  402646:	3301      	adds	r3, #1
  402648:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40264a:	9324      	str	r3, [sp, #144]	; 0x90
  40264c:	443c      	add	r4, r7
  40264e:	2b07      	cmp	r3, #7
  402650:	9425      	str	r4, [sp, #148]	; 0x94
  402652:	e889 0084 	stmia.w	r9, {r2, r7}
  402656:	f300 8341 	bgt.w	402cdc <_svfprintf_r+0xb78>
  40265a:	f109 0908 	add.w	r9, r9, #8
  40265e:	9b07      	ldr	r3, [sp, #28]
  402660:	05da      	lsls	r2, r3, #23
  402662:	f100 8230 	bmi.w	402ac6 <_svfprintf_r+0x962>
  402666:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402668:	990d      	ldr	r1, [sp, #52]	; 0x34
  40266a:	f8c9 6000 	str.w	r6, [r9]
  40266e:	3301      	adds	r3, #1
  402670:	440c      	add	r4, r1
  402672:	2b07      	cmp	r3, #7
  402674:	9425      	str	r4, [sp, #148]	; 0x94
  402676:	f8c9 1004 	str.w	r1, [r9, #4]
  40267a:	9324      	str	r3, [sp, #144]	; 0x90
  40267c:	f300 8318 	bgt.w	402cb0 <_svfprintf_r+0xb4c>
  402680:	f109 0908 	add.w	r9, r9, #8
  402684:	9b07      	ldr	r3, [sp, #28]
  402686:	0759      	lsls	r1, r3, #29
  402688:	d53f      	bpl.n	40270a <_svfprintf_r+0x5a6>
  40268a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40268c:	9a08      	ldr	r2, [sp, #32]
  40268e:	1a9d      	subs	r5, r3, r2
  402690:	2d00      	cmp	r5, #0
  402692:	dd3a      	ble.n	40270a <_svfprintf_r+0x5a6>
  402694:	2d10      	cmp	r5, #16
  402696:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402698:	4fbc      	ldr	r7, [pc, #752]	; (40298c <_svfprintf_r+0x828>)
  40269a:	dd23      	ble.n	4026e4 <_svfprintf_r+0x580>
  40269c:	4622      	mov	r2, r4
  40269e:	2610      	movs	r6, #16
  4026a0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4026a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4026a6:	e004      	b.n	4026b2 <_svfprintf_r+0x54e>
  4026a8:	3d10      	subs	r5, #16
  4026aa:	2d10      	cmp	r5, #16
  4026ac:	f109 0908 	add.w	r9, r9, #8
  4026b0:	dd17      	ble.n	4026e2 <_svfprintf_r+0x57e>
  4026b2:	3301      	adds	r3, #1
  4026b4:	49b5      	ldr	r1, [pc, #724]	; (40298c <_svfprintf_r+0x828>)
  4026b6:	9324      	str	r3, [sp, #144]	; 0x90
  4026b8:	3210      	adds	r2, #16
  4026ba:	2b07      	cmp	r3, #7
  4026bc:	9225      	str	r2, [sp, #148]	; 0x94
  4026be:	e889 0042 	stmia.w	r9, {r1, r6}
  4026c2:	ddf1      	ble.n	4026a8 <_svfprintf_r+0x544>
  4026c4:	aa23      	add	r2, sp, #140	; 0x8c
  4026c6:	4621      	mov	r1, r4
  4026c8:	4658      	mov	r0, fp
  4026ca:	f002 ffc7 	bl	40565c <__ssprint_r>
  4026ce:	2800      	cmp	r0, #0
  4026d0:	f47f ae41 	bne.w	402356 <_svfprintf_r+0x1f2>
  4026d4:	3d10      	subs	r5, #16
  4026d6:	2d10      	cmp	r5, #16
  4026d8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4026da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4026dc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4026e0:	dce7      	bgt.n	4026b2 <_svfprintf_r+0x54e>
  4026e2:	4614      	mov	r4, r2
  4026e4:	3301      	adds	r3, #1
  4026e6:	442c      	add	r4, r5
  4026e8:	2b07      	cmp	r3, #7
  4026ea:	9425      	str	r4, [sp, #148]	; 0x94
  4026ec:	9324      	str	r3, [sp, #144]	; 0x90
  4026ee:	f8c9 7000 	str.w	r7, [r9]
  4026f2:	f8c9 5004 	str.w	r5, [r9, #4]
  4026f6:	dd08      	ble.n	40270a <_svfprintf_r+0x5a6>
  4026f8:	aa23      	add	r2, sp, #140	; 0x8c
  4026fa:	9909      	ldr	r1, [sp, #36]	; 0x24
  4026fc:	980a      	ldr	r0, [sp, #40]	; 0x28
  4026fe:	f002 ffad 	bl	40565c <__ssprint_r>
  402702:	2800      	cmp	r0, #0
  402704:	f47f ae27 	bne.w	402356 <_svfprintf_r+0x1f2>
  402708:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40270a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40270c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40270e:	9908      	ldr	r1, [sp, #32]
  402710:	428a      	cmp	r2, r1
  402712:	bfac      	ite	ge
  402714:	189b      	addge	r3, r3, r2
  402716:	185b      	addlt	r3, r3, r1
  402718:	930b      	str	r3, [sp, #44]	; 0x2c
  40271a:	2c00      	cmp	r4, #0
  40271c:	f040 82d4 	bne.w	402cc8 <_svfprintf_r+0xb64>
  402720:	2300      	movs	r3, #0
  402722:	9324      	str	r3, [sp, #144]	; 0x90
  402724:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402728:	e542      	b.n	4021b0 <_svfprintf_r+0x4c>
  40272a:	9311      	str	r3, [sp, #68]	; 0x44
  40272c:	46ab      	mov	fp, r5
  40272e:	2a00      	cmp	r2, #0
  402730:	f041 8059 	bne.w	4037e6 <_svfprintf_r+0x1682>
  402734:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  402736:	3707      	adds	r7, #7
  402738:	f027 0307 	bic.w	r3, r7, #7
  40273c:	f103 0208 	add.w	r2, r3, #8
  402740:	920e      	str	r2, [sp, #56]	; 0x38
  402742:	681a      	ldr	r2, [r3, #0]
  402744:	9214      	str	r2, [sp, #80]	; 0x50
  402746:	685b      	ldr	r3, [r3, #4]
  402748:	9315      	str	r3, [sp, #84]	; 0x54
  40274a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40274c:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40274e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  402752:	4628      	mov	r0, r5
  402754:	4621      	mov	r1, r4
  402756:	f04f 32ff 	mov.w	r2, #4294967295
  40275a:	4b8d      	ldr	r3, [pc, #564]	; (402990 <_svfprintf_r+0x82c>)
  40275c:	f004 f85c 	bl	406818 <__aeabi_dcmpun>
  402760:	2800      	cmp	r0, #0
  402762:	f040 84c1 	bne.w	4030e8 <_svfprintf_r+0xf84>
  402766:	4628      	mov	r0, r5
  402768:	4621      	mov	r1, r4
  40276a:	f04f 32ff 	mov.w	r2, #4294967295
  40276e:	4b88      	ldr	r3, [pc, #544]	; (402990 <_svfprintf_r+0x82c>)
  402770:	f004 f834 	bl	4067dc <__aeabi_dcmple>
  402774:	2800      	cmp	r0, #0
  402776:	f040 84b7 	bne.w	4030e8 <_svfprintf_r+0xf84>
  40277a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40277c:	9915      	ldr	r1, [sp, #84]	; 0x54
  40277e:	2200      	movs	r2, #0
  402780:	2300      	movs	r3, #0
  402782:	f004 f821 	bl	4067c8 <__aeabi_dcmplt>
  402786:	2800      	cmp	r0, #0
  402788:	f040 874b 	bne.w	403622 <_svfprintf_r+0x14be>
  40278c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  402790:	4e80      	ldr	r6, [pc, #512]	; (402994 <_svfprintf_r+0x830>)
  402792:	4b81      	ldr	r3, [pc, #516]	; (402998 <_svfprintf_r+0x834>)
  402794:	9907      	ldr	r1, [sp, #28]
  402796:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  40279a:	9107      	str	r1, [sp, #28]
  40279c:	9911      	ldr	r1, [sp, #68]	; 0x44
  40279e:	2203      	movs	r2, #3
  4027a0:	f04f 0b00 	mov.w	fp, #0
  4027a4:	9208      	str	r2, [sp, #32]
  4027a6:	2947      	cmp	r1, #71	; 0x47
  4027a8:	bfd8      	it	le
  4027aa:	461e      	movle	r6, r3
  4027ac:	920d      	str	r2, [sp, #52]	; 0x34
  4027ae:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  4027b2:	e69d      	b.n	4024f0 <_svfprintf_r+0x38c>
  4027b4:	9b07      	ldr	r3, [sp, #28]
  4027b6:	f043 0308 	orr.w	r3, r3, #8
  4027ba:	9307      	str	r3, [sp, #28]
  4027bc:	f898 3000 	ldrb.w	r3, [r8]
  4027c0:	e529      	b.n	402216 <_svfprintf_r+0xb2>
  4027c2:	9311      	str	r3, [sp, #68]	; 0x44
  4027c4:	46ab      	mov	fp, r5
  4027c6:	2a00      	cmp	r2, #0
  4027c8:	f041 8009 	bne.w	4037de <_svfprintf_r+0x167a>
  4027cc:	9b07      	ldr	r3, [sp, #28]
  4027ce:	f043 0310 	orr.w	r3, r3, #16
  4027d2:	9307      	str	r3, [sp, #28]
  4027d4:	9a07      	ldr	r2, [sp, #28]
  4027d6:	f012 0320 	ands.w	r3, r2, #32
  4027da:	f47f add2 	bne.w	402382 <_svfprintf_r+0x21e>
  4027de:	9907      	ldr	r1, [sp, #28]
  4027e0:	f011 0210 	ands.w	r2, r1, #16
  4027e4:	f000 8507 	beq.w	4031f6 <_svfprintf_r+0x1092>
  4027e8:	980e      	ldr	r0, [sp, #56]	; 0x38
  4027ea:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4027ee:	f1bb 0f00 	cmp.w	fp, #0
  4027f2:	6804      	ldr	r4, [r0, #0]
  4027f4:	f100 0704 	add.w	r7, r0, #4
  4027f8:	f04f 0500 	mov.w	r5, #0
  4027fc:	f2c0 8521 	blt.w	403242 <_svfprintf_r+0x10de>
  402800:	460a      	mov	r2, r1
  402802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  402806:	9207      	str	r2, [sp, #28]
  402808:	ea54 0205 	orrs.w	r2, r4, r5
  40280c:	970e      	str	r7, [sp, #56]	; 0x38
  40280e:	f000 8143 	beq.w	402a98 <_svfprintf_r+0x934>
  402812:	461f      	mov	r7, r3
  402814:	e5cb      	b.n	4023ae <_svfprintf_r+0x24a>
  402816:	9311      	str	r3, [sp, #68]	; 0x44
  402818:	46ab      	mov	fp, r5
  40281a:	2a00      	cmp	r2, #0
  40281c:	f040 87d7 	bne.w	4037ce <_svfprintf_r+0x166a>
  402820:	9b07      	ldr	r3, [sp, #28]
  402822:	f043 0310 	orr.w	r3, r3, #16
  402826:	9307      	str	r3, [sp, #28]
  402828:	9a07      	ldr	r2, [sp, #28]
  40282a:	f012 0320 	ands.w	r3, r2, #32
  40282e:	f000 8332 	beq.w	402e96 <_svfprintf_r+0xd32>
  402832:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  402834:	3707      	adds	r7, #7
  402836:	f027 0307 	bic.w	r3, r7, #7
  40283a:	2700      	movs	r7, #0
  40283c:	f103 0108 	add.w	r1, r3, #8
  402840:	45bb      	cmp	fp, r7
  402842:	910e      	str	r1, [sp, #56]	; 0x38
  402844:	e9d3 4500 	ldrd	r4, r5, [r3]
  402848:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40284c:	f2c0 835c 	blt.w	402f08 <_svfprintf_r+0xda4>
  402850:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  402854:	9307      	str	r3, [sp, #28]
  402856:	ea54 0305 	orrs.w	r3, r4, r5
  40285a:	f47f ae25 	bne.w	4024a8 <_svfprintf_r+0x344>
  40285e:	f1bb 0f00 	cmp.w	fp, #0
  402862:	f000 80fe 	beq.w	402a62 <_svfprintf_r+0x8fe>
  402866:	2400      	movs	r4, #0
  402868:	ae40      	add	r6, sp, #256	; 0x100
  40286a:	3430      	adds	r4, #48	; 0x30
  40286c:	f806 4d41 	strb.w	r4, [r6, #-65]!
  402870:	e634      	b.n	4024dc <_svfprintf_r+0x378>
  402872:	9311      	str	r3, [sp, #68]	; 0x44
  402874:	46ab      	mov	fp, r5
  402876:	2a00      	cmp	r2, #0
  402878:	f040 87a5 	bne.w	4037c6 <_svfprintf_r+0x1662>
  40287c:	9b07      	ldr	r3, [sp, #28]
  40287e:	4847      	ldr	r0, [pc, #284]	; (40299c <_svfprintf_r+0x838>)
  402880:	069d      	lsls	r5, r3, #26
  402882:	f140 8097 	bpl.w	4029b4 <_svfprintf_r+0x850>
  402886:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  402888:	3707      	adds	r7, #7
  40288a:	f027 0307 	bic.w	r3, r7, #7
  40288e:	e9d3 4500 	ldrd	r4, r5, [r3]
  402892:	f103 0208 	add.w	r2, r3, #8
  402896:	920e      	str	r2, [sp, #56]	; 0x38
  402898:	9a07      	ldr	r2, [sp, #28]
  40289a:	f012 0701 	ands.w	r7, r2, #1
  40289e:	f000 8241 	beq.w	402d24 <_svfprintf_r+0xbc0>
  4028a2:	ea54 0305 	orrs.w	r3, r4, r5
  4028a6:	f000 84f5 	beq.w	403294 <_svfprintf_r+0x1130>
  4028aa:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4028ae:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  4028b2:	2700      	movs	r7, #0
  4028b4:	9a07      	ldr	r2, [sp, #28]
  4028b6:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4028ba:	2330      	movs	r3, #48	; 0x30
  4028bc:	45bb      	cmp	fp, r7
  4028be:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4028c2:	f042 0302 	orr.w	r3, r2, #2
  4028c6:	f2c0 86a9 	blt.w	40361c <_svfprintf_r+0x14b8>
  4028ca:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  4028ce:	f043 0302 	orr.w	r3, r3, #2
  4028d2:	9307      	str	r3, [sp, #28]
  4028d4:	ae30      	add	r6, sp, #192	; 0xc0
  4028d6:	0923      	lsrs	r3, r4, #4
  4028d8:	f004 010f 	and.w	r1, r4, #15
  4028dc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4028e0:	092a      	lsrs	r2, r5, #4
  4028e2:	461c      	mov	r4, r3
  4028e4:	4615      	mov	r5, r2
  4028e6:	5c43      	ldrb	r3, [r0, r1]
  4028e8:	f806 3d01 	strb.w	r3, [r6, #-1]!
  4028ec:	ea54 0305 	orrs.w	r3, r4, r5
  4028f0:	d1f1      	bne.n	4028d6 <_svfprintf_r+0x772>
  4028f2:	e5f3      	b.n	4024dc <_svfprintf_r+0x378>
  4028f4:	990e      	ldr	r1, [sp, #56]	; 0x38
  4028f6:	9311      	str	r3, [sp, #68]	; 0x44
  4028f8:	680a      	ldr	r2, [r1, #0]
  4028fa:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  4028fe:	2300      	movs	r3, #0
  402900:	460a      	mov	r2, r1
  402902:	461f      	mov	r7, r3
  402904:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  402908:	3204      	adds	r2, #4
  40290a:	2301      	movs	r3, #1
  40290c:	9308      	str	r3, [sp, #32]
  40290e:	46bb      	mov	fp, r7
  402910:	9713      	str	r7, [sp, #76]	; 0x4c
  402912:	920e      	str	r2, [sp, #56]	; 0x38
  402914:	930d      	str	r3, [sp, #52]	; 0x34
  402916:	ae26      	add	r6, sp, #152	; 0x98
  402918:	e5ee      	b.n	4024f8 <_svfprintf_r+0x394>
  40291a:	9311      	str	r3, [sp, #68]	; 0x44
  40291c:	46ab      	mov	fp, r5
  40291e:	2a00      	cmp	r2, #0
  402920:	f43f ada0 	beq.w	402464 <_svfprintf_r+0x300>
  402924:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  402928:	e59c      	b.n	402464 <_svfprintf_r+0x300>
  40292a:	9b07      	ldr	r3, [sp, #28]
  40292c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402930:	9307      	str	r3, [sp, #28]
  402932:	f898 3000 	ldrb.w	r3, [r8]
  402936:	e46e      	b.n	402216 <_svfprintf_r+0xb2>
  402938:	f898 3000 	ldrb.w	r3, [r8]
  40293c:	2900      	cmp	r1, #0
  40293e:	f47f ac6a 	bne.w	402216 <_svfprintf_r+0xb2>
  402942:	2201      	movs	r2, #1
  402944:	2120      	movs	r1, #32
  402946:	e466      	b.n	402216 <_svfprintf_r+0xb2>
  402948:	9b07      	ldr	r3, [sp, #28]
  40294a:	f043 0301 	orr.w	r3, r3, #1
  40294e:	9307      	str	r3, [sp, #28]
  402950:	f898 3000 	ldrb.w	r3, [r8]
  402954:	e45f      	b.n	402216 <_svfprintf_r+0xb2>
  402956:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  402958:	6823      	ldr	r3, [r4, #0]
  40295a:	930c      	str	r3, [sp, #48]	; 0x30
  40295c:	4618      	mov	r0, r3
  40295e:	2800      	cmp	r0, #0
  402960:	4623      	mov	r3, r4
  402962:	f103 0304 	add.w	r3, r3, #4
  402966:	f6ff acb8 	blt.w	4022da <_svfprintf_r+0x176>
  40296a:	930e      	str	r3, [sp, #56]	; 0x38
  40296c:	f898 3000 	ldrb.w	r3, [r8]
  402970:	e451      	b.n	402216 <_svfprintf_r+0xb2>
  402972:	f898 3000 	ldrb.w	r3, [r8]
  402976:	2201      	movs	r2, #1
  402978:	212b      	movs	r1, #43	; 0x2b
  40297a:	e44c      	b.n	402216 <_svfprintf_r+0xb2>
  40297c:	9311      	str	r3, [sp, #68]	; 0x44
  40297e:	46ab      	mov	fp, r5
  402980:	2a00      	cmp	r2, #0
  402982:	f43f af51 	beq.w	402828 <_svfprintf_r+0x6c4>
  402986:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40298a:	e74d      	b.n	402828 <_svfprintf_r+0x6c4>
  40298c:	00406cf8 	.word	0x00406cf8
  402990:	7fefffff 	.word	0x7fefffff
  402994:	00406cb8 	.word	0x00406cb8
  402998:	00406cb4 	.word	0x00406cb4
  40299c:	00406cc4 	.word	0x00406cc4
  4029a0:	9311      	str	r3, [sp, #68]	; 0x44
  4029a2:	46ab      	mov	fp, r5
  4029a4:	2a00      	cmp	r2, #0
  4029a6:	f040 8703 	bne.w	4037b0 <_svfprintf_r+0x164c>
  4029aa:	9b07      	ldr	r3, [sp, #28]
  4029ac:	4899      	ldr	r0, [pc, #612]	; (402c14 <_svfprintf_r+0xab0>)
  4029ae:	069d      	lsls	r5, r3, #26
  4029b0:	f53f af69 	bmi.w	402886 <_svfprintf_r+0x722>
  4029b4:	9b07      	ldr	r3, [sp, #28]
  4029b6:	06dc      	lsls	r4, r3, #27
  4029b8:	f140 845e 	bpl.w	403278 <_svfprintf_r+0x1114>
  4029bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4029be:	4613      	mov	r3, r2
  4029c0:	3304      	adds	r3, #4
  4029c2:	6814      	ldr	r4, [r2, #0]
  4029c4:	930e      	str	r3, [sp, #56]	; 0x38
  4029c6:	2500      	movs	r5, #0
  4029c8:	e766      	b.n	402898 <_svfprintf_r+0x734>
  4029ca:	f898 3000 	ldrb.w	r3, [r8]
  4029ce:	2b6c      	cmp	r3, #108	; 0x6c
  4029d0:	f000 84e1 	beq.w	403396 <_svfprintf_r+0x1232>
  4029d4:	9807      	ldr	r0, [sp, #28]
  4029d6:	f040 0010 	orr.w	r0, r0, #16
  4029da:	9007      	str	r0, [sp, #28]
  4029dc:	e41b      	b.n	402216 <_svfprintf_r+0xb2>
  4029de:	2a00      	cmp	r2, #0
  4029e0:	f040 86db 	bne.w	40379a <_svfprintf_r+0x1636>
  4029e4:	9b07      	ldr	r3, [sp, #28]
  4029e6:	069b      	lsls	r3, r3, #26
  4029e8:	f140 842f 	bpl.w	40324a <_svfprintf_r+0x10e6>
  4029ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4029ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4029f0:	6813      	ldr	r3, [r2, #0]
  4029f2:	17cd      	asrs	r5, r1, #31
  4029f4:	4608      	mov	r0, r1
  4029f6:	3204      	adds	r2, #4
  4029f8:	4629      	mov	r1, r5
  4029fa:	920e      	str	r2, [sp, #56]	; 0x38
  4029fc:	e9c3 0100 	strd	r0, r1, [r3]
  402a00:	f7ff bbd6 	b.w	4021b0 <_svfprintf_r+0x4c>
  402a04:	9b07      	ldr	r3, [sp, #28]
  402a06:	f043 0320 	orr.w	r3, r3, #32
  402a0a:	9307      	str	r3, [sp, #28]
  402a0c:	f898 3000 	ldrb.w	r3, [r8]
  402a10:	e401      	b.n	402216 <_svfprintf_r+0xb2>
  402a12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402a14:	9311      	str	r3, [sp, #68]	; 0x44
  402a16:	6816      	ldr	r6, [r2, #0]
  402a18:	2400      	movs	r4, #0
  402a1a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  402a1e:	1d17      	adds	r7, r2, #4
  402a20:	2e00      	cmp	r6, #0
  402a22:	f000 85bd 	beq.w	4035a0 <_svfprintf_r+0x143c>
  402a26:	2d00      	cmp	r5, #0
  402a28:	f2c0 850f 	blt.w	40344a <_svfprintf_r+0x12e6>
  402a2c:	462a      	mov	r2, r5
  402a2e:	4621      	mov	r1, r4
  402a30:	4630      	mov	r0, r6
  402a32:	f002 f985 	bl	404d40 <memchr>
  402a36:	2800      	cmp	r0, #0
  402a38:	f000 8604 	beq.w	403644 <_svfprintf_r+0x14e0>
  402a3c:	1b83      	subs	r3, r0, r6
  402a3e:	930d      	str	r3, [sp, #52]	; 0x34
  402a40:	46a3      	mov	fp, r4
  402a42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  402a46:	970e      	str	r7, [sp, #56]	; 0x38
  402a48:	9308      	str	r3, [sp, #32]
  402a4a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  402a4e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  402a52:	e54d      	b.n	4024f0 <_svfprintf_r+0x38c>
  402a54:	486f      	ldr	r0, [pc, #444]	; (402c14 <_svfprintf_r+0xab0>)
  402a56:	9211      	str	r2, [sp, #68]	; 0x44
  402a58:	f1bb 0f00 	cmp.w	fp, #0
  402a5c:	f040 8173 	bne.w	402d46 <_svfprintf_r+0xbe2>
  402a60:	465f      	mov	r7, fp
  402a62:	f04f 0b00 	mov.w	fp, #0
  402a66:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  402a6a:	ae30      	add	r6, sp, #192	; 0xc0
  402a6c:	e539      	b.n	4024e2 <_svfprintf_r+0x37e>
  402a6e:	9311      	str	r3, [sp, #68]	; 0x44
  402a70:	2a00      	cmp	r2, #0
  402a72:	f040 86b0 	bne.w	4037d6 <_svfprintf_r+0x1672>
  402a76:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a78:	2a00      	cmp	r2, #0
  402a7a:	f43f ac65 	beq.w	402348 <_svfprintf_r+0x1e4>
  402a7e:	2300      	movs	r3, #0
  402a80:	2101      	movs	r1, #1
  402a82:	461f      	mov	r7, r3
  402a84:	9108      	str	r1, [sp, #32]
  402a86:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  402a8a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  402a8e:	469b      	mov	fp, r3
  402a90:	9313      	str	r3, [sp, #76]	; 0x4c
  402a92:	910d      	str	r1, [sp, #52]	; 0x34
  402a94:	ae26      	add	r6, sp, #152	; 0x98
  402a96:	e52f      	b.n	4024f8 <_svfprintf_r+0x394>
  402a98:	f1bb 0f00 	cmp.w	fp, #0
  402a9c:	f000 85dd 	beq.w	40365a <_svfprintf_r+0x14f6>
  402aa0:	2700      	movs	r7, #0
  402aa2:	2400      	movs	r4, #0
  402aa4:	2500      	movs	r5, #0
  402aa6:	e482      	b.n	4023ae <_svfprintf_r+0x24a>
  402aa8:	485a      	ldr	r0, [pc, #360]	; (402c14 <_svfprintf_r+0xab0>)
  402aaa:	9307      	str	r3, [sp, #28]
  402aac:	9211      	str	r2, [sp, #68]	; 0x44
  402aae:	ea54 0305 	orrs.w	r3, r4, r5
  402ab2:	970e      	str	r7, [sp, #56]	; 0x38
  402ab4:	f04f 0700 	mov.w	r7, #0
  402ab8:	f47f af0c 	bne.w	4028d4 <_svfprintf_r+0x770>
  402abc:	2400      	movs	r4, #0
  402abe:	2500      	movs	r5, #0
  402ac0:	e708      	b.n	4028d4 <_svfprintf_r+0x770>
  402ac2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402ac4:	e568      	b.n	402598 <_svfprintf_r+0x434>
  402ac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402ac8:	2b65      	cmp	r3, #101	; 0x65
  402aca:	f340 80a9 	ble.w	402c20 <_svfprintf_r+0xabc>
  402ace:	9814      	ldr	r0, [sp, #80]	; 0x50
  402ad0:	9915      	ldr	r1, [sp, #84]	; 0x54
  402ad2:	2200      	movs	r2, #0
  402ad4:	2300      	movs	r3, #0
  402ad6:	f003 fe6d 	bl	4067b4 <__aeabi_dcmpeq>
  402ada:	2800      	cmp	r0, #0
  402adc:	f000 8135 	beq.w	402d4a <_svfprintf_r+0xbe6>
  402ae0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402ae2:	4a4d      	ldr	r2, [pc, #308]	; (402c18 <_svfprintf_r+0xab4>)
  402ae4:	f8c9 2000 	str.w	r2, [r9]
  402ae8:	3301      	adds	r3, #1
  402aea:	3401      	adds	r4, #1
  402aec:	2201      	movs	r2, #1
  402aee:	2b07      	cmp	r3, #7
  402af0:	9425      	str	r4, [sp, #148]	; 0x94
  402af2:	9324      	str	r3, [sp, #144]	; 0x90
  402af4:	f8c9 2004 	str.w	r2, [r9, #4]
  402af8:	f300 83e6 	bgt.w	4032c8 <_svfprintf_r+0x1164>
  402afc:	f109 0908 	add.w	r9, r9, #8
  402b00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  402b02:	9a12      	ldr	r2, [sp, #72]	; 0x48
  402b04:	4293      	cmp	r3, r2
  402b06:	db03      	blt.n	402b10 <_svfprintf_r+0x9ac>
  402b08:	9b07      	ldr	r3, [sp, #28]
  402b0a:	07db      	lsls	r3, r3, #31
  402b0c:	f57f adba 	bpl.w	402684 <_svfprintf_r+0x520>
  402b10:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402b12:	9916      	ldr	r1, [sp, #88]	; 0x58
  402b14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  402b16:	f8c9 2000 	str.w	r2, [r9]
  402b1a:	3301      	adds	r3, #1
  402b1c:	440c      	add	r4, r1
  402b1e:	2b07      	cmp	r3, #7
  402b20:	9425      	str	r4, [sp, #148]	; 0x94
  402b22:	f8c9 1004 	str.w	r1, [r9, #4]
  402b26:	9324      	str	r3, [sp, #144]	; 0x90
  402b28:	f300 843f 	bgt.w	4033aa <_svfprintf_r+0x1246>
  402b2c:	f109 0908 	add.w	r9, r9, #8
  402b30:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402b32:	1e5d      	subs	r5, r3, #1
  402b34:	2d00      	cmp	r5, #0
  402b36:	f77f ada5 	ble.w	402684 <_svfprintf_r+0x520>
  402b3a:	4a38      	ldr	r2, [pc, #224]	; (402c1c <_svfprintf_r+0xab8>)
  402b3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402b3e:	920f      	str	r2, [sp, #60]	; 0x3c
  402b40:	2d10      	cmp	r5, #16
  402b42:	f340 81e6 	ble.w	402f12 <_svfprintf_r+0xdae>
  402b46:	2610      	movs	r6, #16
  402b48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  402b4a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  402b4e:	e005      	b.n	402b5c <_svfprintf_r+0x9f8>
  402b50:	f109 0908 	add.w	r9, r9, #8
  402b54:	3d10      	subs	r5, #16
  402b56:	2d10      	cmp	r5, #16
  402b58:	f340 81db 	ble.w	402f12 <_svfprintf_r+0xdae>
  402b5c:	3301      	adds	r3, #1
  402b5e:	3410      	adds	r4, #16
  402b60:	2b07      	cmp	r3, #7
  402b62:	9425      	str	r4, [sp, #148]	; 0x94
  402b64:	9324      	str	r3, [sp, #144]	; 0x90
  402b66:	f8c9 a000 	str.w	sl, [r9]
  402b6a:	f8c9 6004 	str.w	r6, [r9, #4]
  402b6e:	ddef      	ble.n	402b50 <_svfprintf_r+0x9ec>
  402b70:	aa23      	add	r2, sp, #140	; 0x8c
  402b72:	4659      	mov	r1, fp
  402b74:	4638      	mov	r0, r7
  402b76:	f002 fd71 	bl	40565c <__ssprint_r>
  402b7a:	2800      	cmp	r0, #0
  402b7c:	f47f abeb 	bne.w	402356 <_svfprintf_r+0x1f2>
  402b80:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402b82:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402b84:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402b88:	e7e4      	b.n	402b54 <_svfprintf_r+0x9f0>
  402b8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402b8c:	9a08      	ldr	r2, [sp, #32]
  402b8e:	1a9f      	subs	r7, r3, r2
  402b90:	2f00      	cmp	r7, #0
  402b92:	f77f ad25 	ble.w	4025e0 <_svfprintf_r+0x47c>
  402b96:	4a21      	ldr	r2, [pc, #132]	; (402c1c <_svfprintf_r+0xab8>)
  402b98:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402b9a:	920f      	str	r2, [sp, #60]	; 0x3c
  402b9c:	2f10      	cmp	r7, #16
  402b9e:	dd2b      	ble.n	402bf8 <_svfprintf_r+0xa94>
  402ba0:	464a      	mov	r2, r9
  402ba2:	4621      	mov	r1, r4
  402ba4:	46b9      	mov	r9, r7
  402ba6:	2510      	movs	r5, #16
  402ba8:	4637      	mov	r7, r6
  402baa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  402bac:	9e09      	ldr	r6, [sp, #36]	; 0x24
  402bae:	e006      	b.n	402bbe <_svfprintf_r+0xa5a>
  402bb0:	f1a9 0910 	sub.w	r9, r9, #16
  402bb4:	f1b9 0f10 	cmp.w	r9, #16
  402bb8:	f102 0208 	add.w	r2, r2, #8
  402bbc:	dd18      	ble.n	402bf0 <_svfprintf_r+0xa8c>
  402bbe:	3301      	adds	r3, #1
  402bc0:	3110      	adds	r1, #16
  402bc2:	2b07      	cmp	r3, #7
  402bc4:	9125      	str	r1, [sp, #148]	; 0x94
  402bc6:	9324      	str	r3, [sp, #144]	; 0x90
  402bc8:	f8c2 a000 	str.w	sl, [r2]
  402bcc:	6055      	str	r5, [r2, #4]
  402bce:	ddef      	ble.n	402bb0 <_svfprintf_r+0xa4c>
  402bd0:	aa23      	add	r2, sp, #140	; 0x8c
  402bd2:	4631      	mov	r1, r6
  402bd4:	4620      	mov	r0, r4
  402bd6:	f002 fd41 	bl	40565c <__ssprint_r>
  402bda:	2800      	cmp	r0, #0
  402bdc:	f47f abbb 	bne.w	402356 <_svfprintf_r+0x1f2>
  402be0:	f1a9 0910 	sub.w	r9, r9, #16
  402be4:	f1b9 0f10 	cmp.w	r9, #16
  402be8:	9925      	ldr	r1, [sp, #148]	; 0x94
  402bea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402bec:	aa30      	add	r2, sp, #192	; 0xc0
  402bee:	dce6      	bgt.n	402bbe <_svfprintf_r+0xa5a>
  402bf0:	463e      	mov	r6, r7
  402bf2:	460c      	mov	r4, r1
  402bf4:	464f      	mov	r7, r9
  402bf6:	4691      	mov	r9, r2
  402bf8:	3301      	adds	r3, #1
  402bfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402bfc:	9324      	str	r3, [sp, #144]	; 0x90
  402bfe:	443c      	add	r4, r7
  402c00:	2b07      	cmp	r3, #7
  402c02:	9425      	str	r4, [sp, #148]	; 0x94
  402c04:	e889 0084 	stmia.w	r9, {r2, r7}
  402c08:	f300 8245 	bgt.w	403096 <_svfprintf_r+0xf32>
  402c0c:	f109 0908 	add.w	r9, r9, #8
  402c10:	e4e6      	b.n	4025e0 <_svfprintf_r+0x47c>
  402c12:	bf00      	nop
  402c14:	00406cd8 	.word	0x00406cd8
  402c18:	00406cf4 	.word	0x00406cf4
  402c1c:	00406ca4 	.word	0x00406ca4
  402c20:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402c22:	9d24      	ldr	r5, [sp, #144]	; 0x90
  402c24:	2b01      	cmp	r3, #1
  402c26:	f340 8208 	ble.w	40303a <_svfprintf_r+0xed6>
  402c2a:	3501      	adds	r5, #1
  402c2c:	3401      	adds	r4, #1
  402c2e:	2301      	movs	r3, #1
  402c30:	2d07      	cmp	r5, #7
  402c32:	9425      	str	r4, [sp, #148]	; 0x94
  402c34:	9524      	str	r5, [sp, #144]	; 0x90
  402c36:	f8c9 6000 	str.w	r6, [r9]
  402c3a:	f8c9 3004 	str.w	r3, [r9, #4]
  402c3e:	f300 820d 	bgt.w	40305c <_svfprintf_r+0xef8>
  402c42:	f109 0908 	add.w	r9, r9, #8
  402c46:	9a16      	ldr	r2, [sp, #88]	; 0x58
  402c48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  402c4a:	f8c9 3000 	str.w	r3, [r9]
  402c4e:	3501      	adds	r5, #1
  402c50:	4414      	add	r4, r2
  402c52:	2d07      	cmp	r5, #7
  402c54:	9425      	str	r4, [sp, #148]	; 0x94
  402c56:	9524      	str	r5, [sp, #144]	; 0x90
  402c58:	f8c9 2004 	str.w	r2, [r9, #4]
  402c5c:	f300 820e 	bgt.w	40307c <_svfprintf_r+0xf18>
  402c60:	f109 0908 	add.w	r9, r9, #8
  402c64:	2300      	movs	r3, #0
  402c66:	9814      	ldr	r0, [sp, #80]	; 0x50
  402c68:	9915      	ldr	r1, [sp, #84]	; 0x54
  402c6a:	2200      	movs	r2, #0
  402c6c:	f003 fda2 	bl	4067b4 <__aeabi_dcmpeq>
  402c70:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402c72:	2800      	cmp	r0, #0
  402c74:	f040 80c3 	bne.w	402dfe <_svfprintf_r+0xc9a>
  402c78:	3b01      	subs	r3, #1
  402c7a:	3501      	adds	r5, #1
  402c7c:	3601      	adds	r6, #1
  402c7e:	441c      	add	r4, r3
  402c80:	2d07      	cmp	r5, #7
  402c82:	9524      	str	r5, [sp, #144]	; 0x90
  402c84:	9425      	str	r4, [sp, #148]	; 0x94
  402c86:	f8c9 6000 	str.w	r6, [r9]
  402c8a:	f8c9 3004 	str.w	r3, [r9, #4]
  402c8e:	f300 80f5 	bgt.w	402e7c <_svfprintf_r+0xd18>
  402c92:	f109 0908 	add.w	r9, r9, #8
  402c96:	9a19      	ldr	r2, [sp, #100]	; 0x64
  402c98:	f8c9 2004 	str.w	r2, [r9, #4]
  402c9c:	3501      	adds	r5, #1
  402c9e:	4414      	add	r4, r2
  402ca0:	ab1f      	add	r3, sp, #124	; 0x7c
  402ca2:	2d07      	cmp	r5, #7
  402ca4:	9425      	str	r4, [sp, #148]	; 0x94
  402ca6:	9524      	str	r5, [sp, #144]	; 0x90
  402ca8:	f8c9 3000 	str.w	r3, [r9]
  402cac:	f77f ace8 	ble.w	402680 <_svfprintf_r+0x51c>
  402cb0:	aa23      	add	r2, sp, #140	; 0x8c
  402cb2:	9909      	ldr	r1, [sp, #36]	; 0x24
  402cb4:	980a      	ldr	r0, [sp, #40]	; 0x28
  402cb6:	f002 fcd1 	bl	40565c <__ssprint_r>
  402cba:	2800      	cmp	r0, #0
  402cbc:	f47f ab4b 	bne.w	402356 <_svfprintf_r+0x1f2>
  402cc0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402cc2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402cc6:	e4dd      	b.n	402684 <_svfprintf_r+0x520>
  402cc8:	aa23      	add	r2, sp, #140	; 0x8c
  402cca:	9909      	ldr	r1, [sp, #36]	; 0x24
  402ccc:	980a      	ldr	r0, [sp, #40]	; 0x28
  402cce:	f002 fcc5 	bl	40565c <__ssprint_r>
  402cd2:	2800      	cmp	r0, #0
  402cd4:	f43f ad24 	beq.w	402720 <_svfprintf_r+0x5bc>
  402cd8:	f7ff bb3d 	b.w	402356 <_svfprintf_r+0x1f2>
  402cdc:	aa23      	add	r2, sp, #140	; 0x8c
  402cde:	9909      	ldr	r1, [sp, #36]	; 0x24
  402ce0:	980a      	ldr	r0, [sp, #40]	; 0x28
  402ce2:	f002 fcbb 	bl	40565c <__ssprint_r>
  402ce6:	2800      	cmp	r0, #0
  402ce8:	f47f ab35 	bne.w	402356 <_svfprintf_r+0x1f2>
  402cec:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402cee:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402cf2:	e4b4      	b.n	40265e <_svfprintf_r+0x4fa>
  402cf4:	aa23      	add	r2, sp, #140	; 0x8c
  402cf6:	9909      	ldr	r1, [sp, #36]	; 0x24
  402cf8:	980a      	ldr	r0, [sp, #40]	; 0x28
  402cfa:	f002 fcaf 	bl	40565c <__ssprint_r>
  402cfe:	2800      	cmp	r0, #0
  402d00:	f47f ab29 	bne.w	402356 <_svfprintf_r+0x1f2>
  402d04:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402d06:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402d0a:	e455      	b.n	4025b8 <_svfprintf_r+0x454>
  402d0c:	aa23      	add	r2, sp, #140	; 0x8c
  402d0e:	9909      	ldr	r1, [sp, #36]	; 0x24
  402d10:	980a      	ldr	r0, [sp, #40]	; 0x28
  402d12:	f002 fca3 	bl	40565c <__ssprint_r>
  402d16:	2800      	cmp	r0, #0
  402d18:	f47f ab1d 	bne.w	402356 <_svfprintf_r+0x1f2>
  402d1c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402d1e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402d22:	e459      	b.n	4025d8 <_svfprintf_r+0x474>
  402d24:	f1bb 0f00 	cmp.w	fp, #0
  402d28:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  402d2c:	f2c0 82d8 	blt.w	4032e0 <_svfprintf_r+0x117c>
  402d30:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  402d34:	9307      	str	r3, [sp, #28]
  402d36:	ea54 0305 	orrs.w	r3, r4, r5
  402d3a:	f47f adcb 	bne.w	4028d4 <_svfprintf_r+0x770>
  402d3e:	f1bb 0f00 	cmp.w	fp, #0
  402d42:	f43f ae8d 	beq.w	402a60 <_svfprintf_r+0x8fc>
  402d46:	2700      	movs	r7, #0
  402d48:	e6b8      	b.n	402abc <_svfprintf_r+0x958>
  402d4a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  402d4c:	2d00      	cmp	r5, #0
  402d4e:	f340 82ca 	ble.w	4032e6 <_svfprintf_r+0x1182>
  402d52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402d54:	9a12      	ldr	r2, [sp, #72]	; 0x48
  402d56:	4293      	cmp	r3, r2
  402d58:	bfa8      	it	ge
  402d5a:	4613      	movge	r3, r2
  402d5c:	2b00      	cmp	r3, #0
  402d5e:	461d      	mov	r5, r3
  402d60:	dd0d      	ble.n	402d7e <_svfprintf_r+0xc1a>
  402d62:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402d64:	f8c9 6000 	str.w	r6, [r9]
  402d68:	3301      	adds	r3, #1
  402d6a:	442c      	add	r4, r5
  402d6c:	2b07      	cmp	r3, #7
  402d6e:	9425      	str	r4, [sp, #148]	; 0x94
  402d70:	f8c9 5004 	str.w	r5, [r9, #4]
  402d74:	9324      	str	r3, [sp, #144]	; 0x90
  402d76:	f300 839c 	bgt.w	4034b2 <_svfprintf_r+0x134e>
  402d7a:	f109 0908 	add.w	r9, r9, #8
  402d7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402d80:	2d00      	cmp	r5, #0
  402d82:	bfa8      	it	ge
  402d84:	1b5b      	subge	r3, r3, r5
  402d86:	2b00      	cmp	r3, #0
  402d88:	461d      	mov	r5, r3
  402d8a:	f340 80f6 	ble.w	402f7a <_svfprintf_r+0xe16>
  402d8e:	4aba      	ldr	r2, [pc, #744]	; (403078 <_svfprintf_r+0xf14>)
  402d90:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402d92:	920f      	str	r2, [sp, #60]	; 0x3c
  402d94:	2d10      	cmp	r5, #16
  402d96:	f340 828a 	ble.w	4032ae <_svfprintf_r+0x114a>
  402d9a:	4622      	mov	r2, r4
  402d9c:	2710      	movs	r7, #16
  402d9e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  402da2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402da4:	e005      	b.n	402db2 <_svfprintf_r+0xc4e>
  402da6:	f109 0908 	add.w	r9, r9, #8
  402daa:	3d10      	subs	r5, #16
  402dac:	2d10      	cmp	r5, #16
  402dae:	f340 827d 	ble.w	4032ac <_svfprintf_r+0x1148>
  402db2:	3301      	adds	r3, #1
  402db4:	3210      	adds	r2, #16
  402db6:	2b07      	cmp	r3, #7
  402db8:	9225      	str	r2, [sp, #148]	; 0x94
  402dba:	9324      	str	r3, [sp, #144]	; 0x90
  402dbc:	f8c9 a000 	str.w	sl, [r9]
  402dc0:	f8c9 7004 	str.w	r7, [r9, #4]
  402dc4:	ddef      	ble.n	402da6 <_svfprintf_r+0xc42>
  402dc6:	aa23      	add	r2, sp, #140	; 0x8c
  402dc8:	4621      	mov	r1, r4
  402dca:	4658      	mov	r0, fp
  402dcc:	f002 fc46 	bl	40565c <__ssprint_r>
  402dd0:	2800      	cmp	r0, #0
  402dd2:	f47f aac0 	bne.w	402356 <_svfprintf_r+0x1f2>
  402dd6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  402dd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402dda:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402dde:	e7e4      	b.n	402daa <_svfprintf_r+0xc46>
  402de0:	aa23      	add	r2, sp, #140	; 0x8c
  402de2:	9909      	ldr	r1, [sp, #36]	; 0x24
  402de4:	980a      	ldr	r0, [sp, #40]	; 0x28
  402de6:	f002 fc39 	bl	40565c <__ssprint_r>
  402dea:	2800      	cmp	r0, #0
  402dec:	f47f aab3 	bne.w	402356 <_svfprintf_r+0x1f2>
  402df0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  402df4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402df6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402dfa:	f7ff bbcd 	b.w	402598 <_svfprintf_r+0x434>
  402dfe:	1e5e      	subs	r6, r3, #1
  402e00:	2e00      	cmp	r6, #0
  402e02:	f77f af48 	ble.w	402c96 <_svfprintf_r+0xb32>
  402e06:	4b9c      	ldr	r3, [pc, #624]	; (403078 <_svfprintf_r+0xf14>)
  402e08:	930f      	str	r3, [sp, #60]	; 0x3c
  402e0a:	2e10      	cmp	r6, #16
  402e0c:	dd2c      	ble.n	402e68 <_svfprintf_r+0xd04>
  402e0e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  402e12:	2710      	movs	r7, #16
  402e14:	46b0      	mov	r8, r6
  402e16:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  402e1a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  402e1c:	e006      	b.n	402e2c <_svfprintf_r+0xcc8>
  402e1e:	f1a8 0810 	sub.w	r8, r8, #16
  402e22:	f1b8 0f10 	cmp.w	r8, #16
  402e26:	f109 0908 	add.w	r9, r9, #8
  402e2a:	dd1a      	ble.n	402e62 <_svfprintf_r+0xcfe>
  402e2c:	3501      	adds	r5, #1
  402e2e:	3410      	adds	r4, #16
  402e30:	2d07      	cmp	r5, #7
  402e32:	9425      	str	r4, [sp, #148]	; 0x94
  402e34:	9524      	str	r5, [sp, #144]	; 0x90
  402e36:	f8c9 a000 	str.w	sl, [r9]
  402e3a:	f8c9 7004 	str.w	r7, [r9, #4]
  402e3e:	ddee      	ble.n	402e1e <_svfprintf_r+0xcba>
  402e40:	aa23      	add	r2, sp, #140	; 0x8c
  402e42:	4631      	mov	r1, r6
  402e44:	4658      	mov	r0, fp
  402e46:	f002 fc09 	bl	40565c <__ssprint_r>
  402e4a:	2800      	cmp	r0, #0
  402e4c:	f47f aa83 	bne.w	402356 <_svfprintf_r+0x1f2>
  402e50:	f1a8 0810 	sub.w	r8, r8, #16
  402e54:	f1b8 0f10 	cmp.w	r8, #16
  402e58:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402e5a:	9d24      	ldr	r5, [sp, #144]	; 0x90
  402e5c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402e60:	dce4      	bgt.n	402e2c <_svfprintf_r+0xcc8>
  402e62:	4646      	mov	r6, r8
  402e64:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  402e68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402e6a:	3501      	adds	r5, #1
  402e6c:	4434      	add	r4, r6
  402e6e:	2d07      	cmp	r5, #7
  402e70:	9425      	str	r4, [sp, #148]	; 0x94
  402e72:	9524      	str	r5, [sp, #144]	; 0x90
  402e74:	e889 0048 	stmia.w	r9, {r3, r6}
  402e78:	f77f af0b 	ble.w	402c92 <_svfprintf_r+0xb2e>
  402e7c:	aa23      	add	r2, sp, #140	; 0x8c
  402e7e:	9909      	ldr	r1, [sp, #36]	; 0x24
  402e80:	980a      	ldr	r0, [sp, #40]	; 0x28
  402e82:	f002 fbeb 	bl	40565c <__ssprint_r>
  402e86:	2800      	cmp	r0, #0
  402e88:	f47f aa65 	bne.w	402356 <_svfprintf_r+0x1f2>
  402e8c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402e8e:	9d24      	ldr	r5, [sp, #144]	; 0x90
  402e90:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402e94:	e6ff      	b.n	402c96 <_svfprintf_r+0xb32>
  402e96:	9907      	ldr	r1, [sp, #28]
  402e98:	f011 0210 	ands.w	r2, r1, #16
  402e9c:	f000 8108 	beq.w	4030b0 <_svfprintf_r+0xf4c>
  402ea0:	980e      	ldr	r0, [sp, #56]	; 0x38
  402ea2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  402ea6:	f1bb 0f00 	cmp.w	fp, #0
  402eaa:	6804      	ldr	r4, [r0, #0]
  402eac:	f100 0704 	add.w	r7, r0, #4
  402eb0:	f04f 0500 	mov.w	r5, #0
  402eb4:	db26      	blt.n	402f04 <_svfprintf_r+0xda0>
  402eb6:	460a      	mov	r2, r1
  402eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  402ebc:	9207      	str	r2, [sp, #28]
  402ebe:	ea54 0205 	orrs.w	r2, r4, r5
  402ec2:	970e      	str	r7, [sp, #56]	; 0x38
  402ec4:	461f      	mov	r7, r3
  402ec6:	f47f aaef 	bne.w	4024a8 <_svfprintf_r+0x344>
  402eca:	e4c8      	b.n	40285e <_svfprintf_r+0x6fa>
  402ecc:	9b07      	ldr	r3, [sp, #28]
  402ece:	06d9      	lsls	r1, r3, #27
  402ed0:	d42a      	bmi.n	402f28 <_svfprintf_r+0xdc4>
  402ed2:	9b07      	ldr	r3, [sp, #28]
  402ed4:	065a      	lsls	r2, r3, #25
  402ed6:	d527      	bpl.n	402f28 <_svfprintf_r+0xdc4>
  402ed8:	990e      	ldr	r1, [sp, #56]	; 0x38
  402eda:	f9b1 4000 	ldrsh.w	r4, [r1]
  402ede:	3104      	adds	r1, #4
  402ee0:	17e5      	asrs	r5, r4, #31
  402ee2:	4622      	mov	r2, r4
  402ee4:	462b      	mov	r3, r5
  402ee6:	910e      	str	r1, [sp, #56]	; 0x38
  402ee8:	f7ff bacb 	b.w	402482 <_svfprintf_r+0x31e>
  402eec:	990e      	ldr	r1, [sp, #56]	; 0x38
  402eee:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  402ef2:	f1bb 0f00 	cmp.w	fp, #0
  402ef6:	680c      	ldr	r4, [r1, #0]
  402ef8:	f101 0704 	add.w	r7, r1, #4
  402efc:	f04f 0500 	mov.w	r5, #0
  402f00:	f280 8247 	bge.w	403392 <_svfprintf_r+0x122e>
  402f04:	970e      	str	r7, [sp, #56]	; 0x38
  402f06:	461f      	mov	r7, r3
  402f08:	ea54 0305 	orrs.w	r3, r4, r5
  402f0c:	f47f aacc 	bne.w	4024a8 <_svfprintf_r+0x344>
  402f10:	e4aa      	b.n	402868 <_svfprintf_r+0x704>
  402f12:	3301      	adds	r3, #1
  402f14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402f16:	9324      	str	r3, [sp, #144]	; 0x90
  402f18:	442c      	add	r4, r5
  402f1a:	2b07      	cmp	r3, #7
  402f1c:	9425      	str	r4, [sp, #148]	; 0x94
  402f1e:	e889 0024 	stmia.w	r9, {r2, r5}
  402f22:	f77f abad 	ble.w	402680 <_svfprintf_r+0x51c>
  402f26:	e6c3      	b.n	402cb0 <_svfprintf_r+0xb4c>
  402f28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402f2a:	6814      	ldr	r4, [r2, #0]
  402f2c:	4613      	mov	r3, r2
  402f2e:	3304      	adds	r3, #4
  402f30:	17e5      	asrs	r5, r4, #31
  402f32:	4622      	mov	r2, r4
  402f34:	930e      	str	r3, [sp, #56]	; 0x38
  402f36:	2a00      	cmp	r2, #0
  402f38:	462b      	mov	r3, r5
  402f3a:	f173 0300 	sbcs.w	r3, r3, #0
  402f3e:	f6bf aaa5 	bge.w	40248c <_svfprintf_r+0x328>
  402f42:	4264      	negs	r4, r4
  402f44:	f04f 072d 	mov.w	r7, #45	; 0x2d
  402f48:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  402f4c:	f1bb 0f00 	cmp.w	fp, #0
  402f50:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  402f54:	f6ff aaa8 	blt.w	4024a8 <_svfprintf_r+0x344>
  402f58:	9b07      	ldr	r3, [sp, #28]
  402f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402f5e:	9307      	str	r3, [sp, #28]
  402f60:	f7ff baa2 	b.w	4024a8 <_svfprintf_r+0x344>
  402f64:	aa23      	add	r2, sp, #140	; 0x8c
  402f66:	9909      	ldr	r1, [sp, #36]	; 0x24
  402f68:	980a      	ldr	r0, [sp, #40]	; 0x28
  402f6a:	f002 fb77 	bl	40565c <__ssprint_r>
  402f6e:	2800      	cmp	r0, #0
  402f70:	f47f a9f1 	bne.w	402356 <_svfprintf_r+0x1f2>
  402f74:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402f76:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402f7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402f7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  402f7e:	4432      	add	r2, r6
  402f80:	4617      	mov	r7, r2
  402f82:	9a12      	ldr	r2, [sp, #72]	; 0x48
  402f84:	4293      	cmp	r3, r2
  402f86:	db47      	blt.n	403018 <_svfprintf_r+0xeb4>
  402f88:	9a07      	ldr	r2, [sp, #28]
  402f8a:	07d5      	lsls	r5, r2, #31
  402f8c:	d444      	bmi.n	403018 <_svfprintf_r+0xeb4>
  402f8e:	9912      	ldr	r1, [sp, #72]	; 0x48
  402f90:	440e      	add	r6, r1
  402f92:	1bf5      	subs	r5, r6, r7
  402f94:	1acb      	subs	r3, r1, r3
  402f96:	429d      	cmp	r5, r3
  402f98:	bfa8      	it	ge
  402f9a:	461d      	movge	r5, r3
  402f9c:	2d00      	cmp	r5, #0
  402f9e:	462e      	mov	r6, r5
  402fa0:	dd0d      	ble.n	402fbe <_svfprintf_r+0xe5a>
  402fa2:	9a24      	ldr	r2, [sp, #144]	; 0x90
  402fa4:	f8c9 7000 	str.w	r7, [r9]
  402fa8:	3201      	adds	r2, #1
  402faa:	442c      	add	r4, r5
  402fac:	2a07      	cmp	r2, #7
  402fae:	9425      	str	r4, [sp, #148]	; 0x94
  402fb0:	f8c9 5004 	str.w	r5, [r9, #4]
  402fb4:	9224      	str	r2, [sp, #144]	; 0x90
  402fb6:	f300 830b 	bgt.w	4035d0 <_svfprintf_r+0x146c>
  402fba:	f109 0908 	add.w	r9, r9, #8
  402fbe:	2e00      	cmp	r6, #0
  402fc0:	bfac      	ite	ge
  402fc2:	1b9d      	subge	r5, r3, r6
  402fc4:	461d      	movlt	r5, r3
  402fc6:	2d00      	cmp	r5, #0
  402fc8:	f77f ab5c 	ble.w	402684 <_svfprintf_r+0x520>
  402fcc:	4a2a      	ldr	r2, [pc, #168]	; (403078 <_svfprintf_r+0xf14>)
  402fce:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402fd0:	920f      	str	r2, [sp, #60]	; 0x3c
  402fd2:	2d10      	cmp	r5, #16
  402fd4:	dd9d      	ble.n	402f12 <_svfprintf_r+0xdae>
  402fd6:	2610      	movs	r6, #16
  402fd8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  402fda:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  402fde:	e004      	b.n	402fea <_svfprintf_r+0xe86>
  402fe0:	f109 0908 	add.w	r9, r9, #8
  402fe4:	3d10      	subs	r5, #16
  402fe6:	2d10      	cmp	r5, #16
  402fe8:	dd93      	ble.n	402f12 <_svfprintf_r+0xdae>
  402fea:	3301      	adds	r3, #1
  402fec:	3410      	adds	r4, #16
  402fee:	2b07      	cmp	r3, #7
  402ff0:	9425      	str	r4, [sp, #148]	; 0x94
  402ff2:	9324      	str	r3, [sp, #144]	; 0x90
  402ff4:	f8c9 a000 	str.w	sl, [r9]
  402ff8:	f8c9 6004 	str.w	r6, [r9, #4]
  402ffc:	ddf0      	ble.n	402fe0 <_svfprintf_r+0xe7c>
  402ffe:	aa23      	add	r2, sp, #140	; 0x8c
  403000:	4659      	mov	r1, fp
  403002:	4638      	mov	r0, r7
  403004:	f002 fb2a 	bl	40565c <__ssprint_r>
  403008:	2800      	cmp	r0, #0
  40300a:	f47f a9a4 	bne.w	402356 <_svfprintf_r+0x1f2>
  40300e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403010:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403012:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403016:	e7e5      	b.n	402fe4 <_svfprintf_r+0xe80>
  403018:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40301a:	9816      	ldr	r0, [sp, #88]	; 0x58
  40301c:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40301e:	f8c9 1000 	str.w	r1, [r9]
  403022:	3201      	adds	r2, #1
  403024:	4404      	add	r4, r0
  403026:	2a07      	cmp	r2, #7
  403028:	9425      	str	r4, [sp, #148]	; 0x94
  40302a:	f8c9 0004 	str.w	r0, [r9, #4]
  40302e:	9224      	str	r2, [sp, #144]	; 0x90
  403030:	f300 82a9 	bgt.w	403586 <_svfprintf_r+0x1422>
  403034:	f109 0908 	add.w	r9, r9, #8
  403038:	e7a9      	b.n	402f8e <_svfprintf_r+0xe2a>
  40303a:	9b07      	ldr	r3, [sp, #28]
  40303c:	07d8      	lsls	r0, r3, #31
  40303e:	f53f adf4 	bmi.w	402c2a <_svfprintf_r+0xac6>
  403042:	3501      	adds	r5, #1
  403044:	3401      	adds	r4, #1
  403046:	2301      	movs	r3, #1
  403048:	2d07      	cmp	r5, #7
  40304a:	9425      	str	r4, [sp, #148]	; 0x94
  40304c:	9524      	str	r5, [sp, #144]	; 0x90
  40304e:	f8c9 6000 	str.w	r6, [r9]
  403052:	f8c9 3004 	str.w	r3, [r9, #4]
  403056:	f77f ae1c 	ble.w	402c92 <_svfprintf_r+0xb2e>
  40305a:	e70f      	b.n	402e7c <_svfprintf_r+0xd18>
  40305c:	aa23      	add	r2, sp, #140	; 0x8c
  40305e:	9909      	ldr	r1, [sp, #36]	; 0x24
  403060:	980a      	ldr	r0, [sp, #40]	; 0x28
  403062:	f002 fafb 	bl	40565c <__ssprint_r>
  403066:	2800      	cmp	r0, #0
  403068:	f47f a975 	bne.w	402356 <_svfprintf_r+0x1f2>
  40306c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40306e:	9d24      	ldr	r5, [sp, #144]	; 0x90
  403070:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403074:	e5e7      	b.n	402c46 <_svfprintf_r+0xae2>
  403076:	bf00      	nop
  403078:	00406ca4 	.word	0x00406ca4
  40307c:	aa23      	add	r2, sp, #140	; 0x8c
  40307e:	9909      	ldr	r1, [sp, #36]	; 0x24
  403080:	980a      	ldr	r0, [sp, #40]	; 0x28
  403082:	f002 faeb 	bl	40565c <__ssprint_r>
  403086:	2800      	cmp	r0, #0
  403088:	f47f a965 	bne.w	402356 <_svfprintf_r+0x1f2>
  40308c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40308e:	9d24      	ldr	r5, [sp, #144]	; 0x90
  403090:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403094:	e5e6      	b.n	402c64 <_svfprintf_r+0xb00>
  403096:	aa23      	add	r2, sp, #140	; 0x8c
  403098:	9909      	ldr	r1, [sp, #36]	; 0x24
  40309a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40309c:	f002 fade 	bl	40565c <__ssprint_r>
  4030a0:	2800      	cmp	r0, #0
  4030a2:	f47f a958 	bne.w	402356 <_svfprintf_r+0x1f2>
  4030a6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4030a8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4030ac:	f7ff ba98 	b.w	4025e0 <_svfprintf_r+0x47c>
  4030b0:	9907      	ldr	r1, [sp, #28]
  4030b2:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  4030b6:	f43f af19 	beq.w	402eec <_svfprintf_r+0xd88>
  4030ba:	980e      	ldr	r0, [sp, #56]	; 0x38
  4030bc:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4030c0:	f1bb 0f00 	cmp.w	fp, #0
  4030c4:	8804      	ldrh	r4, [r0, #0]
  4030c6:	f100 0704 	add.w	r7, r0, #4
  4030ca:	f04f 0500 	mov.w	r5, #0
  4030ce:	f2c0 81b9 	blt.w	403444 <_svfprintf_r+0x12e0>
  4030d2:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  4030d6:	9307      	str	r3, [sp, #28]
  4030d8:	ea54 0305 	orrs.w	r3, r4, r5
  4030dc:	970e      	str	r7, [sp, #56]	; 0x38
  4030de:	4617      	mov	r7, r2
  4030e0:	f47f a9e2 	bne.w	4024a8 <_svfprintf_r+0x344>
  4030e4:	f7ff bbbb 	b.w	40285e <_svfprintf_r+0x6fa>
  4030e8:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4030ea:	4622      	mov	r2, r4
  4030ec:	4620      	mov	r0, r4
  4030ee:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4030f0:	4623      	mov	r3, r4
  4030f2:	4621      	mov	r1, r4
  4030f4:	f003 fb90 	bl	406818 <__aeabi_dcmpun>
  4030f8:	2800      	cmp	r0, #0
  4030fa:	f040 8317 	bne.w	40372c <_svfprintf_r+0x15c8>
  4030fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403100:	f1bb 3fff 	cmp.w	fp, #4294967295
  403104:	f023 0320 	bic.w	r3, r3, #32
  403108:	930d      	str	r3, [sp, #52]	; 0x34
  40310a:	f000 8270 	beq.w	4035ee <_svfprintf_r+0x148a>
  40310e:	2b47      	cmp	r3, #71	; 0x47
  403110:	f000 8192 	beq.w	403438 <_svfprintf_r+0x12d4>
  403114:	9b07      	ldr	r3, [sp, #28]
  403116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40311a:	9310      	str	r3, [sp, #64]	; 0x40
  40311c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40311e:	1e1f      	subs	r7, r3, #0
  403120:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403122:	9308      	str	r3, [sp, #32]
  403124:	bfbb      	ittet	lt
  403126:	463b      	movlt	r3, r7
  403128:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40312c:	2300      	movge	r3, #0
  40312e:	232d      	movlt	r3, #45	; 0x2d
  403130:	930f      	str	r3, [sp, #60]	; 0x3c
  403132:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403134:	2b66      	cmp	r3, #102	; 0x66
  403136:	f000 825d 	beq.w	4035f4 <_svfprintf_r+0x1490>
  40313a:	2b46      	cmp	r3, #70	; 0x46
  40313c:	f000 8151 	beq.w	4033e2 <_svfprintf_r+0x127e>
  403140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403142:	9a08      	ldr	r2, [sp, #32]
  403144:	2b45      	cmp	r3, #69	; 0x45
  403146:	a821      	add	r0, sp, #132	; 0x84
  403148:	a91e      	add	r1, sp, #120	; 0x78
  40314a:	bf0c      	ite	eq
  40314c:	f10b 0501 	addeq.w	r5, fp, #1
  403150:	465d      	movne	r5, fp
  403152:	9004      	str	r0, [sp, #16]
  403154:	9103      	str	r1, [sp, #12]
  403156:	a81d      	add	r0, sp, #116	; 0x74
  403158:	2102      	movs	r1, #2
  40315a:	463b      	mov	r3, r7
  40315c:	9002      	str	r0, [sp, #8]
  40315e:	9501      	str	r5, [sp, #4]
  403160:	9100      	str	r1, [sp, #0]
  403162:	980a      	ldr	r0, [sp, #40]	; 0x28
  403164:	f000 fbf0 	bl	403948 <_dtoa_r>
  403168:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40316a:	2b67      	cmp	r3, #103	; 0x67
  40316c:	4606      	mov	r6, r0
  40316e:	f040 8290 	bne.w	403692 <_svfprintf_r+0x152e>
  403172:	9b07      	ldr	r3, [sp, #28]
  403174:	07da      	lsls	r2, r3, #31
  403176:	f140 82af 	bpl.w	4036d8 <_svfprintf_r+0x1574>
  40317a:	1974      	adds	r4, r6, r5
  40317c:	9808      	ldr	r0, [sp, #32]
  40317e:	4639      	mov	r1, r7
  403180:	2200      	movs	r2, #0
  403182:	2300      	movs	r3, #0
  403184:	f003 fb16 	bl	4067b4 <__aeabi_dcmpeq>
  403188:	2800      	cmp	r0, #0
  40318a:	f040 8190 	bne.w	4034ae <_svfprintf_r+0x134a>
  40318e:	9b21      	ldr	r3, [sp, #132]	; 0x84
  403190:	429c      	cmp	r4, r3
  403192:	d906      	bls.n	4031a2 <_svfprintf_r+0x103e>
  403194:	2130      	movs	r1, #48	; 0x30
  403196:	1c5a      	adds	r2, r3, #1
  403198:	9221      	str	r2, [sp, #132]	; 0x84
  40319a:	7019      	strb	r1, [r3, #0]
  40319c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40319e:	429c      	cmp	r4, r3
  4031a0:	d8f9      	bhi.n	403196 <_svfprintf_r+0x1032>
  4031a2:	1b9b      	subs	r3, r3, r6
  4031a4:	9312      	str	r3, [sp, #72]	; 0x48
  4031a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4031a8:	2b47      	cmp	r3, #71	; 0x47
  4031aa:	f000 8179 	beq.w	4034a0 <_svfprintf_r+0x133c>
  4031ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4031b0:	2b65      	cmp	r3, #101	; 0x65
  4031b2:	f340 827d 	ble.w	4036b0 <_svfprintf_r+0x154c>
  4031b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4031b8:	2b66      	cmp	r3, #102	; 0x66
  4031ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4031bc:	9313      	str	r3, [sp, #76]	; 0x4c
  4031be:	f000 825b 	beq.w	403678 <_svfprintf_r+0x1514>
  4031c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4031c4:	9912      	ldr	r1, [sp, #72]	; 0x48
  4031c6:	428a      	cmp	r2, r1
  4031c8:	f2c0 8230 	blt.w	40362c <_svfprintf_r+0x14c8>
  4031cc:	9b07      	ldr	r3, [sp, #28]
  4031ce:	07d9      	lsls	r1, r3, #31
  4031d0:	f100 8284 	bmi.w	4036dc <_svfprintf_r+0x1578>
  4031d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4031d8:	920d      	str	r2, [sp, #52]	; 0x34
  4031da:	2267      	movs	r2, #103	; 0x67
  4031dc:	9211      	str	r2, [sp, #68]	; 0x44
  4031de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4031e0:	2a00      	cmp	r2, #0
  4031e2:	f040 8153 	bne.w	40348c <_svfprintf_r+0x1328>
  4031e6:	9308      	str	r3, [sp, #32]
  4031e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4031ea:	9307      	str	r3, [sp, #28]
  4031ec:	4693      	mov	fp, r2
  4031ee:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4031f2:	f7ff b97d 	b.w	4024f0 <_svfprintf_r+0x38c>
  4031f6:	9907      	ldr	r1, [sp, #28]
  4031f8:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  4031fc:	d015      	beq.n	40322a <_svfprintf_r+0x10c6>
  4031fe:	980e      	ldr	r0, [sp, #56]	; 0x38
  403200:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  403204:	f1bb 0f00 	cmp.w	fp, #0
  403208:	8804      	ldrh	r4, [r0, #0]
  40320a:	f100 0704 	add.w	r7, r0, #4
  40320e:	f04f 0500 	mov.w	r5, #0
  403212:	db16      	blt.n	403242 <_svfprintf_r+0x10de>
  403214:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  403218:	9307      	str	r3, [sp, #28]
  40321a:	ea54 0305 	orrs.w	r3, r4, r5
  40321e:	970e      	str	r7, [sp, #56]	; 0x38
  403220:	f43f ac3a 	beq.w	402a98 <_svfprintf_r+0x934>
  403224:	4617      	mov	r7, r2
  403226:	f7ff b8c2 	b.w	4023ae <_svfprintf_r+0x24a>
  40322a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40322c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403230:	f1bb 0f00 	cmp.w	fp, #0
  403234:	680c      	ldr	r4, [r1, #0]
  403236:	f101 0704 	add.w	r7, r1, #4
  40323a:	f04f 0500 	mov.w	r5, #0
  40323e:	f280 80a5 	bge.w	40338c <_svfprintf_r+0x1228>
  403242:	970e      	str	r7, [sp, #56]	; 0x38
  403244:	2700      	movs	r7, #0
  403246:	f7ff b8b2 	b.w	4023ae <_svfprintf_r+0x24a>
  40324a:	9b07      	ldr	r3, [sp, #28]
  40324c:	06df      	lsls	r7, r3, #27
  40324e:	d40b      	bmi.n	403268 <_svfprintf_r+0x1104>
  403250:	9b07      	ldr	r3, [sp, #28]
  403252:	065e      	lsls	r6, r3, #25
  403254:	d508      	bpl.n	403268 <_svfprintf_r+0x1104>
  403256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403258:	6813      	ldr	r3, [r2, #0]
  40325a:	3204      	adds	r2, #4
  40325c:	920e      	str	r2, [sp, #56]	; 0x38
  40325e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  403262:	801a      	strh	r2, [r3, #0]
  403264:	f7fe bfa4 	b.w	4021b0 <_svfprintf_r+0x4c>
  403268:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40326a:	6813      	ldr	r3, [r2, #0]
  40326c:	3204      	adds	r2, #4
  40326e:	920e      	str	r2, [sp, #56]	; 0x38
  403270:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403272:	601a      	str	r2, [r3, #0]
  403274:	f7fe bf9c 	b.w	4021b0 <_svfprintf_r+0x4c>
  403278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40327a:	9b07      	ldr	r3, [sp, #28]
  40327c:	f013 0f40 	tst.w	r3, #64	; 0x40
  403280:	4613      	mov	r3, r2
  403282:	f103 0304 	add.w	r3, r3, #4
  403286:	bf0c      	ite	eq
  403288:	6814      	ldreq	r4, [r2, #0]
  40328a:	8814      	ldrhne	r4, [r2, #0]
  40328c:	930e      	str	r3, [sp, #56]	; 0x38
  40328e:	2500      	movs	r5, #0
  403290:	f7ff bb02 	b.w	402898 <_svfprintf_r+0x734>
  403294:	2700      	movs	r7, #0
  403296:	45bb      	cmp	fp, r7
  403298:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40329c:	f6ff ac0e 	blt.w	402abc <_svfprintf_r+0x958>
  4032a0:	9b07      	ldr	r3, [sp, #28]
  4032a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4032a6:	9307      	str	r3, [sp, #28]
  4032a8:	f7ff bbd6 	b.w	402a58 <_svfprintf_r+0x8f4>
  4032ac:	4614      	mov	r4, r2
  4032ae:	3301      	adds	r3, #1
  4032b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4032b2:	9324      	str	r3, [sp, #144]	; 0x90
  4032b4:	442c      	add	r4, r5
  4032b6:	2b07      	cmp	r3, #7
  4032b8:	9425      	str	r4, [sp, #148]	; 0x94
  4032ba:	e889 0024 	stmia.w	r9, {r2, r5}
  4032be:	f73f ae51 	bgt.w	402f64 <_svfprintf_r+0xe00>
  4032c2:	f109 0908 	add.w	r9, r9, #8
  4032c6:	e658      	b.n	402f7a <_svfprintf_r+0xe16>
  4032c8:	aa23      	add	r2, sp, #140	; 0x8c
  4032ca:	9909      	ldr	r1, [sp, #36]	; 0x24
  4032cc:	980a      	ldr	r0, [sp, #40]	; 0x28
  4032ce:	f002 f9c5 	bl	40565c <__ssprint_r>
  4032d2:	2800      	cmp	r0, #0
  4032d4:	f47f a83f 	bne.w	402356 <_svfprintf_r+0x1f2>
  4032d8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4032da:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4032de:	e40f      	b.n	402b00 <_svfprintf_r+0x99c>
  4032e0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4032e2:	f7ff bbe4 	b.w	402aae <_svfprintf_r+0x94a>
  4032e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4032e8:	4ab5      	ldr	r2, [pc, #724]	; (4035c0 <_svfprintf_r+0x145c>)
  4032ea:	f8c9 2000 	str.w	r2, [r9]
  4032ee:	3301      	adds	r3, #1
  4032f0:	3401      	adds	r4, #1
  4032f2:	2201      	movs	r2, #1
  4032f4:	2b07      	cmp	r3, #7
  4032f6:	9425      	str	r4, [sp, #148]	; 0x94
  4032f8:	9324      	str	r3, [sp, #144]	; 0x90
  4032fa:	f8c9 2004 	str.w	r2, [r9, #4]
  4032fe:	f300 808e 	bgt.w	40341e <_svfprintf_r+0x12ba>
  403302:	f109 0908 	add.w	r9, r9, #8
  403306:	b92d      	cbnz	r5, 403314 <_svfprintf_r+0x11b0>
  403308:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40330a:	b91b      	cbnz	r3, 403314 <_svfprintf_r+0x11b0>
  40330c:	9b07      	ldr	r3, [sp, #28]
  40330e:	07df      	lsls	r7, r3, #31
  403310:	f57f a9b8 	bpl.w	402684 <_svfprintf_r+0x520>
  403314:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403316:	9916      	ldr	r1, [sp, #88]	; 0x58
  403318:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40331a:	f8c9 2000 	str.w	r2, [r9]
  40331e:	3301      	adds	r3, #1
  403320:	440c      	add	r4, r1
  403322:	2b07      	cmp	r3, #7
  403324:	9425      	str	r4, [sp, #148]	; 0x94
  403326:	f8c9 1004 	str.w	r1, [r9, #4]
  40332a:	9324      	str	r3, [sp, #144]	; 0x90
  40332c:	f300 81c2 	bgt.w	4036b4 <_svfprintf_r+0x1550>
  403330:	f109 0908 	add.w	r9, r9, #8
  403334:	426d      	negs	r5, r5
  403336:	2d00      	cmp	r5, #0
  403338:	f340 809b 	ble.w	403472 <_svfprintf_r+0x130e>
  40333c:	4aa1      	ldr	r2, [pc, #644]	; (4035c4 <_svfprintf_r+0x1460>)
  40333e:	920f      	str	r2, [sp, #60]	; 0x3c
  403340:	2d10      	cmp	r5, #16
  403342:	f340 80c3 	ble.w	4034cc <_svfprintf_r+0x1368>
  403346:	4622      	mov	r2, r4
  403348:	2710      	movs	r7, #16
  40334a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40334e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403350:	e005      	b.n	40335e <_svfprintf_r+0x11fa>
  403352:	f109 0908 	add.w	r9, r9, #8
  403356:	3d10      	subs	r5, #16
  403358:	2d10      	cmp	r5, #16
  40335a:	f340 80b6 	ble.w	4034ca <_svfprintf_r+0x1366>
  40335e:	3301      	adds	r3, #1
  403360:	3210      	adds	r2, #16
  403362:	2b07      	cmp	r3, #7
  403364:	9225      	str	r2, [sp, #148]	; 0x94
  403366:	9324      	str	r3, [sp, #144]	; 0x90
  403368:	f8c9 a000 	str.w	sl, [r9]
  40336c:	f8c9 7004 	str.w	r7, [r9, #4]
  403370:	ddef      	ble.n	403352 <_svfprintf_r+0x11ee>
  403372:	aa23      	add	r2, sp, #140	; 0x8c
  403374:	4621      	mov	r1, r4
  403376:	4658      	mov	r0, fp
  403378:	f002 f970 	bl	40565c <__ssprint_r>
  40337c:	2800      	cmp	r0, #0
  40337e:	f47e afea 	bne.w	402356 <_svfprintf_r+0x1f2>
  403382:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403384:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403386:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40338a:	e7e4      	b.n	403356 <_svfprintf_r+0x11f2>
  40338c:	9a07      	ldr	r2, [sp, #28]
  40338e:	f7ff ba38 	b.w	402802 <_svfprintf_r+0x69e>
  403392:	9a07      	ldr	r2, [sp, #28]
  403394:	e590      	b.n	402eb8 <_svfprintf_r+0xd54>
  403396:	9b07      	ldr	r3, [sp, #28]
  403398:	f043 0320 	orr.w	r3, r3, #32
  40339c:	9307      	str	r3, [sp, #28]
  40339e:	f108 0801 	add.w	r8, r8, #1
  4033a2:	f898 3000 	ldrb.w	r3, [r8]
  4033a6:	f7fe bf36 	b.w	402216 <_svfprintf_r+0xb2>
  4033aa:	aa23      	add	r2, sp, #140	; 0x8c
  4033ac:	9909      	ldr	r1, [sp, #36]	; 0x24
  4033ae:	980a      	ldr	r0, [sp, #40]	; 0x28
  4033b0:	f002 f954 	bl	40565c <__ssprint_r>
  4033b4:	2800      	cmp	r0, #0
  4033b6:	f47e afce 	bne.w	402356 <_svfprintf_r+0x1f2>
  4033ba:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4033bc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4033c0:	f7ff bbb6 	b.w	402b30 <_svfprintf_r+0x9cc>
  4033c4:	2140      	movs	r1, #64	; 0x40
  4033c6:	980a      	ldr	r0, [sp, #40]	; 0x28
  4033c8:	f001 fa02 	bl	4047d0 <_malloc_r>
  4033cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4033ce:	6010      	str	r0, [r2, #0]
  4033d0:	6110      	str	r0, [r2, #16]
  4033d2:	2800      	cmp	r0, #0
  4033d4:	f000 81e5 	beq.w	4037a2 <_svfprintf_r+0x163e>
  4033d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4033da:	2340      	movs	r3, #64	; 0x40
  4033dc:	6153      	str	r3, [r2, #20]
  4033de:	f7fe bed8 	b.w	402192 <_svfprintf_r+0x2e>
  4033e2:	a821      	add	r0, sp, #132	; 0x84
  4033e4:	a91e      	add	r1, sp, #120	; 0x78
  4033e6:	9004      	str	r0, [sp, #16]
  4033e8:	9103      	str	r1, [sp, #12]
  4033ea:	a81d      	add	r0, sp, #116	; 0x74
  4033ec:	2103      	movs	r1, #3
  4033ee:	9002      	str	r0, [sp, #8]
  4033f0:	9a08      	ldr	r2, [sp, #32]
  4033f2:	f8cd b004 	str.w	fp, [sp, #4]
  4033f6:	463b      	mov	r3, r7
  4033f8:	9100      	str	r1, [sp, #0]
  4033fa:	980a      	ldr	r0, [sp, #40]	; 0x28
  4033fc:	f000 faa4 	bl	403948 <_dtoa_r>
  403400:	465d      	mov	r5, fp
  403402:	4606      	mov	r6, r0
  403404:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403406:	2b46      	cmp	r3, #70	; 0x46
  403408:	eb06 0405 	add.w	r4, r6, r5
  40340c:	f47f aeb6 	bne.w	40317c <_svfprintf_r+0x1018>
  403410:	7833      	ldrb	r3, [r6, #0]
  403412:	2b30      	cmp	r3, #48	; 0x30
  403414:	f000 817c 	beq.w	403710 <_svfprintf_r+0x15ac>
  403418:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40341a:	442c      	add	r4, r5
  40341c:	e6ae      	b.n	40317c <_svfprintf_r+0x1018>
  40341e:	aa23      	add	r2, sp, #140	; 0x8c
  403420:	9909      	ldr	r1, [sp, #36]	; 0x24
  403422:	980a      	ldr	r0, [sp, #40]	; 0x28
  403424:	f002 f91a 	bl	40565c <__ssprint_r>
  403428:	2800      	cmp	r0, #0
  40342a:	f47e af94 	bne.w	402356 <_svfprintf_r+0x1f2>
  40342e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  403430:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403432:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403436:	e766      	b.n	403306 <_svfprintf_r+0x11a2>
  403438:	f1bb 0f00 	cmp.w	fp, #0
  40343c:	bf08      	it	eq
  40343e:	f04f 0b01 	moveq.w	fp, #1
  403442:	e667      	b.n	403114 <_svfprintf_r+0xfb0>
  403444:	970e      	str	r7, [sp, #56]	; 0x38
  403446:	4617      	mov	r7, r2
  403448:	e55e      	b.n	402f08 <_svfprintf_r+0xda4>
  40344a:	4630      	mov	r0, r6
  40344c:	f002 f898 	bl	405580 <strlen>
  403450:	46a3      	mov	fp, r4
  403452:	4603      	mov	r3, r0
  403454:	900d      	str	r0, [sp, #52]	; 0x34
  403456:	f7ff baf4 	b.w	402a42 <_svfprintf_r+0x8de>
  40345a:	aa23      	add	r2, sp, #140	; 0x8c
  40345c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40345e:	980a      	ldr	r0, [sp, #40]	; 0x28
  403460:	f002 f8fc 	bl	40565c <__ssprint_r>
  403464:	2800      	cmp	r0, #0
  403466:	f47e af76 	bne.w	402356 <_svfprintf_r+0x1f2>
  40346a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40346c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40346e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403472:	9912      	ldr	r1, [sp, #72]	; 0x48
  403474:	f8c9 6000 	str.w	r6, [r9]
  403478:	3301      	adds	r3, #1
  40347a:	440c      	add	r4, r1
  40347c:	2b07      	cmp	r3, #7
  40347e:	9425      	str	r4, [sp, #148]	; 0x94
  403480:	9324      	str	r3, [sp, #144]	; 0x90
  403482:	f8c9 1004 	str.w	r1, [r9, #4]
  403486:	f77f a8fb 	ble.w	402680 <_svfprintf_r+0x51c>
  40348a:	e411      	b.n	402cb0 <_svfprintf_r+0xb4c>
  40348c:	272d      	movs	r7, #45	; 0x2d
  40348e:	9308      	str	r3, [sp, #32]
  403490:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403492:	9307      	str	r3, [sp, #28]
  403494:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  403498:	f04f 0b00 	mov.w	fp, #0
  40349c:	f7ff b829 	b.w	4024f2 <_svfprintf_r+0x38e>
  4034a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4034a2:	1cdd      	adds	r5, r3, #3
  4034a4:	db1e      	blt.n	4034e4 <_svfprintf_r+0x1380>
  4034a6:	459b      	cmp	fp, r3
  4034a8:	db1c      	blt.n	4034e4 <_svfprintf_r+0x1380>
  4034aa:	9313      	str	r3, [sp, #76]	; 0x4c
  4034ac:	e689      	b.n	4031c2 <_svfprintf_r+0x105e>
  4034ae:	4623      	mov	r3, r4
  4034b0:	e677      	b.n	4031a2 <_svfprintf_r+0x103e>
  4034b2:	aa23      	add	r2, sp, #140	; 0x8c
  4034b4:	9909      	ldr	r1, [sp, #36]	; 0x24
  4034b6:	980a      	ldr	r0, [sp, #40]	; 0x28
  4034b8:	f002 f8d0 	bl	40565c <__ssprint_r>
  4034bc:	2800      	cmp	r0, #0
  4034be:	f47e af4a 	bne.w	402356 <_svfprintf_r+0x1f2>
  4034c2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4034c4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4034c8:	e459      	b.n	402d7e <_svfprintf_r+0xc1a>
  4034ca:	4614      	mov	r4, r2
  4034cc:	3301      	adds	r3, #1
  4034ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4034d0:	9324      	str	r3, [sp, #144]	; 0x90
  4034d2:	442c      	add	r4, r5
  4034d4:	2b07      	cmp	r3, #7
  4034d6:	9425      	str	r4, [sp, #148]	; 0x94
  4034d8:	e889 0024 	stmia.w	r9, {r2, r5}
  4034dc:	dcbd      	bgt.n	40345a <_svfprintf_r+0x12f6>
  4034de:	f109 0908 	add.w	r9, r9, #8
  4034e2:	e7c6      	b.n	403472 <_svfprintf_r+0x130e>
  4034e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4034e6:	3a02      	subs	r2, #2
  4034e8:	9211      	str	r2, [sp, #68]	; 0x44
  4034ea:	3b01      	subs	r3, #1
  4034ec:	2b00      	cmp	r3, #0
  4034ee:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4034f2:	931d      	str	r3, [sp, #116]	; 0x74
  4034f4:	bfb8      	it	lt
  4034f6:	425b      	neglt	r3, r3
  4034f8:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  4034fc:	bfb4      	ite	lt
  4034fe:	222d      	movlt	r2, #45	; 0x2d
  403500:	222b      	movge	r2, #43	; 0x2b
  403502:	2b09      	cmp	r3, #9
  403504:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  403508:	f340 80f1 	ble.w	4036ee <_svfprintf_r+0x158a>
  40350c:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  403510:	4604      	mov	r4, r0
  403512:	4a2d      	ldr	r2, [pc, #180]	; (4035c8 <_svfprintf_r+0x1464>)
  403514:	fb82 2103 	smull	r2, r1, r2, r3
  403518:	17da      	asrs	r2, r3, #31
  40351a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  40351e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  403522:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  403526:	f103 0130 	add.w	r1, r3, #48	; 0x30
  40352a:	2a09      	cmp	r2, #9
  40352c:	4613      	mov	r3, r2
  40352e:	f804 1d01 	strb.w	r1, [r4, #-1]!
  403532:	dcee      	bgt.n	403512 <_svfprintf_r+0x13ae>
  403534:	4621      	mov	r1, r4
  403536:	3330      	adds	r3, #48	; 0x30
  403538:	b2da      	uxtb	r2, r3
  40353a:	f801 2d01 	strb.w	r2, [r1, #-1]!
  40353e:	4288      	cmp	r0, r1
  403540:	f240 813a 	bls.w	4037b8 <_svfprintf_r+0x1654>
  403544:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  403548:	4623      	mov	r3, r4
  40354a:	e001      	b.n	403550 <_svfprintf_r+0x13ec>
  40354c:	f813 2b01 	ldrb.w	r2, [r3], #1
  403550:	f801 2b01 	strb.w	r2, [r1], #1
  403554:	4298      	cmp	r0, r3
  403556:	d1f9      	bne.n	40354c <_svfprintf_r+0x13e8>
  403558:	1c43      	adds	r3, r0, #1
  40355a:	1b1b      	subs	r3, r3, r4
  40355c:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  403560:	4413      	add	r3, r2
  403562:	aa1f      	add	r2, sp, #124	; 0x7c
  403564:	1a9b      	subs	r3, r3, r2
  403566:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403568:	9319      	str	r3, [sp, #100]	; 0x64
  40356a:	2a01      	cmp	r2, #1
  40356c:	4413      	add	r3, r2
  40356e:	930d      	str	r3, [sp, #52]	; 0x34
  403570:	f340 80ea 	ble.w	403748 <_svfprintf_r+0x15e4>
  403574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403576:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403578:	4413      	add	r3, r2
  40357a:	2200      	movs	r2, #0
  40357c:	930d      	str	r3, [sp, #52]	; 0x34
  40357e:	9213      	str	r2, [sp, #76]	; 0x4c
  403580:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403584:	e62b      	b.n	4031de <_svfprintf_r+0x107a>
  403586:	aa23      	add	r2, sp, #140	; 0x8c
  403588:	9909      	ldr	r1, [sp, #36]	; 0x24
  40358a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40358c:	f002 f866 	bl	40565c <__ssprint_r>
  403590:	2800      	cmp	r0, #0
  403592:	f47e aee0 	bne.w	402356 <_svfprintf_r+0x1f2>
  403596:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403598:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40359a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40359e:	e4f6      	b.n	402f8e <_svfprintf_r+0xe2a>
  4035a0:	2d06      	cmp	r5, #6
  4035a2:	462b      	mov	r3, r5
  4035a4:	bf28      	it	cs
  4035a6:	2306      	movcs	r3, #6
  4035a8:	930d      	str	r3, [sp, #52]	; 0x34
  4035aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4035ae:	46b3      	mov	fp, r6
  4035b0:	970e      	str	r7, [sp, #56]	; 0x38
  4035b2:	9613      	str	r6, [sp, #76]	; 0x4c
  4035b4:	4637      	mov	r7, r6
  4035b6:	9308      	str	r3, [sp, #32]
  4035b8:	4e04      	ldr	r6, [pc, #16]	; (4035cc <_svfprintf_r+0x1468>)
  4035ba:	f7fe bf99 	b.w	4024f0 <_svfprintf_r+0x38c>
  4035be:	bf00      	nop
  4035c0:	00406cf4 	.word	0x00406cf4
  4035c4:	00406ca4 	.word	0x00406ca4
  4035c8:	66666667 	.word	0x66666667
  4035cc:	00406cec 	.word	0x00406cec
  4035d0:	aa23      	add	r2, sp, #140	; 0x8c
  4035d2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4035d4:	980a      	ldr	r0, [sp, #40]	; 0x28
  4035d6:	f002 f841 	bl	40565c <__ssprint_r>
  4035da:	2800      	cmp	r0, #0
  4035dc:	f47e aebb 	bne.w	402356 <_svfprintf_r+0x1f2>
  4035e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4035e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4035e4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4035e6:	1ad3      	subs	r3, r2, r3
  4035e8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4035ec:	e4e7      	b.n	402fbe <_svfprintf_r+0xe5a>
  4035ee:	f04f 0b06 	mov.w	fp, #6
  4035f2:	e58f      	b.n	403114 <_svfprintf_r+0xfb0>
  4035f4:	a821      	add	r0, sp, #132	; 0x84
  4035f6:	a91e      	add	r1, sp, #120	; 0x78
  4035f8:	9004      	str	r0, [sp, #16]
  4035fa:	9103      	str	r1, [sp, #12]
  4035fc:	a81d      	add	r0, sp, #116	; 0x74
  4035fe:	2103      	movs	r1, #3
  403600:	9002      	str	r0, [sp, #8]
  403602:	9a08      	ldr	r2, [sp, #32]
  403604:	f8cd b004 	str.w	fp, [sp, #4]
  403608:	463b      	mov	r3, r7
  40360a:	9100      	str	r1, [sp, #0]
  40360c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40360e:	f000 f99b 	bl	403948 <_dtoa_r>
  403612:	465d      	mov	r5, fp
  403614:	4606      	mov	r6, r0
  403616:	eb00 040b 	add.w	r4, r0, fp
  40361a:	e6f9      	b.n	403410 <_svfprintf_r+0x12ac>
  40361c:	9307      	str	r3, [sp, #28]
  40361e:	f7ff b959 	b.w	4028d4 <_svfprintf_r+0x770>
  403622:	272d      	movs	r7, #45	; 0x2d
  403624:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  403628:	f7ff b8b2 	b.w	402790 <_svfprintf_r+0x62c>
  40362c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40362e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403630:	4413      	add	r3, r2
  403632:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403634:	930d      	str	r3, [sp, #52]	; 0x34
  403636:	2a00      	cmp	r2, #0
  403638:	dd7e      	ble.n	403738 <_svfprintf_r+0x15d4>
  40363a:	2267      	movs	r2, #103	; 0x67
  40363c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403640:	9211      	str	r2, [sp, #68]	; 0x44
  403642:	e5cc      	b.n	4031de <_svfprintf_r+0x107a>
  403644:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  403648:	970e      	str	r7, [sp, #56]	; 0x38
  40364a:	9308      	str	r3, [sp, #32]
  40364c:	950d      	str	r5, [sp, #52]	; 0x34
  40364e:	4683      	mov	fp, r0
  403650:	9013      	str	r0, [sp, #76]	; 0x4c
  403652:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  403656:	f7fe bf4b 	b.w	4024f0 <_svfprintf_r+0x38c>
  40365a:	9b07      	ldr	r3, [sp, #28]
  40365c:	07db      	lsls	r3, r3, #31
  40365e:	465f      	mov	r7, fp
  403660:	d505      	bpl.n	40366e <_svfprintf_r+0x150a>
  403662:	ae40      	add	r6, sp, #256	; 0x100
  403664:	2330      	movs	r3, #48	; 0x30
  403666:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40366a:	f7fe bf37 	b.w	4024dc <_svfprintf_r+0x378>
  40366e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  403672:	ae30      	add	r6, sp, #192	; 0xc0
  403674:	f7fe bf35 	b.w	4024e2 <_svfprintf_r+0x37e>
  403678:	2b00      	cmp	r3, #0
  40367a:	dd7d      	ble.n	403778 <_svfprintf_r+0x1614>
  40367c:	f1bb 0f00 	cmp.w	fp, #0
  403680:	d13d      	bne.n	4036fe <_svfprintf_r+0x159a>
  403682:	9a07      	ldr	r2, [sp, #28]
  403684:	07d4      	lsls	r4, r2, #31
  403686:	d43a      	bmi.n	4036fe <_svfprintf_r+0x159a>
  403688:	461a      	mov	r2, r3
  40368a:	920d      	str	r2, [sp, #52]	; 0x34
  40368c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403690:	e5a5      	b.n	4031de <_svfprintf_r+0x107a>
  403692:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403694:	2b47      	cmp	r3, #71	; 0x47
  403696:	f47f ad70 	bne.w	40317a <_svfprintf_r+0x1016>
  40369a:	9b07      	ldr	r3, [sp, #28]
  40369c:	07db      	lsls	r3, r3, #31
  40369e:	f53f aeb1 	bmi.w	403404 <_svfprintf_r+0x12a0>
  4036a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4036a4:	1b9b      	subs	r3, r3, r6
  4036a6:	9312      	str	r3, [sp, #72]	; 0x48
  4036a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4036aa:	2b47      	cmp	r3, #71	; 0x47
  4036ac:	f43f aef8 	beq.w	4034a0 <_svfprintf_r+0x133c>
  4036b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4036b2:	e71a      	b.n	4034ea <_svfprintf_r+0x1386>
  4036b4:	aa23      	add	r2, sp, #140	; 0x8c
  4036b6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4036b8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4036ba:	f001 ffcf 	bl	40565c <__ssprint_r>
  4036be:	2800      	cmp	r0, #0
  4036c0:	f47e ae49 	bne.w	402356 <_svfprintf_r+0x1f2>
  4036c4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4036c6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4036c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4036ca:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4036ce:	e631      	b.n	403334 <_svfprintf_r+0x11d0>
  4036d0:	46a0      	mov	r8, r4
  4036d2:	2500      	movs	r5, #0
  4036d4:	f7fe bda1 	b.w	40221a <_svfprintf_r+0xb6>
  4036d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4036da:	e562      	b.n	4031a2 <_svfprintf_r+0x103e>
  4036dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4036de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4036e0:	4413      	add	r3, r2
  4036e2:	2267      	movs	r2, #103	; 0x67
  4036e4:	930d      	str	r3, [sp, #52]	; 0x34
  4036e6:	9211      	str	r2, [sp, #68]	; 0x44
  4036e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4036ec:	e577      	b.n	4031de <_svfprintf_r+0x107a>
  4036ee:	3330      	adds	r3, #48	; 0x30
  4036f0:	2230      	movs	r2, #48	; 0x30
  4036f2:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  4036f6:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  4036fa:	ab20      	add	r3, sp, #128	; 0x80
  4036fc:	e731      	b.n	403562 <_svfprintf_r+0x13fe>
  4036fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403700:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403702:	189d      	adds	r5, r3, r2
  403704:	eb05 030b 	add.w	r3, r5, fp
  403708:	930d      	str	r3, [sp, #52]	; 0x34
  40370a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40370e:	e566      	b.n	4031de <_svfprintf_r+0x107a>
  403710:	9808      	ldr	r0, [sp, #32]
  403712:	4639      	mov	r1, r7
  403714:	2200      	movs	r2, #0
  403716:	2300      	movs	r3, #0
  403718:	f003 f84c 	bl	4067b4 <__aeabi_dcmpeq>
  40371c:	2800      	cmp	r0, #0
  40371e:	f47f ae7b 	bne.w	403418 <_svfprintf_r+0x12b4>
  403722:	f1c5 0501 	rsb	r5, r5, #1
  403726:	951d      	str	r5, [sp, #116]	; 0x74
  403728:	442c      	add	r4, r5
  40372a:	e527      	b.n	40317c <_svfprintf_r+0x1018>
  40372c:	4e32      	ldr	r6, [pc, #200]	; (4037f8 <_svfprintf_r+0x1694>)
  40372e:	4b33      	ldr	r3, [pc, #204]	; (4037fc <_svfprintf_r+0x1698>)
  403730:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  403734:	f7ff b82e 	b.w	402794 <_svfprintf_r+0x630>
  403738:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40373a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40373c:	f1c3 0301 	rsb	r3, r3, #1
  403740:	441a      	add	r2, r3
  403742:	4613      	mov	r3, r2
  403744:	920d      	str	r2, [sp, #52]	; 0x34
  403746:	e778      	b.n	40363a <_svfprintf_r+0x14d6>
  403748:	9b07      	ldr	r3, [sp, #28]
  40374a:	f013 0301 	ands.w	r3, r3, #1
  40374e:	f47f af11 	bne.w	403574 <_svfprintf_r+0x1410>
  403752:	9313      	str	r3, [sp, #76]	; 0x4c
  403754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403756:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40375a:	e540      	b.n	4031de <_svfprintf_r+0x107a>
  40375c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40375e:	f898 3001 	ldrb.w	r3, [r8, #1]
  403762:	6805      	ldr	r5, [r0, #0]
  403764:	3004      	adds	r0, #4
  403766:	2d00      	cmp	r5, #0
  403768:	900e      	str	r0, [sp, #56]	; 0x38
  40376a:	46a0      	mov	r8, r4
  40376c:	f6be ad53 	bge.w	402216 <_svfprintf_r+0xb2>
  403770:	f04f 35ff 	mov.w	r5, #4294967295
  403774:	f7fe bd4f 	b.w	402216 <_svfprintf_r+0xb2>
  403778:	f1bb 0f00 	cmp.w	fp, #0
  40377c:	d102      	bne.n	403784 <_svfprintf_r+0x1620>
  40377e:	9b07      	ldr	r3, [sp, #28]
  403780:	07d8      	lsls	r0, r3, #31
  403782:	d507      	bpl.n	403794 <_svfprintf_r+0x1630>
  403784:	9b16      	ldr	r3, [sp, #88]	; 0x58
  403786:	1c5d      	adds	r5, r3, #1
  403788:	eb05 030b 	add.w	r3, r5, fp
  40378c:	930d      	str	r3, [sp, #52]	; 0x34
  40378e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403792:	e524      	b.n	4031de <_svfprintf_r+0x107a>
  403794:	2301      	movs	r3, #1
  403796:	930d      	str	r3, [sp, #52]	; 0x34
  403798:	e521      	b.n	4031de <_svfprintf_r+0x107a>
  40379a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40379e:	f7ff b921 	b.w	4029e4 <_svfprintf_r+0x880>
  4037a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4037a4:	230c      	movs	r3, #12
  4037a6:	6013      	str	r3, [r2, #0]
  4037a8:	f04f 30ff 	mov.w	r0, #4294967295
  4037ac:	f7fe bddc 	b.w	402368 <_svfprintf_r+0x204>
  4037b0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4037b4:	f7ff b8f9 	b.w	4029aa <_svfprintf_r+0x846>
  4037b8:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  4037bc:	e6d1      	b.n	403562 <_svfprintf_r+0x13fe>
  4037be:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4037c2:	f7fe bdd9 	b.w	402378 <_svfprintf_r+0x214>
  4037c6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4037ca:	f7ff b857 	b.w	40287c <_svfprintf_r+0x718>
  4037ce:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4037d2:	f7ff b825 	b.w	402820 <_svfprintf_r+0x6bc>
  4037d6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4037da:	f7ff b94c 	b.w	402a76 <_svfprintf_r+0x912>
  4037de:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4037e2:	f7fe bff3 	b.w	4027cc <_svfprintf_r+0x668>
  4037e6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4037ea:	f7fe bfa3 	b.w	402734 <_svfprintf_r+0x5d0>
  4037ee:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4037f2:	f7fe be33 	b.w	40245c <_svfprintf_r+0x2f8>
  4037f6:	bf00      	nop
  4037f8:	00406cc0 	.word	0x00406cc0
  4037fc:	00406cbc 	.word	0x00406cbc

00403800 <register_fini>:
  403800:	4b02      	ldr	r3, [pc, #8]	; (40380c <register_fini+0xc>)
  403802:	b113      	cbz	r3, 40380a <register_fini+0xa>
  403804:	4802      	ldr	r0, [pc, #8]	; (403810 <register_fini+0x10>)
  403806:	f000 b805 	b.w	403814 <atexit>
  40380a:	4770      	bx	lr
  40380c:	00000000 	.word	0x00000000
  403810:	004047a1 	.word	0x004047a1

00403814 <atexit>:
  403814:	2300      	movs	r3, #0
  403816:	4601      	mov	r1, r0
  403818:	461a      	mov	r2, r3
  40381a:	4618      	mov	r0, r3
  40381c:	f001 bf9e 	b.w	40575c <__register_exitproc>

00403820 <quorem>:
  403820:	6902      	ldr	r2, [r0, #16]
  403822:	690b      	ldr	r3, [r1, #16]
  403824:	4293      	cmp	r3, r2
  403826:	f300 808d 	bgt.w	403944 <quorem+0x124>
  40382a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40382e:	f103 38ff 	add.w	r8, r3, #4294967295
  403832:	f101 0714 	add.w	r7, r1, #20
  403836:	f100 0b14 	add.w	fp, r0, #20
  40383a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40383e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  403842:	ea4f 0488 	mov.w	r4, r8, lsl #2
  403846:	b083      	sub	sp, #12
  403848:	3201      	adds	r2, #1
  40384a:	fbb3 f9f2 	udiv	r9, r3, r2
  40384e:	eb0b 0304 	add.w	r3, fp, r4
  403852:	9400      	str	r4, [sp, #0]
  403854:	eb07 0a04 	add.w	sl, r7, r4
  403858:	9301      	str	r3, [sp, #4]
  40385a:	f1b9 0f00 	cmp.w	r9, #0
  40385e:	d039      	beq.n	4038d4 <quorem+0xb4>
  403860:	2500      	movs	r5, #0
  403862:	46bc      	mov	ip, r7
  403864:	46de      	mov	lr, fp
  403866:	462b      	mov	r3, r5
  403868:	f85c 6b04 	ldr.w	r6, [ip], #4
  40386c:	f8de 2000 	ldr.w	r2, [lr]
  403870:	b2b4      	uxth	r4, r6
  403872:	fb09 5504 	mla	r5, r9, r4, r5
  403876:	0c36      	lsrs	r6, r6, #16
  403878:	0c2c      	lsrs	r4, r5, #16
  40387a:	fb09 4406 	mla	r4, r9, r6, r4
  40387e:	b2ad      	uxth	r5, r5
  403880:	1b5b      	subs	r3, r3, r5
  403882:	b2a6      	uxth	r6, r4
  403884:	fa13 f382 	uxtah	r3, r3, r2
  403888:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  40388c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  403890:	b29b      	uxth	r3, r3
  403892:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  403896:	45e2      	cmp	sl, ip
  403898:	f84e 3b04 	str.w	r3, [lr], #4
  40389c:	ea4f 4514 	mov.w	r5, r4, lsr #16
  4038a0:	ea4f 4326 	mov.w	r3, r6, asr #16
  4038a4:	d2e0      	bcs.n	403868 <quorem+0x48>
  4038a6:	9b00      	ldr	r3, [sp, #0]
  4038a8:	f85b 3003 	ldr.w	r3, [fp, r3]
  4038ac:	b993      	cbnz	r3, 4038d4 <quorem+0xb4>
  4038ae:	9c01      	ldr	r4, [sp, #4]
  4038b0:	1f23      	subs	r3, r4, #4
  4038b2:	459b      	cmp	fp, r3
  4038b4:	d20c      	bcs.n	4038d0 <quorem+0xb0>
  4038b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4038ba:	b94b      	cbnz	r3, 4038d0 <quorem+0xb0>
  4038bc:	f1a4 0308 	sub.w	r3, r4, #8
  4038c0:	e002      	b.n	4038c8 <quorem+0xa8>
  4038c2:	681a      	ldr	r2, [r3, #0]
  4038c4:	3b04      	subs	r3, #4
  4038c6:	b91a      	cbnz	r2, 4038d0 <quorem+0xb0>
  4038c8:	459b      	cmp	fp, r3
  4038ca:	f108 38ff 	add.w	r8, r8, #4294967295
  4038ce:	d3f8      	bcc.n	4038c2 <quorem+0xa2>
  4038d0:	f8c0 8010 	str.w	r8, [r0, #16]
  4038d4:	4604      	mov	r4, r0
  4038d6:	f001 fd29 	bl	40532c <__mcmp>
  4038da:	2800      	cmp	r0, #0
  4038dc:	db2e      	blt.n	40393c <quorem+0x11c>
  4038de:	f109 0901 	add.w	r9, r9, #1
  4038e2:	465d      	mov	r5, fp
  4038e4:	2300      	movs	r3, #0
  4038e6:	f857 1b04 	ldr.w	r1, [r7], #4
  4038ea:	6828      	ldr	r0, [r5, #0]
  4038ec:	b28a      	uxth	r2, r1
  4038ee:	1a9a      	subs	r2, r3, r2
  4038f0:	0c09      	lsrs	r1, r1, #16
  4038f2:	fa12 f280 	uxtah	r2, r2, r0
  4038f6:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  4038fa:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4038fe:	b291      	uxth	r1, r2
  403900:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  403904:	45ba      	cmp	sl, r7
  403906:	f845 1b04 	str.w	r1, [r5], #4
  40390a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40390e:	d2ea      	bcs.n	4038e6 <quorem+0xc6>
  403910:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  403914:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  403918:	b982      	cbnz	r2, 40393c <quorem+0x11c>
  40391a:	1f1a      	subs	r2, r3, #4
  40391c:	4593      	cmp	fp, r2
  40391e:	d20b      	bcs.n	403938 <quorem+0x118>
  403920:	f853 2c04 	ldr.w	r2, [r3, #-4]
  403924:	b942      	cbnz	r2, 403938 <quorem+0x118>
  403926:	3b08      	subs	r3, #8
  403928:	e002      	b.n	403930 <quorem+0x110>
  40392a:	681a      	ldr	r2, [r3, #0]
  40392c:	3b04      	subs	r3, #4
  40392e:	b91a      	cbnz	r2, 403938 <quorem+0x118>
  403930:	459b      	cmp	fp, r3
  403932:	f108 38ff 	add.w	r8, r8, #4294967295
  403936:	d3f8      	bcc.n	40392a <quorem+0x10a>
  403938:	f8c4 8010 	str.w	r8, [r4, #16]
  40393c:	4648      	mov	r0, r9
  40393e:	b003      	add	sp, #12
  403940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403944:	2000      	movs	r0, #0
  403946:	4770      	bx	lr

00403948 <_dtoa_r>:
  403948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40394c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40394e:	b097      	sub	sp, #92	; 0x5c
  403950:	4681      	mov	r9, r0
  403952:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  403954:	4692      	mov	sl, r2
  403956:	469b      	mov	fp, r3
  403958:	b149      	cbz	r1, 40396e <_dtoa_r+0x26>
  40395a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40395c:	604a      	str	r2, [r1, #4]
  40395e:	2301      	movs	r3, #1
  403960:	4093      	lsls	r3, r2
  403962:	608b      	str	r3, [r1, #8]
  403964:	f001 fb00 	bl	404f68 <_Bfree>
  403968:	2300      	movs	r3, #0
  40396a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  40396e:	f1bb 0f00 	cmp.w	fp, #0
  403972:	46d8      	mov	r8, fp
  403974:	db33      	blt.n	4039de <_dtoa_r+0x96>
  403976:	2300      	movs	r3, #0
  403978:	6023      	str	r3, [r4, #0]
  40397a:	4ba5      	ldr	r3, [pc, #660]	; (403c10 <_dtoa_r+0x2c8>)
  40397c:	461a      	mov	r2, r3
  40397e:	ea08 0303 	and.w	r3, r8, r3
  403982:	4293      	cmp	r3, r2
  403984:	d014      	beq.n	4039b0 <_dtoa_r+0x68>
  403986:	4650      	mov	r0, sl
  403988:	4659      	mov	r1, fp
  40398a:	2200      	movs	r2, #0
  40398c:	2300      	movs	r3, #0
  40398e:	f002 ff11 	bl	4067b4 <__aeabi_dcmpeq>
  403992:	4605      	mov	r5, r0
  403994:	b348      	cbz	r0, 4039ea <_dtoa_r+0xa2>
  403996:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403998:	2301      	movs	r3, #1
  40399a:	6013      	str	r3, [r2, #0]
  40399c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40399e:	2b00      	cmp	r3, #0
  4039a0:	f000 80c5 	beq.w	403b2e <_dtoa_r+0x1e6>
  4039a4:	489b      	ldr	r0, [pc, #620]	; (403c14 <_dtoa_r+0x2cc>)
  4039a6:	6018      	str	r0, [r3, #0]
  4039a8:	3801      	subs	r0, #1
  4039aa:	b017      	add	sp, #92	; 0x5c
  4039ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4039b2:	f242 730f 	movw	r3, #9999	; 0x270f
  4039b6:	6013      	str	r3, [r2, #0]
  4039b8:	f1ba 0f00 	cmp.w	sl, #0
  4039bc:	f000 80a2 	beq.w	403b04 <_dtoa_r+0x1bc>
  4039c0:	4895      	ldr	r0, [pc, #596]	; (403c18 <_dtoa_r+0x2d0>)
  4039c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4039c4:	2b00      	cmp	r3, #0
  4039c6:	d0f0      	beq.n	4039aa <_dtoa_r+0x62>
  4039c8:	78c3      	ldrb	r3, [r0, #3]
  4039ca:	2b00      	cmp	r3, #0
  4039cc:	f000 80b1 	beq.w	403b32 <_dtoa_r+0x1ea>
  4039d0:	f100 0308 	add.w	r3, r0, #8
  4039d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4039d6:	6013      	str	r3, [r2, #0]
  4039d8:	b017      	add	sp, #92	; 0x5c
  4039da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039de:	2301      	movs	r3, #1
  4039e0:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  4039e4:	6023      	str	r3, [r4, #0]
  4039e6:	46c3      	mov	fp, r8
  4039e8:	e7c7      	b.n	40397a <_dtoa_r+0x32>
  4039ea:	aa14      	add	r2, sp, #80	; 0x50
  4039ec:	ab15      	add	r3, sp, #84	; 0x54
  4039ee:	9201      	str	r2, [sp, #4]
  4039f0:	9300      	str	r3, [sp, #0]
  4039f2:	4652      	mov	r2, sl
  4039f4:	465b      	mov	r3, fp
  4039f6:	4648      	mov	r0, r9
  4039f8:	f001 fd42 	bl	405480 <__d2b>
  4039fc:	ea5f 5418 	movs.w	r4, r8, lsr #20
  403a00:	9008      	str	r0, [sp, #32]
  403a02:	f040 8088 	bne.w	403b16 <_dtoa_r+0x1ce>
  403a06:	9d14      	ldr	r5, [sp, #80]	; 0x50
  403a08:	9c15      	ldr	r4, [sp, #84]	; 0x54
  403a0a:	442c      	add	r4, r5
  403a0c:	f204 4332 	addw	r3, r4, #1074	; 0x432
  403a10:	2b20      	cmp	r3, #32
  403a12:	f340 8291 	ble.w	403f38 <_dtoa_r+0x5f0>
  403a16:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  403a1a:	f204 4012 	addw	r0, r4, #1042	; 0x412
  403a1e:	fa08 f803 	lsl.w	r8, r8, r3
  403a22:	fa2a f000 	lsr.w	r0, sl, r0
  403a26:	ea40 0008 	orr.w	r0, r0, r8
  403a2a:	f002 fbe5 	bl	4061f8 <__aeabi_ui2d>
  403a2e:	2301      	movs	r3, #1
  403a30:	3c01      	subs	r4, #1
  403a32:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  403a36:	9310      	str	r3, [sp, #64]	; 0x40
  403a38:	2200      	movs	r2, #0
  403a3a:	4b78      	ldr	r3, [pc, #480]	; (403c1c <_dtoa_r+0x2d4>)
  403a3c:	f002 fa9e 	bl	405f7c <__aeabi_dsub>
  403a40:	a36d      	add	r3, pc, #436	; (adr r3, 403bf8 <_dtoa_r+0x2b0>)
  403a42:	e9d3 2300 	ldrd	r2, r3, [r3]
  403a46:	f002 fc4d 	bl	4062e4 <__aeabi_dmul>
  403a4a:	a36d      	add	r3, pc, #436	; (adr r3, 403c00 <_dtoa_r+0x2b8>)
  403a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403a50:	f002 fa96 	bl	405f80 <__adddf3>
  403a54:	4606      	mov	r6, r0
  403a56:	4620      	mov	r0, r4
  403a58:	460f      	mov	r7, r1
  403a5a:	f002 fbdd 	bl	406218 <__aeabi_i2d>
  403a5e:	a36a      	add	r3, pc, #424	; (adr r3, 403c08 <_dtoa_r+0x2c0>)
  403a60:	e9d3 2300 	ldrd	r2, r3, [r3]
  403a64:	f002 fc3e 	bl	4062e4 <__aeabi_dmul>
  403a68:	4602      	mov	r2, r0
  403a6a:	460b      	mov	r3, r1
  403a6c:	4630      	mov	r0, r6
  403a6e:	4639      	mov	r1, r7
  403a70:	f002 fa86 	bl	405f80 <__adddf3>
  403a74:	4606      	mov	r6, r0
  403a76:	460f      	mov	r7, r1
  403a78:	f002 fee4 	bl	406844 <__aeabi_d2iz>
  403a7c:	2200      	movs	r2, #0
  403a7e:	9004      	str	r0, [sp, #16]
  403a80:	2300      	movs	r3, #0
  403a82:	4630      	mov	r0, r6
  403a84:	4639      	mov	r1, r7
  403a86:	f002 fe9f 	bl	4067c8 <__aeabi_dcmplt>
  403a8a:	2800      	cmp	r0, #0
  403a8c:	f040 8230 	bne.w	403ef0 <_dtoa_r+0x5a8>
  403a90:	9e04      	ldr	r6, [sp, #16]
  403a92:	2e16      	cmp	r6, #22
  403a94:	f200 8229 	bhi.w	403eea <_dtoa_r+0x5a2>
  403a98:	4b61      	ldr	r3, [pc, #388]	; (403c20 <_dtoa_r+0x2d8>)
  403a9a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  403a9e:	e9d3 0100 	ldrd	r0, r1, [r3]
  403aa2:	4652      	mov	r2, sl
  403aa4:	465b      	mov	r3, fp
  403aa6:	f002 fead 	bl	406804 <__aeabi_dcmpgt>
  403aaa:	2800      	cmp	r0, #0
  403aac:	f000 8249 	beq.w	403f42 <_dtoa_r+0x5fa>
  403ab0:	1e73      	subs	r3, r6, #1
  403ab2:	9304      	str	r3, [sp, #16]
  403ab4:	2300      	movs	r3, #0
  403ab6:	930c      	str	r3, [sp, #48]	; 0x30
  403ab8:	1b2c      	subs	r4, r5, r4
  403aba:	1e63      	subs	r3, r4, #1
  403abc:	9302      	str	r3, [sp, #8]
  403abe:	f100 8232 	bmi.w	403f26 <_dtoa_r+0x5de>
  403ac2:	2300      	movs	r3, #0
  403ac4:	9305      	str	r3, [sp, #20]
  403ac6:	9b04      	ldr	r3, [sp, #16]
  403ac8:	2b00      	cmp	r3, #0
  403aca:	f2c0 8223 	blt.w	403f14 <_dtoa_r+0x5cc>
  403ace:	9a02      	ldr	r2, [sp, #8]
  403ad0:	930b      	str	r3, [sp, #44]	; 0x2c
  403ad2:	4611      	mov	r1, r2
  403ad4:	4419      	add	r1, r3
  403ad6:	2300      	movs	r3, #0
  403ad8:	9102      	str	r1, [sp, #8]
  403ada:	930a      	str	r3, [sp, #40]	; 0x28
  403adc:	9b20      	ldr	r3, [sp, #128]	; 0x80
  403ade:	2b09      	cmp	r3, #9
  403ae0:	d829      	bhi.n	403b36 <_dtoa_r+0x1ee>
  403ae2:	2b05      	cmp	r3, #5
  403ae4:	f340 8658 	ble.w	404798 <_dtoa_r+0xe50>
  403ae8:	3b04      	subs	r3, #4
  403aea:	9320      	str	r3, [sp, #128]	; 0x80
  403aec:	2500      	movs	r5, #0
  403aee:	9b20      	ldr	r3, [sp, #128]	; 0x80
  403af0:	3b02      	subs	r3, #2
  403af2:	2b03      	cmp	r3, #3
  403af4:	f200 8635 	bhi.w	404762 <_dtoa_r+0xe1a>
  403af8:	e8df f013 	tbh	[pc, r3, lsl #1]
  403afc:	0228032c 	.word	0x0228032c
  403b00:	04590337 	.word	0x04590337
  403b04:	4b44      	ldr	r3, [pc, #272]	; (403c18 <_dtoa_r+0x2d0>)
  403b06:	4a47      	ldr	r2, [pc, #284]	; (403c24 <_dtoa_r+0x2dc>)
  403b08:	f3c8 0013 	ubfx	r0, r8, #0, #20
  403b0c:	2800      	cmp	r0, #0
  403b0e:	bf14      	ite	ne
  403b10:	4618      	movne	r0, r3
  403b12:	4610      	moveq	r0, r2
  403b14:	e755      	b.n	4039c2 <_dtoa_r+0x7a>
  403b16:	f3cb 0313 	ubfx	r3, fp, #0, #20
  403b1a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  403b1e:	9510      	str	r5, [sp, #64]	; 0x40
  403b20:	4650      	mov	r0, sl
  403b22:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  403b26:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  403b2a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  403b2c:	e784      	b.n	403a38 <_dtoa_r+0xf0>
  403b2e:	483e      	ldr	r0, [pc, #248]	; (403c28 <_dtoa_r+0x2e0>)
  403b30:	e73b      	b.n	4039aa <_dtoa_r+0x62>
  403b32:	1cc3      	adds	r3, r0, #3
  403b34:	e74e      	b.n	4039d4 <_dtoa_r+0x8c>
  403b36:	2100      	movs	r1, #0
  403b38:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  403b3c:	4648      	mov	r0, r9
  403b3e:	9120      	str	r1, [sp, #128]	; 0x80
  403b40:	f001 f9ec 	bl	404f1c <_Balloc>
  403b44:	f04f 33ff 	mov.w	r3, #4294967295
  403b48:	9306      	str	r3, [sp, #24]
  403b4a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403b4c:	930d      	str	r3, [sp, #52]	; 0x34
  403b4e:	2301      	movs	r3, #1
  403b50:	9007      	str	r0, [sp, #28]
  403b52:	9221      	str	r2, [sp, #132]	; 0x84
  403b54:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  403b58:	9309      	str	r3, [sp, #36]	; 0x24
  403b5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403b5c:	2b00      	cmp	r3, #0
  403b5e:	f2c0 80d1 	blt.w	403d04 <_dtoa_r+0x3bc>
  403b62:	9a04      	ldr	r2, [sp, #16]
  403b64:	2a0e      	cmp	r2, #14
  403b66:	f300 80cd 	bgt.w	403d04 <_dtoa_r+0x3bc>
  403b6a:	4b2d      	ldr	r3, [pc, #180]	; (403c20 <_dtoa_r+0x2d8>)
  403b6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403b70:	e9d3 3400 	ldrd	r3, r4, [r3]
  403b74:	e9cd 3402 	strd	r3, r4, [sp, #8]
  403b78:	9b21      	ldr	r3, [sp, #132]	; 0x84
  403b7a:	2b00      	cmp	r3, #0
  403b7c:	f2c0 8300 	blt.w	404180 <_dtoa_r+0x838>
  403b80:	4656      	mov	r6, sl
  403b82:	465f      	mov	r7, fp
  403b84:	4650      	mov	r0, sl
  403b86:	4659      	mov	r1, fp
  403b88:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  403b8c:	4652      	mov	r2, sl
  403b8e:	465b      	mov	r3, fp
  403b90:	f002 fcd2 	bl	406538 <__aeabi_ddiv>
  403b94:	f002 fe56 	bl	406844 <__aeabi_d2iz>
  403b98:	4604      	mov	r4, r0
  403b9a:	f002 fb3d 	bl	406218 <__aeabi_i2d>
  403b9e:	4652      	mov	r2, sl
  403ba0:	465b      	mov	r3, fp
  403ba2:	f002 fb9f 	bl	4062e4 <__aeabi_dmul>
  403ba6:	460b      	mov	r3, r1
  403ba8:	4602      	mov	r2, r0
  403baa:	4639      	mov	r1, r7
  403bac:	4630      	mov	r0, r6
  403bae:	f002 f9e5 	bl	405f7c <__aeabi_dsub>
  403bb2:	9d07      	ldr	r5, [sp, #28]
  403bb4:	f104 0330 	add.w	r3, r4, #48	; 0x30
  403bb8:	702b      	strb	r3, [r5, #0]
  403bba:	9b06      	ldr	r3, [sp, #24]
  403bbc:	2b01      	cmp	r3, #1
  403bbe:	4606      	mov	r6, r0
  403bc0:	460f      	mov	r7, r1
  403bc2:	f105 0501 	add.w	r5, r5, #1
  403bc6:	d062      	beq.n	403c8e <_dtoa_r+0x346>
  403bc8:	2200      	movs	r2, #0
  403bca:	4b18      	ldr	r3, [pc, #96]	; (403c2c <_dtoa_r+0x2e4>)
  403bcc:	f002 fb8a 	bl	4062e4 <__aeabi_dmul>
  403bd0:	2200      	movs	r2, #0
  403bd2:	2300      	movs	r3, #0
  403bd4:	4606      	mov	r6, r0
  403bd6:	460f      	mov	r7, r1
  403bd8:	f002 fdec 	bl	4067b4 <__aeabi_dcmpeq>
  403bdc:	2800      	cmp	r0, #0
  403bde:	d17e      	bne.n	403cde <_dtoa_r+0x396>
  403be0:	f8cd 9014 	str.w	r9, [sp, #20]
  403be4:	f8dd a018 	ldr.w	sl, [sp, #24]
  403be8:	f8dd b01c 	ldr.w	fp, [sp, #28]
  403bec:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  403bf0:	e029      	b.n	403c46 <_dtoa_r+0x2fe>
  403bf2:	bf00      	nop
  403bf4:	f3af 8000 	nop.w
  403bf8:	636f4361 	.word	0x636f4361
  403bfc:	3fd287a7 	.word	0x3fd287a7
  403c00:	8b60c8b3 	.word	0x8b60c8b3
  403c04:	3fc68a28 	.word	0x3fc68a28
  403c08:	509f79fb 	.word	0x509f79fb
  403c0c:	3fd34413 	.word	0x3fd34413
  403c10:	7ff00000 	.word	0x7ff00000
  403c14:	00406cf5 	.word	0x00406cf5
  403c18:	00406d14 	.word	0x00406d14
  403c1c:	3ff80000 	.word	0x3ff80000
  403c20:	00406d28 	.word	0x00406d28
  403c24:	00406d08 	.word	0x00406d08
  403c28:	00406cf4 	.word	0x00406cf4
  403c2c:	40240000 	.word	0x40240000
  403c30:	f002 fb58 	bl	4062e4 <__aeabi_dmul>
  403c34:	2200      	movs	r2, #0
  403c36:	2300      	movs	r3, #0
  403c38:	4606      	mov	r6, r0
  403c3a:	460f      	mov	r7, r1
  403c3c:	f002 fdba 	bl	4067b4 <__aeabi_dcmpeq>
  403c40:	2800      	cmp	r0, #0
  403c42:	f040 83b7 	bne.w	4043b4 <_dtoa_r+0xa6c>
  403c46:	4642      	mov	r2, r8
  403c48:	464b      	mov	r3, r9
  403c4a:	4630      	mov	r0, r6
  403c4c:	4639      	mov	r1, r7
  403c4e:	f002 fc73 	bl	406538 <__aeabi_ddiv>
  403c52:	f002 fdf7 	bl	406844 <__aeabi_d2iz>
  403c56:	4604      	mov	r4, r0
  403c58:	f002 fade 	bl	406218 <__aeabi_i2d>
  403c5c:	4642      	mov	r2, r8
  403c5e:	464b      	mov	r3, r9
  403c60:	f002 fb40 	bl	4062e4 <__aeabi_dmul>
  403c64:	4602      	mov	r2, r0
  403c66:	460b      	mov	r3, r1
  403c68:	4630      	mov	r0, r6
  403c6a:	4639      	mov	r1, r7
  403c6c:	f002 f986 	bl	405f7c <__aeabi_dsub>
  403c70:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  403c74:	f805 eb01 	strb.w	lr, [r5], #1
  403c78:	ebcb 0e05 	rsb	lr, fp, r5
  403c7c:	45d6      	cmp	lr, sl
  403c7e:	4606      	mov	r6, r0
  403c80:	460f      	mov	r7, r1
  403c82:	f04f 0200 	mov.w	r2, #0
  403c86:	4bb0      	ldr	r3, [pc, #704]	; (403f48 <_dtoa_r+0x600>)
  403c88:	d1d2      	bne.n	403c30 <_dtoa_r+0x2e8>
  403c8a:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403c8e:	4632      	mov	r2, r6
  403c90:	463b      	mov	r3, r7
  403c92:	4630      	mov	r0, r6
  403c94:	4639      	mov	r1, r7
  403c96:	f002 f973 	bl	405f80 <__adddf3>
  403c9a:	4606      	mov	r6, r0
  403c9c:	460f      	mov	r7, r1
  403c9e:	4602      	mov	r2, r0
  403ca0:	460b      	mov	r3, r1
  403ca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403ca6:	f002 fd8f 	bl	4067c8 <__aeabi_dcmplt>
  403caa:	b940      	cbnz	r0, 403cbe <_dtoa_r+0x376>
  403cac:	4632      	mov	r2, r6
  403cae:	463b      	mov	r3, r7
  403cb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403cb4:	f002 fd7e 	bl	4067b4 <__aeabi_dcmpeq>
  403cb8:	b188      	cbz	r0, 403cde <_dtoa_r+0x396>
  403cba:	07e3      	lsls	r3, r4, #31
  403cbc:	d50f      	bpl.n	403cde <_dtoa_r+0x396>
  403cbe:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  403cc2:	9a07      	ldr	r2, [sp, #28]
  403cc4:	1e6b      	subs	r3, r5, #1
  403cc6:	e004      	b.n	403cd2 <_dtoa_r+0x38a>
  403cc8:	429a      	cmp	r2, r3
  403cca:	f000 842c 	beq.w	404526 <_dtoa_r+0xbde>
  403cce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403cd2:	2c39      	cmp	r4, #57	; 0x39
  403cd4:	f103 0501 	add.w	r5, r3, #1
  403cd8:	d0f6      	beq.n	403cc8 <_dtoa_r+0x380>
  403cda:	3401      	adds	r4, #1
  403cdc:	701c      	strb	r4, [r3, #0]
  403cde:	9908      	ldr	r1, [sp, #32]
  403ce0:	4648      	mov	r0, r9
  403ce2:	f001 f941 	bl	404f68 <_Bfree>
  403ce6:	2200      	movs	r2, #0
  403ce8:	9b04      	ldr	r3, [sp, #16]
  403cea:	702a      	strb	r2, [r5, #0]
  403cec:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403cee:	3301      	adds	r3, #1
  403cf0:	6013      	str	r3, [r2, #0]
  403cf2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403cf4:	2b00      	cmp	r3, #0
  403cf6:	f000 83a7 	beq.w	404448 <_dtoa_r+0xb00>
  403cfa:	9807      	ldr	r0, [sp, #28]
  403cfc:	601d      	str	r5, [r3, #0]
  403cfe:	b017      	add	sp, #92	; 0x5c
  403d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d04:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403d06:	2a00      	cmp	r2, #0
  403d08:	f000 8112 	beq.w	403f30 <_dtoa_r+0x5e8>
  403d0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403d0e:	2a01      	cmp	r2, #1
  403d10:	f340 8258 	ble.w	4041c4 <_dtoa_r+0x87c>
  403d14:	9b06      	ldr	r3, [sp, #24]
  403d16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403d18:	1e5f      	subs	r7, r3, #1
  403d1a:	42ba      	cmp	r2, r7
  403d1c:	f2c0 8397 	blt.w	40444e <_dtoa_r+0xb06>
  403d20:	1bd7      	subs	r7, r2, r7
  403d22:	9b06      	ldr	r3, [sp, #24]
  403d24:	2b00      	cmp	r3, #0
  403d26:	f2c0 848a 	blt.w	40463e <_dtoa_r+0xcf6>
  403d2a:	9d05      	ldr	r5, [sp, #20]
  403d2c:	9b06      	ldr	r3, [sp, #24]
  403d2e:	9a05      	ldr	r2, [sp, #20]
  403d30:	441a      	add	r2, r3
  403d32:	9205      	str	r2, [sp, #20]
  403d34:	9a02      	ldr	r2, [sp, #8]
  403d36:	2101      	movs	r1, #1
  403d38:	441a      	add	r2, r3
  403d3a:	4648      	mov	r0, r9
  403d3c:	9202      	str	r2, [sp, #8]
  403d3e:	f001 f9ab 	bl	405098 <__i2b>
  403d42:	4606      	mov	r6, r0
  403d44:	b165      	cbz	r5, 403d60 <_dtoa_r+0x418>
  403d46:	9902      	ldr	r1, [sp, #8]
  403d48:	2900      	cmp	r1, #0
  403d4a:	460b      	mov	r3, r1
  403d4c:	dd08      	ble.n	403d60 <_dtoa_r+0x418>
  403d4e:	42a9      	cmp	r1, r5
  403d50:	9a05      	ldr	r2, [sp, #20]
  403d52:	bfa8      	it	ge
  403d54:	462b      	movge	r3, r5
  403d56:	1ad2      	subs	r2, r2, r3
  403d58:	1aed      	subs	r5, r5, r3
  403d5a:	1acb      	subs	r3, r1, r3
  403d5c:	9205      	str	r2, [sp, #20]
  403d5e:	9302      	str	r3, [sp, #8]
  403d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403d62:	2b00      	cmp	r3, #0
  403d64:	f340 82fc 	ble.w	404360 <_dtoa_r+0xa18>
  403d68:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403d6a:	2a00      	cmp	r2, #0
  403d6c:	f000 8201 	beq.w	404172 <_dtoa_r+0x82a>
  403d70:	2f00      	cmp	r7, #0
  403d72:	f000 81fe 	beq.w	404172 <_dtoa_r+0x82a>
  403d76:	4631      	mov	r1, r6
  403d78:	463a      	mov	r2, r7
  403d7a:	4648      	mov	r0, r9
  403d7c:	f001 fa2e 	bl	4051dc <__pow5mult>
  403d80:	f8dd 8020 	ldr.w	r8, [sp, #32]
  403d84:	4601      	mov	r1, r0
  403d86:	4642      	mov	r2, r8
  403d88:	4606      	mov	r6, r0
  403d8a:	4648      	mov	r0, r9
  403d8c:	f001 f98e 	bl	4050ac <__multiply>
  403d90:	4641      	mov	r1, r8
  403d92:	4604      	mov	r4, r0
  403d94:	4648      	mov	r0, r9
  403d96:	f001 f8e7 	bl	404f68 <_Bfree>
  403d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403d9c:	1bdb      	subs	r3, r3, r7
  403d9e:	930a      	str	r3, [sp, #40]	; 0x28
  403da0:	f040 81e6 	bne.w	404170 <_dtoa_r+0x828>
  403da4:	2101      	movs	r1, #1
  403da6:	4648      	mov	r0, r9
  403da8:	f001 f976 	bl	405098 <__i2b>
  403dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403dae:	4680      	mov	r8, r0
  403db0:	2b00      	cmp	r3, #0
  403db2:	f000 8219 	beq.w	4041e8 <_dtoa_r+0x8a0>
  403db6:	4601      	mov	r1, r0
  403db8:	461a      	mov	r2, r3
  403dba:	4648      	mov	r0, r9
  403dbc:	f001 fa0e 	bl	4051dc <__pow5mult>
  403dc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
  403dc2:	2b01      	cmp	r3, #1
  403dc4:	4680      	mov	r8, r0
  403dc6:	f340 82f8 	ble.w	4043ba <_dtoa_r+0xa72>
  403dca:	2700      	movs	r7, #0
  403dcc:	f8d8 3010 	ldr.w	r3, [r8, #16]
  403dd0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  403dd4:	6918      	ldr	r0, [r3, #16]
  403dd6:	f001 f911 	bl	404ffc <__hi0bits>
  403dda:	f1c0 0020 	rsb	r0, r0, #32
  403dde:	9a02      	ldr	r2, [sp, #8]
  403de0:	4410      	add	r0, r2
  403de2:	f010 001f 	ands.w	r0, r0, #31
  403de6:	f000 81f6 	beq.w	4041d6 <_dtoa_r+0x88e>
  403dea:	f1c0 0320 	rsb	r3, r0, #32
  403dee:	2b04      	cmp	r3, #4
  403df0:	f340 84ca 	ble.w	404788 <_dtoa_r+0xe40>
  403df4:	9b05      	ldr	r3, [sp, #20]
  403df6:	f1c0 001c 	rsb	r0, r0, #28
  403dfa:	4403      	add	r3, r0
  403dfc:	9305      	str	r3, [sp, #20]
  403dfe:	4613      	mov	r3, r2
  403e00:	4403      	add	r3, r0
  403e02:	4405      	add	r5, r0
  403e04:	9302      	str	r3, [sp, #8]
  403e06:	9b05      	ldr	r3, [sp, #20]
  403e08:	2b00      	cmp	r3, #0
  403e0a:	dd05      	ble.n	403e18 <_dtoa_r+0x4d0>
  403e0c:	4621      	mov	r1, r4
  403e0e:	461a      	mov	r2, r3
  403e10:	4648      	mov	r0, r9
  403e12:	f001 fa33 	bl	40527c <__lshift>
  403e16:	4604      	mov	r4, r0
  403e18:	9b02      	ldr	r3, [sp, #8]
  403e1a:	2b00      	cmp	r3, #0
  403e1c:	dd05      	ble.n	403e2a <_dtoa_r+0x4e2>
  403e1e:	4641      	mov	r1, r8
  403e20:	461a      	mov	r2, r3
  403e22:	4648      	mov	r0, r9
  403e24:	f001 fa2a 	bl	40527c <__lshift>
  403e28:	4680      	mov	r8, r0
  403e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403e2c:	2b00      	cmp	r3, #0
  403e2e:	f040 827c 	bne.w	40432a <_dtoa_r+0x9e2>
  403e32:	9b06      	ldr	r3, [sp, #24]
  403e34:	2b00      	cmp	r3, #0
  403e36:	f340 8295 	ble.w	404364 <_dtoa_r+0xa1c>
  403e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403e3c:	2b00      	cmp	r3, #0
  403e3e:	f040 81f5 	bne.w	40422c <_dtoa_r+0x8e4>
  403e42:	f8dd b01c 	ldr.w	fp, [sp, #28]
  403e46:	9f06      	ldr	r7, [sp, #24]
  403e48:	465d      	mov	r5, fp
  403e4a:	e002      	b.n	403e52 <_dtoa_r+0x50a>
  403e4c:	f001 f896 	bl	404f7c <__multadd>
  403e50:	4604      	mov	r4, r0
  403e52:	4641      	mov	r1, r8
  403e54:	4620      	mov	r0, r4
  403e56:	f7ff fce3 	bl	403820 <quorem>
  403e5a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  403e5e:	f805 ab01 	strb.w	sl, [r5], #1
  403e62:	ebcb 0305 	rsb	r3, fp, r5
  403e66:	42bb      	cmp	r3, r7
  403e68:	f04f 020a 	mov.w	r2, #10
  403e6c:	f04f 0300 	mov.w	r3, #0
  403e70:	4621      	mov	r1, r4
  403e72:	4648      	mov	r0, r9
  403e74:	dbea      	blt.n	403e4c <_dtoa_r+0x504>
  403e76:	9b07      	ldr	r3, [sp, #28]
  403e78:	9a06      	ldr	r2, [sp, #24]
  403e7a:	2a01      	cmp	r2, #1
  403e7c:	bfac      	ite	ge
  403e7e:	189b      	addge	r3, r3, r2
  403e80:	3301      	addlt	r3, #1
  403e82:	461d      	mov	r5, r3
  403e84:	f04f 0b00 	mov.w	fp, #0
  403e88:	4621      	mov	r1, r4
  403e8a:	2201      	movs	r2, #1
  403e8c:	4648      	mov	r0, r9
  403e8e:	f001 f9f5 	bl	40527c <__lshift>
  403e92:	4641      	mov	r1, r8
  403e94:	9008      	str	r0, [sp, #32]
  403e96:	f001 fa49 	bl	40532c <__mcmp>
  403e9a:	2800      	cmp	r0, #0
  403e9c:	f340 830d 	ble.w	4044ba <_dtoa_r+0xb72>
  403ea0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  403ea4:	9907      	ldr	r1, [sp, #28]
  403ea6:	1e6b      	subs	r3, r5, #1
  403ea8:	e004      	b.n	403eb4 <_dtoa_r+0x56c>
  403eaa:	428b      	cmp	r3, r1
  403eac:	f000 8278 	beq.w	4043a0 <_dtoa_r+0xa58>
  403eb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  403eb4:	2a39      	cmp	r2, #57	; 0x39
  403eb6:	f103 0501 	add.w	r5, r3, #1
  403eba:	d0f6      	beq.n	403eaa <_dtoa_r+0x562>
  403ebc:	3201      	adds	r2, #1
  403ebe:	701a      	strb	r2, [r3, #0]
  403ec0:	4641      	mov	r1, r8
  403ec2:	4648      	mov	r0, r9
  403ec4:	f001 f850 	bl	404f68 <_Bfree>
  403ec8:	2e00      	cmp	r6, #0
  403eca:	f43f af08 	beq.w	403cde <_dtoa_r+0x396>
  403ece:	f1bb 0f00 	cmp.w	fp, #0
  403ed2:	d005      	beq.n	403ee0 <_dtoa_r+0x598>
  403ed4:	45b3      	cmp	fp, r6
  403ed6:	d003      	beq.n	403ee0 <_dtoa_r+0x598>
  403ed8:	4659      	mov	r1, fp
  403eda:	4648      	mov	r0, r9
  403edc:	f001 f844 	bl	404f68 <_Bfree>
  403ee0:	4631      	mov	r1, r6
  403ee2:	4648      	mov	r0, r9
  403ee4:	f001 f840 	bl	404f68 <_Bfree>
  403ee8:	e6f9      	b.n	403cde <_dtoa_r+0x396>
  403eea:	2301      	movs	r3, #1
  403eec:	930c      	str	r3, [sp, #48]	; 0x30
  403eee:	e5e3      	b.n	403ab8 <_dtoa_r+0x170>
  403ef0:	f8dd 8010 	ldr.w	r8, [sp, #16]
  403ef4:	4640      	mov	r0, r8
  403ef6:	f002 f98f 	bl	406218 <__aeabi_i2d>
  403efa:	4602      	mov	r2, r0
  403efc:	460b      	mov	r3, r1
  403efe:	4630      	mov	r0, r6
  403f00:	4639      	mov	r1, r7
  403f02:	f002 fc57 	bl	4067b4 <__aeabi_dcmpeq>
  403f06:	2800      	cmp	r0, #0
  403f08:	f47f adc2 	bne.w	403a90 <_dtoa_r+0x148>
  403f0c:	f108 33ff 	add.w	r3, r8, #4294967295
  403f10:	9304      	str	r3, [sp, #16]
  403f12:	e5bd      	b.n	403a90 <_dtoa_r+0x148>
  403f14:	9a05      	ldr	r2, [sp, #20]
  403f16:	9b04      	ldr	r3, [sp, #16]
  403f18:	1ad2      	subs	r2, r2, r3
  403f1a:	425b      	negs	r3, r3
  403f1c:	930a      	str	r3, [sp, #40]	; 0x28
  403f1e:	2300      	movs	r3, #0
  403f20:	9205      	str	r2, [sp, #20]
  403f22:	930b      	str	r3, [sp, #44]	; 0x2c
  403f24:	e5da      	b.n	403adc <_dtoa_r+0x194>
  403f26:	425b      	negs	r3, r3
  403f28:	9305      	str	r3, [sp, #20]
  403f2a:	2300      	movs	r3, #0
  403f2c:	9302      	str	r3, [sp, #8]
  403f2e:	e5ca      	b.n	403ac6 <_dtoa_r+0x17e>
  403f30:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  403f32:	9d05      	ldr	r5, [sp, #20]
  403f34:	9e09      	ldr	r6, [sp, #36]	; 0x24
  403f36:	e705      	b.n	403d44 <_dtoa_r+0x3fc>
  403f38:	f1c3 0820 	rsb	r8, r3, #32
  403f3c:	fa0a f008 	lsl.w	r0, sl, r8
  403f40:	e573      	b.n	403a2a <_dtoa_r+0xe2>
  403f42:	900c      	str	r0, [sp, #48]	; 0x30
  403f44:	e5b8      	b.n	403ab8 <_dtoa_r+0x170>
  403f46:	bf00      	nop
  403f48:	40240000 	.word	0x40240000
  403f4c:	2300      	movs	r3, #0
  403f4e:	9309      	str	r3, [sp, #36]	; 0x24
  403f50:	9b04      	ldr	r3, [sp, #16]
  403f52:	9a21      	ldr	r2, [sp, #132]	; 0x84
  403f54:	4413      	add	r3, r2
  403f56:	930d      	str	r3, [sp, #52]	; 0x34
  403f58:	3301      	adds	r3, #1
  403f5a:	2b00      	cmp	r3, #0
  403f5c:	9306      	str	r3, [sp, #24]
  403f5e:	f340 8283 	ble.w	404468 <_dtoa_r+0xb20>
  403f62:	9c06      	ldr	r4, [sp, #24]
  403f64:	4626      	mov	r6, r4
  403f66:	2100      	movs	r1, #0
  403f68:	2e17      	cmp	r6, #23
  403f6a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  403f6e:	d90b      	bls.n	403f88 <_dtoa_r+0x640>
  403f70:	2201      	movs	r2, #1
  403f72:	2304      	movs	r3, #4
  403f74:	005b      	lsls	r3, r3, #1
  403f76:	f103 0014 	add.w	r0, r3, #20
  403f7a:	42b0      	cmp	r0, r6
  403f7c:	4611      	mov	r1, r2
  403f7e:	f102 0201 	add.w	r2, r2, #1
  403f82:	d9f7      	bls.n	403f74 <_dtoa_r+0x62c>
  403f84:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  403f88:	4648      	mov	r0, r9
  403f8a:	f000 ffc7 	bl	404f1c <_Balloc>
  403f8e:	2c0e      	cmp	r4, #14
  403f90:	9007      	str	r0, [sp, #28]
  403f92:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  403f96:	f63f ade0 	bhi.w	403b5a <_dtoa_r+0x212>
  403f9a:	2d00      	cmp	r5, #0
  403f9c:	f43f addd 	beq.w	403b5a <_dtoa_r+0x212>
  403fa0:	9904      	ldr	r1, [sp, #16]
  403fa2:	4657      	mov	r7, sl
  403fa4:	46d8      	mov	r8, fp
  403fa6:	2900      	cmp	r1, #0
  403fa8:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  403fac:	f340 8292 	ble.w	4044d4 <_dtoa_r+0xb8c>
  403fb0:	4b91      	ldr	r3, [pc, #580]	; (4041f8 <_dtoa_r+0x8b0>)
  403fb2:	f001 020f 	and.w	r2, r1, #15
  403fb6:	110e      	asrs	r6, r1, #4
  403fb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403fbc:	06f0      	lsls	r0, r6, #27
  403fbe:	e9d3 4500 	ldrd	r4, r5, [r3]
  403fc2:	f140 824c 	bpl.w	40445e <_dtoa_r+0xb16>
  403fc6:	4b8d      	ldr	r3, [pc, #564]	; (4041fc <_dtoa_r+0x8b4>)
  403fc8:	4650      	mov	r0, sl
  403fca:	4659      	mov	r1, fp
  403fcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  403fd0:	f002 fab2 	bl	406538 <__aeabi_ddiv>
  403fd4:	f006 060f 	and.w	r6, r6, #15
  403fd8:	4682      	mov	sl, r0
  403fda:	468b      	mov	fp, r1
  403fdc:	f04f 0803 	mov.w	r8, #3
  403fe0:	b186      	cbz	r6, 404004 <_dtoa_r+0x6bc>
  403fe2:	4f86      	ldr	r7, [pc, #536]	; (4041fc <_dtoa_r+0x8b4>)
  403fe4:	07f1      	lsls	r1, r6, #31
  403fe6:	d509      	bpl.n	403ffc <_dtoa_r+0x6b4>
  403fe8:	4620      	mov	r0, r4
  403fea:	4629      	mov	r1, r5
  403fec:	e9d7 2300 	ldrd	r2, r3, [r7]
  403ff0:	f002 f978 	bl	4062e4 <__aeabi_dmul>
  403ff4:	f108 0801 	add.w	r8, r8, #1
  403ff8:	4604      	mov	r4, r0
  403ffa:	460d      	mov	r5, r1
  403ffc:	1076      	asrs	r6, r6, #1
  403ffe:	f107 0708 	add.w	r7, r7, #8
  404002:	d1ef      	bne.n	403fe4 <_dtoa_r+0x69c>
  404004:	4622      	mov	r2, r4
  404006:	462b      	mov	r3, r5
  404008:	4650      	mov	r0, sl
  40400a:	4659      	mov	r1, fp
  40400c:	f002 fa94 	bl	406538 <__aeabi_ddiv>
  404010:	4606      	mov	r6, r0
  404012:	460f      	mov	r7, r1
  404014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404016:	b143      	cbz	r3, 40402a <_dtoa_r+0x6e2>
  404018:	2200      	movs	r2, #0
  40401a:	4b79      	ldr	r3, [pc, #484]	; (404200 <_dtoa_r+0x8b8>)
  40401c:	4630      	mov	r0, r6
  40401e:	4639      	mov	r1, r7
  404020:	f002 fbd2 	bl	4067c8 <__aeabi_dcmplt>
  404024:	2800      	cmp	r0, #0
  404026:	f040 8320 	bne.w	40466a <_dtoa_r+0xd22>
  40402a:	4640      	mov	r0, r8
  40402c:	f002 f8f4 	bl	406218 <__aeabi_i2d>
  404030:	4632      	mov	r2, r6
  404032:	463b      	mov	r3, r7
  404034:	f002 f956 	bl	4062e4 <__aeabi_dmul>
  404038:	4b72      	ldr	r3, [pc, #456]	; (404204 <_dtoa_r+0x8bc>)
  40403a:	2200      	movs	r2, #0
  40403c:	f001 ffa0 	bl	405f80 <__adddf3>
  404040:	9b06      	ldr	r3, [sp, #24]
  404042:	4604      	mov	r4, r0
  404044:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  404048:	2b00      	cmp	r3, #0
  40404a:	f000 81df 	beq.w	40440c <_dtoa_r+0xac4>
  40404e:	9b04      	ldr	r3, [sp, #16]
  404050:	f8dd 8018 	ldr.w	r8, [sp, #24]
  404054:	9311      	str	r3, [sp, #68]	; 0x44
  404056:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404058:	2b00      	cmp	r3, #0
  40405a:	f000 8297 	beq.w	40458c <_dtoa_r+0xc44>
  40405e:	4b66      	ldr	r3, [pc, #408]	; (4041f8 <_dtoa_r+0x8b0>)
  404060:	4969      	ldr	r1, [pc, #420]	; (404208 <_dtoa_r+0x8c0>)
  404062:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  404066:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40406a:	2000      	movs	r0, #0
  40406c:	f002 fa64 	bl	406538 <__aeabi_ddiv>
  404070:	4622      	mov	r2, r4
  404072:	462b      	mov	r3, r5
  404074:	f001 ff82 	bl	405f7c <__aeabi_dsub>
  404078:	4682      	mov	sl, r0
  40407a:	468b      	mov	fp, r1
  40407c:	4630      	mov	r0, r6
  40407e:	4639      	mov	r1, r7
  404080:	f002 fbe0 	bl	406844 <__aeabi_d2iz>
  404084:	4604      	mov	r4, r0
  404086:	f002 f8c7 	bl	406218 <__aeabi_i2d>
  40408a:	4602      	mov	r2, r0
  40408c:	460b      	mov	r3, r1
  40408e:	4630      	mov	r0, r6
  404090:	4639      	mov	r1, r7
  404092:	f001 ff73 	bl	405f7c <__aeabi_dsub>
  404096:	3430      	adds	r4, #48	; 0x30
  404098:	9d07      	ldr	r5, [sp, #28]
  40409a:	b2e4      	uxtb	r4, r4
  40409c:	4606      	mov	r6, r0
  40409e:	460f      	mov	r7, r1
  4040a0:	702c      	strb	r4, [r5, #0]
  4040a2:	4602      	mov	r2, r0
  4040a4:	460b      	mov	r3, r1
  4040a6:	4650      	mov	r0, sl
  4040a8:	4659      	mov	r1, fp
  4040aa:	3501      	adds	r5, #1
  4040ac:	f002 fbaa 	bl	406804 <__aeabi_dcmpgt>
  4040b0:	2800      	cmp	r0, #0
  4040b2:	d14c      	bne.n	40414e <_dtoa_r+0x806>
  4040b4:	4632      	mov	r2, r6
  4040b6:	463b      	mov	r3, r7
  4040b8:	2000      	movs	r0, #0
  4040ba:	4951      	ldr	r1, [pc, #324]	; (404200 <_dtoa_r+0x8b8>)
  4040bc:	f001 ff5e 	bl	405f7c <__aeabi_dsub>
  4040c0:	4602      	mov	r2, r0
  4040c2:	460b      	mov	r3, r1
  4040c4:	4650      	mov	r0, sl
  4040c6:	4659      	mov	r1, fp
  4040c8:	f002 fb9c 	bl	406804 <__aeabi_dcmpgt>
  4040cc:	2800      	cmp	r0, #0
  4040ce:	f040 830d 	bne.w	4046ec <_dtoa_r+0xda4>
  4040d2:	f1b8 0f01 	cmp.w	r8, #1
  4040d6:	f340 81b3 	ble.w	404440 <_dtoa_r+0xaf8>
  4040da:	9b07      	ldr	r3, [sp, #28]
  4040dc:	4498      	add	r8, r3
  4040de:	e00d      	b.n	4040fc <_dtoa_r+0x7b4>
  4040e0:	2000      	movs	r0, #0
  4040e2:	4947      	ldr	r1, [pc, #284]	; (404200 <_dtoa_r+0x8b8>)
  4040e4:	f001 ff4a 	bl	405f7c <__aeabi_dsub>
  4040e8:	4652      	mov	r2, sl
  4040ea:	465b      	mov	r3, fp
  4040ec:	f002 fb6c 	bl	4067c8 <__aeabi_dcmplt>
  4040f0:	2800      	cmp	r0, #0
  4040f2:	f040 82fb 	bne.w	4046ec <_dtoa_r+0xda4>
  4040f6:	4545      	cmp	r5, r8
  4040f8:	f000 81a2 	beq.w	404440 <_dtoa_r+0xaf8>
  4040fc:	4650      	mov	r0, sl
  4040fe:	4659      	mov	r1, fp
  404100:	2200      	movs	r2, #0
  404102:	4b42      	ldr	r3, [pc, #264]	; (40420c <_dtoa_r+0x8c4>)
  404104:	f002 f8ee 	bl	4062e4 <__aeabi_dmul>
  404108:	2200      	movs	r2, #0
  40410a:	4b40      	ldr	r3, [pc, #256]	; (40420c <_dtoa_r+0x8c4>)
  40410c:	4682      	mov	sl, r0
  40410e:	468b      	mov	fp, r1
  404110:	4630      	mov	r0, r6
  404112:	4639      	mov	r1, r7
  404114:	f002 f8e6 	bl	4062e4 <__aeabi_dmul>
  404118:	460f      	mov	r7, r1
  40411a:	4606      	mov	r6, r0
  40411c:	f002 fb92 	bl	406844 <__aeabi_d2iz>
  404120:	4604      	mov	r4, r0
  404122:	f002 f879 	bl	406218 <__aeabi_i2d>
  404126:	4602      	mov	r2, r0
  404128:	460b      	mov	r3, r1
  40412a:	4630      	mov	r0, r6
  40412c:	4639      	mov	r1, r7
  40412e:	f001 ff25 	bl	405f7c <__aeabi_dsub>
  404132:	3430      	adds	r4, #48	; 0x30
  404134:	b2e4      	uxtb	r4, r4
  404136:	4652      	mov	r2, sl
  404138:	465b      	mov	r3, fp
  40413a:	f805 4b01 	strb.w	r4, [r5], #1
  40413e:	4606      	mov	r6, r0
  404140:	460f      	mov	r7, r1
  404142:	f002 fb41 	bl	4067c8 <__aeabi_dcmplt>
  404146:	4632      	mov	r2, r6
  404148:	463b      	mov	r3, r7
  40414a:	2800      	cmp	r0, #0
  40414c:	d0c8      	beq.n	4040e0 <_dtoa_r+0x798>
  40414e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404150:	9304      	str	r3, [sp, #16]
  404152:	e5c4      	b.n	403cde <_dtoa_r+0x396>
  404154:	2300      	movs	r3, #0
  404156:	9309      	str	r3, [sp, #36]	; 0x24
  404158:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40415a:	2b00      	cmp	r3, #0
  40415c:	f340 8189 	ble.w	404472 <_dtoa_r+0xb2a>
  404160:	461e      	mov	r6, r3
  404162:	461c      	mov	r4, r3
  404164:	930d      	str	r3, [sp, #52]	; 0x34
  404166:	9306      	str	r3, [sp, #24]
  404168:	e6fd      	b.n	403f66 <_dtoa_r+0x61e>
  40416a:	2301      	movs	r3, #1
  40416c:	9309      	str	r3, [sp, #36]	; 0x24
  40416e:	e7f3      	b.n	404158 <_dtoa_r+0x810>
  404170:	9408      	str	r4, [sp, #32]
  404172:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404174:	9908      	ldr	r1, [sp, #32]
  404176:	4648      	mov	r0, r9
  404178:	f001 f830 	bl	4051dc <__pow5mult>
  40417c:	4604      	mov	r4, r0
  40417e:	e611      	b.n	403da4 <_dtoa_r+0x45c>
  404180:	9b06      	ldr	r3, [sp, #24]
  404182:	2b00      	cmp	r3, #0
  404184:	f73f acfc 	bgt.w	403b80 <_dtoa_r+0x238>
  404188:	f040 82da 	bne.w	404740 <_dtoa_r+0xdf8>
  40418c:	2200      	movs	r2, #0
  40418e:	4b20      	ldr	r3, [pc, #128]	; (404210 <_dtoa_r+0x8c8>)
  404190:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404194:	f002 f8a6 	bl	4062e4 <__aeabi_dmul>
  404198:	4652      	mov	r2, sl
  40419a:	465b      	mov	r3, fp
  40419c:	f002 fb28 	bl	4067f0 <__aeabi_dcmpge>
  4041a0:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4041a4:	4646      	mov	r6, r8
  4041a6:	2800      	cmp	r0, #0
  4041a8:	f000 80f2 	beq.w	404390 <_dtoa_r+0xa48>
  4041ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4041ae:	9d07      	ldr	r5, [sp, #28]
  4041b0:	43db      	mvns	r3, r3
  4041b2:	9304      	str	r3, [sp, #16]
  4041b4:	4641      	mov	r1, r8
  4041b6:	4648      	mov	r0, r9
  4041b8:	f000 fed6 	bl	404f68 <_Bfree>
  4041bc:	2e00      	cmp	r6, #0
  4041be:	f43f ad8e 	beq.w	403cde <_dtoa_r+0x396>
  4041c2:	e68d      	b.n	403ee0 <_dtoa_r+0x598>
  4041c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4041c6:	2a00      	cmp	r2, #0
  4041c8:	f000 8241 	beq.w	40464e <_dtoa_r+0xd06>
  4041cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4041d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4041d2:	9d05      	ldr	r5, [sp, #20]
  4041d4:	e5ab      	b.n	403d2e <_dtoa_r+0x3e6>
  4041d6:	201c      	movs	r0, #28
  4041d8:	9b05      	ldr	r3, [sp, #20]
  4041da:	4403      	add	r3, r0
  4041dc:	9305      	str	r3, [sp, #20]
  4041de:	9b02      	ldr	r3, [sp, #8]
  4041e0:	4403      	add	r3, r0
  4041e2:	4405      	add	r5, r0
  4041e4:	9302      	str	r3, [sp, #8]
  4041e6:	e60e      	b.n	403e06 <_dtoa_r+0x4be>
  4041e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4041ea:	2b01      	cmp	r3, #1
  4041ec:	f340 8282 	ble.w	4046f4 <_dtoa_r+0xdac>
  4041f0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  4041f2:	2001      	movs	r0, #1
  4041f4:	e5f3      	b.n	403dde <_dtoa_r+0x496>
  4041f6:	bf00      	nop
  4041f8:	00406d28 	.word	0x00406d28
  4041fc:	00406df0 	.word	0x00406df0
  404200:	3ff00000 	.word	0x3ff00000
  404204:	401c0000 	.word	0x401c0000
  404208:	3fe00000 	.word	0x3fe00000
  40420c:	40240000 	.word	0x40240000
  404210:	40140000 	.word	0x40140000
  404214:	4631      	mov	r1, r6
  404216:	2300      	movs	r3, #0
  404218:	220a      	movs	r2, #10
  40421a:	4648      	mov	r0, r9
  40421c:	f000 feae 	bl	404f7c <__multadd>
  404220:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404222:	2b00      	cmp	r3, #0
  404224:	4606      	mov	r6, r0
  404226:	f340 8297 	ble.w	404758 <_dtoa_r+0xe10>
  40422a:	9306      	str	r3, [sp, #24]
  40422c:	2d00      	cmp	r5, #0
  40422e:	dd05      	ble.n	40423c <_dtoa_r+0x8f4>
  404230:	4631      	mov	r1, r6
  404232:	462a      	mov	r2, r5
  404234:	4648      	mov	r0, r9
  404236:	f001 f821 	bl	40527c <__lshift>
  40423a:	4606      	mov	r6, r0
  40423c:	2f00      	cmp	r7, #0
  40423e:	f040 817c 	bne.w	40453a <_dtoa_r+0xbf2>
  404242:	9605      	str	r6, [sp, #20]
  404244:	9b06      	ldr	r3, [sp, #24]
  404246:	9a07      	ldr	r2, [sp, #28]
  404248:	f8dd b014 	ldr.w	fp, [sp, #20]
  40424c:	3b01      	subs	r3, #1
  40424e:	18d3      	adds	r3, r2, r3
  404250:	9308      	str	r3, [sp, #32]
  404252:	f00a 0301 	and.w	r3, sl, #1
  404256:	9309      	str	r3, [sp, #36]	; 0x24
  404258:	4617      	mov	r7, r2
  40425a:	46c2      	mov	sl, r8
  40425c:	4651      	mov	r1, sl
  40425e:	4620      	mov	r0, r4
  404260:	f7ff fade 	bl	403820 <quorem>
  404264:	4631      	mov	r1, r6
  404266:	4605      	mov	r5, r0
  404268:	4620      	mov	r0, r4
  40426a:	f001 f85f 	bl	40532c <__mcmp>
  40426e:	465a      	mov	r2, fp
  404270:	9002      	str	r0, [sp, #8]
  404272:	4651      	mov	r1, sl
  404274:	4648      	mov	r0, r9
  404276:	f001 f879 	bl	40536c <__mdiff>
  40427a:	68c2      	ldr	r2, [r0, #12]
  40427c:	4680      	mov	r8, r0
  40427e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  404282:	2a00      	cmp	r2, #0
  404284:	d149      	bne.n	40431a <_dtoa_r+0x9d2>
  404286:	4601      	mov	r1, r0
  404288:	4620      	mov	r0, r4
  40428a:	9306      	str	r3, [sp, #24]
  40428c:	f001 f84e 	bl	40532c <__mcmp>
  404290:	4641      	mov	r1, r8
  404292:	9005      	str	r0, [sp, #20]
  404294:	4648      	mov	r0, r9
  404296:	f000 fe67 	bl	404f68 <_Bfree>
  40429a:	9a05      	ldr	r2, [sp, #20]
  40429c:	9b06      	ldr	r3, [sp, #24]
  40429e:	b92a      	cbnz	r2, 4042ac <_dtoa_r+0x964>
  4042a0:	9920      	ldr	r1, [sp, #128]	; 0x80
  4042a2:	b919      	cbnz	r1, 4042ac <_dtoa_r+0x964>
  4042a4:	9909      	ldr	r1, [sp, #36]	; 0x24
  4042a6:	2900      	cmp	r1, #0
  4042a8:	f000 8236 	beq.w	404718 <_dtoa_r+0xdd0>
  4042ac:	9902      	ldr	r1, [sp, #8]
  4042ae:	2900      	cmp	r1, #0
  4042b0:	f2c0 80e4 	blt.w	40447c <_dtoa_r+0xb34>
  4042b4:	d105      	bne.n	4042c2 <_dtoa_r+0x97a>
  4042b6:	9920      	ldr	r1, [sp, #128]	; 0x80
  4042b8:	b919      	cbnz	r1, 4042c2 <_dtoa_r+0x97a>
  4042ba:	9909      	ldr	r1, [sp, #36]	; 0x24
  4042bc:	2900      	cmp	r1, #0
  4042be:	f000 80dd 	beq.w	40447c <_dtoa_r+0xb34>
  4042c2:	2a00      	cmp	r2, #0
  4042c4:	f300 814d 	bgt.w	404562 <_dtoa_r+0xc1a>
  4042c8:	9a08      	ldr	r2, [sp, #32]
  4042ca:	703b      	strb	r3, [r7, #0]
  4042cc:	f107 0801 	add.w	r8, r7, #1
  4042d0:	4297      	cmp	r7, r2
  4042d2:	4645      	mov	r5, r8
  4042d4:	f000 8154 	beq.w	404580 <_dtoa_r+0xc38>
  4042d8:	4621      	mov	r1, r4
  4042da:	2300      	movs	r3, #0
  4042dc:	220a      	movs	r2, #10
  4042de:	4648      	mov	r0, r9
  4042e0:	f000 fe4c 	bl	404f7c <__multadd>
  4042e4:	455e      	cmp	r6, fp
  4042e6:	4604      	mov	r4, r0
  4042e8:	4631      	mov	r1, r6
  4042ea:	f04f 0300 	mov.w	r3, #0
  4042ee:	f04f 020a 	mov.w	r2, #10
  4042f2:	4648      	mov	r0, r9
  4042f4:	d00b      	beq.n	40430e <_dtoa_r+0x9c6>
  4042f6:	f000 fe41 	bl	404f7c <__multadd>
  4042fa:	4659      	mov	r1, fp
  4042fc:	4606      	mov	r6, r0
  4042fe:	2300      	movs	r3, #0
  404300:	220a      	movs	r2, #10
  404302:	4648      	mov	r0, r9
  404304:	f000 fe3a 	bl	404f7c <__multadd>
  404308:	4647      	mov	r7, r8
  40430a:	4683      	mov	fp, r0
  40430c:	e7a6      	b.n	40425c <_dtoa_r+0x914>
  40430e:	f000 fe35 	bl	404f7c <__multadd>
  404312:	4647      	mov	r7, r8
  404314:	4606      	mov	r6, r0
  404316:	4683      	mov	fp, r0
  404318:	e7a0      	b.n	40425c <_dtoa_r+0x914>
  40431a:	4601      	mov	r1, r0
  40431c:	4648      	mov	r0, r9
  40431e:	9305      	str	r3, [sp, #20]
  404320:	f000 fe22 	bl	404f68 <_Bfree>
  404324:	2201      	movs	r2, #1
  404326:	9b05      	ldr	r3, [sp, #20]
  404328:	e7c0      	b.n	4042ac <_dtoa_r+0x964>
  40432a:	4641      	mov	r1, r8
  40432c:	4620      	mov	r0, r4
  40432e:	f000 fffd 	bl	40532c <__mcmp>
  404332:	2800      	cmp	r0, #0
  404334:	f6bf ad7d 	bge.w	403e32 <_dtoa_r+0x4ea>
  404338:	4621      	mov	r1, r4
  40433a:	9c04      	ldr	r4, [sp, #16]
  40433c:	2300      	movs	r3, #0
  40433e:	3c01      	subs	r4, #1
  404340:	220a      	movs	r2, #10
  404342:	4648      	mov	r0, r9
  404344:	9404      	str	r4, [sp, #16]
  404346:	f000 fe19 	bl	404f7c <__multadd>
  40434a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40434c:	4604      	mov	r4, r0
  40434e:	2b00      	cmp	r3, #0
  404350:	f47f af60 	bne.w	404214 <_dtoa_r+0x8cc>
  404354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404356:	2b00      	cmp	r3, #0
  404358:	f340 81f6 	ble.w	404748 <_dtoa_r+0xe00>
  40435c:	9306      	str	r3, [sp, #24]
  40435e:	e570      	b.n	403e42 <_dtoa_r+0x4fa>
  404360:	9c08      	ldr	r4, [sp, #32]
  404362:	e51f      	b.n	403da4 <_dtoa_r+0x45c>
  404364:	9b20      	ldr	r3, [sp, #128]	; 0x80
  404366:	2b02      	cmp	r3, #2
  404368:	f77f ad67 	ble.w	403e3a <_dtoa_r+0x4f2>
  40436c:	9b06      	ldr	r3, [sp, #24]
  40436e:	2b00      	cmp	r3, #0
  404370:	f040 8179 	bne.w	404666 <_dtoa_r+0xd1e>
  404374:	4641      	mov	r1, r8
  404376:	2205      	movs	r2, #5
  404378:	4648      	mov	r0, r9
  40437a:	f000 fdff 	bl	404f7c <__multadd>
  40437e:	4601      	mov	r1, r0
  404380:	4680      	mov	r8, r0
  404382:	4620      	mov	r0, r4
  404384:	f000 ffd2 	bl	40532c <__mcmp>
  404388:	2800      	cmp	r0, #0
  40438a:	9408      	str	r4, [sp, #32]
  40438c:	f77f af0e 	ble.w	4041ac <_dtoa_r+0x864>
  404390:	9a04      	ldr	r2, [sp, #16]
  404392:	9907      	ldr	r1, [sp, #28]
  404394:	2331      	movs	r3, #49	; 0x31
  404396:	3201      	adds	r2, #1
  404398:	9204      	str	r2, [sp, #16]
  40439a:	700b      	strb	r3, [r1, #0]
  40439c:	1c4d      	adds	r5, r1, #1
  40439e:	e709      	b.n	4041b4 <_dtoa_r+0x86c>
  4043a0:	9a04      	ldr	r2, [sp, #16]
  4043a2:	3201      	adds	r2, #1
  4043a4:	9204      	str	r2, [sp, #16]
  4043a6:	9a07      	ldr	r2, [sp, #28]
  4043a8:	2331      	movs	r3, #49	; 0x31
  4043aa:	7013      	strb	r3, [r2, #0]
  4043ac:	e588      	b.n	403ec0 <_dtoa_r+0x578>
  4043ae:	2301      	movs	r3, #1
  4043b0:	9309      	str	r3, [sp, #36]	; 0x24
  4043b2:	e5cd      	b.n	403f50 <_dtoa_r+0x608>
  4043b4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4043b8:	e491      	b.n	403cde <_dtoa_r+0x396>
  4043ba:	f1ba 0f00 	cmp.w	sl, #0
  4043be:	f47f ad04 	bne.w	403dca <_dtoa_r+0x482>
  4043c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4043c6:	2b00      	cmp	r3, #0
  4043c8:	f040 813f 	bne.w	40464a <_dtoa_r+0xd02>
  4043cc:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4043d0:	0d3f      	lsrs	r7, r7, #20
  4043d2:	053f      	lsls	r7, r7, #20
  4043d4:	b137      	cbz	r7, 4043e4 <_dtoa_r+0xa9c>
  4043d6:	9b05      	ldr	r3, [sp, #20]
  4043d8:	3301      	adds	r3, #1
  4043da:	9305      	str	r3, [sp, #20]
  4043dc:	9b02      	ldr	r3, [sp, #8]
  4043de:	3301      	adds	r3, #1
  4043e0:	9302      	str	r3, [sp, #8]
  4043e2:	2701      	movs	r7, #1
  4043e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4043e6:	2001      	movs	r0, #1
  4043e8:	2b00      	cmp	r3, #0
  4043ea:	f43f acf8 	beq.w	403dde <_dtoa_r+0x496>
  4043ee:	e4ed      	b.n	403dcc <_dtoa_r+0x484>
  4043f0:	4640      	mov	r0, r8
  4043f2:	f001 ff11 	bl	406218 <__aeabi_i2d>
  4043f6:	4632      	mov	r2, r6
  4043f8:	463b      	mov	r3, r7
  4043fa:	f001 ff73 	bl	4062e4 <__aeabi_dmul>
  4043fe:	2200      	movs	r2, #0
  404400:	4bbf      	ldr	r3, [pc, #764]	; (404700 <_dtoa_r+0xdb8>)
  404402:	f001 fdbd 	bl	405f80 <__adddf3>
  404406:	4604      	mov	r4, r0
  404408:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40440c:	4630      	mov	r0, r6
  40440e:	4639      	mov	r1, r7
  404410:	2200      	movs	r2, #0
  404412:	4bbc      	ldr	r3, [pc, #752]	; (404704 <_dtoa_r+0xdbc>)
  404414:	f001 fdb2 	bl	405f7c <__aeabi_dsub>
  404418:	4622      	mov	r2, r4
  40441a:	462b      	mov	r3, r5
  40441c:	4606      	mov	r6, r0
  40441e:	460f      	mov	r7, r1
  404420:	f002 f9f0 	bl	406804 <__aeabi_dcmpgt>
  404424:	4680      	mov	r8, r0
  404426:	2800      	cmp	r0, #0
  404428:	f040 8105 	bne.w	404636 <_dtoa_r+0xcee>
  40442c:	4622      	mov	r2, r4
  40442e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  404432:	4630      	mov	r0, r6
  404434:	4639      	mov	r1, r7
  404436:	f002 f9c7 	bl	4067c8 <__aeabi_dcmplt>
  40443a:	b108      	cbz	r0, 404440 <_dtoa_r+0xaf8>
  40443c:	4646      	mov	r6, r8
  40443e:	e6b5      	b.n	4041ac <_dtoa_r+0x864>
  404440:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  404444:	f7ff bb89 	b.w	403b5a <_dtoa_r+0x212>
  404448:	9807      	ldr	r0, [sp, #28]
  40444a:	f7ff baae 	b.w	4039aa <_dtoa_r+0x62>
  40444e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404450:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404452:	970a      	str	r7, [sp, #40]	; 0x28
  404454:	1afb      	subs	r3, r7, r3
  404456:	441a      	add	r2, r3
  404458:	920b      	str	r2, [sp, #44]	; 0x2c
  40445a:	2700      	movs	r7, #0
  40445c:	e461      	b.n	403d22 <_dtoa_r+0x3da>
  40445e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  404462:	f04f 0802 	mov.w	r8, #2
  404466:	e5bb      	b.n	403fe0 <_dtoa_r+0x698>
  404468:	461c      	mov	r4, r3
  40446a:	2100      	movs	r1, #0
  40446c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  404470:	e58a      	b.n	403f88 <_dtoa_r+0x640>
  404472:	2401      	movs	r4, #1
  404474:	9421      	str	r4, [sp, #132]	; 0x84
  404476:	940d      	str	r4, [sp, #52]	; 0x34
  404478:	9406      	str	r4, [sp, #24]
  40447a:	e7f6      	b.n	40446a <_dtoa_r+0xb22>
  40447c:	2a00      	cmp	r2, #0
  40447e:	46d0      	mov	r8, sl
  404480:	f8cd b014 	str.w	fp, [sp, #20]
  404484:	469a      	mov	sl, r3
  404486:	dd11      	ble.n	4044ac <_dtoa_r+0xb64>
  404488:	4621      	mov	r1, r4
  40448a:	2201      	movs	r2, #1
  40448c:	4648      	mov	r0, r9
  40448e:	f000 fef5 	bl	40527c <__lshift>
  404492:	4641      	mov	r1, r8
  404494:	4604      	mov	r4, r0
  404496:	f000 ff49 	bl	40532c <__mcmp>
  40449a:	2800      	cmp	r0, #0
  40449c:	f340 8149 	ble.w	404732 <_dtoa_r+0xdea>
  4044a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4044a4:	f000 8106 	beq.w	4046b4 <_dtoa_r+0xd6c>
  4044a8:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4044ac:	46b3      	mov	fp, r6
  4044ae:	f887 a000 	strb.w	sl, [r7]
  4044b2:	1c7d      	adds	r5, r7, #1
  4044b4:	9e05      	ldr	r6, [sp, #20]
  4044b6:	9408      	str	r4, [sp, #32]
  4044b8:	e502      	b.n	403ec0 <_dtoa_r+0x578>
  4044ba:	d104      	bne.n	4044c6 <_dtoa_r+0xb7e>
  4044bc:	f01a 0f01 	tst.w	sl, #1
  4044c0:	d001      	beq.n	4044c6 <_dtoa_r+0xb7e>
  4044c2:	e4ed      	b.n	403ea0 <_dtoa_r+0x558>
  4044c4:	4615      	mov	r5, r2
  4044c6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4044ca:	2b30      	cmp	r3, #48	; 0x30
  4044cc:	f105 32ff 	add.w	r2, r5, #4294967295
  4044d0:	d0f8      	beq.n	4044c4 <_dtoa_r+0xb7c>
  4044d2:	e4f5      	b.n	403ec0 <_dtoa_r+0x578>
  4044d4:	9b04      	ldr	r3, [sp, #16]
  4044d6:	425c      	negs	r4, r3
  4044d8:	2c00      	cmp	r4, #0
  4044da:	f000 80bf 	beq.w	40465c <_dtoa_r+0xd14>
  4044de:	4b8a      	ldr	r3, [pc, #552]	; (404708 <_dtoa_r+0xdc0>)
  4044e0:	f004 020f 	and.w	r2, r4, #15
  4044e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4044ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  4044f0:	f001 fef8 	bl	4062e4 <__aeabi_dmul>
  4044f4:	1124      	asrs	r4, r4, #4
  4044f6:	4606      	mov	r6, r0
  4044f8:	460f      	mov	r7, r1
  4044fa:	f000 812a 	beq.w	404752 <_dtoa_r+0xe0a>
  4044fe:	4d83      	ldr	r5, [pc, #524]	; (40470c <_dtoa_r+0xdc4>)
  404500:	f04f 0802 	mov.w	r8, #2
  404504:	07e2      	lsls	r2, r4, #31
  404506:	d509      	bpl.n	40451c <_dtoa_r+0xbd4>
  404508:	4630      	mov	r0, r6
  40450a:	4639      	mov	r1, r7
  40450c:	e9d5 2300 	ldrd	r2, r3, [r5]
  404510:	f001 fee8 	bl	4062e4 <__aeabi_dmul>
  404514:	f108 0801 	add.w	r8, r8, #1
  404518:	4606      	mov	r6, r0
  40451a:	460f      	mov	r7, r1
  40451c:	1064      	asrs	r4, r4, #1
  40451e:	f105 0508 	add.w	r5, r5, #8
  404522:	d1ef      	bne.n	404504 <_dtoa_r+0xbbc>
  404524:	e576      	b.n	404014 <_dtoa_r+0x6cc>
  404526:	9907      	ldr	r1, [sp, #28]
  404528:	2230      	movs	r2, #48	; 0x30
  40452a:	700a      	strb	r2, [r1, #0]
  40452c:	9a04      	ldr	r2, [sp, #16]
  40452e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  404532:	3201      	adds	r2, #1
  404534:	9204      	str	r2, [sp, #16]
  404536:	f7ff bbd0 	b.w	403cda <_dtoa_r+0x392>
  40453a:	6871      	ldr	r1, [r6, #4]
  40453c:	4648      	mov	r0, r9
  40453e:	f000 fced 	bl	404f1c <_Balloc>
  404542:	6933      	ldr	r3, [r6, #16]
  404544:	1c9a      	adds	r2, r3, #2
  404546:	4605      	mov	r5, r0
  404548:	0092      	lsls	r2, r2, #2
  40454a:	f106 010c 	add.w	r1, r6, #12
  40454e:	300c      	adds	r0, #12
  404550:	f000 fc46 	bl	404de0 <memcpy>
  404554:	4629      	mov	r1, r5
  404556:	2201      	movs	r2, #1
  404558:	4648      	mov	r0, r9
  40455a:	f000 fe8f 	bl	40527c <__lshift>
  40455e:	9005      	str	r0, [sp, #20]
  404560:	e670      	b.n	404244 <_dtoa_r+0x8fc>
  404562:	2b39      	cmp	r3, #57	; 0x39
  404564:	f8cd b014 	str.w	fp, [sp, #20]
  404568:	46d0      	mov	r8, sl
  40456a:	f000 80a3 	beq.w	4046b4 <_dtoa_r+0xd6c>
  40456e:	f103 0a01 	add.w	sl, r3, #1
  404572:	46b3      	mov	fp, r6
  404574:	f887 a000 	strb.w	sl, [r7]
  404578:	1c7d      	adds	r5, r7, #1
  40457a:	9e05      	ldr	r6, [sp, #20]
  40457c:	9408      	str	r4, [sp, #32]
  40457e:	e49f      	b.n	403ec0 <_dtoa_r+0x578>
  404580:	465a      	mov	r2, fp
  404582:	46d0      	mov	r8, sl
  404584:	46b3      	mov	fp, r6
  404586:	469a      	mov	sl, r3
  404588:	4616      	mov	r6, r2
  40458a:	e47d      	b.n	403e88 <_dtoa_r+0x540>
  40458c:	495e      	ldr	r1, [pc, #376]	; (404708 <_dtoa_r+0xdc0>)
  40458e:	f108 3aff 	add.w	sl, r8, #4294967295
  404592:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  404596:	4622      	mov	r2, r4
  404598:	462b      	mov	r3, r5
  40459a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40459e:	f001 fea1 	bl	4062e4 <__aeabi_dmul>
  4045a2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4045a6:	4639      	mov	r1, r7
  4045a8:	4630      	mov	r0, r6
  4045aa:	f002 f94b 	bl	406844 <__aeabi_d2iz>
  4045ae:	4604      	mov	r4, r0
  4045b0:	f001 fe32 	bl	406218 <__aeabi_i2d>
  4045b4:	4602      	mov	r2, r0
  4045b6:	460b      	mov	r3, r1
  4045b8:	4630      	mov	r0, r6
  4045ba:	4639      	mov	r1, r7
  4045bc:	f001 fcde 	bl	405f7c <__aeabi_dsub>
  4045c0:	9a07      	ldr	r2, [sp, #28]
  4045c2:	3430      	adds	r4, #48	; 0x30
  4045c4:	f1b8 0f01 	cmp.w	r8, #1
  4045c8:	4606      	mov	r6, r0
  4045ca:	460f      	mov	r7, r1
  4045cc:	7014      	strb	r4, [r2, #0]
  4045ce:	f102 0501 	add.w	r5, r2, #1
  4045d2:	d01e      	beq.n	404612 <_dtoa_r+0xcca>
  4045d4:	9b07      	ldr	r3, [sp, #28]
  4045d6:	eb03 0b08 	add.w	fp, r3, r8
  4045da:	46a8      	mov	r8, r5
  4045dc:	2200      	movs	r2, #0
  4045de:	4b4c      	ldr	r3, [pc, #304]	; (404710 <_dtoa_r+0xdc8>)
  4045e0:	4630      	mov	r0, r6
  4045e2:	4639      	mov	r1, r7
  4045e4:	f001 fe7e 	bl	4062e4 <__aeabi_dmul>
  4045e8:	460f      	mov	r7, r1
  4045ea:	4606      	mov	r6, r0
  4045ec:	f002 f92a 	bl	406844 <__aeabi_d2iz>
  4045f0:	4604      	mov	r4, r0
  4045f2:	f001 fe11 	bl	406218 <__aeabi_i2d>
  4045f6:	3430      	adds	r4, #48	; 0x30
  4045f8:	4602      	mov	r2, r0
  4045fa:	460b      	mov	r3, r1
  4045fc:	4630      	mov	r0, r6
  4045fe:	4639      	mov	r1, r7
  404600:	f001 fcbc 	bl	405f7c <__aeabi_dsub>
  404604:	f808 4b01 	strb.w	r4, [r8], #1
  404608:	45c3      	cmp	fp, r8
  40460a:	4606      	mov	r6, r0
  40460c:	460f      	mov	r7, r1
  40460e:	d1e5      	bne.n	4045dc <_dtoa_r+0xc94>
  404610:	4455      	add	r5, sl
  404612:	2200      	movs	r2, #0
  404614:	4b3f      	ldr	r3, [pc, #252]	; (404714 <_dtoa_r+0xdcc>)
  404616:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40461a:	f001 fcb1 	bl	405f80 <__adddf3>
  40461e:	4632      	mov	r2, r6
  404620:	463b      	mov	r3, r7
  404622:	f002 f8d1 	bl	4067c8 <__aeabi_dcmplt>
  404626:	2800      	cmp	r0, #0
  404628:	d04c      	beq.n	4046c4 <_dtoa_r+0xd7c>
  40462a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40462c:	9304      	str	r3, [sp, #16]
  40462e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  404632:	f7ff bb46 	b.w	403cc2 <_dtoa_r+0x37a>
  404636:	f04f 0800 	mov.w	r8, #0
  40463a:	4646      	mov	r6, r8
  40463c:	e6a8      	b.n	404390 <_dtoa_r+0xa48>
  40463e:	9b05      	ldr	r3, [sp, #20]
  404640:	9a06      	ldr	r2, [sp, #24]
  404642:	1a9d      	subs	r5, r3, r2
  404644:	2300      	movs	r3, #0
  404646:	f7ff bb72 	b.w	403d2e <_dtoa_r+0x3e6>
  40464a:	2700      	movs	r7, #0
  40464c:	e6ca      	b.n	4043e4 <_dtoa_r+0xa9c>
  40464e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404650:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404652:	9d05      	ldr	r5, [sp, #20]
  404654:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404658:	f7ff bb69 	b.w	403d2e <_dtoa_r+0x3e6>
  40465c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  404660:	f04f 0802 	mov.w	r8, #2
  404664:	e4d6      	b.n	404014 <_dtoa_r+0x6cc>
  404666:	9408      	str	r4, [sp, #32]
  404668:	e5a0      	b.n	4041ac <_dtoa_r+0x864>
  40466a:	9b06      	ldr	r3, [sp, #24]
  40466c:	2b00      	cmp	r3, #0
  40466e:	f43f aebf 	beq.w	4043f0 <_dtoa_r+0xaa8>
  404672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404674:	2b00      	cmp	r3, #0
  404676:	f77f aee3 	ble.w	404440 <_dtoa_r+0xaf8>
  40467a:	2200      	movs	r2, #0
  40467c:	4b24      	ldr	r3, [pc, #144]	; (404710 <_dtoa_r+0xdc8>)
  40467e:	4630      	mov	r0, r6
  404680:	4639      	mov	r1, r7
  404682:	f001 fe2f 	bl	4062e4 <__aeabi_dmul>
  404686:	4606      	mov	r6, r0
  404688:	460f      	mov	r7, r1
  40468a:	f108 0001 	add.w	r0, r8, #1
  40468e:	f001 fdc3 	bl	406218 <__aeabi_i2d>
  404692:	4632      	mov	r2, r6
  404694:	463b      	mov	r3, r7
  404696:	f001 fe25 	bl	4062e4 <__aeabi_dmul>
  40469a:	2200      	movs	r2, #0
  40469c:	4b18      	ldr	r3, [pc, #96]	; (404700 <_dtoa_r+0xdb8>)
  40469e:	f001 fc6f 	bl	405f80 <__adddf3>
  4046a2:	9a04      	ldr	r2, [sp, #16]
  4046a4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4046a8:	3a01      	subs	r2, #1
  4046aa:	4604      	mov	r4, r0
  4046ac:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  4046b0:	9211      	str	r2, [sp, #68]	; 0x44
  4046b2:	e4d0      	b.n	404056 <_dtoa_r+0x70e>
  4046b4:	2239      	movs	r2, #57	; 0x39
  4046b6:	46b3      	mov	fp, r6
  4046b8:	9408      	str	r4, [sp, #32]
  4046ba:	9e05      	ldr	r6, [sp, #20]
  4046bc:	703a      	strb	r2, [r7, #0]
  4046be:	1c7d      	adds	r5, r7, #1
  4046c0:	f7ff bbf0 	b.w	403ea4 <_dtoa_r+0x55c>
  4046c4:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  4046c8:	2000      	movs	r0, #0
  4046ca:	4912      	ldr	r1, [pc, #72]	; (404714 <_dtoa_r+0xdcc>)
  4046cc:	f001 fc56 	bl	405f7c <__aeabi_dsub>
  4046d0:	4632      	mov	r2, r6
  4046d2:	463b      	mov	r3, r7
  4046d4:	f002 f896 	bl	406804 <__aeabi_dcmpgt>
  4046d8:	b908      	cbnz	r0, 4046de <_dtoa_r+0xd96>
  4046da:	e6b1      	b.n	404440 <_dtoa_r+0xaf8>
  4046dc:	4615      	mov	r5, r2
  4046de:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4046e2:	2b30      	cmp	r3, #48	; 0x30
  4046e4:	f105 32ff 	add.w	r2, r5, #4294967295
  4046e8:	d0f8      	beq.n	4046dc <_dtoa_r+0xd94>
  4046ea:	e530      	b.n	40414e <_dtoa_r+0x806>
  4046ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4046ee:	9304      	str	r3, [sp, #16]
  4046f0:	f7ff bae7 	b.w	403cc2 <_dtoa_r+0x37a>
  4046f4:	f1ba 0f00 	cmp.w	sl, #0
  4046f8:	f47f ad7a 	bne.w	4041f0 <_dtoa_r+0x8a8>
  4046fc:	e661      	b.n	4043c2 <_dtoa_r+0xa7a>
  4046fe:	bf00      	nop
  404700:	401c0000 	.word	0x401c0000
  404704:	40140000 	.word	0x40140000
  404708:	00406d28 	.word	0x00406d28
  40470c:	00406df0 	.word	0x00406df0
  404710:	40240000 	.word	0x40240000
  404714:	3fe00000 	.word	0x3fe00000
  404718:	2b39      	cmp	r3, #57	; 0x39
  40471a:	f8cd b014 	str.w	fp, [sp, #20]
  40471e:	46d0      	mov	r8, sl
  404720:	f8dd b008 	ldr.w	fp, [sp, #8]
  404724:	469a      	mov	sl, r3
  404726:	d0c5      	beq.n	4046b4 <_dtoa_r+0xd6c>
  404728:	f1bb 0f00 	cmp.w	fp, #0
  40472c:	f73f aebc 	bgt.w	4044a8 <_dtoa_r+0xb60>
  404730:	e6bc      	b.n	4044ac <_dtoa_r+0xb64>
  404732:	f47f aebb 	bne.w	4044ac <_dtoa_r+0xb64>
  404736:	f01a 0f01 	tst.w	sl, #1
  40473a:	f43f aeb7 	beq.w	4044ac <_dtoa_r+0xb64>
  40473e:	e6af      	b.n	4044a0 <_dtoa_r+0xb58>
  404740:	f04f 0800 	mov.w	r8, #0
  404744:	4646      	mov	r6, r8
  404746:	e531      	b.n	4041ac <_dtoa_r+0x864>
  404748:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40474a:	2b02      	cmp	r3, #2
  40474c:	dc21      	bgt.n	404792 <_dtoa_r+0xe4a>
  40474e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404750:	e604      	b.n	40435c <_dtoa_r+0xa14>
  404752:	f04f 0802 	mov.w	r8, #2
  404756:	e45d      	b.n	404014 <_dtoa_r+0x6cc>
  404758:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40475a:	2b02      	cmp	r3, #2
  40475c:	dc19      	bgt.n	404792 <_dtoa_r+0xe4a>
  40475e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404760:	e563      	b.n	40422a <_dtoa_r+0x8e2>
  404762:	2400      	movs	r4, #0
  404764:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  404768:	4621      	mov	r1, r4
  40476a:	4648      	mov	r0, r9
  40476c:	f000 fbd6 	bl	404f1c <_Balloc>
  404770:	f04f 33ff 	mov.w	r3, #4294967295
  404774:	9306      	str	r3, [sp, #24]
  404776:	930d      	str	r3, [sp, #52]	; 0x34
  404778:	2301      	movs	r3, #1
  40477a:	9007      	str	r0, [sp, #28]
  40477c:	9421      	str	r4, [sp, #132]	; 0x84
  40477e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  404782:	9309      	str	r3, [sp, #36]	; 0x24
  404784:	f7ff b9e9 	b.w	403b5a <_dtoa_r+0x212>
  404788:	f43f ab3d 	beq.w	403e06 <_dtoa_r+0x4be>
  40478c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  404790:	e522      	b.n	4041d8 <_dtoa_r+0x890>
  404792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404794:	9306      	str	r3, [sp, #24]
  404796:	e5e9      	b.n	40436c <_dtoa_r+0xa24>
  404798:	2501      	movs	r5, #1
  40479a:	f7ff b9a8 	b.w	403aee <_dtoa_r+0x1a6>
  40479e:	bf00      	nop

004047a0 <__libc_fini_array>:
  4047a0:	b538      	push	{r3, r4, r5, lr}
  4047a2:	4d07      	ldr	r5, [pc, #28]	; (4047c0 <__libc_fini_array+0x20>)
  4047a4:	4c07      	ldr	r4, [pc, #28]	; (4047c4 <__libc_fini_array+0x24>)
  4047a6:	1b2c      	subs	r4, r5, r4
  4047a8:	10a4      	asrs	r4, r4, #2
  4047aa:	d005      	beq.n	4047b8 <__libc_fini_array+0x18>
  4047ac:	3c01      	subs	r4, #1
  4047ae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4047b2:	4798      	blx	r3
  4047b4:	2c00      	cmp	r4, #0
  4047b6:	d1f9      	bne.n	4047ac <__libc_fini_array+0xc>
  4047b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4047bc:	f002 bb3c 	b.w	406e38 <_fini>
  4047c0:	00406e48 	.word	0x00406e48
  4047c4:	00406e44 	.word	0x00406e44

004047c8 <_localeconv_r>:
  4047c8:	4800      	ldr	r0, [pc, #0]	; (4047cc <_localeconv_r+0x4>)
  4047ca:	4770      	bx	lr
  4047cc:	20400434 	.word	0x20400434

004047d0 <_malloc_r>:
  4047d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4047d4:	f101 050b 	add.w	r5, r1, #11
  4047d8:	2d16      	cmp	r5, #22
  4047da:	b083      	sub	sp, #12
  4047dc:	4606      	mov	r6, r0
  4047de:	f240 809f 	bls.w	404920 <_malloc_r+0x150>
  4047e2:	f035 0507 	bics.w	r5, r5, #7
  4047e6:	f100 80bf 	bmi.w	404968 <_malloc_r+0x198>
  4047ea:	42a9      	cmp	r1, r5
  4047ec:	f200 80bc 	bhi.w	404968 <_malloc_r+0x198>
  4047f0:	f000 fb90 	bl	404f14 <__malloc_lock>
  4047f4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  4047f8:	f0c0 829c 	bcc.w	404d34 <_malloc_r+0x564>
  4047fc:	0a6b      	lsrs	r3, r5, #9
  4047fe:	f000 80ba 	beq.w	404976 <_malloc_r+0x1a6>
  404802:	2b04      	cmp	r3, #4
  404804:	f200 8183 	bhi.w	404b0e <_malloc_r+0x33e>
  404808:	09a8      	lsrs	r0, r5, #6
  40480a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  40480e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404812:	3038      	adds	r0, #56	; 0x38
  404814:	4fc4      	ldr	r7, [pc, #784]	; (404b28 <_malloc_r+0x358>)
  404816:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40481a:	f1a3 0108 	sub.w	r1, r3, #8
  40481e:	685c      	ldr	r4, [r3, #4]
  404820:	42a1      	cmp	r1, r4
  404822:	d107      	bne.n	404834 <_malloc_r+0x64>
  404824:	e0ac      	b.n	404980 <_malloc_r+0x1b0>
  404826:	2a00      	cmp	r2, #0
  404828:	f280 80ac 	bge.w	404984 <_malloc_r+0x1b4>
  40482c:	68e4      	ldr	r4, [r4, #12]
  40482e:	42a1      	cmp	r1, r4
  404830:	f000 80a6 	beq.w	404980 <_malloc_r+0x1b0>
  404834:	6863      	ldr	r3, [r4, #4]
  404836:	f023 0303 	bic.w	r3, r3, #3
  40483a:	1b5a      	subs	r2, r3, r5
  40483c:	2a0f      	cmp	r2, #15
  40483e:	ddf2      	ble.n	404826 <_malloc_r+0x56>
  404840:	49b9      	ldr	r1, [pc, #740]	; (404b28 <_malloc_r+0x358>)
  404842:	693c      	ldr	r4, [r7, #16]
  404844:	f101 0e08 	add.w	lr, r1, #8
  404848:	4574      	cmp	r4, lr
  40484a:	f000 81b3 	beq.w	404bb4 <_malloc_r+0x3e4>
  40484e:	6863      	ldr	r3, [r4, #4]
  404850:	f023 0303 	bic.w	r3, r3, #3
  404854:	1b5a      	subs	r2, r3, r5
  404856:	2a0f      	cmp	r2, #15
  404858:	f300 8199 	bgt.w	404b8e <_malloc_r+0x3be>
  40485c:	2a00      	cmp	r2, #0
  40485e:	f8c1 e014 	str.w	lr, [r1, #20]
  404862:	f8c1 e010 	str.w	lr, [r1, #16]
  404866:	f280 809e 	bge.w	4049a6 <_malloc_r+0x1d6>
  40486a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40486e:	f080 8167 	bcs.w	404b40 <_malloc_r+0x370>
  404872:	08db      	lsrs	r3, r3, #3
  404874:	f103 0c01 	add.w	ip, r3, #1
  404878:	2201      	movs	r2, #1
  40487a:	109b      	asrs	r3, r3, #2
  40487c:	fa02 f303 	lsl.w	r3, r2, r3
  404880:	684a      	ldr	r2, [r1, #4]
  404882:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  404886:	f8c4 8008 	str.w	r8, [r4, #8]
  40488a:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  40488e:	431a      	orrs	r2, r3
  404890:	f1a9 0308 	sub.w	r3, r9, #8
  404894:	60e3      	str	r3, [r4, #12]
  404896:	604a      	str	r2, [r1, #4]
  404898:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  40489c:	f8c8 400c 	str.w	r4, [r8, #12]
  4048a0:	1083      	asrs	r3, r0, #2
  4048a2:	2401      	movs	r4, #1
  4048a4:	409c      	lsls	r4, r3
  4048a6:	4294      	cmp	r4, r2
  4048a8:	f200 808a 	bhi.w	4049c0 <_malloc_r+0x1f0>
  4048ac:	4214      	tst	r4, r2
  4048ae:	d106      	bne.n	4048be <_malloc_r+0xee>
  4048b0:	f020 0003 	bic.w	r0, r0, #3
  4048b4:	0064      	lsls	r4, r4, #1
  4048b6:	4214      	tst	r4, r2
  4048b8:	f100 0004 	add.w	r0, r0, #4
  4048bc:	d0fa      	beq.n	4048b4 <_malloc_r+0xe4>
  4048be:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4048c2:	46cc      	mov	ip, r9
  4048c4:	4680      	mov	r8, r0
  4048c6:	f8dc 100c 	ldr.w	r1, [ip, #12]
  4048ca:	458c      	cmp	ip, r1
  4048cc:	d107      	bne.n	4048de <_malloc_r+0x10e>
  4048ce:	e173      	b.n	404bb8 <_malloc_r+0x3e8>
  4048d0:	2a00      	cmp	r2, #0
  4048d2:	f280 8181 	bge.w	404bd8 <_malloc_r+0x408>
  4048d6:	68c9      	ldr	r1, [r1, #12]
  4048d8:	458c      	cmp	ip, r1
  4048da:	f000 816d 	beq.w	404bb8 <_malloc_r+0x3e8>
  4048de:	684b      	ldr	r3, [r1, #4]
  4048e0:	f023 0303 	bic.w	r3, r3, #3
  4048e4:	1b5a      	subs	r2, r3, r5
  4048e6:	2a0f      	cmp	r2, #15
  4048e8:	ddf2      	ble.n	4048d0 <_malloc_r+0x100>
  4048ea:	460c      	mov	r4, r1
  4048ec:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4048f0:	f854 8f08 	ldr.w	r8, [r4, #8]!
  4048f4:	194b      	adds	r3, r1, r5
  4048f6:	f045 0501 	orr.w	r5, r5, #1
  4048fa:	604d      	str	r5, [r1, #4]
  4048fc:	f042 0101 	orr.w	r1, r2, #1
  404900:	f8c8 c00c 	str.w	ip, [r8, #12]
  404904:	4630      	mov	r0, r6
  404906:	f8cc 8008 	str.w	r8, [ip, #8]
  40490a:	617b      	str	r3, [r7, #20]
  40490c:	613b      	str	r3, [r7, #16]
  40490e:	f8c3 e00c 	str.w	lr, [r3, #12]
  404912:	f8c3 e008 	str.w	lr, [r3, #8]
  404916:	6059      	str	r1, [r3, #4]
  404918:	509a      	str	r2, [r3, r2]
  40491a:	f000 fafd 	bl	404f18 <__malloc_unlock>
  40491e:	e01f      	b.n	404960 <_malloc_r+0x190>
  404920:	2910      	cmp	r1, #16
  404922:	d821      	bhi.n	404968 <_malloc_r+0x198>
  404924:	f000 faf6 	bl	404f14 <__malloc_lock>
  404928:	2510      	movs	r5, #16
  40492a:	2306      	movs	r3, #6
  40492c:	2002      	movs	r0, #2
  40492e:	4f7e      	ldr	r7, [pc, #504]	; (404b28 <_malloc_r+0x358>)
  404930:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  404934:	f1a3 0208 	sub.w	r2, r3, #8
  404938:	685c      	ldr	r4, [r3, #4]
  40493a:	4294      	cmp	r4, r2
  40493c:	f000 8145 	beq.w	404bca <_malloc_r+0x3fa>
  404940:	6863      	ldr	r3, [r4, #4]
  404942:	68e1      	ldr	r1, [r4, #12]
  404944:	68a5      	ldr	r5, [r4, #8]
  404946:	f023 0303 	bic.w	r3, r3, #3
  40494a:	4423      	add	r3, r4
  40494c:	4630      	mov	r0, r6
  40494e:	685a      	ldr	r2, [r3, #4]
  404950:	60e9      	str	r1, [r5, #12]
  404952:	f042 0201 	orr.w	r2, r2, #1
  404956:	608d      	str	r5, [r1, #8]
  404958:	605a      	str	r2, [r3, #4]
  40495a:	f000 fadd 	bl	404f18 <__malloc_unlock>
  40495e:	3408      	adds	r4, #8
  404960:	4620      	mov	r0, r4
  404962:	b003      	add	sp, #12
  404964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404968:	2400      	movs	r4, #0
  40496a:	230c      	movs	r3, #12
  40496c:	4620      	mov	r0, r4
  40496e:	6033      	str	r3, [r6, #0]
  404970:	b003      	add	sp, #12
  404972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404976:	2380      	movs	r3, #128	; 0x80
  404978:	f04f 0e40 	mov.w	lr, #64	; 0x40
  40497c:	203f      	movs	r0, #63	; 0x3f
  40497e:	e749      	b.n	404814 <_malloc_r+0x44>
  404980:	4670      	mov	r0, lr
  404982:	e75d      	b.n	404840 <_malloc_r+0x70>
  404984:	4423      	add	r3, r4
  404986:	68e1      	ldr	r1, [r4, #12]
  404988:	685a      	ldr	r2, [r3, #4]
  40498a:	68a5      	ldr	r5, [r4, #8]
  40498c:	f042 0201 	orr.w	r2, r2, #1
  404990:	60e9      	str	r1, [r5, #12]
  404992:	4630      	mov	r0, r6
  404994:	608d      	str	r5, [r1, #8]
  404996:	605a      	str	r2, [r3, #4]
  404998:	f000 fabe 	bl	404f18 <__malloc_unlock>
  40499c:	3408      	adds	r4, #8
  40499e:	4620      	mov	r0, r4
  4049a0:	b003      	add	sp, #12
  4049a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049a6:	4423      	add	r3, r4
  4049a8:	4630      	mov	r0, r6
  4049aa:	685a      	ldr	r2, [r3, #4]
  4049ac:	f042 0201 	orr.w	r2, r2, #1
  4049b0:	605a      	str	r2, [r3, #4]
  4049b2:	f000 fab1 	bl	404f18 <__malloc_unlock>
  4049b6:	3408      	adds	r4, #8
  4049b8:	4620      	mov	r0, r4
  4049ba:	b003      	add	sp, #12
  4049bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049c0:	68bc      	ldr	r4, [r7, #8]
  4049c2:	6863      	ldr	r3, [r4, #4]
  4049c4:	f023 0803 	bic.w	r8, r3, #3
  4049c8:	45a8      	cmp	r8, r5
  4049ca:	d304      	bcc.n	4049d6 <_malloc_r+0x206>
  4049cc:	ebc5 0308 	rsb	r3, r5, r8
  4049d0:	2b0f      	cmp	r3, #15
  4049d2:	f300 808c 	bgt.w	404aee <_malloc_r+0x31e>
  4049d6:	4b55      	ldr	r3, [pc, #340]	; (404b2c <_malloc_r+0x35c>)
  4049d8:	f8df 9160 	ldr.w	r9, [pc, #352]	; 404b3c <_malloc_r+0x36c>
  4049dc:	681a      	ldr	r2, [r3, #0]
  4049de:	f8d9 3000 	ldr.w	r3, [r9]
  4049e2:	3301      	adds	r3, #1
  4049e4:	442a      	add	r2, r5
  4049e6:	eb04 0a08 	add.w	sl, r4, r8
  4049ea:	f000 8160 	beq.w	404cae <_malloc_r+0x4de>
  4049ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  4049f2:	320f      	adds	r2, #15
  4049f4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4049f8:	f022 020f 	bic.w	r2, r2, #15
  4049fc:	4611      	mov	r1, r2
  4049fe:	4630      	mov	r0, r6
  404a00:	9201      	str	r2, [sp, #4]
  404a02:	f000 fd99 	bl	405538 <_sbrk_r>
  404a06:	f1b0 3fff 	cmp.w	r0, #4294967295
  404a0a:	4683      	mov	fp, r0
  404a0c:	9a01      	ldr	r2, [sp, #4]
  404a0e:	f000 8158 	beq.w	404cc2 <_malloc_r+0x4f2>
  404a12:	4582      	cmp	sl, r0
  404a14:	f200 80fc 	bhi.w	404c10 <_malloc_r+0x440>
  404a18:	4b45      	ldr	r3, [pc, #276]	; (404b30 <_malloc_r+0x360>)
  404a1a:	6819      	ldr	r1, [r3, #0]
  404a1c:	45da      	cmp	sl, fp
  404a1e:	4411      	add	r1, r2
  404a20:	6019      	str	r1, [r3, #0]
  404a22:	f000 8153 	beq.w	404ccc <_malloc_r+0x4fc>
  404a26:	f8d9 0000 	ldr.w	r0, [r9]
  404a2a:	f8df e110 	ldr.w	lr, [pc, #272]	; 404b3c <_malloc_r+0x36c>
  404a2e:	3001      	adds	r0, #1
  404a30:	bf1b      	ittet	ne
  404a32:	ebca 0a0b 	rsbne	sl, sl, fp
  404a36:	4451      	addne	r1, sl
  404a38:	f8ce b000 	streq.w	fp, [lr]
  404a3c:	6019      	strne	r1, [r3, #0]
  404a3e:	f01b 0107 	ands.w	r1, fp, #7
  404a42:	f000 8117 	beq.w	404c74 <_malloc_r+0x4a4>
  404a46:	f1c1 0008 	rsb	r0, r1, #8
  404a4a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404a4e:	4483      	add	fp, r0
  404a50:	3108      	adds	r1, #8
  404a52:	445a      	add	r2, fp
  404a54:	f3c2 020b 	ubfx	r2, r2, #0, #12
  404a58:	ebc2 0901 	rsb	r9, r2, r1
  404a5c:	4649      	mov	r1, r9
  404a5e:	4630      	mov	r0, r6
  404a60:	9301      	str	r3, [sp, #4]
  404a62:	f000 fd69 	bl	405538 <_sbrk_r>
  404a66:	1c43      	adds	r3, r0, #1
  404a68:	9b01      	ldr	r3, [sp, #4]
  404a6a:	f000 813f 	beq.w	404cec <_malloc_r+0x51c>
  404a6e:	ebcb 0200 	rsb	r2, fp, r0
  404a72:	444a      	add	r2, r9
  404a74:	f042 0201 	orr.w	r2, r2, #1
  404a78:	6819      	ldr	r1, [r3, #0]
  404a7a:	f8c7 b008 	str.w	fp, [r7, #8]
  404a7e:	4449      	add	r1, r9
  404a80:	42bc      	cmp	r4, r7
  404a82:	f8cb 2004 	str.w	r2, [fp, #4]
  404a86:	6019      	str	r1, [r3, #0]
  404a88:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 404b30 <_malloc_r+0x360>
  404a8c:	d016      	beq.n	404abc <_malloc_r+0x2ec>
  404a8e:	f1b8 0f0f 	cmp.w	r8, #15
  404a92:	f240 80fd 	bls.w	404c90 <_malloc_r+0x4c0>
  404a96:	6862      	ldr	r2, [r4, #4]
  404a98:	f1a8 030c 	sub.w	r3, r8, #12
  404a9c:	f023 0307 	bic.w	r3, r3, #7
  404aa0:	18e0      	adds	r0, r4, r3
  404aa2:	f002 0201 	and.w	r2, r2, #1
  404aa6:	f04f 0e05 	mov.w	lr, #5
  404aaa:	431a      	orrs	r2, r3
  404aac:	2b0f      	cmp	r3, #15
  404aae:	6062      	str	r2, [r4, #4]
  404ab0:	f8c0 e004 	str.w	lr, [r0, #4]
  404ab4:	f8c0 e008 	str.w	lr, [r0, #8]
  404ab8:	f200 811c 	bhi.w	404cf4 <_malloc_r+0x524>
  404abc:	4b1d      	ldr	r3, [pc, #116]	; (404b34 <_malloc_r+0x364>)
  404abe:	68bc      	ldr	r4, [r7, #8]
  404ac0:	681a      	ldr	r2, [r3, #0]
  404ac2:	4291      	cmp	r1, r2
  404ac4:	bf88      	it	hi
  404ac6:	6019      	strhi	r1, [r3, #0]
  404ac8:	4b1b      	ldr	r3, [pc, #108]	; (404b38 <_malloc_r+0x368>)
  404aca:	681a      	ldr	r2, [r3, #0]
  404acc:	4291      	cmp	r1, r2
  404ace:	6862      	ldr	r2, [r4, #4]
  404ad0:	bf88      	it	hi
  404ad2:	6019      	strhi	r1, [r3, #0]
  404ad4:	f022 0203 	bic.w	r2, r2, #3
  404ad8:	4295      	cmp	r5, r2
  404ada:	eba2 0305 	sub.w	r3, r2, r5
  404ade:	d801      	bhi.n	404ae4 <_malloc_r+0x314>
  404ae0:	2b0f      	cmp	r3, #15
  404ae2:	dc04      	bgt.n	404aee <_malloc_r+0x31e>
  404ae4:	4630      	mov	r0, r6
  404ae6:	f000 fa17 	bl	404f18 <__malloc_unlock>
  404aea:	2400      	movs	r4, #0
  404aec:	e738      	b.n	404960 <_malloc_r+0x190>
  404aee:	1962      	adds	r2, r4, r5
  404af0:	f043 0301 	orr.w	r3, r3, #1
  404af4:	f045 0501 	orr.w	r5, r5, #1
  404af8:	6065      	str	r5, [r4, #4]
  404afa:	4630      	mov	r0, r6
  404afc:	60ba      	str	r2, [r7, #8]
  404afe:	6053      	str	r3, [r2, #4]
  404b00:	f000 fa0a 	bl	404f18 <__malloc_unlock>
  404b04:	3408      	adds	r4, #8
  404b06:	4620      	mov	r0, r4
  404b08:	b003      	add	sp, #12
  404b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b0e:	2b14      	cmp	r3, #20
  404b10:	d971      	bls.n	404bf6 <_malloc_r+0x426>
  404b12:	2b54      	cmp	r3, #84	; 0x54
  404b14:	f200 80a4 	bhi.w	404c60 <_malloc_r+0x490>
  404b18:	0b28      	lsrs	r0, r5, #12
  404b1a:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  404b1e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404b22:	306e      	adds	r0, #110	; 0x6e
  404b24:	e676      	b.n	404814 <_malloc_r+0x44>
  404b26:	bf00      	nop
  404b28:	2040046c 	.word	0x2040046c
  404b2c:	2040091c 	.word	0x2040091c
  404b30:	20400920 	.word	0x20400920
  404b34:	20400918 	.word	0x20400918
  404b38:	20400914 	.word	0x20400914
  404b3c:	20400878 	.word	0x20400878
  404b40:	0a5a      	lsrs	r2, r3, #9
  404b42:	2a04      	cmp	r2, #4
  404b44:	d95e      	bls.n	404c04 <_malloc_r+0x434>
  404b46:	2a14      	cmp	r2, #20
  404b48:	f200 80b3 	bhi.w	404cb2 <_malloc_r+0x4e2>
  404b4c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404b50:	0049      	lsls	r1, r1, #1
  404b52:	325b      	adds	r2, #91	; 0x5b
  404b54:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  404b58:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  404b5c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 404d3c <_malloc_r+0x56c>
  404b60:	f1ac 0c08 	sub.w	ip, ip, #8
  404b64:	458c      	cmp	ip, r1
  404b66:	f000 8088 	beq.w	404c7a <_malloc_r+0x4aa>
  404b6a:	684a      	ldr	r2, [r1, #4]
  404b6c:	f022 0203 	bic.w	r2, r2, #3
  404b70:	4293      	cmp	r3, r2
  404b72:	d202      	bcs.n	404b7a <_malloc_r+0x3aa>
  404b74:	6889      	ldr	r1, [r1, #8]
  404b76:	458c      	cmp	ip, r1
  404b78:	d1f7      	bne.n	404b6a <_malloc_r+0x39a>
  404b7a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  404b7e:	687a      	ldr	r2, [r7, #4]
  404b80:	f8c4 c00c 	str.w	ip, [r4, #12]
  404b84:	60a1      	str	r1, [r4, #8]
  404b86:	f8cc 4008 	str.w	r4, [ip, #8]
  404b8a:	60cc      	str	r4, [r1, #12]
  404b8c:	e688      	b.n	4048a0 <_malloc_r+0xd0>
  404b8e:	1963      	adds	r3, r4, r5
  404b90:	f042 0701 	orr.w	r7, r2, #1
  404b94:	f045 0501 	orr.w	r5, r5, #1
  404b98:	6065      	str	r5, [r4, #4]
  404b9a:	4630      	mov	r0, r6
  404b9c:	614b      	str	r3, [r1, #20]
  404b9e:	610b      	str	r3, [r1, #16]
  404ba0:	f8c3 e00c 	str.w	lr, [r3, #12]
  404ba4:	f8c3 e008 	str.w	lr, [r3, #8]
  404ba8:	605f      	str	r7, [r3, #4]
  404baa:	509a      	str	r2, [r3, r2]
  404bac:	3408      	adds	r4, #8
  404bae:	f000 f9b3 	bl	404f18 <__malloc_unlock>
  404bb2:	e6d5      	b.n	404960 <_malloc_r+0x190>
  404bb4:	684a      	ldr	r2, [r1, #4]
  404bb6:	e673      	b.n	4048a0 <_malloc_r+0xd0>
  404bb8:	f108 0801 	add.w	r8, r8, #1
  404bbc:	f018 0f03 	tst.w	r8, #3
  404bc0:	f10c 0c08 	add.w	ip, ip, #8
  404bc4:	f47f ae7f 	bne.w	4048c6 <_malloc_r+0xf6>
  404bc8:	e030      	b.n	404c2c <_malloc_r+0x45c>
  404bca:	68dc      	ldr	r4, [r3, #12]
  404bcc:	42a3      	cmp	r3, r4
  404bce:	bf08      	it	eq
  404bd0:	3002      	addeq	r0, #2
  404bd2:	f43f ae35 	beq.w	404840 <_malloc_r+0x70>
  404bd6:	e6b3      	b.n	404940 <_malloc_r+0x170>
  404bd8:	440b      	add	r3, r1
  404bda:	460c      	mov	r4, r1
  404bdc:	685a      	ldr	r2, [r3, #4]
  404bde:	68c9      	ldr	r1, [r1, #12]
  404be0:	f854 5f08 	ldr.w	r5, [r4, #8]!
  404be4:	f042 0201 	orr.w	r2, r2, #1
  404be8:	605a      	str	r2, [r3, #4]
  404bea:	4630      	mov	r0, r6
  404bec:	60e9      	str	r1, [r5, #12]
  404bee:	608d      	str	r5, [r1, #8]
  404bf0:	f000 f992 	bl	404f18 <__malloc_unlock>
  404bf4:	e6b4      	b.n	404960 <_malloc_r+0x190>
  404bf6:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  404bfa:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  404bfe:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404c02:	e607      	b.n	404814 <_malloc_r+0x44>
  404c04:	099a      	lsrs	r2, r3, #6
  404c06:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404c0a:	0049      	lsls	r1, r1, #1
  404c0c:	3238      	adds	r2, #56	; 0x38
  404c0e:	e7a1      	b.n	404b54 <_malloc_r+0x384>
  404c10:	42bc      	cmp	r4, r7
  404c12:	4b4a      	ldr	r3, [pc, #296]	; (404d3c <_malloc_r+0x56c>)
  404c14:	f43f af00 	beq.w	404a18 <_malloc_r+0x248>
  404c18:	689c      	ldr	r4, [r3, #8]
  404c1a:	6862      	ldr	r2, [r4, #4]
  404c1c:	f022 0203 	bic.w	r2, r2, #3
  404c20:	e75a      	b.n	404ad8 <_malloc_r+0x308>
  404c22:	f859 3908 	ldr.w	r3, [r9], #-8
  404c26:	4599      	cmp	r9, r3
  404c28:	f040 8082 	bne.w	404d30 <_malloc_r+0x560>
  404c2c:	f010 0f03 	tst.w	r0, #3
  404c30:	f100 30ff 	add.w	r0, r0, #4294967295
  404c34:	d1f5      	bne.n	404c22 <_malloc_r+0x452>
  404c36:	687b      	ldr	r3, [r7, #4]
  404c38:	ea23 0304 	bic.w	r3, r3, r4
  404c3c:	607b      	str	r3, [r7, #4]
  404c3e:	0064      	lsls	r4, r4, #1
  404c40:	429c      	cmp	r4, r3
  404c42:	f63f aebd 	bhi.w	4049c0 <_malloc_r+0x1f0>
  404c46:	2c00      	cmp	r4, #0
  404c48:	f43f aeba 	beq.w	4049c0 <_malloc_r+0x1f0>
  404c4c:	421c      	tst	r4, r3
  404c4e:	4640      	mov	r0, r8
  404c50:	f47f ae35 	bne.w	4048be <_malloc_r+0xee>
  404c54:	0064      	lsls	r4, r4, #1
  404c56:	421c      	tst	r4, r3
  404c58:	f100 0004 	add.w	r0, r0, #4
  404c5c:	d0fa      	beq.n	404c54 <_malloc_r+0x484>
  404c5e:	e62e      	b.n	4048be <_malloc_r+0xee>
  404c60:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404c64:	d818      	bhi.n	404c98 <_malloc_r+0x4c8>
  404c66:	0be8      	lsrs	r0, r5, #15
  404c68:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  404c6c:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404c70:	3077      	adds	r0, #119	; 0x77
  404c72:	e5cf      	b.n	404814 <_malloc_r+0x44>
  404c74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404c78:	e6eb      	b.n	404a52 <_malloc_r+0x282>
  404c7a:	2101      	movs	r1, #1
  404c7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  404c80:	1092      	asrs	r2, r2, #2
  404c82:	fa01 f202 	lsl.w	r2, r1, r2
  404c86:	431a      	orrs	r2, r3
  404c88:	f8c8 2004 	str.w	r2, [r8, #4]
  404c8c:	4661      	mov	r1, ip
  404c8e:	e777      	b.n	404b80 <_malloc_r+0x3b0>
  404c90:	2301      	movs	r3, #1
  404c92:	f8cb 3004 	str.w	r3, [fp, #4]
  404c96:	e725      	b.n	404ae4 <_malloc_r+0x314>
  404c98:	f240 5254 	movw	r2, #1364	; 0x554
  404c9c:	4293      	cmp	r3, r2
  404c9e:	d820      	bhi.n	404ce2 <_malloc_r+0x512>
  404ca0:	0ca8      	lsrs	r0, r5, #18
  404ca2:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  404ca6:	ea4f 034e 	mov.w	r3, lr, lsl #1
  404caa:	307c      	adds	r0, #124	; 0x7c
  404cac:	e5b2      	b.n	404814 <_malloc_r+0x44>
  404cae:	3210      	adds	r2, #16
  404cb0:	e6a4      	b.n	4049fc <_malloc_r+0x22c>
  404cb2:	2a54      	cmp	r2, #84	; 0x54
  404cb4:	d826      	bhi.n	404d04 <_malloc_r+0x534>
  404cb6:	0b1a      	lsrs	r2, r3, #12
  404cb8:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404cbc:	0049      	lsls	r1, r1, #1
  404cbe:	326e      	adds	r2, #110	; 0x6e
  404cc0:	e748      	b.n	404b54 <_malloc_r+0x384>
  404cc2:	68bc      	ldr	r4, [r7, #8]
  404cc4:	6862      	ldr	r2, [r4, #4]
  404cc6:	f022 0203 	bic.w	r2, r2, #3
  404cca:	e705      	b.n	404ad8 <_malloc_r+0x308>
  404ccc:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404cd0:	2800      	cmp	r0, #0
  404cd2:	f47f aea8 	bne.w	404a26 <_malloc_r+0x256>
  404cd6:	4442      	add	r2, r8
  404cd8:	68bb      	ldr	r3, [r7, #8]
  404cda:	f042 0201 	orr.w	r2, r2, #1
  404cde:	605a      	str	r2, [r3, #4]
  404ce0:	e6ec      	b.n	404abc <_malloc_r+0x2ec>
  404ce2:	23fe      	movs	r3, #254	; 0xfe
  404ce4:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  404ce8:	207e      	movs	r0, #126	; 0x7e
  404cea:	e593      	b.n	404814 <_malloc_r+0x44>
  404cec:	2201      	movs	r2, #1
  404cee:	f04f 0900 	mov.w	r9, #0
  404cf2:	e6c1      	b.n	404a78 <_malloc_r+0x2a8>
  404cf4:	f104 0108 	add.w	r1, r4, #8
  404cf8:	4630      	mov	r0, r6
  404cfa:	f000 fdff 	bl	4058fc <_free_r>
  404cfe:	f8d9 1000 	ldr.w	r1, [r9]
  404d02:	e6db      	b.n	404abc <_malloc_r+0x2ec>
  404d04:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404d08:	d805      	bhi.n	404d16 <_malloc_r+0x546>
  404d0a:	0bda      	lsrs	r2, r3, #15
  404d0c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404d10:	0049      	lsls	r1, r1, #1
  404d12:	3277      	adds	r2, #119	; 0x77
  404d14:	e71e      	b.n	404b54 <_malloc_r+0x384>
  404d16:	f240 5154 	movw	r1, #1364	; 0x554
  404d1a:	428a      	cmp	r2, r1
  404d1c:	d805      	bhi.n	404d2a <_malloc_r+0x55a>
  404d1e:	0c9a      	lsrs	r2, r3, #18
  404d20:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404d24:	0049      	lsls	r1, r1, #1
  404d26:	327c      	adds	r2, #124	; 0x7c
  404d28:	e714      	b.n	404b54 <_malloc_r+0x384>
  404d2a:	21fe      	movs	r1, #254	; 0xfe
  404d2c:	227e      	movs	r2, #126	; 0x7e
  404d2e:	e711      	b.n	404b54 <_malloc_r+0x384>
  404d30:	687b      	ldr	r3, [r7, #4]
  404d32:	e784      	b.n	404c3e <_malloc_r+0x46e>
  404d34:	08e8      	lsrs	r0, r5, #3
  404d36:	1c43      	adds	r3, r0, #1
  404d38:	005b      	lsls	r3, r3, #1
  404d3a:	e5f8      	b.n	40492e <_malloc_r+0x15e>
  404d3c:	2040046c 	.word	0x2040046c

00404d40 <memchr>:
  404d40:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404d44:	2a10      	cmp	r2, #16
  404d46:	db2b      	blt.n	404da0 <memchr+0x60>
  404d48:	f010 0f07 	tst.w	r0, #7
  404d4c:	d008      	beq.n	404d60 <memchr+0x20>
  404d4e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404d52:	3a01      	subs	r2, #1
  404d54:	428b      	cmp	r3, r1
  404d56:	d02d      	beq.n	404db4 <memchr+0x74>
  404d58:	f010 0f07 	tst.w	r0, #7
  404d5c:	b342      	cbz	r2, 404db0 <memchr+0x70>
  404d5e:	d1f6      	bne.n	404d4e <memchr+0xe>
  404d60:	b4f0      	push	{r4, r5, r6, r7}
  404d62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404d66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404d6a:	f022 0407 	bic.w	r4, r2, #7
  404d6e:	f07f 0700 	mvns.w	r7, #0
  404d72:	2300      	movs	r3, #0
  404d74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404d78:	3c08      	subs	r4, #8
  404d7a:	ea85 0501 	eor.w	r5, r5, r1
  404d7e:	ea86 0601 	eor.w	r6, r6, r1
  404d82:	fa85 f547 	uadd8	r5, r5, r7
  404d86:	faa3 f587 	sel	r5, r3, r7
  404d8a:	fa86 f647 	uadd8	r6, r6, r7
  404d8e:	faa5 f687 	sel	r6, r5, r7
  404d92:	b98e      	cbnz	r6, 404db8 <memchr+0x78>
  404d94:	d1ee      	bne.n	404d74 <memchr+0x34>
  404d96:	bcf0      	pop	{r4, r5, r6, r7}
  404d98:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404d9c:	f002 0207 	and.w	r2, r2, #7
  404da0:	b132      	cbz	r2, 404db0 <memchr+0x70>
  404da2:	f810 3b01 	ldrb.w	r3, [r0], #1
  404da6:	3a01      	subs	r2, #1
  404da8:	ea83 0301 	eor.w	r3, r3, r1
  404dac:	b113      	cbz	r3, 404db4 <memchr+0x74>
  404dae:	d1f8      	bne.n	404da2 <memchr+0x62>
  404db0:	2000      	movs	r0, #0
  404db2:	4770      	bx	lr
  404db4:	3801      	subs	r0, #1
  404db6:	4770      	bx	lr
  404db8:	2d00      	cmp	r5, #0
  404dba:	bf06      	itte	eq
  404dbc:	4635      	moveq	r5, r6
  404dbe:	3803      	subeq	r0, #3
  404dc0:	3807      	subne	r0, #7
  404dc2:	f015 0f01 	tst.w	r5, #1
  404dc6:	d107      	bne.n	404dd8 <memchr+0x98>
  404dc8:	3001      	adds	r0, #1
  404dca:	f415 7f80 	tst.w	r5, #256	; 0x100
  404dce:	bf02      	ittt	eq
  404dd0:	3001      	addeq	r0, #1
  404dd2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404dd6:	3001      	addeq	r0, #1
  404dd8:	bcf0      	pop	{r4, r5, r6, r7}
  404dda:	3801      	subs	r0, #1
  404ddc:	4770      	bx	lr
  404dde:	bf00      	nop

00404de0 <memcpy>:
  404de0:	4684      	mov	ip, r0
  404de2:	ea41 0300 	orr.w	r3, r1, r0
  404de6:	f013 0303 	ands.w	r3, r3, #3
  404dea:	d16d      	bne.n	404ec8 <memcpy+0xe8>
  404dec:	3a40      	subs	r2, #64	; 0x40
  404dee:	d341      	bcc.n	404e74 <memcpy+0x94>
  404df0:	f851 3b04 	ldr.w	r3, [r1], #4
  404df4:	f840 3b04 	str.w	r3, [r0], #4
  404df8:	f851 3b04 	ldr.w	r3, [r1], #4
  404dfc:	f840 3b04 	str.w	r3, [r0], #4
  404e00:	f851 3b04 	ldr.w	r3, [r1], #4
  404e04:	f840 3b04 	str.w	r3, [r0], #4
  404e08:	f851 3b04 	ldr.w	r3, [r1], #4
  404e0c:	f840 3b04 	str.w	r3, [r0], #4
  404e10:	f851 3b04 	ldr.w	r3, [r1], #4
  404e14:	f840 3b04 	str.w	r3, [r0], #4
  404e18:	f851 3b04 	ldr.w	r3, [r1], #4
  404e1c:	f840 3b04 	str.w	r3, [r0], #4
  404e20:	f851 3b04 	ldr.w	r3, [r1], #4
  404e24:	f840 3b04 	str.w	r3, [r0], #4
  404e28:	f851 3b04 	ldr.w	r3, [r1], #4
  404e2c:	f840 3b04 	str.w	r3, [r0], #4
  404e30:	f851 3b04 	ldr.w	r3, [r1], #4
  404e34:	f840 3b04 	str.w	r3, [r0], #4
  404e38:	f851 3b04 	ldr.w	r3, [r1], #4
  404e3c:	f840 3b04 	str.w	r3, [r0], #4
  404e40:	f851 3b04 	ldr.w	r3, [r1], #4
  404e44:	f840 3b04 	str.w	r3, [r0], #4
  404e48:	f851 3b04 	ldr.w	r3, [r1], #4
  404e4c:	f840 3b04 	str.w	r3, [r0], #4
  404e50:	f851 3b04 	ldr.w	r3, [r1], #4
  404e54:	f840 3b04 	str.w	r3, [r0], #4
  404e58:	f851 3b04 	ldr.w	r3, [r1], #4
  404e5c:	f840 3b04 	str.w	r3, [r0], #4
  404e60:	f851 3b04 	ldr.w	r3, [r1], #4
  404e64:	f840 3b04 	str.w	r3, [r0], #4
  404e68:	f851 3b04 	ldr.w	r3, [r1], #4
  404e6c:	f840 3b04 	str.w	r3, [r0], #4
  404e70:	3a40      	subs	r2, #64	; 0x40
  404e72:	d2bd      	bcs.n	404df0 <memcpy+0x10>
  404e74:	3230      	adds	r2, #48	; 0x30
  404e76:	d311      	bcc.n	404e9c <memcpy+0xbc>
  404e78:	f851 3b04 	ldr.w	r3, [r1], #4
  404e7c:	f840 3b04 	str.w	r3, [r0], #4
  404e80:	f851 3b04 	ldr.w	r3, [r1], #4
  404e84:	f840 3b04 	str.w	r3, [r0], #4
  404e88:	f851 3b04 	ldr.w	r3, [r1], #4
  404e8c:	f840 3b04 	str.w	r3, [r0], #4
  404e90:	f851 3b04 	ldr.w	r3, [r1], #4
  404e94:	f840 3b04 	str.w	r3, [r0], #4
  404e98:	3a10      	subs	r2, #16
  404e9a:	d2ed      	bcs.n	404e78 <memcpy+0x98>
  404e9c:	320c      	adds	r2, #12
  404e9e:	d305      	bcc.n	404eac <memcpy+0xcc>
  404ea0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ea4:	f840 3b04 	str.w	r3, [r0], #4
  404ea8:	3a04      	subs	r2, #4
  404eaa:	d2f9      	bcs.n	404ea0 <memcpy+0xc0>
  404eac:	3204      	adds	r2, #4
  404eae:	d008      	beq.n	404ec2 <memcpy+0xe2>
  404eb0:	07d2      	lsls	r2, r2, #31
  404eb2:	bf1c      	itt	ne
  404eb4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404eb8:	f800 3b01 	strbne.w	r3, [r0], #1
  404ebc:	d301      	bcc.n	404ec2 <memcpy+0xe2>
  404ebe:	880b      	ldrh	r3, [r1, #0]
  404ec0:	8003      	strh	r3, [r0, #0]
  404ec2:	4660      	mov	r0, ip
  404ec4:	4770      	bx	lr
  404ec6:	bf00      	nop
  404ec8:	2a08      	cmp	r2, #8
  404eca:	d313      	bcc.n	404ef4 <memcpy+0x114>
  404ecc:	078b      	lsls	r3, r1, #30
  404ece:	d08d      	beq.n	404dec <memcpy+0xc>
  404ed0:	f010 0303 	ands.w	r3, r0, #3
  404ed4:	d08a      	beq.n	404dec <memcpy+0xc>
  404ed6:	f1c3 0304 	rsb	r3, r3, #4
  404eda:	1ad2      	subs	r2, r2, r3
  404edc:	07db      	lsls	r3, r3, #31
  404ede:	bf1c      	itt	ne
  404ee0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404ee4:	f800 3b01 	strbne.w	r3, [r0], #1
  404ee8:	d380      	bcc.n	404dec <memcpy+0xc>
  404eea:	f831 3b02 	ldrh.w	r3, [r1], #2
  404eee:	f820 3b02 	strh.w	r3, [r0], #2
  404ef2:	e77b      	b.n	404dec <memcpy+0xc>
  404ef4:	3a04      	subs	r2, #4
  404ef6:	d3d9      	bcc.n	404eac <memcpy+0xcc>
  404ef8:	3a01      	subs	r2, #1
  404efa:	f811 3b01 	ldrb.w	r3, [r1], #1
  404efe:	f800 3b01 	strb.w	r3, [r0], #1
  404f02:	d2f9      	bcs.n	404ef8 <memcpy+0x118>
  404f04:	780b      	ldrb	r3, [r1, #0]
  404f06:	7003      	strb	r3, [r0, #0]
  404f08:	784b      	ldrb	r3, [r1, #1]
  404f0a:	7043      	strb	r3, [r0, #1]
  404f0c:	788b      	ldrb	r3, [r1, #2]
  404f0e:	7083      	strb	r3, [r0, #2]
  404f10:	4660      	mov	r0, ip
  404f12:	4770      	bx	lr

00404f14 <__malloc_lock>:
  404f14:	4770      	bx	lr
  404f16:	bf00      	nop

00404f18 <__malloc_unlock>:
  404f18:	4770      	bx	lr
  404f1a:	bf00      	nop

00404f1c <_Balloc>:
  404f1c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  404f1e:	b570      	push	{r4, r5, r6, lr}
  404f20:	4605      	mov	r5, r0
  404f22:	460c      	mov	r4, r1
  404f24:	b14b      	cbz	r3, 404f3a <_Balloc+0x1e>
  404f26:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  404f2a:	b180      	cbz	r0, 404f4e <_Balloc+0x32>
  404f2c:	6802      	ldr	r2, [r0, #0]
  404f2e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  404f32:	2300      	movs	r3, #0
  404f34:	6103      	str	r3, [r0, #16]
  404f36:	60c3      	str	r3, [r0, #12]
  404f38:	bd70      	pop	{r4, r5, r6, pc}
  404f3a:	2221      	movs	r2, #33	; 0x21
  404f3c:	2104      	movs	r1, #4
  404f3e:	f000 fc5f 	bl	405800 <_calloc_r>
  404f42:	64e8      	str	r0, [r5, #76]	; 0x4c
  404f44:	4603      	mov	r3, r0
  404f46:	2800      	cmp	r0, #0
  404f48:	d1ed      	bne.n	404f26 <_Balloc+0xa>
  404f4a:	2000      	movs	r0, #0
  404f4c:	bd70      	pop	{r4, r5, r6, pc}
  404f4e:	2101      	movs	r1, #1
  404f50:	fa01 f604 	lsl.w	r6, r1, r4
  404f54:	1d72      	adds	r2, r6, #5
  404f56:	4628      	mov	r0, r5
  404f58:	0092      	lsls	r2, r2, #2
  404f5a:	f000 fc51 	bl	405800 <_calloc_r>
  404f5e:	2800      	cmp	r0, #0
  404f60:	d0f3      	beq.n	404f4a <_Balloc+0x2e>
  404f62:	6044      	str	r4, [r0, #4]
  404f64:	6086      	str	r6, [r0, #8]
  404f66:	e7e4      	b.n	404f32 <_Balloc+0x16>

00404f68 <_Bfree>:
  404f68:	b131      	cbz	r1, 404f78 <_Bfree+0x10>
  404f6a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  404f6c:	684a      	ldr	r2, [r1, #4]
  404f6e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  404f72:	6008      	str	r0, [r1, #0]
  404f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  404f78:	4770      	bx	lr
  404f7a:	bf00      	nop

00404f7c <__multadd>:
  404f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  404f7e:	690c      	ldr	r4, [r1, #16]
  404f80:	b083      	sub	sp, #12
  404f82:	460d      	mov	r5, r1
  404f84:	4606      	mov	r6, r0
  404f86:	f101 0e14 	add.w	lr, r1, #20
  404f8a:	2700      	movs	r7, #0
  404f8c:	f8de 0000 	ldr.w	r0, [lr]
  404f90:	b281      	uxth	r1, r0
  404f92:	fb02 3101 	mla	r1, r2, r1, r3
  404f96:	0c0b      	lsrs	r3, r1, #16
  404f98:	0c00      	lsrs	r0, r0, #16
  404f9a:	fb02 3300 	mla	r3, r2, r0, r3
  404f9e:	b289      	uxth	r1, r1
  404fa0:	3701      	adds	r7, #1
  404fa2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  404fa6:	42bc      	cmp	r4, r7
  404fa8:	f84e 1b04 	str.w	r1, [lr], #4
  404fac:	ea4f 4313 	mov.w	r3, r3, lsr #16
  404fb0:	dcec      	bgt.n	404f8c <__multadd+0x10>
  404fb2:	b13b      	cbz	r3, 404fc4 <__multadd+0x48>
  404fb4:	68aa      	ldr	r2, [r5, #8]
  404fb6:	4294      	cmp	r4, r2
  404fb8:	da07      	bge.n	404fca <__multadd+0x4e>
  404fba:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  404fbe:	3401      	adds	r4, #1
  404fc0:	6153      	str	r3, [r2, #20]
  404fc2:	612c      	str	r4, [r5, #16]
  404fc4:	4628      	mov	r0, r5
  404fc6:	b003      	add	sp, #12
  404fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404fca:	6869      	ldr	r1, [r5, #4]
  404fcc:	9301      	str	r3, [sp, #4]
  404fce:	3101      	adds	r1, #1
  404fd0:	4630      	mov	r0, r6
  404fd2:	f7ff ffa3 	bl	404f1c <_Balloc>
  404fd6:	692a      	ldr	r2, [r5, #16]
  404fd8:	3202      	adds	r2, #2
  404fda:	f105 010c 	add.w	r1, r5, #12
  404fde:	4607      	mov	r7, r0
  404fe0:	0092      	lsls	r2, r2, #2
  404fe2:	300c      	adds	r0, #12
  404fe4:	f7ff fefc 	bl	404de0 <memcpy>
  404fe8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  404fea:	6869      	ldr	r1, [r5, #4]
  404fec:	9b01      	ldr	r3, [sp, #4]
  404fee:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  404ff2:	6028      	str	r0, [r5, #0]
  404ff4:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  404ff8:	463d      	mov	r5, r7
  404ffa:	e7de      	b.n	404fba <__multadd+0x3e>

00404ffc <__hi0bits>:
  404ffc:	0c03      	lsrs	r3, r0, #16
  404ffe:	041b      	lsls	r3, r3, #16
  405000:	b9b3      	cbnz	r3, 405030 <__hi0bits+0x34>
  405002:	0400      	lsls	r0, r0, #16
  405004:	2310      	movs	r3, #16
  405006:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40500a:	bf04      	itt	eq
  40500c:	0200      	lsleq	r0, r0, #8
  40500e:	3308      	addeq	r3, #8
  405010:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  405014:	bf04      	itt	eq
  405016:	0100      	lsleq	r0, r0, #4
  405018:	3304      	addeq	r3, #4
  40501a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40501e:	bf04      	itt	eq
  405020:	0080      	lsleq	r0, r0, #2
  405022:	3302      	addeq	r3, #2
  405024:	2800      	cmp	r0, #0
  405026:	db07      	blt.n	405038 <__hi0bits+0x3c>
  405028:	0042      	lsls	r2, r0, #1
  40502a:	d403      	bmi.n	405034 <__hi0bits+0x38>
  40502c:	2020      	movs	r0, #32
  40502e:	4770      	bx	lr
  405030:	2300      	movs	r3, #0
  405032:	e7e8      	b.n	405006 <__hi0bits+0xa>
  405034:	1c58      	adds	r0, r3, #1
  405036:	4770      	bx	lr
  405038:	4618      	mov	r0, r3
  40503a:	4770      	bx	lr

0040503c <__lo0bits>:
  40503c:	6803      	ldr	r3, [r0, #0]
  40503e:	f013 0207 	ands.w	r2, r3, #7
  405042:	d007      	beq.n	405054 <__lo0bits+0x18>
  405044:	07d9      	lsls	r1, r3, #31
  405046:	d420      	bmi.n	40508a <__lo0bits+0x4e>
  405048:	079a      	lsls	r2, r3, #30
  40504a:	d420      	bmi.n	40508e <__lo0bits+0x52>
  40504c:	089b      	lsrs	r3, r3, #2
  40504e:	6003      	str	r3, [r0, #0]
  405050:	2002      	movs	r0, #2
  405052:	4770      	bx	lr
  405054:	b299      	uxth	r1, r3
  405056:	b909      	cbnz	r1, 40505c <__lo0bits+0x20>
  405058:	0c1b      	lsrs	r3, r3, #16
  40505a:	2210      	movs	r2, #16
  40505c:	f013 0fff 	tst.w	r3, #255	; 0xff
  405060:	bf04      	itt	eq
  405062:	0a1b      	lsreq	r3, r3, #8
  405064:	3208      	addeq	r2, #8
  405066:	0719      	lsls	r1, r3, #28
  405068:	bf04      	itt	eq
  40506a:	091b      	lsreq	r3, r3, #4
  40506c:	3204      	addeq	r2, #4
  40506e:	0799      	lsls	r1, r3, #30
  405070:	bf04      	itt	eq
  405072:	089b      	lsreq	r3, r3, #2
  405074:	3202      	addeq	r2, #2
  405076:	07d9      	lsls	r1, r3, #31
  405078:	d404      	bmi.n	405084 <__lo0bits+0x48>
  40507a:	085b      	lsrs	r3, r3, #1
  40507c:	d101      	bne.n	405082 <__lo0bits+0x46>
  40507e:	2020      	movs	r0, #32
  405080:	4770      	bx	lr
  405082:	3201      	adds	r2, #1
  405084:	6003      	str	r3, [r0, #0]
  405086:	4610      	mov	r0, r2
  405088:	4770      	bx	lr
  40508a:	2000      	movs	r0, #0
  40508c:	4770      	bx	lr
  40508e:	085b      	lsrs	r3, r3, #1
  405090:	6003      	str	r3, [r0, #0]
  405092:	2001      	movs	r0, #1
  405094:	4770      	bx	lr
  405096:	bf00      	nop

00405098 <__i2b>:
  405098:	b510      	push	{r4, lr}
  40509a:	460c      	mov	r4, r1
  40509c:	2101      	movs	r1, #1
  40509e:	f7ff ff3d 	bl	404f1c <_Balloc>
  4050a2:	2201      	movs	r2, #1
  4050a4:	6144      	str	r4, [r0, #20]
  4050a6:	6102      	str	r2, [r0, #16]
  4050a8:	bd10      	pop	{r4, pc}
  4050aa:	bf00      	nop

004050ac <__multiply>:
  4050ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4050b0:	690d      	ldr	r5, [r1, #16]
  4050b2:	6917      	ldr	r7, [r2, #16]
  4050b4:	42bd      	cmp	r5, r7
  4050b6:	b083      	sub	sp, #12
  4050b8:	460c      	mov	r4, r1
  4050ba:	4616      	mov	r6, r2
  4050bc:	da04      	bge.n	4050c8 <__multiply+0x1c>
  4050be:	462a      	mov	r2, r5
  4050c0:	4634      	mov	r4, r6
  4050c2:	463d      	mov	r5, r7
  4050c4:	460e      	mov	r6, r1
  4050c6:	4617      	mov	r7, r2
  4050c8:	68a3      	ldr	r3, [r4, #8]
  4050ca:	6861      	ldr	r1, [r4, #4]
  4050cc:	eb05 0807 	add.w	r8, r5, r7
  4050d0:	4598      	cmp	r8, r3
  4050d2:	bfc8      	it	gt
  4050d4:	3101      	addgt	r1, #1
  4050d6:	f7ff ff21 	bl	404f1c <_Balloc>
  4050da:	f100 0c14 	add.w	ip, r0, #20
  4050de:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  4050e2:	45cc      	cmp	ip, r9
  4050e4:	9000      	str	r0, [sp, #0]
  4050e6:	d205      	bcs.n	4050f4 <__multiply+0x48>
  4050e8:	4663      	mov	r3, ip
  4050ea:	2100      	movs	r1, #0
  4050ec:	f843 1b04 	str.w	r1, [r3], #4
  4050f0:	4599      	cmp	r9, r3
  4050f2:	d8fb      	bhi.n	4050ec <__multiply+0x40>
  4050f4:	f106 0214 	add.w	r2, r6, #20
  4050f8:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  4050fc:	f104 0314 	add.w	r3, r4, #20
  405100:	4552      	cmp	r2, sl
  405102:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  405106:	d254      	bcs.n	4051b2 <__multiply+0x106>
  405108:	f8cd 9004 	str.w	r9, [sp, #4]
  40510c:	4699      	mov	r9, r3
  40510e:	f852 3b04 	ldr.w	r3, [r2], #4
  405112:	fa1f fb83 	uxth.w	fp, r3
  405116:	f1bb 0f00 	cmp.w	fp, #0
  40511a:	d020      	beq.n	40515e <__multiply+0xb2>
  40511c:	2000      	movs	r0, #0
  40511e:	464f      	mov	r7, r9
  405120:	4666      	mov	r6, ip
  405122:	4605      	mov	r5, r0
  405124:	e000      	b.n	405128 <__multiply+0x7c>
  405126:	461e      	mov	r6, r3
  405128:	f857 4b04 	ldr.w	r4, [r7], #4
  40512c:	6830      	ldr	r0, [r6, #0]
  40512e:	b2a1      	uxth	r1, r4
  405130:	b283      	uxth	r3, r0
  405132:	fb0b 3101 	mla	r1, fp, r1, r3
  405136:	0c24      	lsrs	r4, r4, #16
  405138:	0c00      	lsrs	r0, r0, #16
  40513a:	194b      	adds	r3, r1, r5
  40513c:	fb0b 0004 	mla	r0, fp, r4, r0
  405140:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  405144:	b299      	uxth	r1, r3
  405146:	4633      	mov	r3, r6
  405148:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  40514c:	45be      	cmp	lr, r7
  40514e:	ea4f 4510 	mov.w	r5, r0, lsr #16
  405152:	f843 1b04 	str.w	r1, [r3], #4
  405156:	d8e6      	bhi.n	405126 <__multiply+0x7a>
  405158:	6075      	str	r5, [r6, #4]
  40515a:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40515e:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  405162:	d020      	beq.n	4051a6 <__multiply+0xfa>
  405164:	f8dc 3000 	ldr.w	r3, [ip]
  405168:	4667      	mov	r7, ip
  40516a:	4618      	mov	r0, r3
  40516c:	464d      	mov	r5, r9
  40516e:	2100      	movs	r1, #0
  405170:	e000      	b.n	405174 <__multiply+0xc8>
  405172:	4637      	mov	r7, r6
  405174:	882c      	ldrh	r4, [r5, #0]
  405176:	0c00      	lsrs	r0, r0, #16
  405178:	fb0b 0004 	mla	r0, fp, r4, r0
  40517c:	4401      	add	r1, r0
  40517e:	b29c      	uxth	r4, r3
  405180:	463e      	mov	r6, r7
  405182:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  405186:	f846 3b04 	str.w	r3, [r6], #4
  40518a:	6878      	ldr	r0, [r7, #4]
  40518c:	f855 4b04 	ldr.w	r4, [r5], #4
  405190:	b283      	uxth	r3, r0
  405192:	0c24      	lsrs	r4, r4, #16
  405194:	fb0b 3404 	mla	r4, fp, r4, r3
  405198:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  40519c:	45ae      	cmp	lr, r5
  40519e:	ea4f 4113 	mov.w	r1, r3, lsr #16
  4051a2:	d8e6      	bhi.n	405172 <__multiply+0xc6>
  4051a4:	607b      	str	r3, [r7, #4]
  4051a6:	4592      	cmp	sl, r2
  4051a8:	f10c 0c04 	add.w	ip, ip, #4
  4051ac:	d8af      	bhi.n	40510e <__multiply+0x62>
  4051ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
  4051b2:	f1b8 0f00 	cmp.w	r8, #0
  4051b6:	dd0b      	ble.n	4051d0 <__multiply+0x124>
  4051b8:	f859 3c04 	ldr.w	r3, [r9, #-4]
  4051bc:	f1a9 0904 	sub.w	r9, r9, #4
  4051c0:	b11b      	cbz	r3, 4051ca <__multiply+0x11e>
  4051c2:	e005      	b.n	4051d0 <__multiply+0x124>
  4051c4:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  4051c8:	b913      	cbnz	r3, 4051d0 <__multiply+0x124>
  4051ca:	f1b8 0801 	subs.w	r8, r8, #1
  4051ce:	d1f9      	bne.n	4051c4 <__multiply+0x118>
  4051d0:	9800      	ldr	r0, [sp, #0]
  4051d2:	f8c0 8010 	str.w	r8, [r0, #16]
  4051d6:	b003      	add	sp, #12
  4051d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004051dc <__pow5mult>:
  4051dc:	f012 0303 	ands.w	r3, r2, #3
  4051e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4051e4:	4614      	mov	r4, r2
  4051e6:	4607      	mov	r7, r0
  4051e8:	d12e      	bne.n	405248 <__pow5mult+0x6c>
  4051ea:	460e      	mov	r6, r1
  4051ec:	10a4      	asrs	r4, r4, #2
  4051ee:	d01c      	beq.n	40522a <__pow5mult+0x4e>
  4051f0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  4051f2:	b395      	cbz	r5, 40525a <__pow5mult+0x7e>
  4051f4:	07e3      	lsls	r3, r4, #31
  4051f6:	f04f 0800 	mov.w	r8, #0
  4051fa:	d406      	bmi.n	40520a <__pow5mult+0x2e>
  4051fc:	1064      	asrs	r4, r4, #1
  4051fe:	d014      	beq.n	40522a <__pow5mult+0x4e>
  405200:	6828      	ldr	r0, [r5, #0]
  405202:	b1a8      	cbz	r0, 405230 <__pow5mult+0x54>
  405204:	4605      	mov	r5, r0
  405206:	07e3      	lsls	r3, r4, #31
  405208:	d5f8      	bpl.n	4051fc <__pow5mult+0x20>
  40520a:	462a      	mov	r2, r5
  40520c:	4631      	mov	r1, r6
  40520e:	4638      	mov	r0, r7
  405210:	f7ff ff4c 	bl	4050ac <__multiply>
  405214:	b1b6      	cbz	r6, 405244 <__pow5mult+0x68>
  405216:	6872      	ldr	r2, [r6, #4]
  405218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40521a:	1064      	asrs	r4, r4, #1
  40521c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  405220:	6031      	str	r1, [r6, #0]
  405222:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  405226:	4606      	mov	r6, r0
  405228:	d1ea      	bne.n	405200 <__pow5mult+0x24>
  40522a:	4630      	mov	r0, r6
  40522c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405230:	462a      	mov	r2, r5
  405232:	4629      	mov	r1, r5
  405234:	4638      	mov	r0, r7
  405236:	f7ff ff39 	bl	4050ac <__multiply>
  40523a:	6028      	str	r0, [r5, #0]
  40523c:	f8c0 8000 	str.w	r8, [r0]
  405240:	4605      	mov	r5, r0
  405242:	e7e0      	b.n	405206 <__pow5mult+0x2a>
  405244:	4606      	mov	r6, r0
  405246:	e7d9      	b.n	4051fc <__pow5mult+0x20>
  405248:	1e5a      	subs	r2, r3, #1
  40524a:	4d0b      	ldr	r5, [pc, #44]	; (405278 <__pow5mult+0x9c>)
  40524c:	2300      	movs	r3, #0
  40524e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  405252:	f7ff fe93 	bl	404f7c <__multadd>
  405256:	4606      	mov	r6, r0
  405258:	e7c8      	b.n	4051ec <__pow5mult+0x10>
  40525a:	2101      	movs	r1, #1
  40525c:	4638      	mov	r0, r7
  40525e:	f7ff fe5d 	bl	404f1c <_Balloc>
  405262:	f240 2171 	movw	r1, #625	; 0x271
  405266:	2201      	movs	r2, #1
  405268:	2300      	movs	r3, #0
  40526a:	6141      	str	r1, [r0, #20]
  40526c:	6102      	str	r2, [r0, #16]
  40526e:	4605      	mov	r5, r0
  405270:	64b8      	str	r0, [r7, #72]	; 0x48
  405272:	6003      	str	r3, [r0, #0]
  405274:	e7be      	b.n	4051f4 <__pow5mult+0x18>
  405276:	bf00      	nop
  405278:	00406e18 	.word	0x00406e18

0040527c <__lshift>:
  40527c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405280:	4691      	mov	r9, r2
  405282:	690a      	ldr	r2, [r1, #16]
  405284:	688b      	ldr	r3, [r1, #8]
  405286:	ea4f 1469 	mov.w	r4, r9, asr #5
  40528a:	eb04 0802 	add.w	r8, r4, r2
  40528e:	f108 0501 	add.w	r5, r8, #1
  405292:	429d      	cmp	r5, r3
  405294:	460e      	mov	r6, r1
  405296:	4682      	mov	sl, r0
  405298:	6849      	ldr	r1, [r1, #4]
  40529a:	dd04      	ble.n	4052a6 <__lshift+0x2a>
  40529c:	005b      	lsls	r3, r3, #1
  40529e:	429d      	cmp	r5, r3
  4052a0:	f101 0101 	add.w	r1, r1, #1
  4052a4:	dcfa      	bgt.n	40529c <__lshift+0x20>
  4052a6:	4650      	mov	r0, sl
  4052a8:	f7ff fe38 	bl	404f1c <_Balloc>
  4052ac:	2c00      	cmp	r4, #0
  4052ae:	f100 0214 	add.w	r2, r0, #20
  4052b2:	dd38      	ble.n	405326 <__lshift+0xaa>
  4052b4:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  4052b8:	2100      	movs	r1, #0
  4052ba:	f842 1b04 	str.w	r1, [r2], #4
  4052be:	4293      	cmp	r3, r2
  4052c0:	d1fb      	bne.n	4052ba <__lshift+0x3e>
  4052c2:	6934      	ldr	r4, [r6, #16]
  4052c4:	f106 0114 	add.w	r1, r6, #20
  4052c8:	f019 091f 	ands.w	r9, r9, #31
  4052cc:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4052d0:	d021      	beq.n	405316 <__lshift+0x9a>
  4052d2:	f1c9 0220 	rsb	r2, r9, #32
  4052d6:	2400      	movs	r4, #0
  4052d8:	680f      	ldr	r7, [r1, #0]
  4052da:	fa07 fc09 	lsl.w	ip, r7, r9
  4052de:	ea4c 0404 	orr.w	r4, ip, r4
  4052e2:	469c      	mov	ip, r3
  4052e4:	f843 4b04 	str.w	r4, [r3], #4
  4052e8:	f851 4b04 	ldr.w	r4, [r1], #4
  4052ec:	458e      	cmp	lr, r1
  4052ee:	fa24 f402 	lsr.w	r4, r4, r2
  4052f2:	d8f1      	bhi.n	4052d8 <__lshift+0x5c>
  4052f4:	f8cc 4004 	str.w	r4, [ip, #4]
  4052f8:	b10c      	cbz	r4, 4052fe <__lshift+0x82>
  4052fa:	f108 0502 	add.w	r5, r8, #2
  4052fe:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  405302:	6872      	ldr	r2, [r6, #4]
  405304:	3d01      	subs	r5, #1
  405306:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40530a:	6105      	str	r5, [r0, #16]
  40530c:	6031      	str	r1, [r6, #0]
  40530e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  405312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405316:	3b04      	subs	r3, #4
  405318:	f851 2b04 	ldr.w	r2, [r1], #4
  40531c:	f843 2f04 	str.w	r2, [r3, #4]!
  405320:	458e      	cmp	lr, r1
  405322:	d8f9      	bhi.n	405318 <__lshift+0x9c>
  405324:	e7eb      	b.n	4052fe <__lshift+0x82>
  405326:	4613      	mov	r3, r2
  405328:	e7cb      	b.n	4052c2 <__lshift+0x46>
  40532a:	bf00      	nop

0040532c <__mcmp>:
  40532c:	6902      	ldr	r2, [r0, #16]
  40532e:	690b      	ldr	r3, [r1, #16]
  405330:	1ad2      	subs	r2, r2, r3
  405332:	d112      	bne.n	40535a <__mcmp+0x2e>
  405334:	009b      	lsls	r3, r3, #2
  405336:	3014      	adds	r0, #20
  405338:	3114      	adds	r1, #20
  40533a:	4419      	add	r1, r3
  40533c:	b410      	push	{r4}
  40533e:	4403      	add	r3, r0
  405340:	e001      	b.n	405346 <__mcmp+0x1a>
  405342:	4298      	cmp	r0, r3
  405344:	d20b      	bcs.n	40535e <__mcmp+0x32>
  405346:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40534a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40534e:	4294      	cmp	r4, r2
  405350:	d0f7      	beq.n	405342 <__mcmp+0x16>
  405352:	d307      	bcc.n	405364 <__mcmp+0x38>
  405354:	2001      	movs	r0, #1
  405356:	bc10      	pop	{r4}
  405358:	4770      	bx	lr
  40535a:	4610      	mov	r0, r2
  40535c:	4770      	bx	lr
  40535e:	2000      	movs	r0, #0
  405360:	bc10      	pop	{r4}
  405362:	4770      	bx	lr
  405364:	f04f 30ff 	mov.w	r0, #4294967295
  405368:	e7f5      	b.n	405356 <__mcmp+0x2a>
  40536a:	bf00      	nop

0040536c <__mdiff>:
  40536c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405370:	690b      	ldr	r3, [r1, #16]
  405372:	460f      	mov	r7, r1
  405374:	6911      	ldr	r1, [r2, #16]
  405376:	1a5b      	subs	r3, r3, r1
  405378:	2b00      	cmp	r3, #0
  40537a:	4690      	mov	r8, r2
  40537c:	d117      	bne.n	4053ae <__mdiff+0x42>
  40537e:	0089      	lsls	r1, r1, #2
  405380:	f107 0214 	add.w	r2, r7, #20
  405384:	f108 0514 	add.w	r5, r8, #20
  405388:	1853      	adds	r3, r2, r1
  40538a:	4429      	add	r1, r5
  40538c:	e001      	b.n	405392 <__mdiff+0x26>
  40538e:	429a      	cmp	r2, r3
  405390:	d25e      	bcs.n	405450 <__mdiff+0xe4>
  405392:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  405396:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40539a:	42a6      	cmp	r6, r4
  40539c:	d0f7      	beq.n	40538e <__mdiff+0x22>
  40539e:	d260      	bcs.n	405462 <__mdiff+0xf6>
  4053a0:	463b      	mov	r3, r7
  4053a2:	4614      	mov	r4, r2
  4053a4:	4647      	mov	r7, r8
  4053a6:	f04f 0901 	mov.w	r9, #1
  4053aa:	4698      	mov	r8, r3
  4053ac:	e006      	b.n	4053bc <__mdiff+0x50>
  4053ae:	db5d      	blt.n	40546c <__mdiff+0x100>
  4053b0:	f107 0514 	add.w	r5, r7, #20
  4053b4:	f102 0414 	add.w	r4, r2, #20
  4053b8:	f04f 0900 	mov.w	r9, #0
  4053bc:	6879      	ldr	r1, [r7, #4]
  4053be:	f7ff fdad 	bl	404f1c <_Balloc>
  4053c2:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4053c6:	693e      	ldr	r6, [r7, #16]
  4053c8:	f8c0 900c 	str.w	r9, [r0, #12]
  4053cc:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4053d0:	46a6      	mov	lr, r4
  4053d2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4053d6:	f100 0414 	add.w	r4, r0, #20
  4053da:	2300      	movs	r3, #0
  4053dc:	f85e 1b04 	ldr.w	r1, [lr], #4
  4053e0:	f855 8b04 	ldr.w	r8, [r5], #4
  4053e4:	b28a      	uxth	r2, r1
  4053e6:	fa13 f388 	uxtah	r3, r3, r8
  4053ea:	0c09      	lsrs	r1, r1, #16
  4053ec:	1a9a      	subs	r2, r3, r2
  4053ee:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4053f2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4053f6:	b292      	uxth	r2, r2
  4053f8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4053fc:	45f4      	cmp	ip, lr
  4053fe:	f844 2b04 	str.w	r2, [r4], #4
  405402:	ea4f 4323 	mov.w	r3, r3, asr #16
  405406:	d8e9      	bhi.n	4053dc <__mdiff+0x70>
  405408:	42af      	cmp	r7, r5
  40540a:	d917      	bls.n	40543c <__mdiff+0xd0>
  40540c:	46a4      	mov	ip, r4
  40540e:	4629      	mov	r1, r5
  405410:	f851 eb04 	ldr.w	lr, [r1], #4
  405414:	fa13 f28e 	uxtah	r2, r3, lr
  405418:	1413      	asrs	r3, r2, #16
  40541a:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  40541e:	b292      	uxth	r2, r2
  405420:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405424:	428f      	cmp	r7, r1
  405426:	f84c 2b04 	str.w	r2, [ip], #4
  40542a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40542e:	d8ef      	bhi.n	405410 <__mdiff+0xa4>
  405430:	43ed      	mvns	r5, r5
  405432:	443d      	add	r5, r7
  405434:	f025 0503 	bic.w	r5, r5, #3
  405438:	3504      	adds	r5, #4
  40543a:	442c      	add	r4, r5
  40543c:	3c04      	subs	r4, #4
  40543e:	b922      	cbnz	r2, 40544a <__mdiff+0xde>
  405440:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  405444:	3e01      	subs	r6, #1
  405446:	2b00      	cmp	r3, #0
  405448:	d0fa      	beq.n	405440 <__mdiff+0xd4>
  40544a:	6106      	str	r6, [r0, #16]
  40544c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405450:	2100      	movs	r1, #0
  405452:	f7ff fd63 	bl	404f1c <_Balloc>
  405456:	2201      	movs	r2, #1
  405458:	2300      	movs	r3, #0
  40545a:	6102      	str	r2, [r0, #16]
  40545c:	6143      	str	r3, [r0, #20]
  40545e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405462:	462c      	mov	r4, r5
  405464:	f04f 0900 	mov.w	r9, #0
  405468:	4615      	mov	r5, r2
  40546a:	e7a7      	b.n	4053bc <__mdiff+0x50>
  40546c:	463b      	mov	r3, r7
  40546e:	f107 0414 	add.w	r4, r7, #20
  405472:	f108 0514 	add.w	r5, r8, #20
  405476:	4647      	mov	r7, r8
  405478:	f04f 0901 	mov.w	r9, #1
  40547c:	4698      	mov	r8, r3
  40547e:	e79d      	b.n	4053bc <__mdiff+0x50>

00405480 <__d2b>:
  405480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405484:	b082      	sub	sp, #8
  405486:	2101      	movs	r1, #1
  405488:	461c      	mov	r4, r3
  40548a:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40548e:	4615      	mov	r5, r2
  405490:	9e08      	ldr	r6, [sp, #32]
  405492:	f7ff fd43 	bl	404f1c <_Balloc>
  405496:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40549a:	4680      	mov	r8, r0
  40549c:	b10f      	cbz	r7, 4054a2 <__d2b+0x22>
  40549e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4054a2:	9401      	str	r4, [sp, #4]
  4054a4:	b31d      	cbz	r5, 4054ee <__d2b+0x6e>
  4054a6:	a802      	add	r0, sp, #8
  4054a8:	f840 5d08 	str.w	r5, [r0, #-8]!
  4054ac:	f7ff fdc6 	bl	40503c <__lo0bits>
  4054b0:	2800      	cmp	r0, #0
  4054b2:	d134      	bne.n	40551e <__d2b+0x9e>
  4054b4:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4054b8:	f8c8 2014 	str.w	r2, [r8, #20]
  4054bc:	2b00      	cmp	r3, #0
  4054be:	bf0c      	ite	eq
  4054c0:	2101      	moveq	r1, #1
  4054c2:	2102      	movne	r1, #2
  4054c4:	f8c8 3018 	str.w	r3, [r8, #24]
  4054c8:	f8c8 1010 	str.w	r1, [r8, #16]
  4054cc:	b9df      	cbnz	r7, 405506 <__d2b+0x86>
  4054ce:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4054d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4054d6:	6030      	str	r0, [r6, #0]
  4054d8:	6918      	ldr	r0, [r3, #16]
  4054da:	f7ff fd8f 	bl	404ffc <__hi0bits>
  4054de:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4054e0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4054e4:	6018      	str	r0, [r3, #0]
  4054e6:	4640      	mov	r0, r8
  4054e8:	b002      	add	sp, #8
  4054ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4054ee:	a801      	add	r0, sp, #4
  4054f0:	f7ff fda4 	bl	40503c <__lo0bits>
  4054f4:	9b01      	ldr	r3, [sp, #4]
  4054f6:	f8c8 3014 	str.w	r3, [r8, #20]
  4054fa:	2101      	movs	r1, #1
  4054fc:	3020      	adds	r0, #32
  4054fe:	f8c8 1010 	str.w	r1, [r8, #16]
  405502:	2f00      	cmp	r7, #0
  405504:	d0e3      	beq.n	4054ce <__d2b+0x4e>
  405506:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405508:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40550c:	4407      	add	r7, r0
  40550e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  405512:	6037      	str	r7, [r6, #0]
  405514:	6018      	str	r0, [r3, #0]
  405516:	4640      	mov	r0, r8
  405518:	b002      	add	sp, #8
  40551a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40551e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405522:	f1c0 0120 	rsb	r1, r0, #32
  405526:	fa03 f101 	lsl.w	r1, r3, r1
  40552a:	430a      	orrs	r2, r1
  40552c:	40c3      	lsrs	r3, r0
  40552e:	9301      	str	r3, [sp, #4]
  405530:	f8c8 2014 	str.w	r2, [r8, #20]
  405534:	e7c2      	b.n	4054bc <__d2b+0x3c>
  405536:	bf00      	nop

00405538 <_sbrk_r>:
  405538:	b538      	push	{r3, r4, r5, lr}
  40553a:	4c07      	ldr	r4, [pc, #28]	; (405558 <_sbrk_r+0x20>)
  40553c:	2300      	movs	r3, #0
  40553e:	4605      	mov	r5, r0
  405540:	4608      	mov	r0, r1
  405542:	6023      	str	r3, [r4, #0]
  405544:	f7fc f900 	bl	401748 <_sbrk>
  405548:	1c43      	adds	r3, r0, #1
  40554a:	d000      	beq.n	40554e <_sbrk_r+0x16>
  40554c:	bd38      	pop	{r3, r4, r5, pc}
  40554e:	6823      	ldr	r3, [r4, #0]
  405550:	2b00      	cmp	r3, #0
  405552:	d0fb      	beq.n	40554c <_sbrk_r+0x14>
  405554:	602b      	str	r3, [r5, #0]
  405556:	bd38      	pop	{r3, r4, r5, pc}
  405558:	20400a14 	.word	0x20400a14
	...

00405580 <strlen>:
  405580:	f890 f000 	pld	[r0]
  405584:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405588:	f020 0107 	bic.w	r1, r0, #7
  40558c:	f06f 0c00 	mvn.w	ip, #0
  405590:	f010 0407 	ands.w	r4, r0, #7
  405594:	f891 f020 	pld	[r1, #32]
  405598:	f040 8049 	bne.w	40562e <strlen+0xae>
  40559c:	f04f 0400 	mov.w	r4, #0
  4055a0:	f06f 0007 	mvn.w	r0, #7
  4055a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4055a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4055ac:	f100 0008 	add.w	r0, r0, #8
  4055b0:	fa82 f24c 	uadd8	r2, r2, ip
  4055b4:	faa4 f28c 	sel	r2, r4, ip
  4055b8:	fa83 f34c 	uadd8	r3, r3, ip
  4055bc:	faa2 f38c 	sel	r3, r2, ip
  4055c0:	bb4b      	cbnz	r3, 405616 <strlen+0x96>
  4055c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4055c6:	fa82 f24c 	uadd8	r2, r2, ip
  4055ca:	f100 0008 	add.w	r0, r0, #8
  4055ce:	faa4 f28c 	sel	r2, r4, ip
  4055d2:	fa83 f34c 	uadd8	r3, r3, ip
  4055d6:	faa2 f38c 	sel	r3, r2, ip
  4055da:	b9e3      	cbnz	r3, 405616 <strlen+0x96>
  4055dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4055e0:	fa82 f24c 	uadd8	r2, r2, ip
  4055e4:	f100 0008 	add.w	r0, r0, #8
  4055e8:	faa4 f28c 	sel	r2, r4, ip
  4055ec:	fa83 f34c 	uadd8	r3, r3, ip
  4055f0:	faa2 f38c 	sel	r3, r2, ip
  4055f4:	b97b      	cbnz	r3, 405616 <strlen+0x96>
  4055f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4055fa:	f101 0120 	add.w	r1, r1, #32
  4055fe:	fa82 f24c 	uadd8	r2, r2, ip
  405602:	f100 0008 	add.w	r0, r0, #8
  405606:	faa4 f28c 	sel	r2, r4, ip
  40560a:	fa83 f34c 	uadd8	r3, r3, ip
  40560e:	faa2 f38c 	sel	r3, r2, ip
  405612:	2b00      	cmp	r3, #0
  405614:	d0c6      	beq.n	4055a4 <strlen+0x24>
  405616:	2a00      	cmp	r2, #0
  405618:	bf04      	itt	eq
  40561a:	3004      	addeq	r0, #4
  40561c:	461a      	moveq	r2, r3
  40561e:	ba12      	rev	r2, r2
  405620:	fab2 f282 	clz	r2, r2
  405624:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  405628:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40562c:	4770      	bx	lr
  40562e:	e9d1 2300 	ldrd	r2, r3, [r1]
  405632:	f004 0503 	and.w	r5, r4, #3
  405636:	f1c4 0000 	rsb	r0, r4, #0
  40563a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40563e:	f014 0f04 	tst.w	r4, #4
  405642:	f891 f040 	pld	[r1, #64]	; 0x40
  405646:	fa0c f505 	lsl.w	r5, ip, r5
  40564a:	ea62 0205 	orn	r2, r2, r5
  40564e:	bf1c      	itt	ne
  405650:	ea63 0305 	ornne	r3, r3, r5
  405654:	4662      	movne	r2, ip
  405656:	f04f 0400 	mov.w	r4, #0
  40565a:	e7a9      	b.n	4055b0 <strlen+0x30>

0040565c <__ssprint_r>:
  40565c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405660:	6893      	ldr	r3, [r2, #8]
  405662:	b083      	sub	sp, #12
  405664:	4690      	mov	r8, r2
  405666:	2b00      	cmp	r3, #0
  405668:	d072      	beq.n	405750 <__ssprint_r+0xf4>
  40566a:	4683      	mov	fp, r0
  40566c:	f04f 0900 	mov.w	r9, #0
  405670:	6816      	ldr	r6, [r2, #0]
  405672:	6808      	ldr	r0, [r1, #0]
  405674:	688b      	ldr	r3, [r1, #8]
  405676:	460d      	mov	r5, r1
  405678:	464c      	mov	r4, r9
  40567a:	2c00      	cmp	r4, #0
  40567c:	d045      	beq.n	40570a <__ssprint_r+0xae>
  40567e:	429c      	cmp	r4, r3
  405680:	461f      	mov	r7, r3
  405682:	469a      	mov	sl, r3
  405684:	d346      	bcc.n	405714 <__ssprint_r+0xb8>
  405686:	89ab      	ldrh	r3, [r5, #12]
  405688:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40568c:	d02d      	beq.n	4056ea <__ssprint_r+0x8e>
  40568e:	696f      	ldr	r7, [r5, #20]
  405690:	6929      	ldr	r1, [r5, #16]
  405692:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  405696:	ebc1 0a00 	rsb	sl, r1, r0
  40569a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  40569e:	1c60      	adds	r0, r4, #1
  4056a0:	107f      	asrs	r7, r7, #1
  4056a2:	4450      	add	r0, sl
  4056a4:	42b8      	cmp	r0, r7
  4056a6:	463a      	mov	r2, r7
  4056a8:	bf84      	itt	hi
  4056aa:	4607      	movhi	r7, r0
  4056ac:	463a      	movhi	r2, r7
  4056ae:	055b      	lsls	r3, r3, #21
  4056b0:	d533      	bpl.n	40571a <__ssprint_r+0xbe>
  4056b2:	4611      	mov	r1, r2
  4056b4:	4658      	mov	r0, fp
  4056b6:	f7ff f88b 	bl	4047d0 <_malloc_r>
  4056ba:	2800      	cmp	r0, #0
  4056bc:	d037      	beq.n	40572e <__ssprint_r+0xd2>
  4056be:	4652      	mov	r2, sl
  4056c0:	6929      	ldr	r1, [r5, #16]
  4056c2:	9001      	str	r0, [sp, #4]
  4056c4:	f7ff fb8c 	bl	404de0 <memcpy>
  4056c8:	89aa      	ldrh	r2, [r5, #12]
  4056ca:	9b01      	ldr	r3, [sp, #4]
  4056cc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4056d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4056d4:	81aa      	strh	r2, [r5, #12]
  4056d6:	ebca 0207 	rsb	r2, sl, r7
  4056da:	eb03 000a 	add.w	r0, r3, sl
  4056de:	616f      	str	r7, [r5, #20]
  4056e0:	612b      	str	r3, [r5, #16]
  4056e2:	6028      	str	r0, [r5, #0]
  4056e4:	60aa      	str	r2, [r5, #8]
  4056e6:	4627      	mov	r7, r4
  4056e8:	46a2      	mov	sl, r4
  4056ea:	4652      	mov	r2, sl
  4056ec:	4649      	mov	r1, r9
  4056ee:	f000 f9ed 	bl	405acc <memmove>
  4056f2:	f8d8 2008 	ldr.w	r2, [r8, #8]
  4056f6:	68ab      	ldr	r3, [r5, #8]
  4056f8:	6828      	ldr	r0, [r5, #0]
  4056fa:	1bdb      	subs	r3, r3, r7
  4056fc:	4450      	add	r0, sl
  4056fe:	1b14      	subs	r4, r2, r4
  405700:	60ab      	str	r3, [r5, #8]
  405702:	6028      	str	r0, [r5, #0]
  405704:	f8c8 4008 	str.w	r4, [r8, #8]
  405708:	b314      	cbz	r4, 405750 <__ssprint_r+0xf4>
  40570a:	f8d6 9000 	ldr.w	r9, [r6]
  40570e:	6874      	ldr	r4, [r6, #4]
  405710:	3608      	adds	r6, #8
  405712:	e7b2      	b.n	40567a <__ssprint_r+0x1e>
  405714:	4627      	mov	r7, r4
  405716:	46a2      	mov	sl, r4
  405718:	e7e7      	b.n	4056ea <__ssprint_r+0x8e>
  40571a:	4658      	mov	r0, fp
  40571c:	f000 fa3a 	bl	405b94 <_realloc_r>
  405720:	4603      	mov	r3, r0
  405722:	2800      	cmp	r0, #0
  405724:	d1d7      	bne.n	4056d6 <__ssprint_r+0x7a>
  405726:	6929      	ldr	r1, [r5, #16]
  405728:	4658      	mov	r0, fp
  40572a:	f000 f8e7 	bl	4058fc <_free_r>
  40572e:	230c      	movs	r3, #12
  405730:	f8cb 3000 	str.w	r3, [fp]
  405734:	89ab      	ldrh	r3, [r5, #12]
  405736:	2200      	movs	r2, #0
  405738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40573c:	f04f 30ff 	mov.w	r0, #4294967295
  405740:	81ab      	strh	r3, [r5, #12]
  405742:	f8c8 2008 	str.w	r2, [r8, #8]
  405746:	f8c8 2004 	str.w	r2, [r8, #4]
  40574a:	b003      	add	sp, #12
  40574c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405750:	2000      	movs	r0, #0
  405752:	f8c8 0004 	str.w	r0, [r8, #4]
  405756:	b003      	add	sp, #12
  405758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040575c <__register_exitproc>:
  40575c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405760:	4c25      	ldr	r4, [pc, #148]	; (4057f8 <__register_exitproc+0x9c>)
  405762:	6825      	ldr	r5, [r4, #0]
  405764:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  405768:	4606      	mov	r6, r0
  40576a:	4688      	mov	r8, r1
  40576c:	4692      	mov	sl, r2
  40576e:	4699      	mov	r9, r3
  405770:	b3c4      	cbz	r4, 4057e4 <__register_exitproc+0x88>
  405772:	6860      	ldr	r0, [r4, #4]
  405774:	281f      	cmp	r0, #31
  405776:	dc17      	bgt.n	4057a8 <__register_exitproc+0x4c>
  405778:	1c43      	adds	r3, r0, #1
  40577a:	b176      	cbz	r6, 40579a <__register_exitproc+0x3e>
  40577c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  405780:	2201      	movs	r2, #1
  405782:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  405786:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40578a:	4082      	lsls	r2, r0
  40578c:	4311      	orrs	r1, r2
  40578e:	2e02      	cmp	r6, #2
  405790:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  405794:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  405798:	d01e      	beq.n	4057d8 <__register_exitproc+0x7c>
  40579a:	3002      	adds	r0, #2
  40579c:	6063      	str	r3, [r4, #4]
  40579e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4057a2:	2000      	movs	r0, #0
  4057a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4057a8:	4b14      	ldr	r3, [pc, #80]	; (4057fc <__register_exitproc+0xa0>)
  4057aa:	b303      	cbz	r3, 4057ee <__register_exitproc+0x92>
  4057ac:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4057b0:	f3af 8000 	nop.w
  4057b4:	4604      	mov	r4, r0
  4057b6:	b1d0      	cbz	r0, 4057ee <__register_exitproc+0x92>
  4057b8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4057bc:	2700      	movs	r7, #0
  4057be:	e880 0088 	stmia.w	r0, {r3, r7}
  4057c2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4057c6:	4638      	mov	r0, r7
  4057c8:	2301      	movs	r3, #1
  4057ca:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4057ce:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4057d2:	2e00      	cmp	r6, #0
  4057d4:	d0e1      	beq.n	40579a <__register_exitproc+0x3e>
  4057d6:	e7d1      	b.n	40577c <__register_exitproc+0x20>
  4057d8:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4057dc:	430a      	orrs	r2, r1
  4057de:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4057e2:	e7da      	b.n	40579a <__register_exitproc+0x3e>
  4057e4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4057e8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4057ec:	e7c1      	b.n	405772 <__register_exitproc+0x16>
  4057ee:	f04f 30ff 	mov.w	r0, #4294967295
  4057f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4057f6:	bf00      	nop
  4057f8:	00406ca0 	.word	0x00406ca0
  4057fc:	00000000 	.word	0x00000000

00405800 <_calloc_r>:
  405800:	b510      	push	{r4, lr}
  405802:	fb02 f101 	mul.w	r1, r2, r1
  405806:	f7fe ffe3 	bl	4047d0 <_malloc_r>
  40580a:	4604      	mov	r4, r0
  40580c:	b1d8      	cbz	r0, 405846 <_calloc_r+0x46>
  40580e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  405812:	f022 0203 	bic.w	r2, r2, #3
  405816:	3a04      	subs	r2, #4
  405818:	2a24      	cmp	r2, #36	; 0x24
  40581a:	d818      	bhi.n	40584e <_calloc_r+0x4e>
  40581c:	2a13      	cmp	r2, #19
  40581e:	d914      	bls.n	40584a <_calloc_r+0x4a>
  405820:	2300      	movs	r3, #0
  405822:	2a1b      	cmp	r2, #27
  405824:	6003      	str	r3, [r0, #0]
  405826:	6043      	str	r3, [r0, #4]
  405828:	d916      	bls.n	405858 <_calloc_r+0x58>
  40582a:	2a24      	cmp	r2, #36	; 0x24
  40582c:	6083      	str	r3, [r0, #8]
  40582e:	60c3      	str	r3, [r0, #12]
  405830:	bf11      	iteee	ne
  405832:	f100 0210 	addne.w	r2, r0, #16
  405836:	6103      	streq	r3, [r0, #16]
  405838:	6143      	streq	r3, [r0, #20]
  40583a:	f100 0218 	addeq.w	r2, r0, #24
  40583e:	2300      	movs	r3, #0
  405840:	6013      	str	r3, [r2, #0]
  405842:	6053      	str	r3, [r2, #4]
  405844:	6093      	str	r3, [r2, #8]
  405846:	4620      	mov	r0, r4
  405848:	bd10      	pop	{r4, pc}
  40584a:	4602      	mov	r2, r0
  40584c:	e7f7      	b.n	40583e <_calloc_r+0x3e>
  40584e:	2100      	movs	r1, #0
  405850:	f7fc fc14 	bl	40207c <memset>
  405854:	4620      	mov	r0, r4
  405856:	bd10      	pop	{r4, pc}
  405858:	f100 0208 	add.w	r2, r0, #8
  40585c:	e7ef      	b.n	40583e <_calloc_r+0x3e>
  40585e:	bf00      	nop

00405860 <_malloc_trim_r>:
  405860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405862:	4f23      	ldr	r7, [pc, #140]	; (4058f0 <_malloc_trim_r+0x90>)
  405864:	460c      	mov	r4, r1
  405866:	4606      	mov	r6, r0
  405868:	f7ff fb54 	bl	404f14 <__malloc_lock>
  40586c:	68bb      	ldr	r3, [r7, #8]
  40586e:	685d      	ldr	r5, [r3, #4]
  405870:	f025 0503 	bic.w	r5, r5, #3
  405874:	1b29      	subs	r1, r5, r4
  405876:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40587a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40587e:	f021 010f 	bic.w	r1, r1, #15
  405882:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405886:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40588a:	db07      	blt.n	40589c <_malloc_trim_r+0x3c>
  40588c:	2100      	movs	r1, #0
  40588e:	4630      	mov	r0, r6
  405890:	f7ff fe52 	bl	405538 <_sbrk_r>
  405894:	68bb      	ldr	r3, [r7, #8]
  405896:	442b      	add	r3, r5
  405898:	4298      	cmp	r0, r3
  40589a:	d004      	beq.n	4058a6 <_malloc_trim_r+0x46>
  40589c:	4630      	mov	r0, r6
  40589e:	f7ff fb3b 	bl	404f18 <__malloc_unlock>
  4058a2:	2000      	movs	r0, #0
  4058a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4058a6:	4261      	negs	r1, r4
  4058a8:	4630      	mov	r0, r6
  4058aa:	f7ff fe45 	bl	405538 <_sbrk_r>
  4058ae:	3001      	adds	r0, #1
  4058b0:	d00d      	beq.n	4058ce <_malloc_trim_r+0x6e>
  4058b2:	4b10      	ldr	r3, [pc, #64]	; (4058f4 <_malloc_trim_r+0x94>)
  4058b4:	68ba      	ldr	r2, [r7, #8]
  4058b6:	6819      	ldr	r1, [r3, #0]
  4058b8:	1b2d      	subs	r5, r5, r4
  4058ba:	f045 0501 	orr.w	r5, r5, #1
  4058be:	4630      	mov	r0, r6
  4058c0:	1b09      	subs	r1, r1, r4
  4058c2:	6055      	str	r5, [r2, #4]
  4058c4:	6019      	str	r1, [r3, #0]
  4058c6:	f7ff fb27 	bl	404f18 <__malloc_unlock>
  4058ca:	2001      	movs	r0, #1
  4058cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4058ce:	2100      	movs	r1, #0
  4058d0:	4630      	mov	r0, r6
  4058d2:	f7ff fe31 	bl	405538 <_sbrk_r>
  4058d6:	68ba      	ldr	r2, [r7, #8]
  4058d8:	1a83      	subs	r3, r0, r2
  4058da:	2b0f      	cmp	r3, #15
  4058dc:	ddde      	ble.n	40589c <_malloc_trim_r+0x3c>
  4058de:	4c06      	ldr	r4, [pc, #24]	; (4058f8 <_malloc_trim_r+0x98>)
  4058e0:	4904      	ldr	r1, [pc, #16]	; (4058f4 <_malloc_trim_r+0x94>)
  4058e2:	6824      	ldr	r4, [r4, #0]
  4058e4:	f043 0301 	orr.w	r3, r3, #1
  4058e8:	1b00      	subs	r0, r0, r4
  4058ea:	6053      	str	r3, [r2, #4]
  4058ec:	6008      	str	r0, [r1, #0]
  4058ee:	e7d5      	b.n	40589c <_malloc_trim_r+0x3c>
  4058f0:	2040046c 	.word	0x2040046c
  4058f4:	20400920 	.word	0x20400920
  4058f8:	20400878 	.word	0x20400878

004058fc <_free_r>:
  4058fc:	2900      	cmp	r1, #0
  4058fe:	d045      	beq.n	40598c <_free_r+0x90>
  405900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405904:	460d      	mov	r5, r1
  405906:	4680      	mov	r8, r0
  405908:	f7ff fb04 	bl	404f14 <__malloc_lock>
  40590c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405910:	496a      	ldr	r1, [pc, #424]	; (405abc <_free_r+0x1c0>)
  405912:	f027 0301 	bic.w	r3, r7, #1
  405916:	f1a5 0408 	sub.w	r4, r5, #8
  40591a:	18e2      	adds	r2, r4, r3
  40591c:	688e      	ldr	r6, [r1, #8]
  40591e:	6850      	ldr	r0, [r2, #4]
  405920:	42b2      	cmp	r2, r6
  405922:	f020 0003 	bic.w	r0, r0, #3
  405926:	d062      	beq.n	4059ee <_free_r+0xf2>
  405928:	07fe      	lsls	r6, r7, #31
  40592a:	6050      	str	r0, [r2, #4]
  40592c:	d40b      	bmi.n	405946 <_free_r+0x4a>
  40592e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405932:	1be4      	subs	r4, r4, r7
  405934:	f101 0e08 	add.w	lr, r1, #8
  405938:	68a5      	ldr	r5, [r4, #8]
  40593a:	4575      	cmp	r5, lr
  40593c:	443b      	add	r3, r7
  40593e:	d06f      	beq.n	405a20 <_free_r+0x124>
  405940:	68e7      	ldr	r7, [r4, #12]
  405942:	60ef      	str	r7, [r5, #12]
  405944:	60bd      	str	r5, [r7, #8]
  405946:	1815      	adds	r5, r2, r0
  405948:	686d      	ldr	r5, [r5, #4]
  40594a:	07ed      	lsls	r5, r5, #31
  40594c:	d542      	bpl.n	4059d4 <_free_r+0xd8>
  40594e:	f043 0201 	orr.w	r2, r3, #1
  405952:	6062      	str	r2, [r4, #4]
  405954:	50e3      	str	r3, [r4, r3]
  405956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40595a:	d218      	bcs.n	40598e <_free_r+0x92>
  40595c:	08db      	lsrs	r3, r3, #3
  40595e:	1c5a      	adds	r2, r3, #1
  405960:	684d      	ldr	r5, [r1, #4]
  405962:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  405966:	60a7      	str	r7, [r4, #8]
  405968:	2001      	movs	r0, #1
  40596a:	109b      	asrs	r3, r3, #2
  40596c:	fa00 f303 	lsl.w	r3, r0, r3
  405970:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  405974:	431d      	orrs	r5, r3
  405976:	3808      	subs	r0, #8
  405978:	60e0      	str	r0, [r4, #12]
  40597a:	604d      	str	r5, [r1, #4]
  40597c:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  405980:	60fc      	str	r4, [r7, #12]
  405982:	4640      	mov	r0, r8
  405984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405988:	f7ff bac6 	b.w	404f18 <__malloc_unlock>
  40598c:	4770      	bx	lr
  40598e:	0a5a      	lsrs	r2, r3, #9
  405990:	2a04      	cmp	r2, #4
  405992:	d853      	bhi.n	405a3c <_free_r+0x140>
  405994:	099a      	lsrs	r2, r3, #6
  405996:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40599a:	007f      	lsls	r7, r7, #1
  40599c:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4059a0:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  4059a4:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  4059a8:	4944      	ldr	r1, [pc, #272]	; (405abc <_free_r+0x1c0>)
  4059aa:	3808      	subs	r0, #8
  4059ac:	4290      	cmp	r0, r2
  4059ae:	d04d      	beq.n	405a4c <_free_r+0x150>
  4059b0:	6851      	ldr	r1, [r2, #4]
  4059b2:	f021 0103 	bic.w	r1, r1, #3
  4059b6:	428b      	cmp	r3, r1
  4059b8:	d202      	bcs.n	4059c0 <_free_r+0xc4>
  4059ba:	6892      	ldr	r2, [r2, #8]
  4059bc:	4290      	cmp	r0, r2
  4059be:	d1f7      	bne.n	4059b0 <_free_r+0xb4>
  4059c0:	68d0      	ldr	r0, [r2, #12]
  4059c2:	60e0      	str	r0, [r4, #12]
  4059c4:	60a2      	str	r2, [r4, #8]
  4059c6:	6084      	str	r4, [r0, #8]
  4059c8:	60d4      	str	r4, [r2, #12]
  4059ca:	4640      	mov	r0, r8
  4059cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4059d0:	f7ff baa2 	b.w	404f18 <__malloc_unlock>
  4059d4:	6895      	ldr	r5, [r2, #8]
  4059d6:	4f3a      	ldr	r7, [pc, #232]	; (405ac0 <_free_r+0x1c4>)
  4059d8:	42bd      	cmp	r5, r7
  4059da:	4403      	add	r3, r0
  4059dc:	d03f      	beq.n	405a5e <_free_r+0x162>
  4059de:	68d0      	ldr	r0, [r2, #12]
  4059e0:	60e8      	str	r0, [r5, #12]
  4059e2:	f043 0201 	orr.w	r2, r3, #1
  4059e6:	6085      	str	r5, [r0, #8]
  4059e8:	6062      	str	r2, [r4, #4]
  4059ea:	50e3      	str	r3, [r4, r3]
  4059ec:	e7b3      	b.n	405956 <_free_r+0x5a>
  4059ee:	07ff      	lsls	r7, r7, #31
  4059f0:	4403      	add	r3, r0
  4059f2:	d407      	bmi.n	405a04 <_free_r+0x108>
  4059f4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4059f8:	1aa4      	subs	r4, r4, r2
  4059fa:	4413      	add	r3, r2
  4059fc:	68a0      	ldr	r0, [r4, #8]
  4059fe:	68e2      	ldr	r2, [r4, #12]
  405a00:	60c2      	str	r2, [r0, #12]
  405a02:	6090      	str	r0, [r2, #8]
  405a04:	4a2f      	ldr	r2, [pc, #188]	; (405ac4 <_free_r+0x1c8>)
  405a06:	6812      	ldr	r2, [r2, #0]
  405a08:	f043 0001 	orr.w	r0, r3, #1
  405a0c:	4293      	cmp	r3, r2
  405a0e:	6060      	str	r0, [r4, #4]
  405a10:	608c      	str	r4, [r1, #8]
  405a12:	d3b6      	bcc.n	405982 <_free_r+0x86>
  405a14:	4b2c      	ldr	r3, [pc, #176]	; (405ac8 <_free_r+0x1cc>)
  405a16:	4640      	mov	r0, r8
  405a18:	6819      	ldr	r1, [r3, #0]
  405a1a:	f7ff ff21 	bl	405860 <_malloc_trim_r>
  405a1e:	e7b0      	b.n	405982 <_free_r+0x86>
  405a20:	1811      	adds	r1, r2, r0
  405a22:	6849      	ldr	r1, [r1, #4]
  405a24:	07c9      	lsls	r1, r1, #31
  405a26:	d444      	bmi.n	405ab2 <_free_r+0x1b6>
  405a28:	6891      	ldr	r1, [r2, #8]
  405a2a:	68d2      	ldr	r2, [r2, #12]
  405a2c:	60ca      	str	r2, [r1, #12]
  405a2e:	4403      	add	r3, r0
  405a30:	f043 0001 	orr.w	r0, r3, #1
  405a34:	6091      	str	r1, [r2, #8]
  405a36:	6060      	str	r0, [r4, #4]
  405a38:	50e3      	str	r3, [r4, r3]
  405a3a:	e7a2      	b.n	405982 <_free_r+0x86>
  405a3c:	2a14      	cmp	r2, #20
  405a3e:	d817      	bhi.n	405a70 <_free_r+0x174>
  405a40:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405a44:	007f      	lsls	r7, r7, #1
  405a46:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405a4a:	e7a9      	b.n	4059a0 <_free_r+0xa4>
  405a4c:	10aa      	asrs	r2, r5, #2
  405a4e:	684b      	ldr	r3, [r1, #4]
  405a50:	2501      	movs	r5, #1
  405a52:	fa05 f202 	lsl.w	r2, r5, r2
  405a56:	4313      	orrs	r3, r2
  405a58:	604b      	str	r3, [r1, #4]
  405a5a:	4602      	mov	r2, r0
  405a5c:	e7b1      	b.n	4059c2 <_free_r+0xc6>
  405a5e:	f043 0201 	orr.w	r2, r3, #1
  405a62:	614c      	str	r4, [r1, #20]
  405a64:	610c      	str	r4, [r1, #16]
  405a66:	60e5      	str	r5, [r4, #12]
  405a68:	60a5      	str	r5, [r4, #8]
  405a6a:	6062      	str	r2, [r4, #4]
  405a6c:	50e3      	str	r3, [r4, r3]
  405a6e:	e788      	b.n	405982 <_free_r+0x86>
  405a70:	2a54      	cmp	r2, #84	; 0x54
  405a72:	d806      	bhi.n	405a82 <_free_r+0x186>
  405a74:	0b1a      	lsrs	r2, r3, #12
  405a76:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405a7a:	007f      	lsls	r7, r7, #1
  405a7c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405a80:	e78e      	b.n	4059a0 <_free_r+0xa4>
  405a82:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405a86:	d806      	bhi.n	405a96 <_free_r+0x19a>
  405a88:	0bda      	lsrs	r2, r3, #15
  405a8a:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405a8e:	007f      	lsls	r7, r7, #1
  405a90:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405a94:	e784      	b.n	4059a0 <_free_r+0xa4>
  405a96:	f240 5054 	movw	r0, #1364	; 0x554
  405a9a:	4282      	cmp	r2, r0
  405a9c:	d806      	bhi.n	405aac <_free_r+0x1b0>
  405a9e:	0c9a      	lsrs	r2, r3, #18
  405aa0:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405aa4:	007f      	lsls	r7, r7, #1
  405aa6:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405aaa:	e779      	b.n	4059a0 <_free_r+0xa4>
  405aac:	27fe      	movs	r7, #254	; 0xfe
  405aae:	257e      	movs	r5, #126	; 0x7e
  405ab0:	e776      	b.n	4059a0 <_free_r+0xa4>
  405ab2:	f043 0201 	orr.w	r2, r3, #1
  405ab6:	6062      	str	r2, [r4, #4]
  405ab8:	50e3      	str	r3, [r4, r3]
  405aba:	e762      	b.n	405982 <_free_r+0x86>
  405abc:	2040046c 	.word	0x2040046c
  405ac0:	20400474 	.word	0x20400474
  405ac4:	20400874 	.word	0x20400874
  405ac8:	2040091c 	.word	0x2040091c

00405acc <memmove>:
  405acc:	4288      	cmp	r0, r1
  405ace:	b5f0      	push	{r4, r5, r6, r7, lr}
  405ad0:	d90d      	bls.n	405aee <memmove+0x22>
  405ad2:	188b      	adds	r3, r1, r2
  405ad4:	4298      	cmp	r0, r3
  405ad6:	d20a      	bcs.n	405aee <memmove+0x22>
  405ad8:	1881      	adds	r1, r0, r2
  405ada:	2a00      	cmp	r2, #0
  405adc:	d051      	beq.n	405b82 <memmove+0xb6>
  405ade:	1a9a      	subs	r2, r3, r2
  405ae0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405ae4:	f801 4d01 	strb.w	r4, [r1, #-1]!
  405ae8:	4293      	cmp	r3, r2
  405aea:	d1f9      	bne.n	405ae0 <memmove+0x14>
  405aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405aee:	2a0f      	cmp	r2, #15
  405af0:	d948      	bls.n	405b84 <memmove+0xb8>
  405af2:	ea41 0300 	orr.w	r3, r1, r0
  405af6:	079b      	lsls	r3, r3, #30
  405af8:	d146      	bne.n	405b88 <memmove+0xbc>
  405afa:	f100 0410 	add.w	r4, r0, #16
  405afe:	f101 0310 	add.w	r3, r1, #16
  405b02:	4615      	mov	r5, r2
  405b04:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405b08:	f844 6c10 	str.w	r6, [r4, #-16]
  405b0c:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405b10:	f844 6c0c 	str.w	r6, [r4, #-12]
  405b14:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405b18:	f844 6c08 	str.w	r6, [r4, #-8]
  405b1c:	3d10      	subs	r5, #16
  405b1e:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405b22:	f844 6c04 	str.w	r6, [r4, #-4]
  405b26:	2d0f      	cmp	r5, #15
  405b28:	f103 0310 	add.w	r3, r3, #16
  405b2c:	f104 0410 	add.w	r4, r4, #16
  405b30:	d8e8      	bhi.n	405b04 <memmove+0x38>
  405b32:	f1a2 0310 	sub.w	r3, r2, #16
  405b36:	f023 030f 	bic.w	r3, r3, #15
  405b3a:	f002 0e0f 	and.w	lr, r2, #15
  405b3e:	3310      	adds	r3, #16
  405b40:	f1be 0f03 	cmp.w	lr, #3
  405b44:	4419      	add	r1, r3
  405b46:	4403      	add	r3, r0
  405b48:	d921      	bls.n	405b8e <memmove+0xc2>
  405b4a:	1f1e      	subs	r6, r3, #4
  405b4c:	460d      	mov	r5, r1
  405b4e:	4674      	mov	r4, lr
  405b50:	3c04      	subs	r4, #4
  405b52:	f855 7b04 	ldr.w	r7, [r5], #4
  405b56:	f846 7f04 	str.w	r7, [r6, #4]!
  405b5a:	2c03      	cmp	r4, #3
  405b5c:	d8f8      	bhi.n	405b50 <memmove+0x84>
  405b5e:	f1ae 0404 	sub.w	r4, lr, #4
  405b62:	f024 0403 	bic.w	r4, r4, #3
  405b66:	3404      	adds	r4, #4
  405b68:	4423      	add	r3, r4
  405b6a:	4421      	add	r1, r4
  405b6c:	f002 0203 	and.w	r2, r2, #3
  405b70:	b162      	cbz	r2, 405b8c <memmove+0xc0>
  405b72:	3b01      	subs	r3, #1
  405b74:	440a      	add	r2, r1
  405b76:	f811 4b01 	ldrb.w	r4, [r1], #1
  405b7a:	f803 4f01 	strb.w	r4, [r3, #1]!
  405b7e:	428a      	cmp	r2, r1
  405b80:	d1f9      	bne.n	405b76 <memmove+0xaa>
  405b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405b84:	4603      	mov	r3, r0
  405b86:	e7f3      	b.n	405b70 <memmove+0xa4>
  405b88:	4603      	mov	r3, r0
  405b8a:	e7f2      	b.n	405b72 <memmove+0xa6>
  405b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405b8e:	4672      	mov	r2, lr
  405b90:	e7ee      	b.n	405b70 <memmove+0xa4>
  405b92:	bf00      	nop

00405b94 <_realloc_r>:
  405b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b98:	4617      	mov	r7, r2
  405b9a:	b083      	sub	sp, #12
  405b9c:	2900      	cmp	r1, #0
  405b9e:	f000 80c1 	beq.w	405d24 <_realloc_r+0x190>
  405ba2:	460e      	mov	r6, r1
  405ba4:	4681      	mov	r9, r0
  405ba6:	f107 050b 	add.w	r5, r7, #11
  405baa:	f7ff f9b3 	bl	404f14 <__malloc_lock>
  405bae:	f856 ec04 	ldr.w	lr, [r6, #-4]
  405bb2:	2d16      	cmp	r5, #22
  405bb4:	f02e 0403 	bic.w	r4, lr, #3
  405bb8:	f1a6 0808 	sub.w	r8, r6, #8
  405bbc:	d840      	bhi.n	405c40 <_realloc_r+0xac>
  405bbe:	2210      	movs	r2, #16
  405bc0:	4615      	mov	r5, r2
  405bc2:	42af      	cmp	r7, r5
  405bc4:	d841      	bhi.n	405c4a <_realloc_r+0xb6>
  405bc6:	4294      	cmp	r4, r2
  405bc8:	da75      	bge.n	405cb6 <_realloc_r+0x122>
  405bca:	4bc9      	ldr	r3, [pc, #804]	; (405ef0 <_realloc_r+0x35c>)
  405bcc:	6899      	ldr	r1, [r3, #8]
  405bce:	eb08 0004 	add.w	r0, r8, r4
  405bd2:	4288      	cmp	r0, r1
  405bd4:	6841      	ldr	r1, [r0, #4]
  405bd6:	f000 80d9 	beq.w	405d8c <_realloc_r+0x1f8>
  405bda:	f021 0301 	bic.w	r3, r1, #1
  405bde:	4403      	add	r3, r0
  405be0:	685b      	ldr	r3, [r3, #4]
  405be2:	07db      	lsls	r3, r3, #31
  405be4:	d57d      	bpl.n	405ce2 <_realloc_r+0x14e>
  405be6:	f01e 0f01 	tst.w	lr, #1
  405bea:	d035      	beq.n	405c58 <_realloc_r+0xc4>
  405bec:	4639      	mov	r1, r7
  405bee:	4648      	mov	r0, r9
  405bf0:	f7fe fdee 	bl	4047d0 <_malloc_r>
  405bf4:	4607      	mov	r7, r0
  405bf6:	b1e0      	cbz	r0, 405c32 <_realloc_r+0x9e>
  405bf8:	f856 3c04 	ldr.w	r3, [r6, #-4]
  405bfc:	f023 0301 	bic.w	r3, r3, #1
  405c00:	4443      	add	r3, r8
  405c02:	f1a0 0208 	sub.w	r2, r0, #8
  405c06:	429a      	cmp	r2, r3
  405c08:	f000 8144 	beq.w	405e94 <_realloc_r+0x300>
  405c0c:	1f22      	subs	r2, r4, #4
  405c0e:	2a24      	cmp	r2, #36	; 0x24
  405c10:	f200 8131 	bhi.w	405e76 <_realloc_r+0x2e2>
  405c14:	2a13      	cmp	r2, #19
  405c16:	f200 8104 	bhi.w	405e22 <_realloc_r+0x28e>
  405c1a:	4603      	mov	r3, r0
  405c1c:	4632      	mov	r2, r6
  405c1e:	6811      	ldr	r1, [r2, #0]
  405c20:	6019      	str	r1, [r3, #0]
  405c22:	6851      	ldr	r1, [r2, #4]
  405c24:	6059      	str	r1, [r3, #4]
  405c26:	6892      	ldr	r2, [r2, #8]
  405c28:	609a      	str	r2, [r3, #8]
  405c2a:	4631      	mov	r1, r6
  405c2c:	4648      	mov	r0, r9
  405c2e:	f7ff fe65 	bl	4058fc <_free_r>
  405c32:	4648      	mov	r0, r9
  405c34:	f7ff f970 	bl	404f18 <__malloc_unlock>
  405c38:	4638      	mov	r0, r7
  405c3a:	b003      	add	sp, #12
  405c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c40:	f025 0507 	bic.w	r5, r5, #7
  405c44:	2d00      	cmp	r5, #0
  405c46:	462a      	mov	r2, r5
  405c48:	dabb      	bge.n	405bc2 <_realloc_r+0x2e>
  405c4a:	230c      	movs	r3, #12
  405c4c:	2000      	movs	r0, #0
  405c4e:	f8c9 3000 	str.w	r3, [r9]
  405c52:	b003      	add	sp, #12
  405c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c58:	f856 3c08 	ldr.w	r3, [r6, #-8]
  405c5c:	ebc3 0a08 	rsb	sl, r3, r8
  405c60:	f8da 3004 	ldr.w	r3, [sl, #4]
  405c64:	f023 0c03 	bic.w	ip, r3, #3
  405c68:	eb04 030c 	add.w	r3, r4, ip
  405c6c:	4293      	cmp	r3, r2
  405c6e:	dbbd      	blt.n	405bec <_realloc_r+0x58>
  405c70:	4657      	mov	r7, sl
  405c72:	f8da 100c 	ldr.w	r1, [sl, #12]
  405c76:	f857 0f08 	ldr.w	r0, [r7, #8]!
  405c7a:	1f22      	subs	r2, r4, #4
  405c7c:	2a24      	cmp	r2, #36	; 0x24
  405c7e:	60c1      	str	r1, [r0, #12]
  405c80:	6088      	str	r0, [r1, #8]
  405c82:	f200 8117 	bhi.w	405eb4 <_realloc_r+0x320>
  405c86:	2a13      	cmp	r2, #19
  405c88:	f240 8112 	bls.w	405eb0 <_realloc_r+0x31c>
  405c8c:	6831      	ldr	r1, [r6, #0]
  405c8e:	f8ca 1008 	str.w	r1, [sl, #8]
  405c92:	6871      	ldr	r1, [r6, #4]
  405c94:	f8ca 100c 	str.w	r1, [sl, #12]
  405c98:	2a1b      	cmp	r2, #27
  405c9a:	f200 812b 	bhi.w	405ef4 <_realloc_r+0x360>
  405c9e:	3608      	adds	r6, #8
  405ca0:	f10a 0210 	add.w	r2, sl, #16
  405ca4:	6831      	ldr	r1, [r6, #0]
  405ca6:	6011      	str	r1, [r2, #0]
  405ca8:	6871      	ldr	r1, [r6, #4]
  405caa:	6051      	str	r1, [r2, #4]
  405cac:	68b1      	ldr	r1, [r6, #8]
  405cae:	6091      	str	r1, [r2, #8]
  405cb0:	463e      	mov	r6, r7
  405cb2:	461c      	mov	r4, r3
  405cb4:	46d0      	mov	r8, sl
  405cb6:	1b63      	subs	r3, r4, r5
  405cb8:	2b0f      	cmp	r3, #15
  405cba:	d81d      	bhi.n	405cf8 <_realloc_r+0x164>
  405cbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
  405cc0:	f003 0301 	and.w	r3, r3, #1
  405cc4:	4323      	orrs	r3, r4
  405cc6:	4444      	add	r4, r8
  405cc8:	f8c8 3004 	str.w	r3, [r8, #4]
  405ccc:	6863      	ldr	r3, [r4, #4]
  405cce:	f043 0301 	orr.w	r3, r3, #1
  405cd2:	6063      	str	r3, [r4, #4]
  405cd4:	4648      	mov	r0, r9
  405cd6:	f7ff f91f 	bl	404f18 <__malloc_unlock>
  405cda:	4630      	mov	r0, r6
  405cdc:	b003      	add	sp, #12
  405cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ce2:	f021 0103 	bic.w	r1, r1, #3
  405ce6:	4421      	add	r1, r4
  405ce8:	4291      	cmp	r1, r2
  405cea:	db21      	blt.n	405d30 <_realloc_r+0x19c>
  405cec:	68c3      	ldr	r3, [r0, #12]
  405cee:	6882      	ldr	r2, [r0, #8]
  405cf0:	460c      	mov	r4, r1
  405cf2:	60d3      	str	r3, [r2, #12]
  405cf4:	609a      	str	r2, [r3, #8]
  405cf6:	e7de      	b.n	405cb6 <_realloc_r+0x122>
  405cf8:	f8d8 2004 	ldr.w	r2, [r8, #4]
  405cfc:	eb08 0105 	add.w	r1, r8, r5
  405d00:	f002 0201 	and.w	r2, r2, #1
  405d04:	4315      	orrs	r5, r2
  405d06:	f043 0201 	orr.w	r2, r3, #1
  405d0a:	440b      	add	r3, r1
  405d0c:	f8c8 5004 	str.w	r5, [r8, #4]
  405d10:	604a      	str	r2, [r1, #4]
  405d12:	685a      	ldr	r2, [r3, #4]
  405d14:	f042 0201 	orr.w	r2, r2, #1
  405d18:	3108      	adds	r1, #8
  405d1a:	605a      	str	r2, [r3, #4]
  405d1c:	4648      	mov	r0, r9
  405d1e:	f7ff fded 	bl	4058fc <_free_r>
  405d22:	e7d7      	b.n	405cd4 <_realloc_r+0x140>
  405d24:	4611      	mov	r1, r2
  405d26:	b003      	add	sp, #12
  405d28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d2c:	f7fe bd50 	b.w	4047d0 <_malloc_r>
  405d30:	f01e 0f01 	tst.w	lr, #1
  405d34:	f47f af5a 	bne.w	405bec <_realloc_r+0x58>
  405d38:	f856 3c08 	ldr.w	r3, [r6, #-8]
  405d3c:	ebc3 0a08 	rsb	sl, r3, r8
  405d40:	f8da 3004 	ldr.w	r3, [sl, #4]
  405d44:	f023 0c03 	bic.w	ip, r3, #3
  405d48:	eb01 0e0c 	add.w	lr, r1, ip
  405d4c:	4596      	cmp	lr, r2
  405d4e:	db8b      	blt.n	405c68 <_realloc_r+0xd4>
  405d50:	68c3      	ldr	r3, [r0, #12]
  405d52:	6882      	ldr	r2, [r0, #8]
  405d54:	4657      	mov	r7, sl
  405d56:	60d3      	str	r3, [r2, #12]
  405d58:	609a      	str	r2, [r3, #8]
  405d5a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  405d5e:	f8da 300c 	ldr.w	r3, [sl, #12]
  405d62:	60cb      	str	r3, [r1, #12]
  405d64:	1f22      	subs	r2, r4, #4
  405d66:	2a24      	cmp	r2, #36	; 0x24
  405d68:	6099      	str	r1, [r3, #8]
  405d6a:	f200 8099 	bhi.w	405ea0 <_realloc_r+0x30c>
  405d6e:	2a13      	cmp	r2, #19
  405d70:	d962      	bls.n	405e38 <_realloc_r+0x2a4>
  405d72:	6833      	ldr	r3, [r6, #0]
  405d74:	f8ca 3008 	str.w	r3, [sl, #8]
  405d78:	6873      	ldr	r3, [r6, #4]
  405d7a:	f8ca 300c 	str.w	r3, [sl, #12]
  405d7e:	2a1b      	cmp	r2, #27
  405d80:	f200 80a0 	bhi.w	405ec4 <_realloc_r+0x330>
  405d84:	3608      	adds	r6, #8
  405d86:	f10a 0310 	add.w	r3, sl, #16
  405d8a:	e056      	b.n	405e3a <_realloc_r+0x2a6>
  405d8c:	f021 0b03 	bic.w	fp, r1, #3
  405d90:	44a3      	add	fp, r4
  405d92:	f105 0010 	add.w	r0, r5, #16
  405d96:	4583      	cmp	fp, r0
  405d98:	da59      	bge.n	405e4e <_realloc_r+0x2ba>
  405d9a:	f01e 0f01 	tst.w	lr, #1
  405d9e:	f47f af25 	bne.w	405bec <_realloc_r+0x58>
  405da2:	f856 1c08 	ldr.w	r1, [r6, #-8]
  405da6:	ebc1 0a08 	rsb	sl, r1, r8
  405daa:	f8da 1004 	ldr.w	r1, [sl, #4]
  405dae:	f021 0c03 	bic.w	ip, r1, #3
  405db2:	44e3      	add	fp, ip
  405db4:	4558      	cmp	r0, fp
  405db6:	f73f af57 	bgt.w	405c68 <_realloc_r+0xd4>
  405dba:	4657      	mov	r7, sl
  405dbc:	f8da 100c 	ldr.w	r1, [sl, #12]
  405dc0:	f857 0f08 	ldr.w	r0, [r7, #8]!
  405dc4:	1f22      	subs	r2, r4, #4
  405dc6:	2a24      	cmp	r2, #36	; 0x24
  405dc8:	60c1      	str	r1, [r0, #12]
  405dca:	6088      	str	r0, [r1, #8]
  405dcc:	f200 80b4 	bhi.w	405f38 <_realloc_r+0x3a4>
  405dd0:	2a13      	cmp	r2, #19
  405dd2:	f240 80a5 	bls.w	405f20 <_realloc_r+0x38c>
  405dd6:	6831      	ldr	r1, [r6, #0]
  405dd8:	f8ca 1008 	str.w	r1, [sl, #8]
  405ddc:	6871      	ldr	r1, [r6, #4]
  405dde:	f8ca 100c 	str.w	r1, [sl, #12]
  405de2:	2a1b      	cmp	r2, #27
  405de4:	f200 80af 	bhi.w	405f46 <_realloc_r+0x3b2>
  405de8:	3608      	adds	r6, #8
  405dea:	f10a 0210 	add.w	r2, sl, #16
  405dee:	6831      	ldr	r1, [r6, #0]
  405df0:	6011      	str	r1, [r2, #0]
  405df2:	6871      	ldr	r1, [r6, #4]
  405df4:	6051      	str	r1, [r2, #4]
  405df6:	68b1      	ldr	r1, [r6, #8]
  405df8:	6091      	str	r1, [r2, #8]
  405dfa:	eb0a 0105 	add.w	r1, sl, r5
  405dfe:	ebc5 020b 	rsb	r2, r5, fp
  405e02:	f042 0201 	orr.w	r2, r2, #1
  405e06:	6099      	str	r1, [r3, #8]
  405e08:	604a      	str	r2, [r1, #4]
  405e0a:	f8da 3004 	ldr.w	r3, [sl, #4]
  405e0e:	f003 0301 	and.w	r3, r3, #1
  405e12:	431d      	orrs	r5, r3
  405e14:	4648      	mov	r0, r9
  405e16:	f8ca 5004 	str.w	r5, [sl, #4]
  405e1a:	f7ff f87d 	bl	404f18 <__malloc_unlock>
  405e1e:	4638      	mov	r0, r7
  405e20:	e75c      	b.n	405cdc <_realloc_r+0x148>
  405e22:	6833      	ldr	r3, [r6, #0]
  405e24:	6003      	str	r3, [r0, #0]
  405e26:	6873      	ldr	r3, [r6, #4]
  405e28:	6043      	str	r3, [r0, #4]
  405e2a:	2a1b      	cmp	r2, #27
  405e2c:	d827      	bhi.n	405e7e <_realloc_r+0x2ea>
  405e2e:	f100 0308 	add.w	r3, r0, #8
  405e32:	f106 0208 	add.w	r2, r6, #8
  405e36:	e6f2      	b.n	405c1e <_realloc_r+0x8a>
  405e38:	463b      	mov	r3, r7
  405e3a:	6832      	ldr	r2, [r6, #0]
  405e3c:	601a      	str	r2, [r3, #0]
  405e3e:	6872      	ldr	r2, [r6, #4]
  405e40:	605a      	str	r2, [r3, #4]
  405e42:	68b2      	ldr	r2, [r6, #8]
  405e44:	609a      	str	r2, [r3, #8]
  405e46:	463e      	mov	r6, r7
  405e48:	4674      	mov	r4, lr
  405e4a:	46d0      	mov	r8, sl
  405e4c:	e733      	b.n	405cb6 <_realloc_r+0x122>
  405e4e:	eb08 0105 	add.w	r1, r8, r5
  405e52:	ebc5 0b0b 	rsb	fp, r5, fp
  405e56:	f04b 0201 	orr.w	r2, fp, #1
  405e5a:	6099      	str	r1, [r3, #8]
  405e5c:	604a      	str	r2, [r1, #4]
  405e5e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  405e62:	f003 0301 	and.w	r3, r3, #1
  405e66:	431d      	orrs	r5, r3
  405e68:	4648      	mov	r0, r9
  405e6a:	f846 5c04 	str.w	r5, [r6, #-4]
  405e6e:	f7ff f853 	bl	404f18 <__malloc_unlock>
  405e72:	4630      	mov	r0, r6
  405e74:	e732      	b.n	405cdc <_realloc_r+0x148>
  405e76:	4631      	mov	r1, r6
  405e78:	f7ff fe28 	bl	405acc <memmove>
  405e7c:	e6d5      	b.n	405c2a <_realloc_r+0x96>
  405e7e:	68b3      	ldr	r3, [r6, #8]
  405e80:	6083      	str	r3, [r0, #8]
  405e82:	68f3      	ldr	r3, [r6, #12]
  405e84:	60c3      	str	r3, [r0, #12]
  405e86:	2a24      	cmp	r2, #36	; 0x24
  405e88:	d028      	beq.n	405edc <_realloc_r+0x348>
  405e8a:	f100 0310 	add.w	r3, r0, #16
  405e8e:	f106 0210 	add.w	r2, r6, #16
  405e92:	e6c4      	b.n	405c1e <_realloc_r+0x8a>
  405e94:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405e98:	f023 0303 	bic.w	r3, r3, #3
  405e9c:	441c      	add	r4, r3
  405e9e:	e70a      	b.n	405cb6 <_realloc_r+0x122>
  405ea0:	4631      	mov	r1, r6
  405ea2:	4638      	mov	r0, r7
  405ea4:	4674      	mov	r4, lr
  405ea6:	46d0      	mov	r8, sl
  405ea8:	f7ff fe10 	bl	405acc <memmove>
  405eac:	463e      	mov	r6, r7
  405eae:	e702      	b.n	405cb6 <_realloc_r+0x122>
  405eb0:	463a      	mov	r2, r7
  405eb2:	e6f7      	b.n	405ca4 <_realloc_r+0x110>
  405eb4:	4631      	mov	r1, r6
  405eb6:	4638      	mov	r0, r7
  405eb8:	461c      	mov	r4, r3
  405eba:	46d0      	mov	r8, sl
  405ebc:	f7ff fe06 	bl	405acc <memmove>
  405ec0:	463e      	mov	r6, r7
  405ec2:	e6f8      	b.n	405cb6 <_realloc_r+0x122>
  405ec4:	68b3      	ldr	r3, [r6, #8]
  405ec6:	f8ca 3010 	str.w	r3, [sl, #16]
  405eca:	68f3      	ldr	r3, [r6, #12]
  405ecc:	f8ca 3014 	str.w	r3, [sl, #20]
  405ed0:	2a24      	cmp	r2, #36	; 0x24
  405ed2:	d01b      	beq.n	405f0c <_realloc_r+0x378>
  405ed4:	3610      	adds	r6, #16
  405ed6:	f10a 0318 	add.w	r3, sl, #24
  405eda:	e7ae      	b.n	405e3a <_realloc_r+0x2a6>
  405edc:	6933      	ldr	r3, [r6, #16]
  405ede:	6103      	str	r3, [r0, #16]
  405ee0:	6973      	ldr	r3, [r6, #20]
  405ee2:	6143      	str	r3, [r0, #20]
  405ee4:	f106 0218 	add.w	r2, r6, #24
  405ee8:	f100 0318 	add.w	r3, r0, #24
  405eec:	e697      	b.n	405c1e <_realloc_r+0x8a>
  405eee:	bf00      	nop
  405ef0:	2040046c 	.word	0x2040046c
  405ef4:	68b1      	ldr	r1, [r6, #8]
  405ef6:	f8ca 1010 	str.w	r1, [sl, #16]
  405efa:	68f1      	ldr	r1, [r6, #12]
  405efc:	f8ca 1014 	str.w	r1, [sl, #20]
  405f00:	2a24      	cmp	r2, #36	; 0x24
  405f02:	d00f      	beq.n	405f24 <_realloc_r+0x390>
  405f04:	3610      	adds	r6, #16
  405f06:	f10a 0218 	add.w	r2, sl, #24
  405f0a:	e6cb      	b.n	405ca4 <_realloc_r+0x110>
  405f0c:	6933      	ldr	r3, [r6, #16]
  405f0e:	f8ca 3018 	str.w	r3, [sl, #24]
  405f12:	6973      	ldr	r3, [r6, #20]
  405f14:	f8ca 301c 	str.w	r3, [sl, #28]
  405f18:	3618      	adds	r6, #24
  405f1a:	f10a 0320 	add.w	r3, sl, #32
  405f1e:	e78c      	b.n	405e3a <_realloc_r+0x2a6>
  405f20:	463a      	mov	r2, r7
  405f22:	e764      	b.n	405dee <_realloc_r+0x25a>
  405f24:	6932      	ldr	r2, [r6, #16]
  405f26:	f8ca 2018 	str.w	r2, [sl, #24]
  405f2a:	6972      	ldr	r2, [r6, #20]
  405f2c:	f8ca 201c 	str.w	r2, [sl, #28]
  405f30:	3618      	adds	r6, #24
  405f32:	f10a 0220 	add.w	r2, sl, #32
  405f36:	e6b5      	b.n	405ca4 <_realloc_r+0x110>
  405f38:	4631      	mov	r1, r6
  405f3a:	4638      	mov	r0, r7
  405f3c:	9301      	str	r3, [sp, #4]
  405f3e:	f7ff fdc5 	bl	405acc <memmove>
  405f42:	9b01      	ldr	r3, [sp, #4]
  405f44:	e759      	b.n	405dfa <_realloc_r+0x266>
  405f46:	68b1      	ldr	r1, [r6, #8]
  405f48:	f8ca 1010 	str.w	r1, [sl, #16]
  405f4c:	68f1      	ldr	r1, [r6, #12]
  405f4e:	f8ca 1014 	str.w	r1, [sl, #20]
  405f52:	2a24      	cmp	r2, #36	; 0x24
  405f54:	d003      	beq.n	405f5e <_realloc_r+0x3ca>
  405f56:	3610      	adds	r6, #16
  405f58:	f10a 0218 	add.w	r2, sl, #24
  405f5c:	e747      	b.n	405dee <_realloc_r+0x25a>
  405f5e:	6932      	ldr	r2, [r6, #16]
  405f60:	f8ca 2018 	str.w	r2, [sl, #24]
  405f64:	6972      	ldr	r2, [r6, #20]
  405f66:	f8ca 201c 	str.w	r2, [sl, #28]
  405f6a:	3618      	adds	r6, #24
  405f6c:	f10a 0220 	add.w	r2, sl, #32
  405f70:	e73d      	b.n	405dee <_realloc_r+0x25a>
  405f72:	bf00      	nop

00405f74 <__aeabi_drsub>:
  405f74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405f78:	e002      	b.n	405f80 <__adddf3>
  405f7a:	bf00      	nop

00405f7c <__aeabi_dsub>:
  405f7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00405f80 <__adddf3>:
  405f80:	b530      	push	{r4, r5, lr}
  405f82:	ea4f 0441 	mov.w	r4, r1, lsl #1
  405f86:	ea4f 0543 	mov.w	r5, r3, lsl #1
  405f8a:	ea94 0f05 	teq	r4, r5
  405f8e:	bf08      	it	eq
  405f90:	ea90 0f02 	teqeq	r0, r2
  405f94:	bf1f      	itttt	ne
  405f96:	ea54 0c00 	orrsne.w	ip, r4, r0
  405f9a:	ea55 0c02 	orrsne.w	ip, r5, r2
  405f9e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  405fa2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405fa6:	f000 80e2 	beq.w	40616e <__adddf3+0x1ee>
  405faa:	ea4f 5454 	mov.w	r4, r4, lsr #21
  405fae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405fb2:	bfb8      	it	lt
  405fb4:	426d      	neglt	r5, r5
  405fb6:	dd0c      	ble.n	405fd2 <__adddf3+0x52>
  405fb8:	442c      	add	r4, r5
  405fba:	ea80 0202 	eor.w	r2, r0, r2
  405fbe:	ea81 0303 	eor.w	r3, r1, r3
  405fc2:	ea82 0000 	eor.w	r0, r2, r0
  405fc6:	ea83 0101 	eor.w	r1, r3, r1
  405fca:	ea80 0202 	eor.w	r2, r0, r2
  405fce:	ea81 0303 	eor.w	r3, r1, r3
  405fd2:	2d36      	cmp	r5, #54	; 0x36
  405fd4:	bf88      	it	hi
  405fd6:	bd30      	pophi	{r4, r5, pc}
  405fd8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405fdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405fe0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405fe4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405fe8:	d002      	beq.n	405ff0 <__adddf3+0x70>
  405fea:	4240      	negs	r0, r0
  405fec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405ff0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405ff4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405ff8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405ffc:	d002      	beq.n	406004 <__adddf3+0x84>
  405ffe:	4252      	negs	r2, r2
  406000:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  406004:	ea94 0f05 	teq	r4, r5
  406008:	f000 80a7 	beq.w	40615a <__adddf3+0x1da>
  40600c:	f1a4 0401 	sub.w	r4, r4, #1
  406010:	f1d5 0e20 	rsbs	lr, r5, #32
  406014:	db0d      	blt.n	406032 <__adddf3+0xb2>
  406016:	fa02 fc0e 	lsl.w	ip, r2, lr
  40601a:	fa22 f205 	lsr.w	r2, r2, r5
  40601e:	1880      	adds	r0, r0, r2
  406020:	f141 0100 	adc.w	r1, r1, #0
  406024:	fa03 f20e 	lsl.w	r2, r3, lr
  406028:	1880      	adds	r0, r0, r2
  40602a:	fa43 f305 	asr.w	r3, r3, r5
  40602e:	4159      	adcs	r1, r3
  406030:	e00e      	b.n	406050 <__adddf3+0xd0>
  406032:	f1a5 0520 	sub.w	r5, r5, #32
  406036:	f10e 0e20 	add.w	lr, lr, #32
  40603a:	2a01      	cmp	r2, #1
  40603c:	fa03 fc0e 	lsl.w	ip, r3, lr
  406040:	bf28      	it	cs
  406042:	f04c 0c02 	orrcs.w	ip, ip, #2
  406046:	fa43 f305 	asr.w	r3, r3, r5
  40604a:	18c0      	adds	r0, r0, r3
  40604c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  406050:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406054:	d507      	bpl.n	406066 <__adddf3+0xe6>
  406056:	f04f 0e00 	mov.w	lr, #0
  40605a:	f1dc 0c00 	rsbs	ip, ip, #0
  40605e:	eb7e 0000 	sbcs.w	r0, lr, r0
  406062:	eb6e 0101 	sbc.w	r1, lr, r1
  406066:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40606a:	d31b      	bcc.n	4060a4 <__adddf3+0x124>
  40606c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  406070:	d30c      	bcc.n	40608c <__adddf3+0x10c>
  406072:	0849      	lsrs	r1, r1, #1
  406074:	ea5f 0030 	movs.w	r0, r0, rrx
  406078:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40607c:	f104 0401 	add.w	r4, r4, #1
  406080:	ea4f 5244 	mov.w	r2, r4, lsl #21
  406084:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  406088:	f080 809a 	bcs.w	4061c0 <__adddf3+0x240>
  40608c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406090:	bf08      	it	eq
  406092:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406096:	f150 0000 	adcs.w	r0, r0, #0
  40609a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40609e:	ea41 0105 	orr.w	r1, r1, r5
  4060a2:	bd30      	pop	{r4, r5, pc}
  4060a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4060a8:	4140      	adcs	r0, r0
  4060aa:	eb41 0101 	adc.w	r1, r1, r1
  4060ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4060b2:	f1a4 0401 	sub.w	r4, r4, #1
  4060b6:	d1e9      	bne.n	40608c <__adddf3+0x10c>
  4060b8:	f091 0f00 	teq	r1, #0
  4060bc:	bf04      	itt	eq
  4060be:	4601      	moveq	r1, r0
  4060c0:	2000      	moveq	r0, #0
  4060c2:	fab1 f381 	clz	r3, r1
  4060c6:	bf08      	it	eq
  4060c8:	3320      	addeq	r3, #32
  4060ca:	f1a3 030b 	sub.w	r3, r3, #11
  4060ce:	f1b3 0220 	subs.w	r2, r3, #32
  4060d2:	da0c      	bge.n	4060ee <__adddf3+0x16e>
  4060d4:	320c      	adds	r2, #12
  4060d6:	dd08      	ble.n	4060ea <__adddf3+0x16a>
  4060d8:	f102 0c14 	add.w	ip, r2, #20
  4060dc:	f1c2 020c 	rsb	r2, r2, #12
  4060e0:	fa01 f00c 	lsl.w	r0, r1, ip
  4060e4:	fa21 f102 	lsr.w	r1, r1, r2
  4060e8:	e00c      	b.n	406104 <__adddf3+0x184>
  4060ea:	f102 0214 	add.w	r2, r2, #20
  4060ee:	bfd8      	it	le
  4060f0:	f1c2 0c20 	rsble	ip, r2, #32
  4060f4:	fa01 f102 	lsl.w	r1, r1, r2
  4060f8:	fa20 fc0c 	lsr.w	ip, r0, ip
  4060fc:	bfdc      	itt	le
  4060fe:	ea41 010c 	orrle.w	r1, r1, ip
  406102:	4090      	lslle	r0, r2
  406104:	1ae4      	subs	r4, r4, r3
  406106:	bfa2      	ittt	ge
  406108:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40610c:	4329      	orrge	r1, r5
  40610e:	bd30      	popge	{r4, r5, pc}
  406110:	ea6f 0404 	mvn.w	r4, r4
  406114:	3c1f      	subs	r4, #31
  406116:	da1c      	bge.n	406152 <__adddf3+0x1d2>
  406118:	340c      	adds	r4, #12
  40611a:	dc0e      	bgt.n	40613a <__adddf3+0x1ba>
  40611c:	f104 0414 	add.w	r4, r4, #20
  406120:	f1c4 0220 	rsb	r2, r4, #32
  406124:	fa20 f004 	lsr.w	r0, r0, r4
  406128:	fa01 f302 	lsl.w	r3, r1, r2
  40612c:	ea40 0003 	orr.w	r0, r0, r3
  406130:	fa21 f304 	lsr.w	r3, r1, r4
  406134:	ea45 0103 	orr.w	r1, r5, r3
  406138:	bd30      	pop	{r4, r5, pc}
  40613a:	f1c4 040c 	rsb	r4, r4, #12
  40613e:	f1c4 0220 	rsb	r2, r4, #32
  406142:	fa20 f002 	lsr.w	r0, r0, r2
  406146:	fa01 f304 	lsl.w	r3, r1, r4
  40614a:	ea40 0003 	orr.w	r0, r0, r3
  40614e:	4629      	mov	r1, r5
  406150:	bd30      	pop	{r4, r5, pc}
  406152:	fa21 f004 	lsr.w	r0, r1, r4
  406156:	4629      	mov	r1, r5
  406158:	bd30      	pop	{r4, r5, pc}
  40615a:	f094 0f00 	teq	r4, #0
  40615e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  406162:	bf06      	itte	eq
  406164:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  406168:	3401      	addeq	r4, #1
  40616a:	3d01      	subne	r5, #1
  40616c:	e74e      	b.n	40600c <__adddf3+0x8c>
  40616e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406172:	bf18      	it	ne
  406174:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406178:	d029      	beq.n	4061ce <__adddf3+0x24e>
  40617a:	ea94 0f05 	teq	r4, r5
  40617e:	bf08      	it	eq
  406180:	ea90 0f02 	teqeq	r0, r2
  406184:	d005      	beq.n	406192 <__adddf3+0x212>
  406186:	ea54 0c00 	orrs.w	ip, r4, r0
  40618a:	bf04      	itt	eq
  40618c:	4619      	moveq	r1, r3
  40618e:	4610      	moveq	r0, r2
  406190:	bd30      	pop	{r4, r5, pc}
  406192:	ea91 0f03 	teq	r1, r3
  406196:	bf1e      	ittt	ne
  406198:	2100      	movne	r1, #0
  40619a:	2000      	movne	r0, #0
  40619c:	bd30      	popne	{r4, r5, pc}
  40619e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4061a2:	d105      	bne.n	4061b0 <__adddf3+0x230>
  4061a4:	0040      	lsls	r0, r0, #1
  4061a6:	4149      	adcs	r1, r1
  4061a8:	bf28      	it	cs
  4061aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4061ae:	bd30      	pop	{r4, r5, pc}
  4061b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4061b4:	bf3c      	itt	cc
  4061b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4061ba:	bd30      	popcc	{r4, r5, pc}
  4061bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4061c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4061c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4061c8:	f04f 0000 	mov.w	r0, #0
  4061cc:	bd30      	pop	{r4, r5, pc}
  4061ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4061d2:	bf1a      	itte	ne
  4061d4:	4619      	movne	r1, r3
  4061d6:	4610      	movne	r0, r2
  4061d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4061dc:	bf1c      	itt	ne
  4061de:	460b      	movne	r3, r1
  4061e0:	4602      	movne	r2, r0
  4061e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4061e6:	bf06      	itte	eq
  4061e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4061ec:	ea91 0f03 	teqeq	r1, r3
  4061f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4061f4:	bd30      	pop	{r4, r5, pc}
  4061f6:	bf00      	nop

004061f8 <__aeabi_ui2d>:
  4061f8:	f090 0f00 	teq	r0, #0
  4061fc:	bf04      	itt	eq
  4061fe:	2100      	moveq	r1, #0
  406200:	4770      	bxeq	lr
  406202:	b530      	push	{r4, r5, lr}
  406204:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406208:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40620c:	f04f 0500 	mov.w	r5, #0
  406210:	f04f 0100 	mov.w	r1, #0
  406214:	e750      	b.n	4060b8 <__adddf3+0x138>
  406216:	bf00      	nop

00406218 <__aeabi_i2d>:
  406218:	f090 0f00 	teq	r0, #0
  40621c:	bf04      	itt	eq
  40621e:	2100      	moveq	r1, #0
  406220:	4770      	bxeq	lr
  406222:	b530      	push	{r4, r5, lr}
  406224:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406228:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40622c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  406230:	bf48      	it	mi
  406232:	4240      	negmi	r0, r0
  406234:	f04f 0100 	mov.w	r1, #0
  406238:	e73e      	b.n	4060b8 <__adddf3+0x138>
  40623a:	bf00      	nop

0040623c <__aeabi_f2d>:
  40623c:	0042      	lsls	r2, r0, #1
  40623e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  406242:	ea4f 0131 	mov.w	r1, r1, rrx
  406246:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40624a:	bf1f      	itttt	ne
  40624c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  406250:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  406254:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  406258:	4770      	bxne	lr
  40625a:	f092 0f00 	teq	r2, #0
  40625e:	bf14      	ite	ne
  406260:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  406264:	4770      	bxeq	lr
  406266:	b530      	push	{r4, r5, lr}
  406268:	f44f 7460 	mov.w	r4, #896	; 0x380
  40626c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406270:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406274:	e720      	b.n	4060b8 <__adddf3+0x138>
  406276:	bf00      	nop

00406278 <__aeabi_ul2d>:
  406278:	ea50 0201 	orrs.w	r2, r0, r1
  40627c:	bf08      	it	eq
  40627e:	4770      	bxeq	lr
  406280:	b530      	push	{r4, r5, lr}
  406282:	f04f 0500 	mov.w	r5, #0
  406286:	e00a      	b.n	40629e <__aeabi_l2d+0x16>

00406288 <__aeabi_l2d>:
  406288:	ea50 0201 	orrs.w	r2, r0, r1
  40628c:	bf08      	it	eq
  40628e:	4770      	bxeq	lr
  406290:	b530      	push	{r4, r5, lr}
  406292:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  406296:	d502      	bpl.n	40629e <__aeabi_l2d+0x16>
  406298:	4240      	negs	r0, r0
  40629a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40629e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4062a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4062a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4062aa:	f43f aedc 	beq.w	406066 <__adddf3+0xe6>
  4062ae:	f04f 0203 	mov.w	r2, #3
  4062b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4062b6:	bf18      	it	ne
  4062b8:	3203      	addne	r2, #3
  4062ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4062be:	bf18      	it	ne
  4062c0:	3203      	addne	r2, #3
  4062c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4062c6:	f1c2 0320 	rsb	r3, r2, #32
  4062ca:	fa00 fc03 	lsl.w	ip, r0, r3
  4062ce:	fa20 f002 	lsr.w	r0, r0, r2
  4062d2:	fa01 fe03 	lsl.w	lr, r1, r3
  4062d6:	ea40 000e 	orr.w	r0, r0, lr
  4062da:	fa21 f102 	lsr.w	r1, r1, r2
  4062de:	4414      	add	r4, r2
  4062e0:	e6c1      	b.n	406066 <__adddf3+0xe6>
  4062e2:	bf00      	nop

004062e4 <__aeabi_dmul>:
  4062e4:	b570      	push	{r4, r5, r6, lr}
  4062e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4062ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4062ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4062f2:	bf1d      	ittte	ne
  4062f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4062f8:	ea94 0f0c 	teqne	r4, ip
  4062fc:	ea95 0f0c 	teqne	r5, ip
  406300:	f000 f8de 	bleq	4064c0 <__aeabi_dmul+0x1dc>
  406304:	442c      	add	r4, r5
  406306:	ea81 0603 	eor.w	r6, r1, r3
  40630a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40630e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  406312:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  406316:	bf18      	it	ne
  406318:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40631c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  406324:	d038      	beq.n	406398 <__aeabi_dmul+0xb4>
  406326:	fba0 ce02 	umull	ip, lr, r0, r2
  40632a:	f04f 0500 	mov.w	r5, #0
  40632e:	fbe1 e502 	umlal	lr, r5, r1, r2
  406332:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  406336:	fbe0 e503 	umlal	lr, r5, r0, r3
  40633a:	f04f 0600 	mov.w	r6, #0
  40633e:	fbe1 5603 	umlal	r5, r6, r1, r3
  406342:	f09c 0f00 	teq	ip, #0
  406346:	bf18      	it	ne
  406348:	f04e 0e01 	orrne.w	lr, lr, #1
  40634c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  406350:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  406354:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  406358:	d204      	bcs.n	406364 <__aeabi_dmul+0x80>
  40635a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40635e:	416d      	adcs	r5, r5
  406360:	eb46 0606 	adc.w	r6, r6, r6
  406364:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  406368:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40636c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  406370:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  406374:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  406378:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40637c:	bf88      	it	hi
  40637e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  406382:	d81e      	bhi.n	4063c2 <__aeabi_dmul+0xde>
  406384:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  406388:	bf08      	it	eq
  40638a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40638e:	f150 0000 	adcs.w	r0, r0, #0
  406392:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406396:	bd70      	pop	{r4, r5, r6, pc}
  406398:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40639c:	ea46 0101 	orr.w	r1, r6, r1
  4063a0:	ea40 0002 	orr.w	r0, r0, r2
  4063a4:	ea81 0103 	eor.w	r1, r1, r3
  4063a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4063ac:	bfc2      	ittt	gt
  4063ae:	ebd4 050c 	rsbsgt	r5, r4, ip
  4063b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4063b6:	bd70      	popgt	{r4, r5, r6, pc}
  4063b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4063bc:	f04f 0e00 	mov.w	lr, #0
  4063c0:	3c01      	subs	r4, #1
  4063c2:	f300 80ab 	bgt.w	40651c <__aeabi_dmul+0x238>
  4063c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4063ca:	bfde      	ittt	le
  4063cc:	2000      	movle	r0, #0
  4063ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4063d2:	bd70      	pople	{r4, r5, r6, pc}
  4063d4:	f1c4 0400 	rsb	r4, r4, #0
  4063d8:	3c20      	subs	r4, #32
  4063da:	da35      	bge.n	406448 <__aeabi_dmul+0x164>
  4063dc:	340c      	adds	r4, #12
  4063de:	dc1b      	bgt.n	406418 <__aeabi_dmul+0x134>
  4063e0:	f104 0414 	add.w	r4, r4, #20
  4063e4:	f1c4 0520 	rsb	r5, r4, #32
  4063e8:	fa00 f305 	lsl.w	r3, r0, r5
  4063ec:	fa20 f004 	lsr.w	r0, r0, r4
  4063f0:	fa01 f205 	lsl.w	r2, r1, r5
  4063f4:	ea40 0002 	orr.w	r0, r0, r2
  4063f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4063fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406404:	fa21 f604 	lsr.w	r6, r1, r4
  406408:	eb42 0106 	adc.w	r1, r2, r6
  40640c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406410:	bf08      	it	eq
  406412:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406416:	bd70      	pop	{r4, r5, r6, pc}
  406418:	f1c4 040c 	rsb	r4, r4, #12
  40641c:	f1c4 0520 	rsb	r5, r4, #32
  406420:	fa00 f304 	lsl.w	r3, r0, r4
  406424:	fa20 f005 	lsr.w	r0, r0, r5
  406428:	fa01 f204 	lsl.w	r2, r1, r4
  40642c:	ea40 0002 	orr.w	r0, r0, r2
  406430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406434:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406438:	f141 0100 	adc.w	r1, r1, #0
  40643c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406440:	bf08      	it	eq
  406442:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406446:	bd70      	pop	{r4, r5, r6, pc}
  406448:	f1c4 0520 	rsb	r5, r4, #32
  40644c:	fa00 f205 	lsl.w	r2, r0, r5
  406450:	ea4e 0e02 	orr.w	lr, lr, r2
  406454:	fa20 f304 	lsr.w	r3, r0, r4
  406458:	fa01 f205 	lsl.w	r2, r1, r5
  40645c:	ea43 0302 	orr.w	r3, r3, r2
  406460:	fa21 f004 	lsr.w	r0, r1, r4
  406464:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406468:	fa21 f204 	lsr.w	r2, r1, r4
  40646c:	ea20 0002 	bic.w	r0, r0, r2
  406470:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  406474:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406478:	bf08      	it	eq
  40647a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40647e:	bd70      	pop	{r4, r5, r6, pc}
  406480:	f094 0f00 	teq	r4, #0
  406484:	d10f      	bne.n	4064a6 <__aeabi_dmul+0x1c2>
  406486:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40648a:	0040      	lsls	r0, r0, #1
  40648c:	eb41 0101 	adc.w	r1, r1, r1
  406490:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406494:	bf08      	it	eq
  406496:	3c01      	subeq	r4, #1
  406498:	d0f7      	beq.n	40648a <__aeabi_dmul+0x1a6>
  40649a:	ea41 0106 	orr.w	r1, r1, r6
  40649e:	f095 0f00 	teq	r5, #0
  4064a2:	bf18      	it	ne
  4064a4:	4770      	bxne	lr
  4064a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4064aa:	0052      	lsls	r2, r2, #1
  4064ac:	eb43 0303 	adc.w	r3, r3, r3
  4064b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4064b4:	bf08      	it	eq
  4064b6:	3d01      	subeq	r5, #1
  4064b8:	d0f7      	beq.n	4064aa <__aeabi_dmul+0x1c6>
  4064ba:	ea43 0306 	orr.w	r3, r3, r6
  4064be:	4770      	bx	lr
  4064c0:	ea94 0f0c 	teq	r4, ip
  4064c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4064c8:	bf18      	it	ne
  4064ca:	ea95 0f0c 	teqne	r5, ip
  4064ce:	d00c      	beq.n	4064ea <__aeabi_dmul+0x206>
  4064d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4064d4:	bf18      	it	ne
  4064d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4064da:	d1d1      	bne.n	406480 <__aeabi_dmul+0x19c>
  4064dc:	ea81 0103 	eor.w	r1, r1, r3
  4064e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4064e4:	f04f 0000 	mov.w	r0, #0
  4064e8:	bd70      	pop	{r4, r5, r6, pc}
  4064ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4064ee:	bf06      	itte	eq
  4064f0:	4610      	moveq	r0, r2
  4064f2:	4619      	moveq	r1, r3
  4064f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4064f8:	d019      	beq.n	40652e <__aeabi_dmul+0x24a>
  4064fa:	ea94 0f0c 	teq	r4, ip
  4064fe:	d102      	bne.n	406506 <__aeabi_dmul+0x222>
  406500:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  406504:	d113      	bne.n	40652e <__aeabi_dmul+0x24a>
  406506:	ea95 0f0c 	teq	r5, ip
  40650a:	d105      	bne.n	406518 <__aeabi_dmul+0x234>
  40650c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  406510:	bf1c      	itt	ne
  406512:	4610      	movne	r0, r2
  406514:	4619      	movne	r1, r3
  406516:	d10a      	bne.n	40652e <__aeabi_dmul+0x24a>
  406518:	ea81 0103 	eor.w	r1, r1, r3
  40651c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406520:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406528:	f04f 0000 	mov.w	r0, #0
  40652c:	bd70      	pop	{r4, r5, r6, pc}
  40652e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406532:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  406536:	bd70      	pop	{r4, r5, r6, pc}

00406538 <__aeabi_ddiv>:
  406538:	b570      	push	{r4, r5, r6, lr}
  40653a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40653e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  406542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  406546:	bf1d      	ittte	ne
  406548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40654c:	ea94 0f0c 	teqne	r4, ip
  406550:	ea95 0f0c 	teqne	r5, ip
  406554:	f000 f8a7 	bleq	4066a6 <__aeabi_ddiv+0x16e>
  406558:	eba4 0405 	sub.w	r4, r4, r5
  40655c:	ea81 0e03 	eor.w	lr, r1, r3
  406560:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  406564:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406568:	f000 8088 	beq.w	40667c <__aeabi_ddiv+0x144>
  40656c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406570:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  406574:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  406578:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40657c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  406580:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  406584:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  406588:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40658c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  406590:	429d      	cmp	r5, r3
  406592:	bf08      	it	eq
  406594:	4296      	cmpeq	r6, r2
  406596:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40659a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40659e:	d202      	bcs.n	4065a6 <__aeabi_ddiv+0x6e>
  4065a0:	085b      	lsrs	r3, r3, #1
  4065a2:	ea4f 0232 	mov.w	r2, r2, rrx
  4065a6:	1ab6      	subs	r6, r6, r2
  4065a8:	eb65 0503 	sbc.w	r5, r5, r3
  4065ac:	085b      	lsrs	r3, r3, #1
  4065ae:	ea4f 0232 	mov.w	r2, r2, rrx
  4065b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4065b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4065ba:	ebb6 0e02 	subs.w	lr, r6, r2
  4065be:	eb75 0e03 	sbcs.w	lr, r5, r3
  4065c2:	bf22      	ittt	cs
  4065c4:	1ab6      	subcs	r6, r6, r2
  4065c6:	4675      	movcs	r5, lr
  4065c8:	ea40 000c 	orrcs.w	r0, r0, ip
  4065cc:	085b      	lsrs	r3, r3, #1
  4065ce:	ea4f 0232 	mov.w	r2, r2, rrx
  4065d2:	ebb6 0e02 	subs.w	lr, r6, r2
  4065d6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4065da:	bf22      	ittt	cs
  4065dc:	1ab6      	subcs	r6, r6, r2
  4065de:	4675      	movcs	r5, lr
  4065e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4065e4:	085b      	lsrs	r3, r3, #1
  4065e6:	ea4f 0232 	mov.w	r2, r2, rrx
  4065ea:	ebb6 0e02 	subs.w	lr, r6, r2
  4065ee:	eb75 0e03 	sbcs.w	lr, r5, r3
  4065f2:	bf22      	ittt	cs
  4065f4:	1ab6      	subcs	r6, r6, r2
  4065f6:	4675      	movcs	r5, lr
  4065f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4065fc:	085b      	lsrs	r3, r3, #1
  4065fe:	ea4f 0232 	mov.w	r2, r2, rrx
  406602:	ebb6 0e02 	subs.w	lr, r6, r2
  406606:	eb75 0e03 	sbcs.w	lr, r5, r3
  40660a:	bf22      	ittt	cs
  40660c:	1ab6      	subcs	r6, r6, r2
  40660e:	4675      	movcs	r5, lr
  406610:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  406614:	ea55 0e06 	orrs.w	lr, r5, r6
  406618:	d018      	beq.n	40664c <__aeabi_ddiv+0x114>
  40661a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40661e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  406622:	ea4f 1606 	mov.w	r6, r6, lsl #4
  406626:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40662a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40662e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  406632:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  406636:	d1c0      	bne.n	4065ba <__aeabi_ddiv+0x82>
  406638:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40663c:	d10b      	bne.n	406656 <__aeabi_ddiv+0x11e>
  40663e:	ea41 0100 	orr.w	r1, r1, r0
  406642:	f04f 0000 	mov.w	r0, #0
  406646:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40664a:	e7b6      	b.n	4065ba <__aeabi_ddiv+0x82>
  40664c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406650:	bf04      	itt	eq
  406652:	4301      	orreq	r1, r0
  406654:	2000      	moveq	r0, #0
  406656:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40665a:	bf88      	it	hi
  40665c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  406660:	f63f aeaf 	bhi.w	4063c2 <__aeabi_dmul+0xde>
  406664:	ebb5 0c03 	subs.w	ip, r5, r3
  406668:	bf04      	itt	eq
  40666a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40666e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406672:	f150 0000 	adcs.w	r0, r0, #0
  406676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40667a:	bd70      	pop	{r4, r5, r6, pc}
  40667c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  406680:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  406684:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  406688:	bfc2      	ittt	gt
  40668a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40668e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  406692:	bd70      	popgt	{r4, r5, r6, pc}
  406694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406698:	f04f 0e00 	mov.w	lr, #0
  40669c:	3c01      	subs	r4, #1
  40669e:	e690      	b.n	4063c2 <__aeabi_dmul+0xde>
  4066a0:	ea45 0e06 	orr.w	lr, r5, r6
  4066a4:	e68d      	b.n	4063c2 <__aeabi_dmul+0xde>
  4066a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4066aa:	ea94 0f0c 	teq	r4, ip
  4066ae:	bf08      	it	eq
  4066b0:	ea95 0f0c 	teqeq	r5, ip
  4066b4:	f43f af3b 	beq.w	40652e <__aeabi_dmul+0x24a>
  4066b8:	ea94 0f0c 	teq	r4, ip
  4066bc:	d10a      	bne.n	4066d4 <__aeabi_ddiv+0x19c>
  4066be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4066c2:	f47f af34 	bne.w	40652e <__aeabi_dmul+0x24a>
  4066c6:	ea95 0f0c 	teq	r5, ip
  4066ca:	f47f af25 	bne.w	406518 <__aeabi_dmul+0x234>
  4066ce:	4610      	mov	r0, r2
  4066d0:	4619      	mov	r1, r3
  4066d2:	e72c      	b.n	40652e <__aeabi_dmul+0x24a>
  4066d4:	ea95 0f0c 	teq	r5, ip
  4066d8:	d106      	bne.n	4066e8 <__aeabi_ddiv+0x1b0>
  4066da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4066de:	f43f aefd 	beq.w	4064dc <__aeabi_dmul+0x1f8>
  4066e2:	4610      	mov	r0, r2
  4066e4:	4619      	mov	r1, r3
  4066e6:	e722      	b.n	40652e <__aeabi_dmul+0x24a>
  4066e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4066ec:	bf18      	it	ne
  4066ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4066f2:	f47f aec5 	bne.w	406480 <__aeabi_dmul+0x19c>
  4066f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4066fa:	f47f af0d 	bne.w	406518 <__aeabi_dmul+0x234>
  4066fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  406702:	f47f aeeb 	bne.w	4064dc <__aeabi_dmul+0x1f8>
  406706:	e712      	b.n	40652e <__aeabi_dmul+0x24a>

00406708 <__gedf2>:
  406708:	f04f 3cff 	mov.w	ip, #4294967295
  40670c:	e006      	b.n	40671c <__cmpdf2+0x4>
  40670e:	bf00      	nop

00406710 <__ledf2>:
  406710:	f04f 0c01 	mov.w	ip, #1
  406714:	e002      	b.n	40671c <__cmpdf2+0x4>
  406716:	bf00      	nop

00406718 <__cmpdf2>:
  406718:	f04f 0c01 	mov.w	ip, #1
  40671c:	f84d cd04 	str.w	ip, [sp, #-4]!
  406720:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406724:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406728:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40672c:	bf18      	it	ne
  40672e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  406732:	d01b      	beq.n	40676c <__cmpdf2+0x54>
  406734:	b001      	add	sp, #4
  406736:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40673a:	bf0c      	ite	eq
  40673c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  406740:	ea91 0f03 	teqne	r1, r3
  406744:	bf02      	ittt	eq
  406746:	ea90 0f02 	teqeq	r0, r2
  40674a:	2000      	moveq	r0, #0
  40674c:	4770      	bxeq	lr
  40674e:	f110 0f00 	cmn.w	r0, #0
  406752:	ea91 0f03 	teq	r1, r3
  406756:	bf58      	it	pl
  406758:	4299      	cmppl	r1, r3
  40675a:	bf08      	it	eq
  40675c:	4290      	cmpeq	r0, r2
  40675e:	bf2c      	ite	cs
  406760:	17d8      	asrcs	r0, r3, #31
  406762:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  406766:	f040 0001 	orr.w	r0, r0, #1
  40676a:	4770      	bx	lr
  40676c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406770:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406774:	d102      	bne.n	40677c <__cmpdf2+0x64>
  406776:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40677a:	d107      	bne.n	40678c <__cmpdf2+0x74>
  40677c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406780:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406784:	d1d6      	bne.n	406734 <__cmpdf2+0x1c>
  406786:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40678a:	d0d3      	beq.n	406734 <__cmpdf2+0x1c>
  40678c:	f85d 0b04 	ldr.w	r0, [sp], #4
  406790:	4770      	bx	lr
  406792:	bf00      	nop

00406794 <__aeabi_cdrcmple>:
  406794:	4684      	mov	ip, r0
  406796:	4610      	mov	r0, r2
  406798:	4662      	mov	r2, ip
  40679a:	468c      	mov	ip, r1
  40679c:	4619      	mov	r1, r3
  40679e:	4663      	mov	r3, ip
  4067a0:	e000      	b.n	4067a4 <__aeabi_cdcmpeq>
  4067a2:	bf00      	nop

004067a4 <__aeabi_cdcmpeq>:
  4067a4:	b501      	push	{r0, lr}
  4067a6:	f7ff ffb7 	bl	406718 <__cmpdf2>
  4067aa:	2800      	cmp	r0, #0
  4067ac:	bf48      	it	mi
  4067ae:	f110 0f00 	cmnmi.w	r0, #0
  4067b2:	bd01      	pop	{r0, pc}

004067b4 <__aeabi_dcmpeq>:
  4067b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4067b8:	f7ff fff4 	bl	4067a4 <__aeabi_cdcmpeq>
  4067bc:	bf0c      	ite	eq
  4067be:	2001      	moveq	r0, #1
  4067c0:	2000      	movne	r0, #0
  4067c2:	f85d fb08 	ldr.w	pc, [sp], #8
  4067c6:	bf00      	nop

004067c8 <__aeabi_dcmplt>:
  4067c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4067cc:	f7ff ffea 	bl	4067a4 <__aeabi_cdcmpeq>
  4067d0:	bf34      	ite	cc
  4067d2:	2001      	movcc	r0, #1
  4067d4:	2000      	movcs	r0, #0
  4067d6:	f85d fb08 	ldr.w	pc, [sp], #8
  4067da:	bf00      	nop

004067dc <__aeabi_dcmple>:
  4067dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4067e0:	f7ff ffe0 	bl	4067a4 <__aeabi_cdcmpeq>
  4067e4:	bf94      	ite	ls
  4067e6:	2001      	movls	r0, #1
  4067e8:	2000      	movhi	r0, #0
  4067ea:	f85d fb08 	ldr.w	pc, [sp], #8
  4067ee:	bf00      	nop

004067f0 <__aeabi_dcmpge>:
  4067f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4067f4:	f7ff ffce 	bl	406794 <__aeabi_cdrcmple>
  4067f8:	bf94      	ite	ls
  4067fa:	2001      	movls	r0, #1
  4067fc:	2000      	movhi	r0, #0
  4067fe:	f85d fb08 	ldr.w	pc, [sp], #8
  406802:	bf00      	nop

00406804 <__aeabi_dcmpgt>:
  406804:	f84d ed08 	str.w	lr, [sp, #-8]!
  406808:	f7ff ffc4 	bl	406794 <__aeabi_cdrcmple>
  40680c:	bf34      	ite	cc
  40680e:	2001      	movcc	r0, #1
  406810:	2000      	movcs	r0, #0
  406812:	f85d fb08 	ldr.w	pc, [sp], #8
  406816:	bf00      	nop

00406818 <__aeabi_dcmpun>:
  406818:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40681c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406820:	d102      	bne.n	406828 <__aeabi_dcmpun+0x10>
  406822:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406826:	d10a      	bne.n	40683e <__aeabi_dcmpun+0x26>
  406828:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40682c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406830:	d102      	bne.n	406838 <__aeabi_dcmpun+0x20>
  406832:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406836:	d102      	bne.n	40683e <__aeabi_dcmpun+0x26>
  406838:	f04f 0000 	mov.w	r0, #0
  40683c:	4770      	bx	lr
  40683e:	f04f 0001 	mov.w	r0, #1
  406842:	4770      	bx	lr

00406844 <__aeabi_d2iz>:
  406844:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406848:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40684c:	d215      	bcs.n	40687a <__aeabi_d2iz+0x36>
  40684e:	d511      	bpl.n	406874 <__aeabi_d2iz+0x30>
  406850:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  406854:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  406858:	d912      	bls.n	406880 <__aeabi_d2iz+0x3c>
  40685a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40685e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  406862:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  406866:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40686a:	fa23 f002 	lsr.w	r0, r3, r2
  40686e:	bf18      	it	ne
  406870:	4240      	negne	r0, r0
  406872:	4770      	bx	lr
  406874:	f04f 0000 	mov.w	r0, #0
  406878:	4770      	bx	lr
  40687a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40687e:	d105      	bne.n	40688c <__aeabi_d2iz+0x48>
  406880:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  406884:	bf08      	it	eq
  406886:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40688a:	4770      	bx	lr
  40688c:	f04f 0000 	mov.w	r0, #0
  406890:	4770      	bx	lr
  406892:	bf00      	nop

00406894 <__aeabi_uldivmod>:
  406894:	b953      	cbnz	r3, 4068ac <__aeabi_uldivmod+0x18>
  406896:	b94a      	cbnz	r2, 4068ac <__aeabi_uldivmod+0x18>
  406898:	2900      	cmp	r1, #0
  40689a:	bf08      	it	eq
  40689c:	2800      	cmpeq	r0, #0
  40689e:	bf1c      	itt	ne
  4068a0:	f04f 31ff 	movne.w	r1, #4294967295
  4068a4:	f04f 30ff 	movne.w	r0, #4294967295
  4068a8:	f000 b97e 	b.w	406ba8 <__aeabi_idiv0>
  4068ac:	f1ad 0c08 	sub.w	ip, sp, #8
  4068b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4068b4:	f000 f806 	bl	4068c4 <__udivmoddi4>
  4068b8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4068bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4068c0:	b004      	add	sp, #16
  4068c2:	4770      	bx	lr

004068c4 <__udivmoddi4>:
  4068c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4068c8:	468c      	mov	ip, r1
  4068ca:	460e      	mov	r6, r1
  4068cc:	4604      	mov	r4, r0
  4068ce:	9d08      	ldr	r5, [sp, #32]
  4068d0:	2b00      	cmp	r3, #0
  4068d2:	d150      	bne.n	406976 <__udivmoddi4+0xb2>
  4068d4:	428a      	cmp	r2, r1
  4068d6:	4617      	mov	r7, r2
  4068d8:	d96c      	bls.n	4069b4 <__udivmoddi4+0xf0>
  4068da:	fab2 fe82 	clz	lr, r2
  4068de:	f1be 0f00 	cmp.w	lr, #0
  4068e2:	d00b      	beq.n	4068fc <__udivmoddi4+0x38>
  4068e4:	f1ce 0420 	rsb	r4, lr, #32
  4068e8:	fa20 f404 	lsr.w	r4, r0, r4
  4068ec:	fa01 f60e 	lsl.w	r6, r1, lr
  4068f0:	ea44 0c06 	orr.w	ip, r4, r6
  4068f4:	fa02 f70e 	lsl.w	r7, r2, lr
  4068f8:	fa00 f40e 	lsl.w	r4, r0, lr
  4068fc:	ea4f 4917 	mov.w	r9, r7, lsr #16
  406900:	0c22      	lsrs	r2, r4, #16
  406902:	fbbc f0f9 	udiv	r0, ip, r9
  406906:	fa1f f887 	uxth.w	r8, r7
  40690a:	fb09 c610 	mls	r6, r9, r0, ip
  40690e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  406912:	fb00 f308 	mul.w	r3, r0, r8
  406916:	42b3      	cmp	r3, r6
  406918:	d909      	bls.n	40692e <__udivmoddi4+0x6a>
  40691a:	19f6      	adds	r6, r6, r7
  40691c:	f100 32ff 	add.w	r2, r0, #4294967295
  406920:	f080 8122 	bcs.w	406b68 <__udivmoddi4+0x2a4>
  406924:	42b3      	cmp	r3, r6
  406926:	f240 811f 	bls.w	406b68 <__udivmoddi4+0x2a4>
  40692a:	3802      	subs	r0, #2
  40692c:	443e      	add	r6, r7
  40692e:	1af6      	subs	r6, r6, r3
  406930:	b2a2      	uxth	r2, r4
  406932:	fbb6 f3f9 	udiv	r3, r6, r9
  406936:	fb09 6613 	mls	r6, r9, r3, r6
  40693a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40693e:	fb03 f808 	mul.w	r8, r3, r8
  406942:	45a0      	cmp	r8, r4
  406944:	d909      	bls.n	40695a <__udivmoddi4+0x96>
  406946:	19e4      	adds	r4, r4, r7
  406948:	f103 32ff 	add.w	r2, r3, #4294967295
  40694c:	f080 810a 	bcs.w	406b64 <__udivmoddi4+0x2a0>
  406950:	45a0      	cmp	r8, r4
  406952:	f240 8107 	bls.w	406b64 <__udivmoddi4+0x2a0>
  406956:	3b02      	subs	r3, #2
  406958:	443c      	add	r4, r7
  40695a:	ebc8 0404 	rsb	r4, r8, r4
  40695e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  406962:	2100      	movs	r1, #0
  406964:	2d00      	cmp	r5, #0
  406966:	d062      	beq.n	406a2e <__udivmoddi4+0x16a>
  406968:	fa24 f40e 	lsr.w	r4, r4, lr
  40696c:	2300      	movs	r3, #0
  40696e:	602c      	str	r4, [r5, #0]
  406970:	606b      	str	r3, [r5, #4]
  406972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406976:	428b      	cmp	r3, r1
  406978:	d907      	bls.n	40698a <__udivmoddi4+0xc6>
  40697a:	2d00      	cmp	r5, #0
  40697c:	d055      	beq.n	406a2a <__udivmoddi4+0x166>
  40697e:	2100      	movs	r1, #0
  406980:	e885 0041 	stmia.w	r5, {r0, r6}
  406984:	4608      	mov	r0, r1
  406986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40698a:	fab3 f183 	clz	r1, r3
  40698e:	2900      	cmp	r1, #0
  406990:	f040 8090 	bne.w	406ab4 <__udivmoddi4+0x1f0>
  406994:	42b3      	cmp	r3, r6
  406996:	d302      	bcc.n	40699e <__udivmoddi4+0xda>
  406998:	4282      	cmp	r2, r0
  40699a:	f200 80f8 	bhi.w	406b8e <__udivmoddi4+0x2ca>
  40699e:	1a84      	subs	r4, r0, r2
  4069a0:	eb66 0603 	sbc.w	r6, r6, r3
  4069a4:	2001      	movs	r0, #1
  4069a6:	46b4      	mov	ip, r6
  4069a8:	2d00      	cmp	r5, #0
  4069aa:	d040      	beq.n	406a2e <__udivmoddi4+0x16a>
  4069ac:	e885 1010 	stmia.w	r5, {r4, ip}
  4069b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4069b4:	b912      	cbnz	r2, 4069bc <__udivmoddi4+0xf8>
  4069b6:	2701      	movs	r7, #1
  4069b8:	fbb7 f7f2 	udiv	r7, r7, r2
  4069bc:	fab7 fe87 	clz	lr, r7
  4069c0:	f1be 0f00 	cmp.w	lr, #0
  4069c4:	d135      	bne.n	406a32 <__udivmoddi4+0x16e>
  4069c6:	1bf3      	subs	r3, r6, r7
  4069c8:	ea4f 4817 	mov.w	r8, r7, lsr #16
  4069cc:	fa1f fc87 	uxth.w	ip, r7
  4069d0:	2101      	movs	r1, #1
  4069d2:	fbb3 f0f8 	udiv	r0, r3, r8
  4069d6:	0c22      	lsrs	r2, r4, #16
  4069d8:	fb08 3610 	mls	r6, r8, r0, r3
  4069dc:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4069e0:	fb0c f300 	mul.w	r3, ip, r0
  4069e4:	42b3      	cmp	r3, r6
  4069e6:	d907      	bls.n	4069f8 <__udivmoddi4+0x134>
  4069e8:	19f6      	adds	r6, r6, r7
  4069ea:	f100 32ff 	add.w	r2, r0, #4294967295
  4069ee:	d202      	bcs.n	4069f6 <__udivmoddi4+0x132>
  4069f0:	42b3      	cmp	r3, r6
  4069f2:	f200 80ce 	bhi.w	406b92 <__udivmoddi4+0x2ce>
  4069f6:	4610      	mov	r0, r2
  4069f8:	1af6      	subs	r6, r6, r3
  4069fa:	b2a2      	uxth	r2, r4
  4069fc:	fbb6 f3f8 	udiv	r3, r6, r8
  406a00:	fb08 6613 	mls	r6, r8, r3, r6
  406a04:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  406a08:	fb0c fc03 	mul.w	ip, ip, r3
  406a0c:	45a4      	cmp	ip, r4
  406a0e:	d907      	bls.n	406a20 <__udivmoddi4+0x15c>
  406a10:	19e4      	adds	r4, r4, r7
  406a12:	f103 32ff 	add.w	r2, r3, #4294967295
  406a16:	d202      	bcs.n	406a1e <__udivmoddi4+0x15a>
  406a18:	45a4      	cmp	ip, r4
  406a1a:	f200 80b5 	bhi.w	406b88 <__udivmoddi4+0x2c4>
  406a1e:	4613      	mov	r3, r2
  406a20:	ebcc 0404 	rsb	r4, ip, r4
  406a24:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  406a28:	e79c      	b.n	406964 <__udivmoddi4+0xa0>
  406a2a:	4629      	mov	r1, r5
  406a2c:	4628      	mov	r0, r5
  406a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406a32:	f1ce 0120 	rsb	r1, lr, #32
  406a36:	fa06 f30e 	lsl.w	r3, r6, lr
  406a3a:	fa07 f70e 	lsl.w	r7, r7, lr
  406a3e:	fa20 f901 	lsr.w	r9, r0, r1
  406a42:	ea4f 4817 	mov.w	r8, r7, lsr #16
  406a46:	40ce      	lsrs	r6, r1
  406a48:	ea49 0903 	orr.w	r9, r9, r3
  406a4c:	fbb6 faf8 	udiv	sl, r6, r8
  406a50:	ea4f 4419 	mov.w	r4, r9, lsr #16
  406a54:	fb08 661a 	mls	r6, r8, sl, r6
  406a58:	fa1f fc87 	uxth.w	ip, r7
  406a5c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  406a60:	fb0a f20c 	mul.w	r2, sl, ip
  406a64:	429a      	cmp	r2, r3
  406a66:	fa00 f40e 	lsl.w	r4, r0, lr
  406a6a:	d90a      	bls.n	406a82 <__udivmoddi4+0x1be>
  406a6c:	19db      	adds	r3, r3, r7
  406a6e:	f10a 31ff 	add.w	r1, sl, #4294967295
  406a72:	f080 8087 	bcs.w	406b84 <__udivmoddi4+0x2c0>
  406a76:	429a      	cmp	r2, r3
  406a78:	f240 8084 	bls.w	406b84 <__udivmoddi4+0x2c0>
  406a7c:	f1aa 0a02 	sub.w	sl, sl, #2
  406a80:	443b      	add	r3, r7
  406a82:	1a9b      	subs	r3, r3, r2
  406a84:	fa1f f989 	uxth.w	r9, r9
  406a88:	fbb3 f1f8 	udiv	r1, r3, r8
  406a8c:	fb08 3311 	mls	r3, r8, r1, r3
  406a90:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  406a94:	fb01 f60c 	mul.w	r6, r1, ip
  406a98:	429e      	cmp	r6, r3
  406a9a:	d907      	bls.n	406aac <__udivmoddi4+0x1e8>
  406a9c:	19db      	adds	r3, r3, r7
  406a9e:	f101 32ff 	add.w	r2, r1, #4294967295
  406aa2:	d26b      	bcs.n	406b7c <__udivmoddi4+0x2b8>
  406aa4:	429e      	cmp	r6, r3
  406aa6:	d969      	bls.n	406b7c <__udivmoddi4+0x2b8>
  406aa8:	3902      	subs	r1, #2
  406aaa:	443b      	add	r3, r7
  406aac:	1b9b      	subs	r3, r3, r6
  406aae:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  406ab2:	e78e      	b.n	4069d2 <__udivmoddi4+0x10e>
  406ab4:	f1c1 0e20 	rsb	lr, r1, #32
  406ab8:	fa22 f40e 	lsr.w	r4, r2, lr
  406abc:	408b      	lsls	r3, r1
  406abe:	4323      	orrs	r3, r4
  406ac0:	fa20 f70e 	lsr.w	r7, r0, lr
  406ac4:	fa06 f401 	lsl.w	r4, r6, r1
  406ac8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406acc:	fa26 f60e 	lsr.w	r6, r6, lr
  406ad0:	433c      	orrs	r4, r7
  406ad2:	fbb6 f9fc 	udiv	r9, r6, ip
  406ad6:	0c27      	lsrs	r7, r4, #16
  406ad8:	fb0c 6619 	mls	r6, ip, r9, r6
  406adc:	fa1f f883 	uxth.w	r8, r3
  406ae0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  406ae4:	fb09 f708 	mul.w	r7, r9, r8
  406ae8:	42b7      	cmp	r7, r6
  406aea:	fa02 f201 	lsl.w	r2, r2, r1
  406aee:	fa00 fa01 	lsl.w	sl, r0, r1
  406af2:	d908      	bls.n	406b06 <__udivmoddi4+0x242>
  406af4:	18f6      	adds	r6, r6, r3
  406af6:	f109 30ff 	add.w	r0, r9, #4294967295
  406afa:	d241      	bcs.n	406b80 <__udivmoddi4+0x2bc>
  406afc:	42b7      	cmp	r7, r6
  406afe:	d93f      	bls.n	406b80 <__udivmoddi4+0x2bc>
  406b00:	f1a9 0902 	sub.w	r9, r9, #2
  406b04:	441e      	add	r6, r3
  406b06:	1bf6      	subs	r6, r6, r7
  406b08:	b2a0      	uxth	r0, r4
  406b0a:	fbb6 f4fc 	udiv	r4, r6, ip
  406b0e:	fb0c 6614 	mls	r6, ip, r4, r6
  406b12:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  406b16:	fb04 f808 	mul.w	r8, r4, r8
  406b1a:	45b8      	cmp	r8, r7
  406b1c:	d907      	bls.n	406b2e <__udivmoddi4+0x26a>
  406b1e:	18ff      	adds	r7, r7, r3
  406b20:	f104 30ff 	add.w	r0, r4, #4294967295
  406b24:	d228      	bcs.n	406b78 <__udivmoddi4+0x2b4>
  406b26:	45b8      	cmp	r8, r7
  406b28:	d926      	bls.n	406b78 <__udivmoddi4+0x2b4>
  406b2a:	3c02      	subs	r4, #2
  406b2c:	441f      	add	r7, r3
  406b2e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  406b32:	ebc8 0707 	rsb	r7, r8, r7
  406b36:	fba0 8902 	umull	r8, r9, r0, r2
  406b3a:	454f      	cmp	r7, r9
  406b3c:	4644      	mov	r4, r8
  406b3e:	464e      	mov	r6, r9
  406b40:	d314      	bcc.n	406b6c <__udivmoddi4+0x2a8>
  406b42:	d029      	beq.n	406b98 <__udivmoddi4+0x2d4>
  406b44:	b365      	cbz	r5, 406ba0 <__udivmoddi4+0x2dc>
  406b46:	ebba 0304 	subs.w	r3, sl, r4
  406b4a:	eb67 0706 	sbc.w	r7, r7, r6
  406b4e:	fa07 fe0e 	lsl.w	lr, r7, lr
  406b52:	40cb      	lsrs	r3, r1
  406b54:	40cf      	lsrs	r7, r1
  406b56:	ea4e 0303 	orr.w	r3, lr, r3
  406b5a:	e885 0088 	stmia.w	r5, {r3, r7}
  406b5e:	2100      	movs	r1, #0
  406b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406b64:	4613      	mov	r3, r2
  406b66:	e6f8      	b.n	40695a <__udivmoddi4+0x96>
  406b68:	4610      	mov	r0, r2
  406b6a:	e6e0      	b.n	40692e <__udivmoddi4+0x6a>
  406b6c:	ebb8 0402 	subs.w	r4, r8, r2
  406b70:	eb69 0603 	sbc.w	r6, r9, r3
  406b74:	3801      	subs	r0, #1
  406b76:	e7e5      	b.n	406b44 <__udivmoddi4+0x280>
  406b78:	4604      	mov	r4, r0
  406b7a:	e7d8      	b.n	406b2e <__udivmoddi4+0x26a>
  406b7c:	4611      	mov	r1, r2
  406b7e:	e795      	b.n	406aac <__udivmoddi4+0x1e8>
  406b80:	4681      	mov	r9, r0
  406b82:	e7c0      	b.n	406b06 <__udivmoddi4+0x242>
  406b84:	468a      	mov	sl, r1
  406b86:	e77c      	b.n	406a82 <__udivmoddi4+0x1be>
  406b88:	3b02      	subs	r3, #2
  406b8a:	443c      	add	r4, r7
  406b8c:	e748      	b.n	406a20 <__udivmoddi4+0x15c>
  406b8e:	4608      	mov	r0, r1
  406b90:	e70a      	b.n	4069a8 <__udivmoddi4+0xe4>
  406b92:	3802      	subs	r0, #2
  406b94:	443e      	add	r6, r7
  406b96:	e72f      	b.n	4069f8 <__udivmoddi4+0x134>
  406b98:	45c2      	cmp	sl, r8
  406b9a:	d3e7      	bcc.n	406b6c <__udivmoddi4+0x2a8>
  406b9c:	463e      	mov	r6, r7
  406b9e:	e7d1      	b.n	406b44 <__udivmoddi4+0x280>
  406ba0:	4629      	mov	r1, r5
  406ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406ba6:	bf00      	nop

00406ba8 <__aeabi_idiv0>:
  406ba8:	4770      	bx	lr
  406baa:	bf00      	nop
  406bac:	756e654d 	.word	0x756e654d
  406bb0:	2d6d203a 	.word	0x2d6d203a
  406bb4:	61706120 	.word	0x61706120
  406bb8:	65636572 	.word	0x65636572
  406bbc:	6e656d20 	.word	0x6e656d20
  406bc0:	200a2075 	.word	0x200a2075
  406bc4:	69702d6c 	.word	0x69702d6c
  406bc8:	20616373 	.word	0x20616373
  406bcc:	2064656c 	.word	0x2064656c
  406bd0:	2d74200a 	.word	0x2d74200a
  406bd4:	6820656c 	.word	0x6820656c
  406bd8:	2061726f 	.word	0x2061726f
  406bdc:	61757461 	.word	0x61757461
  406be0:	200a206c 	.word	0x200a206c
  406be4:	64202d6f 	.word	0x64202d6f
  406be8:	696c7365 	.word	0x696c7365
  406bec:	6c206167 	.word	0x6c206167
  406bf0:	0a206465 	.word	0x0a206465
  406bf4:	2d206120 	.word	0x2d206120
  406bf8:	6d756120 	.word	0x6d756120
  406bfc:	61746e65 	.word	0x61746e65
  406c00:	65726620 	.word	0x65726620
  406c04:	aac37571 	.word	0xaac37571
  406c08:	6169636e 	.word	0x6169636e
  406c0c:	64200a20 	.word	0x64200a20
  406c10:	44202d20 	.word	0x44202d20
  406c14:	6e696d69 	.word	0x6e696d69
  406c18:	46206975 	.word	0x46206975
  406c1c:	75716572 	.word	0x75716572
  406c20:	636eaac3 	.word	0x636eaac3
  406c24:	0a206169 	.word	0x0a206169
  406c28:	2d206820 	.word	0x2d206820
  406c2c:	736f6d20 	.word	0x736f6d20
  406c30:	20617274 	.word	0x20617274
  406c34:	6f682061 	.word	0x6f682061
  406c38:	20096172 	.word	0x20096172
  406c3c:	00000a20 	.word	0x00000a20
  406c40:	65686c4f 	.word	0x65686c4f
  406c44:	204f2021 	.word	0x204f2021
  406c48:	2044454c 	.word	0x2044454c
  406c4c:	63736970 	.word	0x63736970
  406c50:	21212161 	.word	0x21212161
  406c54:	00000a20 	.word	0x00000a20
  406c58:	6f726150 	.word	0x6f726150
  406c5c:	65642075 	.word	0x65642075
  406c60:	73695020 	.word	0x73695020
  406c64:	20726163 	.word	0x20726163
  406c68:	0000210a 	.word	0x0000210a
  406c6c:	656d7541 	.word	0x656d7541
  406c70:	2061746e 	.word	0x2061746e
  406c74:	71657246 	.word	0x71657246
  406c78:	00210a20 	.word	0x00210a20
  406c7c:	696d6944 	.word	0x696d6944
  406c80:	2069756e 	.word	0x2069756e
  406c84:	71657246 	.word	0x71657246
  406c88:	00210a20 	.word	0x00210a20
  406c8c:	3a206425 	.word	0x3a206425
  406c90:	20642520 	.word	0x20642520
  406c94:	6425203a 	.word	0x6425203a
  406c98:	00000a20 	.word	0x00000a20
  406c9c:	00000043 	.word	0x00000043

00406ca0 <_global_impure_ptr>:
  406ca0:	20400008                                ..@ 

00406ca4 <zeroes.7035>:
  406ca4:	30303030 30303030 30303030 30303030     0000000000000000
  406cb4:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  406cc4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  406cd4:	00000000 33323130 37363534 62613938     ....0123456789ab
  406ce4:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  406cf4:	00000030                                0...

00406cf8 <blanks.7034>:
  406cf8:	20202020 20202020 20202020 20202020                     
  406d08:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  406d18:	49534f50 00000058 0000002e 00000000     POSIX...........

00406d28 <__mprec_tens>:
  406d28:	00000000 3ff00000 00000000 40240000     .......?......$@
  406d38:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  406d48:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  406d58:	00000000 412e8480 00000000 416312d0     .......A......cA
  406d68:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  406d78:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  406d88:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  406d98:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  406da8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  406db8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  406dc8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  406dd8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  406de8:	79d99db4 44ea7843                       ...yCx.D

00406df0 <__mprec_bigtens>:
  406df0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  406e00:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  406e10:	7f73bf3c 75154fdd                       <.s..O.u

00406e18 <p05.5373>:
  406e18:	00000005 00000019 0000007d              ........}...

00406e24 <_init>:
  406e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406e26:	bf00      	nop
  406e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406e2a:	bc08      	pop	{r3}
  406e2c:	469e      	mov	lr, r3
  406e2e:	4770      	bx	lr

00406e30 <__init_array_start>:
  406e30:	00403801 	.word	0x00403801

00406e34 <__frame_dummy_init_array_entry>:
  406e34:	00400165                                e.@.

00406e38 <_fini>:
  406e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406e3a:	bf00      	nop
  406e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406e3e:	bc08      	pop	{r3}
  406e40:	469e      	mov	lr, r3
  406e42:	4770      	bx	lr

00406e44 <__fini_array_start>:
  406e44:	00400141 	.word	0x00400141
