
WIFI-simpleGet-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c318  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040c318  0040c318  0001c318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008c0  20400000  0040c320  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000760  204008c0  0040cbe0  000208c0  2**2
                  ALLOC
  4 .stack        00002000  20401020  0040d340  000208c0  2**0
                  ALLOC
  5 .heap         00000200  20403020  0040f340  000208c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000208c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000208ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001c459  00000000  00000000  00020947  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004062  00000000  00000000  0003cda0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000e1a9  00000000  00000000  00040e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001140  00000000  00000000  0004efab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001160  00000000  00000000  000500eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024a10  00000000  00000000  0005124b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00015e5a  00000000  00000000  00075c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00091e0f  00000000  00000000  0008bab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003e70  00000000  00000000  0011d8c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20403020 	.word	0x20403020
  400004:	00403719 	.word	0x00403719
  400008:	00403715 	.word	0x00403715
  40000c:	00403715 	.word	0x00403715
  400010:	00403715 	.word	0x00403715
  400014:	00403715 	.word	0x00403715
  400018:	00403715 	.word	0x00403715
	...
  40002c:	00403715 	.word	0x00403715
  400030:	00403715 	.word	0x00403715
  400034:	00000000 	.word	0x00000000
  400038:	00403715 	.word	0x00403715
  40003c:	00403715 	.word	0x00403715
  400040:	00403715 	.word	0x00403715
  400044:	00403715 	.word	0x00403715
  400048:	00403715 	.word	0x00403715
  40004c:	00403715 	.word	0x00403715
  400050:	00403715 	.word	0x00403715
  400054:	00403715 	.word	0x00403715
  400058:	00403715 	.word	0x00403715
  40005c:	00403715 	.word	0x00403715
  400060:	00403715 	.word	0x00403715
  400064:	00000000 	.word	0x00000000
  400068:	004031fd 	.word	0x004031fd
  40006c:	00403211 	.word	0x00403211
  400070:	00403225 	.word	0x00403225
  400074:	00403715 	.word	0x00403715
  400078:	00403715 	.word	0x00403715
  40007c:	00403715 	.word	0x00403715
  400080:	00403239 	.word	0x00403239
  400084:	0040324d 	.word	0x0040324d
  400088:	00403715 	.word	0x00403715
  40008c:	00403715 	.word	0x00403715
  400090:	00403715 	.word	0x00403715
  400094:	00403715 	.word	0x00403715
  400098:	00403715 	.word	0x00403715
  40009c:	00403715 	.word	0x00403715
  4000a0:	00403e11 	.word	0x00403e11
  4000a4:	00403715 	.word	0x00403715
  4000a8:	00403715 	.word	0x00403715
  4000ac:	00403715 	.word	0x00403715
  4000b0:	00403715 	.word	0x00403715
  4000b4:	00403715 	.word	0x00403715
  4000b8:	00403715 	.word	0x00403715
  4000bc:	00403715 	.word	0x00403715
  4000c0:	00403715 	.word	0x00403715
  4000c4:	00403715 	.word	0x00403715
  4000c8:	00403715 	.word	0x00403715
  4000cc:	00403715 	.word	0x00403715
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00403715 	.word	0x00403715
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00403715 	.word	0x00403715
  4000e0:	00403715 	.word	0x00403715
  4000e4:	00403715 	.word	0x00403715
  4000e8:	00403715 	.word	0x00403715
  4000ec:	00403715 	.word	0x00403715
  4000f0:	00403715 	.word	0x00403715
  4000f4:	00403715 	.word	0x00403715
  4000f8:	00403715 	.word	0x00403715
  4000fc:	00403715 	.word	0x00403715
  400100:	00403715 	.word	0x00403715
  400104:	00403715 	.word	0x00403715
  400108:	00403715 	.word	0x00403715
  40010c:	00403715 	.word	0x00403715
  400110:	00403715 	.word	0x00403715
	...
  400120:	00403715 	.word	0x00403715
  400124:	00403715 	.word	0x00403715
  400128:	00403715 	.word	0x00403715
  40012c:	00403715 	.word	0x00403715
  400130:	00403715 	.word	0x00403715
  400134:	00000000 	.word	0x00000000
  400138:	00403715 	.word	0x00403715
  40013c:	00403715 	.word	0x00403715

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008c0 	.word	0x204008c0
  40015c:	00000000 	.word	0x00000000
  400160:	0040c320 	.word	0x0040c320

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	204008c4 	.word	0x204008c4
  400190:	0040c320 	.word	0x0040c320
  400194:	0040c320 	.word	0x0040c320
  400198:	00000000 	.word	0x00000000

0040019c <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  40019c:	2810      	cmp	r0, #16
  40019e:	d108      	bne.n	4001b2 <chip_isr+0x16>
  4001a0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4001a4:	d105      	bne.n	4001b2 <chip_isr+0x16>
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
  4001a6:	b508      	push	{r3, lr}
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
		if (gpfIsr) {
  4001a8:	4b02      	ldr	r3, [pc, #8]	; (4001b4 <chip_isr+0x18>)
  4001aa:	681b      	ldr	r3, [r3, #0]
  4001ac:	b103      	cbz	r3, 4001b0 <chip_isr+0x14>
			gpfIsr();
  4001ae:	4798      	blx	r3
  4001b0:	bd08      	pop	{r3, pc}
  4001b2:	4770      	bx	lr
  4001b4:	204008dc 	.word	0x204008dc

004001b8 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4001b8:	b140      	cbz	r0, 4001cc <nm_bsp_sleep+0x14>
*	@brief	Sleep in units of mSec
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
  4001ba:	b570      	push	{r4, r5, r6, lr}
  4001bc:	4604      	mov	r4, r0
	while(u32TimeMsec--) {
		delay_ms(4);
  4001be:	4e04      	ldr	r6, [pc, #16]	; (4001d0 <nm_bsp_sleep+0x18>)
  4001c0:	4d04      	ldr	r5, [pc, #16]	; (4001d4 <nm_bsp_sleep+0x1c>)
  4001c2:	4630      	mov	r0, r6
  4001c4:	47a8      	blx	r5
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4001c6:	3c01      	subs	r4, #1
  4001c8:	d1fb      	bne.n	4001c2 <nm_bsp_sleep+0xa>
  4001ca:	bd70      	pop	{r4, r5, r6, pc}
  4001cc:	4770      	bx	lr
  4001ce:	bf00      	nop
  4001d0:	00031635 	.word	0x00031635
  4001d4:	20400001 	.word	0x20400001

004001d8 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset WINC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
  4001d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4001dc:	4f09      	ldr	r7, [pc, #36]	; (400204 <nm_bsp_reset+0x2c>)
  4001de:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  4001e2:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  4001e6:	4d08      	ldr	r5, [pc, #32]	; (400208 <nm_bsp_reset+0x30>)
  4001e8:	2608      	movs	r6, #8
  4001ea:	636e      	str	r6, [r5, #52]	; 0x34
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_LOW);
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_LOW);
	nm_bsp_sleep(100);
  4001ec:	2064      	movs	r0, #100	; 0x64
  4001ee:	4c07      	ldr	r4, [pc, #28]	; (40020c <nm_bsp_reset+0x34>)
  4001f0:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4001f2:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_HIGH);
	nm_bsp_sleep(100);
  4001f6:	2064      	movs	r0, #100	; 0x64
  4001f8:	47a0      	blx	r4
  4001fa:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
	nm_bsp_sleep(100);
  4001fc:	2064      	movs	r0, #100	; 0x64
  4001fe:	47a0      	blx	r4
  400200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400204:	400e1200 	.word	0x400e1200
  400208:	400e1000 	.word	0x400e1000
  40020c:	004001b9 	.word	0x004001b9

00400210 <nm_bsp_init>:
*	@fn		nm_bsp_init
*	@brief	Initialize BSP
*	@return	0 in case of success and -1 in case of failure
*/
sint8 nm_bsp_init(void)
{
  400210:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  400212:	2200      	movs	r2, #0
  400214:	4b14      	ldr	r3, [pc, #80]	; (400268 <nm_bsp_init+0x58>)
  400216:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400218:	200a      	movs	r0, #10
  40021a:	4c14      	ldr	r4, [pc, #80]	; (40026c <nm_bsp_init+0x5c>)
  40021c:	47a0      	blx	r4
  40021e:	200b      	movs	r0, #11
  400220:	47a0      	blx	r4
  400222:	200c      	movs	r0, #12
  400224:	47a0      	blx	r4
  400226:	2010      	movs	r0, #16
  400228:	47a0      	blx	r4
  40022a:	2011      	movs	r0, #17
  40022c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40022e:	4b10      	ldr	r3, [pc, #64]	; (400270 <nm_bsp_init+0x60>)
  400230:	2208      	movs	r2, #8
  400232:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400234:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400238:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40023a:	4a0e      	ldr	r2, [pc, #56]	; (400274 <nm_bsp_init+0x64>)
  40023c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400240:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400242:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400246:	6311      	str	r1, [r2, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400248:	2204      	movs	r2, #4
  40024a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40024c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400250:	631a      	str	r2, [r3, #48]	; 0x30

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  400252:	4b09      	ldr	r3, [pc, #36]	; (400278 <nm_bsp_init+0x68>)
  400254:	681b      	ldr	r3, [r3, #0]
  400256:	f013 0f01 	tst.w	r3, #1
  40025a:	d001      	beq.n	400260 <nm_bsp_init+0x50>
  40025c:	4b06      	ldr	r3, [pc, #24]	; (400278 <nm_bsp_init+0x68>)
  40025e:	681b      	ldr	r3, [r3, #0]
	    delay_init();
    }

	/* Perform chip reset. */
	nm_bsp_reset();
  400260:	4b06      	ldr	r3, [pc, #24]	; (40027c <nm_bsp_init+0x6c>)
  400262:	4798      	blx	r3

	return 0;
}
  400264:	2000      	movs	r0, #0
  400266:	bd10      	pop	{r4, pc}
  400268:	204008dc 	.word	0x204008dc
  40026c:	0040340d 	.word	0x0040340d
  400270:	400e1000 	.word	0x400e1000
  400274:	400e1200 	.word	0x400e1200
  400278:	e000e010 	.word	0xe000e010
  40027c:	004001d9 	.word	0x004001d9

00400280 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  400280:	b530      	push	{r4, r5, lr}
  400282:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  400284:	4b14      	ldr	r3, [pc, #80]	; (4002d8 <nm_bsp_register_isr+0x58>)
  400286:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  400288:	2010      	movs	r0, #16
  40028a:	4b14      	ldr	r3, [pc, #80]	; (4002dc <nm_bsp_register_isr+0x5c>)
  40028c:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  40028e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400292:	207c      	movs	r0, #124	; 0x7c
  400294:	4b12      	ldr	r3, [pc, #72]	; (4002e0 <nm_bsp_register_isr+0x60>)
  400296:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  400298:	4c12      	ldr	r4, [pc, #72]	; (4002e4 <nm_bsp_register_isr+0x64>)
  40029a:	2201      	movs	r2, #1
  40029c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4002a0:	4620      	mov	r0, r4
  4002a2:	4b11      	ldr	r3, [pc, #68]	; (4002e8 <nm_bsp_register_isr+0x68>)
  4002a4:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  4002a6:	4b11      	ldr	r3, [pc, #68]	; (4002ec <nm_bsp_register_isr+0x6c>)
  4002a8:	9300      	str	r3, [sp, #0]
  4002aa:	2351      	movs	r3, #81	; 0x51
  4002ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4002b0:	2110      	movs	r1, #16
  4002b2:	4620      	mov	r0, r4
  4002b4:	4d0e      	ldr	r5, [pc, #56]	; (4002f0 <nm_bsp_register_isr+0x70>)
  4002b6:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4002b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4002bc:	4620      	mov	r0, r4
  4002be:	4b0d      	ldr	r3, [pc, #52]	; (4002f4 <nm_bsp_register_isr+0x74>)
  4002c0:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4002c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4002c6:	4b0c      	ldr	r3, [pc, #48]	; (4002f8 <nm_bsp_register_isr+0x78>)
  4002c8:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  4002ca:	2200      	movs	r2, #0
  4002cc:	2110      	movs	r1, #16
  4002ce:	4620      	mov	r0, r4
  4002d0:	4b0a      	ldr	r3, [pc, #40]	; (4002fc <nm_bsp_register_isr+0x7c>)
  4002d2:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  4002d4:	b003      	add	sp, #12
  4002d6:	bd30      	pop	{r4, r5, pc}
  4002d8:	204008dc 	.word	0x204008dc
  4002dc:	0040340d 	.word	0x0040340d
  4002e0:	0040300d 	.word	0x0040300d
  4002e4:	400e1400 	.word	0x400e1400
  4002e8:	00402ec9 	.word	0x00402ec9
  4002ec:	0040019d 	.word	0x0040019d
  4002f0:	00403191 	.word	0x00403191
  4002f4:	00402ffd 	.word	0x00402ffd
  4002f8:	e000e100 	.word	0xe000e100
  4002fc:	00403261 	.word	0x00403261

00400300 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  400300:	b508      	push	{r3, lr}
	if (u8Enable) {
  400302:	b128      	cbz	r0, 400310 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400304:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400308:	4804      	ldr	r0, [pc, #16]	; (40031c <nm_bsp_interrupt_ctrl+0x1c>)
  40030a:	4b05      	ldr	r3, [pc, #20]	; (400320 <nm_bsp_interrupt_ctrl+0x20>)
  40030c:	4798      	blx	r3
  40030e:	bd08      	pop	{r3, pc}
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400310:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400314:	4801      	ldr	r0, [pc, #4]	; (40031c <nm_bsp_interrupt_ctrl+0x1c>)
  400316:	4b03      	ldr	r3, [pc, #12]	; (400324 <nm_bsp_interrupt_ctrl+0x24>)
  400318:	4798      	blx	r3
  40031a:	bd08      	pop	{r3, pc}
  40031c:	400e1400 	.word	0x400e1400
  400320:	00402ffd 	.word	0x00402ffd
  400324:	00403001 	.word	0x00403001

00400328 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  400328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40032a:	4c39      	ldr	r4, [pc, #228]	; (400410 <nm_bus_init+0xe8>)
  40032c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400330:	6621      	str	r1, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400332:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400336:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400338:	6261      	str	r1, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40033a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40033e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400340:	430b      	orrs	r3, r1
  400342:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400344:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400346:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  40034a:	6763      	str	r3, [r4, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40034c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400350:	6622      	str	r2, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400352:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400356:	6562      	str	r2, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400358:	6262      	str	r2, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40035a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40035e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400360:	4313      	orrs	r3, r2
  400362:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400364:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400366:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  40036a:	6763      	str	r3, [r4, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40036c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  400370:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400372:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400376:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400378:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40037a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40037e:	6f20      	ldr	r0, [r4, #112]	; 0x70
  400380:	4318      	orrs	r0, r3
  400382:	6720      	str	r0, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400384:	6f60      	ldr	r0, [r4, #116]	; 0x74
  400386:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  40038a:	6760      	str	r0, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40038c:	6061      	str	r1, [r4, #4]
  40038e:	6062      	str	r2, [r4, #4]
  400390:	6063      	str	r3, [r4, #4]
  400392:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  400396:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  400398:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  40039a:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  40039c:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  40039e:	4d1d      	ldr	r5, [pc, #116]	; (400414 <nm_bus_init+0xec>)
  4003a0:	4628      	mov	r0, r5
  4003a2:	4b1d      	ldr	r3, [pc, #116]	; (400418 <nm_bus_init+0xf0>)
  4003a4:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4003a6:	2302      	movs	r3, #2
  4003a8:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4003aa:	2380      	movs	r3, #128	; 0x80
  4003ac:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4003ae:	686b      	ldr	r3, [r5, #4]
  4003b0:	f043 0301 	orr.w	r3, r3, #1
  4003b4:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4003b6:	686b      	ldr	r3, [r5, #4]
  4003b8:	f043 0310 	orr.w	r3, r3, #16
  4003bc:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  4003be:	2101      	movs	r1, #1
  4003c0:	4628      	mov	r0, r5
  4003c2:	4b16      	ldr	r3, [pc, #88]	; (40041c <nm_bus_init+0xf4>)
  4003c4:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  4003c6:	2200      	movs	r2, #0
  4003c8:	2101      	movs	r1, #1
  4003ca:	4628      	mov	r0, r5
  4003cc:	4b14      	ldr	r3, [pc, #80]	; (400420 <nm_bus_init+0xf8>)
  4003ce:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  4003d0:	2201      	movs	r2, #1
  4003d2:	4611      	mov	r1, r2
  4003d4:	4628      	mov	r0, r5
  4003d6:	4b13      	ldr	r3, [pc, #76]	; (400424 <nm_bus_init+0xfc>)
  4003d8:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  4003da:	2200      	movs	r2, #0
  4003dc:	2101      	movs	r1, #1
  4003de:	4628      	mov	r0, r5
  4003e0:	4b11      	ldr	r3, [pc, #68]	; (400428 <nm_bus_init+0x100>)
  4003e2:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  4003e4:	4911      	ldr	r1, [pc, #68]	; (40042c <nm_bus_init+0x104>)
  4003e6:	4812      	ldr	r0, [pc, #72]	; (400430 <nm_bus_init+0x108>)
  4003e8:	4b12      	ldr	r3, [pc, #72]	; (400434 <nm_bus_init+0x10c>)
  4003ea:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
	spi_set_clock_polarity(CONF_WINC_SPI,
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  4003ec:	b2c2      	uxtb	r2, r0
  4003ee:	2101      	movs	r1, #1
  4003f0:	4628      	mov	r0, r5
  4003f2:	4b11      	ldr	r3, [pc, #68]	; (400438 <nm_bus_init+0x110>)
  4003f4:	4798      	blx	r3
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  4003f6:	2300      	movs	r3, #0
  4003f8:	461a      	mov	r2, r3
  4003fa:	2101      	movs	r1, #1
  4003fc:	4628      	mov	r0, r5
  4003fe:	4f0f      	ldr	r7, [pc, #60]	; (40043c <nm_bus_init+0x114>)
  400400:	47b8      	blx	r7
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400402:	2301      	movs	r3, #1
  400404:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  400406:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  400408:	4b0d      	ldr	r3, [pc, #52]	; (400440 <nm_bus_init+0x118>)
  40040a:	4798      	blx	r3
#endif
	return result;
}
  40040c:	2000      	movs	r0, #0
  40040e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400410:	400e1400 	.word	0x400e1400
  400414:	40008000 	.word	0x40008000
  400418:	00403461 	.word	0x00403461
  40041c:	0040348d 	.word	0x0040348d
  400420:	00403511 	.word	0x00403511
  400424:	00403531 	.word	0x00403531
  400428:	00403551 	.word	0x00403551
  40042c:	11e1a300 	.word	0x11e1a300
  400430:	02dc6c00 	.word	0x02dc6c00
  400434:	00403565 	.word	0x00403565
  400438:	0040357d 	.word	0x0040357d
  40043c:	004035a9 	.word	0x004035a9
  400440:	004001d9 	.word	0x004001d9

00400444 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  400444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400448:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  40044a:	2803      	cmp	r0, #3
  40044c:	d141      	bne.n	4004d2 <nm_bus_ioctl+0x8e>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  40044e:	680e      	ldr	r6, [r1, #0]
  400450:	684d      	ldr	r5, [r1, #4]
  400452:	890c      	ldrh	r4, [r1, #8]
	uint16 cpu16Sz		= u16Sz;
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
  400454:	2300      	movs	r3, #0
  400456:	f88d 3004 	strb.w	r3, [sp, #4]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;
  40045a:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint8_t uc_pcs;

	if (!pu8Mosi) {
  40045e:	b136      	cbz	r6, 40046e <nm_bus_ioctl+0x2a>
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
  400460:	2d00      	cmp	r5, #0
  400462:	d133      	bne.n	4004cc <nm_bus_ioctl+0x88>
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
  400464:	f04f 0801 	mov.w	r8, #1
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  400468:	4699      	mov	r9, r3
	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
  40046a:	ad01      	add	r5, sp, #4
  40046c:	e004      	b.n	400478 <nm_bus_ioctl+0x34>
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  40046e:	f04f 0800 	mov.w	r8, #0
	uint16_t rxd_data = 0;
	uint8_t uc_pcs;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
  400472:	f04f 0901 	mov.w	r9, #1
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;
	uint8_t uc_pcs;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
  400476:	ae01      	add	r6, sp, #4
	}
	else {
		return M2M_ERR_BUS_FAIL;
	}
	
	SPI_ASSERT_CS();
  400478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40047c:	4b1c      	ldr	r3, [pc, #112]	; (4004f0 <nm_bus_ioctl+0xac>)
  40047e:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  400480:	b1f4      	cbz	r4, 4004c0 <nm_bus_ioctl+0x7c>
		txd_data = *pu8Mosi;
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  400482:	4f1c      	ldr	r7, [pc, #112]	; (4004f4 <nm_bus_ioctl+0xb0>)
  400484:	f8df b084 	ldr.w	fp, [pc, #132]	; 40050c <nm_bus_ioctl+0xc8>
		
		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  400488:	f8df a084 	ldr.w	sl, [pc, #132]	; 400510 <nm_bus_ioctl+0xcc>
	}
	
	SPI_ASSERT_CS();
	while (u16Sz) {
		txd_data = *pu8Mosi;
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  40048c:	2300      	movs	r3, #0
  40048e:	461a      	mov	r2, r3
  400490:	7831      	ldrb	r1, [r6, #0]
  400492:	4638      	mov	r0, r7
  400494:	47d8      	blx	fp
		
		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  400496:	f10d 0205 	add.w	r2, sp, #5
  40049a:	f10d 0106 	add.w	r1, sp, #6
  40049e:	4638      	mov	r0, r7
  4004a0:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  4004a2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4004a6:	702b      	strb	r3, [r5, #0]

		u16Sz--;
  4004a8:	3c01      	subs	r4, #1
  4004aa:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  4004ac:	f1b8 0f00 	cmp.w	r8, #0
  4004b0:	d100      	bne.n	4004b4 <nm_bus_ioctl+0x70>
			pu8Miso++;
  4004b2:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  4004b4:	f1b9 0f00 	cmp.w	r9, #0
  4004b8:	d100      	bne.n	4004bc <nm_bus_ioctl+0x78>
			pu8Mosi++;
  4004ba:	3601      	adds	r6, #1
	else {
		return M2M_ERR_BUS_FAIL;
	}
	
	SPI_ASSERT_CS();
	while (u16Sz) {
  4004bc:	2c00      	cmp	r4, #0
  4004be:	d1e5      	bne.n	40048c <nm_bus_ioctl+0x48>
		if (!u8SkipMiso)
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}
	SPI_DEASSERT_CS();
  4004c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4004c4:	4b0a      	ldr	r3, [pc, #40]	; (4004f0 <nm_bus_ioctl+0xac>)
  4004c6:	631a      	str	r2, [r3, #48]	; 0x30
	printf(" / MISO: 0x");
	for(i = 0; i<cpu16Sz; i++)
		printf("%x", *(cppu8Miso+i) );
	printf(" / Size %d \n", cpu16Sz);
*/
	return M2M_SUCCESS;
  4004c8:	2000      	movs	r0, #0
  4004ca:	e00e      	b.n	4004ea <nm_bus_ioctl+0xa6>
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
	}
	else {
		return M2M_ERR_BUS_FAIL;
  4004cc:	f06f 0005 	mvn.w	r0, #5
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
  4004d0:	e00b      	b.n	4004ea <nm_bus_ioctl+0xa6>
#endif
		default:
			s8Ret = -1;
			M2M_ERR("Invalid IOCTL command!\n");
  4004d2:	f240 121f 	movw	r2, #287	; 0x11f
  4004d6:	4908      	ldr	r1, [pc, #32]	; (4004f8 <nm_bus_ioctl+0xb4>)
  4004d8:	4808      	ldr	r0, [pc, #32]	; (4004fc <nm_bus_ioctl+0xb8>)
  4004da:	4c09      	ldr	r4, [pc, #36]	; (400500 <nm_bus_ioctl+0xbc>)
  4004dc:	47a0      	blx	r4
  4004de:	4809      	ldr	r0, [pc, #36]	; (400504 <nm_bus_ioctl+0xc0>)
  4004e0:	47a0      	blx	r4
  4004e2:	4809      	ldr	r0, [pc, #36]	; (400508 <nm_bus_ioctl+0xc4>)
  4004e4:	47a0      	blx	r4
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
#endif
		default:
			s8Ret = -1;
  4004e6:	f04f 30ff 	mov.w	r0, #4294967295
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  4004ea:	b003      	add	sp, #12
  4004ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4004f0:	400e1400 	.word	0x400e1400
  4004f4:	40008000 	.word	0x40008000
  4004f8:	0040af50 	.word	0x0040af50
  4004fc:	0040af20 	.word	0x0040af20
  400500:	004040ad 	.word	0x004040ad
  400504:	0040af34 	.word	0x0040af34
  400508:	0040af4c 	.word	0x0040af4c
  40050c:	004034d9 	.word	0x004034d9
  400510:	004034a5 	.word	0x004034a5

00400514 <nm_bus_deinit>:
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400514:	2202      	movs	r2, #2
  400516:	4b0e      	ldr	r3, [pc, #56]	; (400550 <nm_bus_deinit+0x3c>)
  400518:	601a      	str	r2, [r3, #0]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40051a:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  40051e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400522:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400526:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400528:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40052c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400530:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400532:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400536:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40053a:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40053c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400540:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400544:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400546:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  40054a:	2000      	movs	r0, #0
  40054c:	4770      	bx	lr
  40054e:	bf00      	nop
  400550:	40008000 	.word	0x40008000

00400554 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  400554:	b13a      	cbz	r2, 400566 <m2m_memcpy+0x12>
  400556:	3901      	subs	r1, #1
  400558:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  40055a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40055e:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  400562:	4290      	cmp	r0, r2
  400564:	d1f9      	bne.n	40055a <m2m_memcpy+0x6>
  400566:	4770      	bx	lr

00400568 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  400568:	b122      	cbz	r2, 400574 <m2m_memset+0xc>
  40056a:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  40056c:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  400570:	4290      	cmp	r0, r2
  400572:	d1fb      	bne.n	40056c <m2m_memset+0x4>
  400574:	4770      	bx	lr
  400576:	bf00      	nop

00400578 <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
  400578:	4603      	mov	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
  40057a:	7802      	ldrb	r2, [r0, #0]
  40057c:	b13a      	cbz	r2, 40058e <m2m_strlen+0x16>
  40057e:	2000      	movs	r0, #0
	{
		u16StrLen ++;
  400580:	3001      	adds	r0, #1
  400582:	b280      	uxth	r0, r0
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  400584:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  400588:	2a00      	cmp	r2, #0
  40058a:	d1f9      	bne.n	400580 <m2m_strlen+0x8>
  40058c:	4770      	bx	lr
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
  40058e:	2000      	movs	r0, #0
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
}
  400590:	4770      	bx	lr
  400592:	bf00      	nop

00400594 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  400594:	4a02      	ldr	r2, [pc, #8]	; (4005a0 <isr+0xc>)
  400596:	7813      	ldrb	r3, [r2, #0]
  400598:	3301      	adds	r3, #1
  40059a:	b2db      	uxtb	r3, r3
  40059c:	7013      	strb	r3, [r2, #0]
  40059e:	4770      	bx	lr
  4005a0:	204008e8 	.word	0x204008e8

004005a4 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  4005a4:	4770      	bx	lr
  4005a6:	bf00      	nop

004005a8 <hif_set_rx_done>:
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
  4005a8:	b500      	push	{lr}
  4005aa:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
  4005ac:	2001      	movs	r0, #1
  4005ae:	4b0b      	ldr	r3, [pc, #44]	; (4005dc <hif_set_rx_done+0x34>)
  4005b0:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  4005b2:	a901      	add	r1, sp, #4
  4005b4:	f241 0070 	movw	r0, #4208	; 0x1070
  4005b8:	4b09      	ldr	r3, [pc, #36]	; (4005e0 <hif_set_rx_done+0x38>)
  4005ba:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4005bc:	4603      	mov	r3, r0
  4005be:	b940      	cbnz	r0, 4005d2 <hif_set_rx_done+0x2a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
  4005c0:	9901      	ldr	r1, [sp, #4]
  4005c2:	f041 0102 	orr.w	r1, r1, #2
  4005c6:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4005c8:	f241 0070 	movw	r0, #4208	; 0x1070
  4005cc:	4b05      	ldr	r3, [pc, #20]	; (4005e4 <hif_set_rx_done+0x3c>)
  4005ce:	4798      	blx	r3
  4005d0:	4603      	mov	r3, r0
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;

}
  4005d2:	4618      	mov	r0, r3
  4005d4:	b003      	add	sp, #12
  4005d6:	f85d fb04 	ldr.w	pc, [sp], #4
  4005da:	bf00      	nop
  4005dc:	00400301 	.word	0x00400301
  4005e0:	00401871 	.word	0x00401871
  4005e4:	0040187d 	.word	0x0040187d

004005e8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  4005e8:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  4005ea:	4b11      	ldr	r3, [pc, #68]	; (400630 <hif_chip_wake+0x48>)
  4005ec:	781b      	ldrb	r3, [r3, #0]
  4005ee:	f013 0fff 	tst.w	r3, #255	; 0xff
  4005f2:	d115      	bne.n	400620 <hif_chip_wake+0x38>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4005f4:	4b0f      	ldr	r3, [pc, #60]	; (400634 <hif_chip_wake+0x4c>)
  4005f6:	781b      	ldrb	r3, [r3, #0]
  4005f8:	b2db      	uxtb	r3, r3
  4005fa:	2b03      	cmp	r3, #3
  4005fc:	d004      	beq.n	400608 <hif_chip_wake+0x20>
  4005fe:	4b0d      	ldr	r3, [pc, #52]	; (400634 <hif_chip_wake+0x4c>)
  400600:	781b      	ldrb	r3, [r3, #0]
  400602:	b2db      	uxtb	r3, r3
  400604:	2b04      	cmp	r3, #4
  400606:	d10b      	bne.n	400620 <hif_chip_wake+0x38>
		{
			ret = nm_clkless_wake();
  400608:	4b0b      	ldr	r3, [pc, #44]	; (400638 <hif_chip_wake+0x50>)
  40060a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40060c:	4603      	mov	r3, r0
  40060e:	b968      	cbnz	r0, 40062c <hif_chip_wake+0x44>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  400610:	f245 6178 	movw	r1, #22136	; 0x5678
  400614:	f241 0074 	movw	r0, #4212	; 0x1074
  400618:	4b08      	ldr	r3, [pc, #32]	; (40063c <hif_chip_wake+0x54>)
  40061a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40061c:	4603      	mov	r3, r0
  40061e:	b928      	cbnz	r0, 40062c <hif_chip_wake+0x44>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  400620:	4a03      	ldr	r2, [pc, #12]	; (400630 <hif_chip_wake+0x48>)
  400622:	7813      	ldrb	r3, [r2, #0]
  400624:	3301      	adds	r3, #1
  400626:	b2db      	uxtb	r3, r3
  400628:	7013      	strb	r3, [r2, #0]
  40062a:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  40062c:	4618      	mov	r0, r3
  40062e:	bd08      	pop	{r3, pc}
  400630:	20400904 	.word	0x20400904
  400634:	204008f4 	.word	0x204008f4
  400638:	004013e1 	.word	0x004013e1
  40063c:	0040187d 	.word	0x0040187d

00400640 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
  400640:	b500      	push	{lr}
  400642:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  400644:	4b1d      	ldr	r3, [pc, #116]	; (4006bc <hif_chip_sleep+0x7c>)
  400646:	781b      	ldrb	r3, [r3, #0]
  400648:	f013 0fff 	tst.w	r3, #255	; 0xff
  40064c:	d004      	beq.n	400658 <hif_chip_sleep+0x18>
	{
		gu8ChipSleep--;
  40064e:	4a1b      	ldr	r2, [pc, #108]	; (4006bc <hif_chip_sleep+0x7c>)
  400650:	7813      	ldrb	r3, [r2, #0]
  400652:	3b01      	subs	r3, #1
  400654:	b2db      	uxtb	r3, r3
  400656:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  400658:	4b18      	ldr	r3, [pc, #96]	; (4006bc <hif_chip_sleep+0x7c>)
  40065a:	781b      	ldrb	r3, [r3, #0]
  40065c:	f013 0fff 	tst.w	r3, #255	; 0xff
  400660:	d125      	bne.n	4006ae <hif_chip_sleep+0x6e>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  400662:	4b17      	ldr	r3, [pc, #92]	; (4006c0 <hif_chip_sleep+0x80>)
  400664:	781b      	ldrb	r3, [r3, #0]
  400666:	b2db      	uxtb	r3, r3
  400668:	2b03      	cmp	r3, #3
  40066a:	d004      	beq.n	400676 <hif_chip_sleep+0x36>
  40066c:	4b14      	ldr	r3, [pc, #80]	; (4006c0 <hif_chip_sleep+0x80>)
  40066e:	781b      	ldrb	r3, [r3, #0]
  400670:	b2db      	uxtb	r3, r3
  400672:	2b04      	cmp	r3, #4
  400674:	d11d      	bne.n	4006b2 <hif_chip_sleep+0x72>
		{
			uint32 reg = 0;
  400676:	2300      	movs	r3, #0
  400678:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  40067a:	f244 3121 	movw	r1, #17185	; 0x4321
  40067e:	f241 0074 	movw	r0, #4212	; 0x1074
  400682:	4b10      	ldr	r3, [pc, #64]	; (4006c4 <hif_chip_sleep+0x84>)
  400684:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  400686:	4603      	mov	r3, r0
  400688:	b9a0      	cbnz	r0, 4006b4 <hif_chip_sleep+0x74>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
  40068a:	a901      	add	r1, sp, #4
  40068c:	2001      	movs	r0, #1
  40068e:	4b0e      	ldr	r3, [pc, #56]	; (4006c8 <hif_chip_sleep+0x88>)
  400690:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  400692:	4603      	mov	r3, r0
  400694:	b970      	cbnz	r0, 4006b4 <hif_chip_sleep+0x74>
			if(reg&0x2)
  400696:	9901      	ldr	r1, [sp, #4]
  400698:	f011 0f02 	tst.w	r1, #2
  40069c:	d00a      	beq.n	4006b4 <hif_chip_sleep+0x74>
			{
				reg &=~(1 << 1);
  40069e:	f021 0102 	bic.w	r1, r1, #2
  4006a2:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  4006a4:	2001      	movs	r0, #1
  4006a6:	4b07      	ldr	r3, [pc, #28]	; (4006c4 <hif_chip_sleep+0x84>)
  4006a8:	4798      	blx	r3
  4006aa:	4603      	mov	r3, r0
  4006ac:	e002      	b.n	4006b4 <hif_chip_sleep+0x74>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;
  4006ae:	2300      	movs	r3, #0
  4006b0:	e000      	b.n	4006b4 <hif_chip_sleep+0x74>
  4006b2:	2300      	movs	r3, #0
		{
		}
	}
ERR1:
	return ret;
}
  4006b4:	4618      	mov	r0, r3
  4006b6:	b003      	add	sp, #12
  4006b8:	f85d fb04 	ldr.w	pc, [sp], #4
  4006bc:	20400904 	.word	0x20400904
  4006c0:	204008f4 	.word	0x204008f4
  4006c4:	0040187d 	.word	0x0040187d
  4006c8:	00401871 	.word	0x00401871

004006cc <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  4006cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006d0:	b087      	sub	sp, #28
  4006d2:	4680      	mov	r8, r0
  4006d4:	460f      	mov	r7, r1
  4006d6:	4692      	mov	sl, r2
  4006d8:	4699      	mov	r9, r3
  4006da:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4006dc:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  4006e0:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  4006e4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  4006e8:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  4006ec:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  4006f0:	2308      	movs	r3, #8
  4006f2:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  4006f6:	b144      	cbz	r4, 40070a <hif_send+0x3e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  4006f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4006fc:	fa16 f383 	uxtah	r3, r6, r3
  400700:	442b      	add	r3, r5
  400702:	b29b      	uxth	r3, r3
  400704:	f8ad 3016 	strh.w	r3, [sp, #22]
  400708:	e006      	b.n	400718 <hif_send+0x4c>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
  40070a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40070e:	fa19 f383 	uxtah	r3, r9, r3
  400712:	b29b      	uxth	r3, r3
  400714:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	ret = hif_chip_wake();
  400718:	4b57      	ldr	r3, [pc, #348]	; (400878 <hif_send+0x1ac>)
  40071a:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  40071c:	4683      	mov	fp, r0
  40071e:	2800      	cmp	r0, #0
  400720:	f040 8095 	bne.w	40084e <hif_send+0x182>
	{
		volatile uint32 reg, dma_addr = 0;
  400724:	2300      	movs	r3, #0
  400726:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  400728:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  40072c:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  40072e:	9b02      	ldr	r3, [sp, #8]
  400730:	ea48 0303 	orr.w	r3, r8, r3
  400734:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  400736:	9b02      	ldr	r3, [sp, #8]
  400738:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  40073c:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  40073e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  400742:	9b02      	ldr	r3, [sp, #8]
  400744:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400748:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  40074a:	9902      	ldr	r1, [sp, #8]
  40074c:	f241 008c 	movw	r0, #4236	; 0x108c
  400750:	4b4a      	ldr	r3, [pc, #296]	; (40087c <hif_send+0x1b0>)
  400752:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  400754:	4683      	mov	fp, r0
  400756:	2800      	cmp	r0, #0
  400758:	f040 808a 	bne.w	400870 <hif_send+0x1a4>


		reg = 0;
  40075c:	2300      	movs	r3, #0
  40075e:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  400760:	9b02      	ldr	r3, [sp, #8]
  400762:	f043 0302 	orr.w	r3, r3, #2
  400766:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  400768:	9902      	ldr	r1, [sp, #8]
  40076a:	f241 0078 	movw	r0, #4216	; 0x1078
  40076e:	4b43      	ldr	r3, [pc, #268]	; (40087c <hif_send+0x1b0>)
  400770:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  400772:	4683      	mov	fp, r0
  400774:	2800      	cmp	r0, #0
  400776:	d17b      	bne.n	400870 <hif_send+0x1a4>
		dma_addr = 0;
  400778:	2300      	movs	r3, #0
  40077a:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  40077c:	f8ad 3006 	strh.w	r3, [sp, #6]
  400780:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  400784:	b29b      	uxth	r3, r3
  400786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40078a:	d21e      	bcs.n	4007ca <hif_send+0xfe>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  40078c:	f241 0878 	movw	r8, #4216	; 0x1078
  400790:	4f3b      	ldr	r7, [pc, #236]	; (400880 <hif_send+0x1b4>)
  400792:	a902      	add	r1, sp, #8
  400794:	4640      	mov	r0, r8
  400796:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  400798:	b9b8      	cbnz	r0, 4007ca <hif_send+0xfe>
			if (!(reg & 0x2))
  40079a:	9b02      	ldr	r3, [sp, #8]
  40079c:	f013 0f02 	tst.w	r3, #2
  4007a0:	d107      	bne.n	4007b2 <hif_send+0xe6>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  4007a2:	a903      	add	r1, sp, #12
  4007a4:	4837      	ldr	r0, [pc, #220]	; (400884 <hif_send+0x1b8>)
  4007a6:	4b36      	ldr	r3, [pc, #216]	; (400880 <hif_send+0x1b4>)
  4007a8:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  4007aa:	b170      	cbz	r0, 4007ca <hif_send+0xfe>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
  4007ac:	2300      	movs	r3, #0
  4007ae:	9303      	str	r3, [sp, #12]
  4007b0:	e00b      	b.n	4007ca <hif_send+0xfe>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  4007b2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4007b6:	3301      	adds	r3, #1
  4007b8:	b29b      	uxth	r3, r3
  4007ba:	f8ad 3006 	strh.w	r3, [sp, #6]
  4007be:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4007c2:	b29b      	uxth	r3, r3
  4007c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4007c8:	d3e3      	bcc.n	400792 <hif_send+0xc6>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  4007ca:	9b03      	ldr	r3, [sp, #12]
  4007cc:	2b00      	cmp	r3, #0
  4007ce:	d04d      	beq.n	40086c <hif_send+0x1a0>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  4007d0:	9b03      	ldr	r3, [sp, #12]
  4007d2:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  4007d4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4007d8:	b29b      	uxth	r3, r3
  4007da:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  4007de:	9804      	ldr	r0, [sp, #16]
  4007e0:	2208      	movs	r2, #8
  4007e2:	a905      	add	r1, sp, #20
  4007e4:	4b28      	ldr	r3, [pc, #160]	; (400888 <hif_send+0x1bc>)
  4007e6:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  4007e8:	4683      	mov	fp, r0
  4007ea:	2800      	cmp	r0, #0
  4007ec:	d140      	bne.n	400870 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  4007ee:	9b04      	ldr	r3, [sp, #16]
  4007f0:	3308      	adds	r3, #8
  4007f2:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  4007f4:	f1ba 0f00 	cmp.w	sl, #0
  4007f8:	d00a      	beq.n	400810 <hif_send+0x144>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  4007fa:	9804      	ldr	r0, [sp, #16]
  4007fc:	464a      	mov	r2, r9
  4007fe:	4651      	mov	r1, sl
  400800:	4b21      	ldr	r3, [pc, #132]	; (400888 <hif_send+0x1bc>)
  400802:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  400804:	4683      	mov	fp, r0
  400806:	2800      	cmp	r0, #0
  400808:	d132      	bne.n	400870 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  40080a:	9b04      	ldr	r3, [sp, #16]
  40080c:	444b      	add	r3, r9
  40080e:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  400810:	b174      	cbz	r4, 400830 <hif_send+0x164>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  400812:	9b04      	ldr	r3, [sp, #16]
  400814:	ebc9 0505 	rsb	r5, r9, r5
  400818:	441d      	add	r5, r3
  40081a:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  40081c:	9804      	ldr	r0, [sp, #16]
  40081e:	4632      	mov	r2, r6
  400820:	4621      	mov	r1, r4
  400822:	4b19      	ldr	r3, [pc, #100]	; (400888 <hif_send+0x1bc>)
  400824:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  400826:	4683      	mov	fp, r0
  400828:	bb10      	cbnz	r0, 400870 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  40082a:	9b04      	ldr	r3, [sp, #16]
  40082c:	441e      	add	r6, r3
  40082e:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  400830:	9b03      	ldr	r3, [sp, #12]
  400832:	009b      	lsls	r3, r3, #2
  400834:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  400836:	9b02      	ldr	r3, [sp, #8]
  400838:	f043 0302 	orr.w	r3, r3, #2
  40083c:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  40083e:	9902      	ldr	r1, [sp, #8]
  400840:	f241 006c 	movw	r0, #4204	; 0x106c
  400844:	4b0d      	ldr	r3, [pc, #52]	; (40087c <hif_send+0x1b0>)
  400846:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  400848:	4683      	mov	fp, r0
  40084a:	b988      	cbnz	r0, 400870 <hif_send+0x1a4>
  40084c:	e00a      	b.n	400864 <hif_send+0x198>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  40084e:	f240 129f 	movw	r2, #415	; 0x19f
  400852:	490e      	ldr	r1, [pc, #56]	; (40088c <hif_send+0x1c0>)
  400854:	480e      	ldr	r0, [pc, #56]	; (400890 <hif_send+0x1c4>)
  400856:	4c0f      	ldr	r4, [pc, #60]	; (400894 <hif_send+0x1c8>)
  400858:	47a0      	blx	r4
  40085a:	480f      	ldr	r0, [pc, #60]	; (400898 <hif_send+0x1cc>)
  40085c:	47a0      	blx	r4
  40085e:	480f      	ldr	r0, [pc, #60]	; (40089c <hif_send+0x1d0>)
  400860:	47a0      	blx	r4
		goto ERR1;
  400862:	e005      	b.n	400870 <hif_send+0x1a4>
	}
	ret = hif_chip_sleep();
  400864:	4b0e      	ldr	r3, [pc, #56]	; (4008a0 <hif_send+0x1d4>)
  400866:	4798      	blx	r3
  400868:	4683      	mov	fp, r0
  40086a:	e001      	b.n	400870 <hif_send+0x1a4>
			if(M2M_SUCCESS != ret) goto ERR1;
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
  40086c:	f06f 0b02 	mvn.w	fp, #2
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
}
  400870:	4658      	mov	r0, fp
  400872:	b007      	add	sp, #28
  400874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400878:	004005e9 	.word	0x004005e9
  40087c:	0040187d 	.word	0x0040187d
  400880:	00401871 	.word	0x00401871
  400884:	00150400 	.word	0x00150400
  400888:	004018e9 	.word	0x004018e9
  40088c:	0040b1b8 	.word	0x0040b1b8
  400890:	0040af20 	.word	0x0040af20
  400894:	004040ad 	.word	0x004040ad
  400898:	0040af74 	.word	0x0040af74
  40089c:	0040af4c 	.word	0x0040af4c
  4008a0:	00400641 	.word	0x00400641

004008a4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  4008a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4008a8:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  4008aa:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 400ba8 <hif_handle_isr+0x304>
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  4008ae:	4fa3      	ldr	r7, [pc, #652]	; (400b3c <hif_handle_isr+0x298>)
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  4008b0:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 400bac <hif_handle_isr+0x308>
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  4008b4:	4ea2      	ldr	r6, [pc, #648]	; (400b40 <hif_handle_isr+0x29c>)

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  4008b6:	e17b      	b.n	400bb0 <hif_handle_isr+0x30c>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
  4008b8:	f899 3000 	ldrb.w	r3, [r9]
  4008bc:	3b01      	subs	r3, #1
  4008be:	b2db      	uxtb	r3, r3
  4008c0:	f889 3000 	strb.w	r3, [r9]
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  4008c4:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  4008c6:	4604      	mov	r4, r0
  4008c8:	2800      	cmp	r0, #0
  4008ca:	f040 811a 	bne.w	400b02 <hif_handle_isr+0x25e>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  4008ce:	a903      	add	r1, sp, #12
  4008d0:	f241 0070 	movw	r0, #4208	; 0x1070
  4008d4:	4b9b      	ldr	r3, [pc, #620]	; (400b44 <hif_handle_isr+0x2a0>)
  4008d6:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  4008d8:	4604      	mov	r4, r0
  4008da:	2800      	cmp	r0, #0
  4008dc:	f040 8106 	bne.w	400aec <hif_handle_isr+0x248>
		{
			if(reg & 0x1)	/* New interrupt has been received */
  4008e0:	9b03      	ldr	r3, [sp, #12]
  4008e2:	f013 0f01 	tst.w	r3, #1
  4008e6:	f000 80f5 	beq.w	400ad4 <hif_handle_isr+0x230>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
  4008ea:	4b97      	ldr	r3, [pc, #604]	; (400b48 <hif_handle_isr+0x2a4>)
  4008ec:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
  4008ee:	9903      	ldr	r1, [sp, #12]
  4008f0:	f021 0101 	bic.w	r1, r1, #1
  4008f4:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4008f6:	f241 0070 	movw	r0, #4208	; 0x1070
  4008fa:	4b94      	ldr	r3, [pc, #592]	; (400b4c <hif_handle_isr+0x2a8>)
  4008fc:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  4008fe:	4604      	mov	r4, r0
  400900:	2800      	cmp	r0, #0
  400902:	f040 810e 	bne.w	400b22 <hif_handle_isr+0x27e>
				gu8HifSizeDone = 0;
  400906:	2200      	movs	r2, #0
  400908:	4b91      	ldr	r3, [pc, #580]	; (400b50 <hif_handle_isr+0x2ac>)
  40090a:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  40090c:	9d03      	ldr	r5, [sp, #12]
  40090e:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  400912:	2d00      	cmp	r5, #0
  400914:	f000 80d1 	beq.w	400aba <hif_handle_isr+0x216>
					uint32 address = 0;
  400918:	a906      	add	r1, sp, #24
  40091a:	f841 2d04 	str.w	r2, [r1, #-4]!
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  40091e:	f241 0084 	movw	r0, #4228	; 0x1084
  400922:	4b88      	ldr	r3, [pc, #544]	; (400b44 <hif_handle_isr+0x2a0>)
  400924:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  400926:	4604      	mov	r4, r0
  400928:	b168      	cbz	r0, 400946 <hif_handle_isr+0xa2>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  40092a:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  40092e:	4641      	mov	r1, r8
  400930:	4630      	mov	r0, r6
  400932:	4d88      	ldr	r5, [pc, #544]	; (400b54 <hif_handle_isr+0x2b0>)
  400934:	47a8      	blx	r5
  400936:	4888      	ldr	r0, [pc, #544]	; (400b58 <hif_handle_isr+0x2b4>)
  400938:	47a8      	blx	r5
  40093a:	4888      	ldr	r0, [pc, #544]	; (400b5c <hif_handle_isr+0x2b8>)
  40093c:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  40093e:	2001      	movs	r0, #1
  400940:	4b81      	ldr	r3, [pc, #516]	; (400b48 <hif_handle_isr+0x2a4>)
  400942:	4798      	blx	r3
  400944:	e0eb      	b.n	400b1e <hif_handle_isr+0x27a>
						goto ERR1;
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  400946:	2204      	movs	r2, #4
  400948:	a904      	add	r1, sp, #16
  40094a:	9805      	ldr	r0, [sp, #20]
  40094c:	4b84      	ldr	r3, [pc, #528]	; (400b60 <hif_handle_isr+0x2bc>)
  40094e:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  400950:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400954:	b29b      	uxth	r3, r3
  400956:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  40095a:	4604      	mov	r4, r0
  40095c:	b168      	cbz	r0, 40097a <hif_handle_isr+0xd6>
					{
						M2M_ERR("(hif) address bus fail\n");
  40095e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  400962:	4641      	mov	r1, r8
  400964:	4630      	mov	r0, r6
  400966:	4d7b      	ldr	r5, [pc, #492]	; (400b54 <hif_handle_isr+0x2b0>)
  400968:	47a8      	blx	r5
  40096a:	487e      	ldr	r0, [pc, #504]	; (400b64 <hif_handle_isr+0x2c0>)
  40096c:	47a8      	blx	r5
  40096e:	487b      	ldr	r0, [pc, #492]	; (400b5c <hif_handle_isr+0x2b8>)
  400970:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  400972:	2001      	movs	r0, #1
  400974:	4b74      	ldr	r3, [pc, #464]	; (400b48 <hif_handle_isr+0x2a4>)
  400976:	4798      	blx	r3
  400978:	e0d1      	b.n	400b1e <hif_handle_isr+0x27a>
						goto ERR1;
					}
					if(strHif.u16Length != size)
  40097a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40097e:	b29b      	uxth	r3, r3
  400980:	429d      	cmp	r5, r3
  400982:	d01e      	beq.n	4009c2 <hif_handle_isr+0x11e>
					{
						if((size - strHif.u16Length) > 4)
  400984:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400988:	b29b      	uxth	r3, r3
  40098a:	1aeb      	subs	r3, r5, r3
  40098c:	2b04      	cmp	r3, #4
  40098e:	dd18      	ble.n	4009c2 <hif_handle_isr+0x11e>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  400990:	f240 12df 	movw	r2, #479	; 0x1df
  400994:	4641      	mov	r1, r8
  400996:	4630      	mov	r0, r6
  400998:	4c6e      	ldr	r4, [pc, #440]	; (400b54 <hif_handle_isr+0x2b0>)
  40099a:	47a0      	blx	r4
  40099c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  4009a0:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009a4:	f89d 1011 	ldrb.w	r1, [sp, #17]
  4009a8:	9100      	str	r1, [sp, #0]
  4009aa:	b292      	uxth	r2, r2
  4009ac:	4629      	mov	r1, r5
  4009ae:	486e      	ldr	r0, [pc, #440]	; (400b68 <hif_handle_isr+0x2c4>)
  4009b0:	47a0      	blx	r4
  4009b2:	486a      	ldr	r0, [pc, #424]	; (400b5c <hif_handle_isr+0x2b8>)
  4009b4:	47a0      	blx	r4
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
  4009b6:	2001      	movs	r0, #1
  4009b8:	4b63      	ldr	r3, [pc, #396]	; (400b48 <hif_handle_isr+0x2a4>)
  4009ba:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  4009bc:	f06f 0405 	mvn.w	r4, #5
  4009c0:	e0ad      	b.n	400b1e <hif_handle_isr+0x27a>
							goto ERR1;
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  4009c2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009c6:	b2db      	uxtb	r3, r3
  4009c8:	2b01      	cmp	r3, #1
  4009ca:	d10d      	bne.n	4009e8 <hif_handle_isr+0x144>
					{
						if(pfWifiCb)
  4009cc:	4b67      	ldr	r3, [pc, #412]	; (400b6c <hif_handle_isr+0x2c8>)
  4009ce:	681b      	ldr	r3, [r3, #0]
  4009d0:	2b00      	cmp	r3, #0
  4009d2:	d060      	beq.n	400a96 <hif_handle_isr+0x1f2>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4009d4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4009d8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4009dc:	3908      	subs	r1, #8
  4009de:	9a05      	ldr	r2, [sp, #20]
  4009e0:	3208      	adds	r2, #8
  4009e2:	b289      	uxth	r1, r1
  4009e4:	4798      	blx	r3
  4009e6:	e056      	b.n	400a96 <hif_handle_isr+0x1f2>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  4009e8:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009ec:	b2db      	uxtb	r3, r3
  4009ee:	2b02      	cmp	r3, #2
  4009f0:	d10d      	bne.n	400a0e <hif_handle_isr+0x16a>
					{
						if(pfIpCb)
  4009f2:	4b5f      	ldr	r3, [pc, #380]	; (400b70 <hif_handle_isr+0x2cc>)
  4009f4:	681b      	ldr	r3, [r3, #0]
  4009f6:	2b00      	cmp	r3, #0
  4009f8:	d04d      	beq.n	400a96 <hif_handle_isr+0x1f2>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4009fa:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4009fe:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a02:	3908      	subs	r1, #8
  400a04:	9a05      	ldr	r2, [sp, #20]
  400a06:	3208      	adds	r2, #8
  400a08:	b289      	uxth	r1, r1
  400a0a:	4798      	blx	r3
  400a0c:	e043      	b.n	400a96 <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  400a0e:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a12:	b2db      	uxtb	r3, r3
  400a14:	2b04      	cmp	r3, #4
  400a16:	d10d      	bne.n	400a34 <hif_handle_isr+0x190>
					{
						if(pfOtaCb)
  400a18:	4b56      	ldr	r3, [pc, #344]	; (400b74 <hif_handle_isr+0x2d0>)
  400a1a:	681b      	ldr	r3, [r3, #0]
  400a1c:	2b00      	cmp	r3, #0
  400a1e:	d03a      	beq.n	400a96 <hif_handle_isr+0x1f2>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400a20:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400a24:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a28:	3908      	subs	r1, #8
  400a2a:	9a05      	ldr	r2, [sp, #20]
  400a2c:	3208      	adds	r2, #8
  400a2e:	b289      	uxth	r1, r1
  400a30:	4798      	blx	r3
  400a32:	e030      	b.n	400a96 <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  400a34:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a38:	b2db      	uxtb	r3, r3
  400a3a:	2b06      	cmp	r3, #6
  400a3c:	d10c      	bne.n	400a58 <hif_handle_isr+0x1b4>
					{
						if(pfCryptoCb)
  400a3e:	4b4e      	ldr	r3, [pc, #312]	; (400b78 <hif_handle_isr+0x2d4>)
  400a40:	681b      	ldr	r3, [r3, #0]
  400a42:	b343      	cbz	r3, 400a96 <hif_handle_isr+0x1f2>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400a44:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400a48:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a4c:	3908      	subs	r1, #8
  400a4e:	9a05      	ldr	r2, [sp, #20]
  400a50:	3208      	adds	r2, #8
  400a52:	b289      	uxth	r1, r1
  400a54:	4798      	blx	r3
  400a56:	e01e      	b.n	400a96 <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  400a58:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a5c:	b2db      	uxtb	r3, r3
  400a5e:	2b07      	cmp	r3, #7
  400a60:	d10c      	bne.n	400a7c <hif_handle_isr+0x1d8>
					{
						if(pfSigmaCb)
  400a62:	4b46      	ldr	r3, [pc, #280]	; (400b7c <hif_handle_isr+0x2d8>)
  400a64:	681b      	ldr	r3, [r3, #0]
  400a66:	b1b3      	cbz	r3, 400a96 <hif_handle_isr+0x1f2>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400a68:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400a6c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a70:	3908      	subs	r1, #8
  400a72:	9a05      	ldr	r2, [sp, #20]
  400a74:	3208      	adds	r2, #8
  400a76:	b289      	uxth	r1, r1
  400a78:	4798      	blx	r3
  400a7a:	e00c      	b.n	400a96 <hif_handle_isr+0x1f2>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
  400a7c:	f240 2202 	movw	r2, #514	; 0x202
  400a80:	4641      	mov	r1, r8
  400a82:	4630      	mov	r0, r6
  400a84:	4c33      	ldr	r4, [pc, #204]	; (400b54 <hif_handle_isr+0x2b0>)
  400a86:	47a0      	blx	r4
  400a88:	483d      	ldr	r0, [pc, #244]	; (400b80 <hif_handle_isr+0x2dc>)
  400a8a:	47a0      	blx	r4
  400a8c:	4833      	ldr	r0, [pc, #204]	; (400b5c <hif_handle_isr+0x2b8>)
  400a8e:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  400a90:	f06f 0405 	mvn.w	r4, #5
  400a94:	e043      	b.n	400b1e <hif_handle_isr+0x27a>
						goto ERR1;
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
  400a96:	4b2e      	ldr	r3, [pc, #184]	; (400b50 <hif_handle_isr+0x2ac>)
  400a98:	781b      	ldrb	r3, [r3, #0]
  400a9a:	f013 0fff 	tst.w	r3, #255	; 0xff
  400a9e:	d13b      	bne.n	400b18 <hif_handle_isr+0x274>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
  400aa0:	f240 2209 	movw	r2, #521	; 0x209
  400aa4:	4641      	mov	r1, r8
  400aa6:	4630      	mov	r0, r6
  400aa8:	4c2a      	ldr	r4, [pc, #168]	; (400b54 <hif_handle_isr+0x2b0>)
  400aaa:	47a0      	blx	r4
  400aac:	4835      	ldr	r0, [pc, #212]	; (400b84 <hif_handle_isr+0x2e0>)
  400aae:	47a0      	blx	r4
  400ab0:	482a      	ldr	r0, [pc, #168]	; (400b5c <hif_handle_isr+0x2b8>)
  400ab2:	47a0      	blx	r4
						ret = hif_set_rx_done();
  400ab4:	4b34      	ldr	r3, [pc, #208]	; (400b88 <hif_handle_isr+0x2e4>)
  400ab6:	4798      	blx	r3
  400ab8:	e02e      	b.n	400b18 <hif_handle_isr+0x274>
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
					M2M_ERR("(hif) Wrong Size\n");
  400aba:	f240 2211 	movw	r2, #529	; 0x211
  400abe:	4641      	mov	r1, r8
  400ac0:	4630      	mov	r0, r6
  400ac2:	4c24      	ldr	r4, [pc, #144]	; (400b54 <hif_handle_isr+0x2b0>)
  400ac4:	47a0      	blx	r4
  400ac6:	4831      	ldr	r0, [pc, #196]	; (400b8c <hif_handle_isr+0x2e8>)
  400ac8:	47a0      	blx	r4
  400aca:	4824      	ldr	r0, [pc, #144]	; (400b5c <hif_handle_isr+0x2b8>)
  400acc:	47a0      	blx	r4
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
  400ace:	f06f 0401 	mvn.w	r4, #1
  400ad2:	e026      	b.n	400b22 <hif_handle_isr+0x27e>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
  400ad4:	f44f 7206 	mov.w	r2, #536	; 0x218
  400ad8:	4641      	mov	r1, r8
  400ada:	4630      	mov	r0, r6
  400adc:	4c1d      	ldr	r4, [pc, #116]	; (400b54 <hif_handle_isr+0x2b0>)
  400ade:	47a0      	blx	r4
  400ae0:	9903      	ldr	r1, [sp, #12]
  400ae2:	482b      	ldr	r0, [pc, #172]	; (400b90 <hif_handle_isr+0x2ec>)
  400ae4:	47a0      	blx	r4
  400ae6:	481d      	ldr	r0, [pc, #116]	; (400b5c <hif_handle_isr+0x2b8>)
  400ae8:	47a0      	blx	r4
  400aea:	e015      	b.n	400b18 <hif_handle_isr+0x274>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  400aec:	f240 221e 	movw	r2, #542	; 0x21e
  400af0:	4641      	mov	r1, r8
  400af2:	4630      	mov	r0, r6
  400af4:	4d17      	ldr	r5, [pc, #92]	; (400b54 <hif_handle_isr+0x2b0>)
  400af6:	47a8      	blx	r5
  400af8:	4826      	ldr	r0, [pc, #152]	; (400b94 <hif_handle_isr+0x2f0>)
  400afa:	47a8      	blx	r5
  400afc:	4817      	ldr	r0, [pc, #92]	; (400b5c <hif_handle_isr+0x2b8>)
  400afe:	47a8      	blx	r5
  400b00:	e00f      	b.n	400b22 <hif_handle_isr+0x27e>
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  400b02:	f44f 7209 	mov.w	r2, #548	; 0x224
  400b06:	4641      	mov	r1, r8
  400b08:	4630      	mov	r0, r6
  400b0a:	4d12      	ldr	r5, [pc, #72]	; (400b54 <hif_handle_isr+0x2b0>)
  400b0c:	47a8      	blx	r5
  400b0e:	4822      	ldr	r0, [pc, #136]	; (400b98 <hif_handle_isr+0x2f4>)
  400b10:	47a8      	blx	r5
  400b12:	4812      	ldr	r0, [pc, #72]	; (400b5c <hif_handle_isr+0x2b8>)
  400b14:	47a8      	blx	r5
  400b16:	e004      	b.n	400b22 <hif_handle_isr+0x27e>
		goto ERR1;
	}

	ret = hif_chip_sleep();
  400b18:	4b20      	ldr	r3, [pc, #128]	; (400b9c <hif_handle_isr+0x2f8>)
  400b1a:	4798      	blx	r3
  400b1c:	4604      	mov	r4, r0
		/*when the interrupt enabled*/
		gu8Interrupt--;
		while(1)
		{
			ret = hif_isr();
			if(ret == M2M_SUCCESS) {
  400b1e:	2c00      	cmp	r4, #0
  400b20:	d046      	beq.n	400bb0 <hif_handle_isr+0x30c>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  400b22:	f240 2243 	movw	r2, #579	; 0x243
  400b26:	491e      	ldr	r1, [pc, #120]	; (400ba0 <hif_handle_isr+0x2fc>)
  400b28:	4630      	mov	r0, r6
  400b2a:	4d0a      	ldr	r5, [pc, #40]	; (400b54 <hif_handle_isr+0x2b0>)
  400b2c:	47a8      	blx	r5
  400b2e:	4621      	mov	r1, r4
  400b30:	481c      	ldr	r0, [pc, #112]	; (400ba4 <hif_handle_isr+0x300>)
  400b32:	47a8      	blx	r5
  400b34:	4809      	ldr	r0, [pc, #36]	; (400b5c <hif_handle_isr+0x2b8>)
  400b36:	47a8      	blx	r5
			}
		}
  400b38:	e6c4      	b.n	4008c4 <hif_handle_isr+0x20>
  400b3a:	bf00      	nop
  400b3c:	004005e9 	.word	0x004005e9
  400b40:	0040af20 	.word	0x0040af20
  400b44:	00401871 	.word	0x00401871
  400b48:	00400301 	.word	0x00400301
  400b4c:	0040187d 	.word	0x0040187d
  400b50:	204008fc 	.word	0x204008fc
  400b54:	004040ad 	.word	0x004040ad
  400b58:	0040af94 	.word	0x0040af94
  400b5c:	0040af4c 	.word	0x0040af4c
  400b60:	00401889 	.word	0x00401889
  400b64:	0040afbc 	.word	0x0040afbc
  400b68:	0040afd4 	.word	0x0040afd4
  400b6c:	204008e4 	.word	0x204008e4
  400b70:	204008f8 	.word	0x204008f8
  400b74:	20400900 	.word	0x20400900
  400b78:	204008e0 	.word	0x204008e0
  400b7c:	204008f0 	.word	0x204008f0
  400b80:	0040b014 	.word	0x0040b014
  400b84:	0040b02c 	.word	0x0040b02c
  400b88:	004005a9 	.word	0x004005a9
  400b8c:	0040b050 	.word	0x0040b050
  400b90:	0040b064 	.word	0x0040b064
  400b94:	0040b080 	.word	0x0040b080
  400b98:	0040b0a4 	.word	0x0040b0a4
  400b9c:	00400641 	.word	0x00400641
  400ba0:	0040b1c4 	.word	0x0040b1c4
  400ba4:	0040b0c4 	.word	0x0040b0c4
  400ba8:	204008e8 	.word	0x204008e8
  400bac:	0040af60 	.word	0x0040af60

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  400bb0:	f899 3000 	ldrb.w	r3, [r9]
  400bb4:	f013 0fff 	tst.w	r3, #255	; 0xff
  400bb8:	f47f ae7e 	bne.w	4008b8 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
}
  400bbc:	2000      	movs	r0, #0
  400bbe:	b007      	add	sp, #28
  400bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00400bc4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  400bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400bc8:	b083      	sub	sp, #12
  400bca:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  400bcc:	2a00      	cmp	r2, #0
  400bce:	bf18      	it	ne
  400bd0:	2900      	cmpne	r1, #0
  400bd2:	d003      	beq.n	400bdc <hif_receive+0x18>
  400bd4:	4605      	mov	r5, r0
  400bd6:	460f      	mov	r7, r1
  400bd8:	4616      	mov	r6, r2
  400bda:	b9a0      	cbnz	r0, 400c06 <hif_receive+0x42>
	{
		if(isDone)
  400bdc:	b134      	cbz	r4, 400bec <hif_receive+0x28>
		{
			gu8HifSizeDone = 1;
  400bde:	2201      	movs	r2, #1
  400be0:	4b31      	ldr	r3, [pc, #196]	; (400ca8 <hif_receive+0xe4>)
  400be2:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  400be4:	4b31      	ldr	r3, [pc, #196]	; (400cac <hif_receive+0xe8>)
  400be6:	4798      	blx	r3
  400be8:	4603      	mov	r3, r0
  400bea:	e058      	b.n	400c9e <hif_receive+0xda>
		}
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
  400bec:	f240 2269 	movw	r2, #617	; 0x269
  400bf0:	492f      	ldr	r1, [pc, #188]	; (400cb0 <hif_receive+0xec>)
  400bf2:	4830      	ldr	r0, [pc, #192]	; (400cb4 <hif_receive+0xf0>)
  400bf4:	4c30      	ldr	r4, [pc, #192]	; (400cb8 <hif_receive+0xf4>)
  400bf6:	47a0      	blx	r4
  400bf8:	4830      	ldr	r0, [pc, #192]	; (400cbc <hif_receive+0xf8>)
  400bfa:	47a0      	blx	r4
  400bfc:	4830      	ldr	r0, [pc, #192]	; (400cc0 <hif_receive+0xfc>)
  400bfe:	47a0      	blx	r4
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
  400c00:	f06f 030b 	mvn.w	r3, #11
  400c04:	e04b      	b.n	400c9e <hif_receive+0xda>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  400c06:	4669      	mov	r1, sp
  400c08:	f241 0070 	movw	r0, #4208	; 0x1070
  400c0c:	4b2d      	ldr	r3, [pc, #180]	; (400cc4 <hif_receive+0x100>)
  400c0e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400c10:	4603      	mov	r3, r0
  400c12:	2800      	cmp	r0, #0
  400c14:	d143      	bne.n	400c9e <hif_receive+0xda>


	size = (uint16)((reg >> 2) & 0xfff);
  400c16:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  400c1a:	a901      	add	r1, sp, #4
  400c1c:	f241 0084 	movw	r0, #4228	; 0x1084
  400c20:	4b28      	ldr	r3, [pc, #160]	; (400cc4 <hif_receive+0x100>)
  400c22:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400c24:	4603      	mov	r3, r0
  400c26:	2800      	cmp	r0, #0
  400c28:	d139      	bne.n	400c9e <hif_receive+0xda>

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;


	size = (uint16)((reg >> 2) & 0xfff);
  400c2a:	f3c8 088b 	ubfx	r8, r8, #2, #12
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
  400c2e:	4546      	cmp	r6, r8
  400c30:	d90e      	bls.n	400c50 <hif_receive+0x8c>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  400c32:	f240 227a 	movw	r2, #634	; 0x27a
  400c36:	491e      	ldr	r1, [pc, #120]	; (400cb0 <hif_receive+0xec>)
  400c38:	481e      	ldr	r0, [pc, #120]	; (400cb4 <hif_receive+0xf0>)
  400c3a:	4c1f      	ldr	r4, [pc, #124]	; (400cb8 <hif_receive+0xf4>)
  400c3c:	47a0      	blx	r4
  400c3e:	4642      	mov	r2, r8
  400c40:	4631      	mov	r1, r6
  400c42:	4821      	ldr	r0, [pc, #132]	; (400cc8 <hif_receive+0x104>)
  400c44:	47a0      	blx	r4
  400c46:	481e      	ldr	r0, [pc, #120]	; (400cc0 <hif_receive+0xfc>)
  400c48:	47a0      	blx	r4
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
	{
		ret = M2M_ERR_FAIL;
  400c4a:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
  400c4e:	e026      	b.n	400c9e <hif_receive+0xda>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  400c50:	9b01      	ldr	r3, [sp, #4]
  400c52:	429d      	cmp	r5, r3
  400c54:	d304      	bcc.n	400c60 <hif_receive+0x9c>
  400c56:	eb05 0906 	add.w	r9, r5, r6
  400c5a:	4443      	add	r3, r8
  400c5c:	4599      	cmp	r9, r3
  400c5e:	d90c      	bls.n	400c7a <hif_receive+0xb6>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  400c60:	f44f 7220 	mov.w	r2, #640	; 0x280
  400c64:	4912      	ldr	r1, [pc, #72]	; (400cb0 <hif_receive+0xec>)
  400c66:	4813      	ldr	r0, [pc, #76]	; (400cb4 <hif_receive+0xf0>)
  400c68:	4c13      	ldr	r4, [pc, #76]	; (400cb8 <hif_receive+0xf4>)
  400c6a:	47a0      	blx	r4
  400c6c:	4817      	ldr	r0, [pc, #92]	; (400ccc <hif_receive+0x108>)
  400c6e:	47a0      	blx	r4
  400c70:	4813      	ldr	r0, [pc, #76]	; (400cc0 <hif_receive+0xfc>)
  400c72:	47a0      	blx	r4
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
	{
		ret = M2M_ERR_FAIL;
  400c74:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
  400c78:	e011      	b.n	400c9e <hif_receive+0xda>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  400c7a:	4632      	mov	r2, r6
  400c7c:	4639      	mov	r1, r7
  400c7e:	4628      	mov	r0, r5
  400c80:	4b13      	ldr	r3, [pc, #76]	; (400cd0 <hif_receive+0x10c>)
  400c82:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400c84:	4603      	mov	r3, r0
  400c86:	b950      	cbnz	r0, 400c9e <hif_receive+0xda>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  400c88:	9a01      	ldr	r2, [sp, #4]
  400c8a:	4442      	add	r2, r8
  400c8c:	454a      	cmp	r2, r9
  400c8e:	d000      	beq.n	400c92 <hif_receive+0xce>
  400c90:	b12c      	cbz	r4, 400c9e <hif_receive+0xda>
	{
		gu8HifSizeDone = 1;
  400c92:	2201      	movs	r2, #1
  400c94:	4b04      	ldr	r3, [pc, #16]	; (400ca8 <hif_receive+0xe4>)
  400c96:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
  400c98:	4b04      	ldr	r3, [pc, #16]	; (400cac <hif_receive+0xe8>)
  400c9a:	4798      	blx	r3
  400c9c:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  400c9e:	4618      	mov	r0, r3
  400ca0:	b003      	add	sp, #12
  400ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400ca6:	bf00      	nop
  400ca8:	204008fc 	.word	0x204008fc
  400cac:	004005a9 	.word	0x004005a9
  400cb0:	0040af68 	.word	0x0040af68
  400cb4:	0040af20 	.word	0x0040af20
  400cb8:	004040ad 	.word	0x004040ad
  400cbc:	0040b0f4 	.word	0x0040b0f4
  400cc0:	0040af4c 	.word	0x0040af4c
  400cc4:	00401871 	.word	0x00401871
  400cc8:	0040b114 	.word	0x0040b114
  400ccc:	0040b158 	.word	0x0040b158
  400cd0:	00401889 	.word	0x00401889

00400cd4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  400cd4:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  400cd6:	1e43      	subs	r3, r0, #1
  400cd8:	2b06      	cmp	r3, #6
  400cda:	d81d      	bhi.n	400d18 <hif_register_cb+0x44>
  400cdc:	e8df f003 	tbb	[pc, r3]
  400ce0:	0c100408 	.word	0x0c100408
  400ce4:	141c      	.short	0x141c
  400ce6:	18          	.byte	0x18
  400ce7:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  400ce8:	4b13      	ldr	r3, [pc, #76]	; (400d38 <hif_register_cb+0x64>)
  400cea:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400cec:	2000      	movs	r0, #0
	switch(u8Grp)
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
  400cee:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  400cf0:	4b12      	ldr	r3, [pc, #72]	; (400d3c <hif_register_cb+0x68>)
  400cf2:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400cf4:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
  400cf6:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  400cf8:	4b11      	ldr	r3, [pc, #68]	; (400d40 <hif_register_cb+0x6c>)
  400cfa:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400cfc:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
  400cfe:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  400d00:	4b10      	ldr	r3, [pc, #64]	; (400d44 <hif_register_cb+0x70>)
  400d02:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400d04:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
  400d06:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  400d08:	4b0f      	ldr	r3, [pc, #60]	; (400d48 <hif_register_cb+0x74>)
  400d0a:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400d0c:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
  400d0e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  400d10:	4b0e      	ldr	r3, [pc, #56]	; (400d4c <hif_register_cb+0x78>)
  400d12:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400d14:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
			break;
  400d16:	bd38      	pop	{r3, r4, r5, pc}
  400d18:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  400d1a:	f240 22b9 	movw	r2, #697	; 0x2b9
  400d1e:	490c      	ldr	r1, [pc, #48]	; (400d50 <hif_register_cb+0x7c>)
  400d20:	480c      	ldr	r0, [pc, #48]	; (400d54 <hif_register_cb+0x80>)
  400d22:	4d0d      	ldr	r5, [pc, #52]	; (400d58 <hif_register_cb+0x84>)
  400d24:	47a8      	blx	r5
  400d26:	4621      	mov	r1, r4
  400d28:	480c      	ldr	r0, [pc, #48]	; (400d5c <hif_register_cb+0x88>)
  400d2a:	47a8      	blx	r5
  400d2c:	480c      	ldr	r0, [pc, #48]	; (400d60 <hif_register_cb+0x8c>)
  400d2e:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  400d30:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  400d34:	bd38      	pop	{r3, r4, r5, pc}
  400d36:	bf00      	nop
  400d38:	204008f8 	.word	0x204008f8
  400d3c:	204008e4 	.word	0x204008e4
  400d40:	20400900 	.word	0x20400900
  400d44:	204008ec 	.word	0x204008ec
  400d48:	204008e0 	.word	0x204008e0
  400d4c:	204008f0 	.word	0x204008f0
  400d50:	0040b1a8 	.word	0x0040b1a8
  400d54:	0040af20 	.word	0x0040af20
  400d58:	004040ad 	.word	0x004040ad
  400d5c:	0040b19c 	.word	0x0040b19c
  400d60:	0040af4c 	.word	0x0040af4c

00400d64 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
  400d64:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  400d66:	2400      	movs	r4, #0
  400d68:	4b09      	ldr	r3, [pc, #36]	; (400d90 <hif_init+0x2c>)
  400d6a:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  400d6c:	4b09      	ldr	r3, [pc, #36]	; (400d94 <hif_init+0x30>)
  400d6e:	601c      	str	r4, [r3, #0]

	gu8ChipSleep = 0;
  400d70:	4b09      	ldr	r3, [pc, #36]	; (400d98 <hif_init+0x34>)
  400d72:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  400d74:	4b09      	ldr	r3, [pc, #36]	; (400d9c <hif_init+0x38>)
  400d76:	701c      	strb	r4, [r3, #0]

	gu8Interrupt = 0;
  400d78:	4b09      	ldr	r3, [pc, #36]	; (400da0 <hif_init+0x3c>)
  400d7a:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  400d7c:	4809      	ldr	r0, [pc, #36]	; (400da4 <hif_init+0x40>)
  400d7e:	4b0a      	ldr	r3, [pc, #40]	; (400da8 <hif_init+0x44>)
  400d80:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  400d82:	490a      	ldr	r1, [pc, #40]	; (400dac <hif_init+0x48>)
  400d84:	2003      	movs	r0, #3
  400d86:	4b0a      	ldr	r3, [pc, #40]	; (400db0 <hif_init+0x4c>)
  400d88:	4798      	blx	r3

	return M2M_SUCCESS;
}
  400d8a:	4620      	mov	r0, r4
  400d8c:	bd10      	pop	{r4, pc}
  400d8e:	bf00      	nop
  400d90:	204008e4 	.word	0x204008e4
  400d94:	204008f8 	.word	0x204008f8
  400d98:	20400904 	.word	0x20400904
  400d9c:	204008f4 	.word	0x204008f4
  400da0:	204008e8 	.word	0x204008e8
  400da4:	00400595 	.word	0x00400595
  400da8:	00400281 	.word	0x00400281
  400dac:	004005a5 	.word	0x004005a5
  400db0:	00400cd5 	.word	0x00400cd5

00400db4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  400db4:	b530      	push	{r4, r5, lr}
  400db6:	b09f      	sub	sp, #124	; 0x7c
  400db8:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  400dba:	282c      	cmp	r0, #44	; 0x2c
  400dbc:	d111      	bne.n	400de2 <m2m_wifi_cb+0x2e>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  400dbe:	2300      	movs	r3, #0
  400dc0:	2204      	movs	r2, #4
  400dc2:	a903      	add	r1, sp, #12
  400dc4:	4628      	mov	r0, r5
  400dc6:	4c90      	ldr	r4, [pc, #576]	; (401008 <m2m_wifi_cb+0x254>)
  400dc8:	47a0      	blx	r4
  400dca:	2800      	cmp	r0, #0
  400dcc:	f040 8119 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400dd0:	4b8e      	ldr	r3, [pc, #568]	; (40100c <m2m_wifi_cb+0x258>)
  400dd2:	681b      	ldr	r3, [r3, #0]
  400dd4:	2b00      	cmp	r3, #0
  400dd6:	f000 8114 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  400dda:	a903      	add	r1, sp, #12
  400ddc:	202c      	movs	r0, #44	; 0x2c
  400dde:	4798      	blx	r3
  400de0:	e10f      	b.n	401002 <m2m_wifi_cb+0x24e>
  400de2:	4604      	mov	r4, r0
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  400de4:	281b      	cmp	r0, #27
  400de6:	d111      	bne.n	400e0c <m2m_wifi_cb+0x58>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  400de8:	2300      	movs	r3, #0
  400dea:	2208      	movs	r2, #8
  400dec:	a903      	add	r1, sp, #12
  400dee:	4628      	mov	r0, r5
  400df0:	4c85      	ldr	r4, [pc, #532]	; (401008 <m2m_wifi_cb+0x254>)
  400df2:	47a0      	blx	r4
  400df4:	2800      	cmp	r0, #0
  400df6:	f040 8104 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400dfa:	4b84      	ldr	r3, [pc, #528]	; (40100c <m2m_wifi_cb+0x258>)
  400dfc:	681b      	ldr	r3, [r3, #0]
  400dfe:	2b00      	cmp	r3, #0
  400e00:	f000 80ff 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  400e04:	a903      	add	r1, sp, #12
  400e06:	201b      	movs	r0, #27
  400e08:	4798      	blx	r3
  400e0a:	e0fa      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  400e0c:	2806      	cmp	r0, #6
  400e0e:	d111      	bne.n	400e34 <m2m_wifi_cb+0x80>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  400e10:	2301      	movs	r3, #1
  400e12:	2230      	movs	r2, #48	; 0x30
  400e14:	a903      	add	r1, sp, #12
  400e16:	4628      	mov	r0, r5
  400e18:	4c7b      	ldr	r4, [pc, #492]	; (401008 <m2m_wifi_cb+0x254>)
  400e1a:	47a0      	blx	r4
  400e1c:	2800      	cmp	r0, #0
  400e1e:	f040 80f0 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  400e22:	4b7a      	ldr	r3, [pc, #488]	; (40100c <m2m_wifi_cb+0x258>)
  400e24:	681b      	ldr	r3, [r3, #0]
  400e26:	2b00      	cmp	r3, #0
  400e28:	f000 80eb 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  400e2c:	a903      	add	r1, sp, #12
  400e2e:	2006      	movs	r0, #6
  400e30:	4798      	blx	r3
  400e32:	e0e6      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  400e34:	280e      	cmp	r0, #14
  400e36:	f000 80e4 	beq.w	401002 <m2m_wifi_cb+0x24e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  400e3a:	2832      	cmp	r0, #50	; 0x32
  400e3c:	d111      	bne.n	400e62 <m2m_wifi_cb+0xae>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  400e3e:	2300      	movs	r3, #0
  400e40:	2210      	movs	r2, #16
  400e42:	a903      	add	r1, sp, #12
  400e44:	4628      	mov	r0, r5
  400e46:	4c70      	ldr	r4, [pc, #448]	; (401008 <m2m_wifi_cb+0x254>)
  400e48:	47a0      	blx	r4
  400e4a:	2800      	cmp	r0, #0
  400e4c:	f040 80d9 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400e50:	4b6e      	ldr	r3, [pc, #440]	; (40100c <m2m_wifi_cb+0x258>)
  400e52:	681b      	ldr	r3, [r3, #0]
  400e54:	2b00      	cmp	r3, #0
  400e56:	f000 80d4 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  400e5a:	a903      	add	r1, sp, #12
  400e5c:	2032      	movs	r0, #50	; 0x32
  400e5e:	4798      	blx	r3
  400e60:	e0cf      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  400e62:	282f      	cmp	r0, #47	; 0x2f
  400e64:	d116      	bne.n	400e94 <m2m_wifi_cb+0xe0>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  400e66:	2264      	movs	r2, #100	; 0x64
  400e68:	2100      	movs	r1, #0
  400e6a:	a803      	add	r0, sp, #12
  400e6c:	4b68      	ldr	r3, [pc, #416]	; (401010 <m2m_wifi_cb+0x25c>)
  400e6e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  400e70:	2300      	movs	r3, #0
  400e72:	2264      	movs	r2, #100	; 0x64
  400e74:	a903      	add	r1, sp, #12
  400e76:	4628      	mov	r0, r5
  400e78:	4c63      	ldr	r4, [pc, #396]	; (401008 <m2m_wifi_cb+0x254>)
  400e7a:	47a0      	blx	r4
  400e7c:	2800      	cmp	r0, #0
  400e7e:	f040 80c0 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400e82:	4b62      	ldr	r3, [pc, #392]	; (40100c <m2m_wifi_cb+0x258>)
  400e84:	681b      	ldr	r3, [r3, #0]
  400e86:	2b00      	cmp	r3, #0
  400e88:	f000 80bb 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  400e8c:	a903      	add	r1, sp, #12
  400e8e:	202f      	movs	r0, #47	; 0x2f
  400e90:	4798      	blx	r3
  400e92:	e0b6      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  400e94:	2834      	cmp	r0, #52	; 0x34
  400e96:	d120      	bne.n	400eda <m2m_wifi_cb+0x126>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  400e98:	2300      	movs	r3, #0
  400e9a:	2204      	movs	r2, #4
  400e9c:	a903      	add	r1, sp, #12
  400e9e:	4628      	mov	r0, r5
  400ea0:	4c59      	ldr	r4, [pc, #356]	; (401008 <m2m_wifi_cb+0x254>)
  400ea2:	47a0      	blx	r4
  400ea4:	2800      	cmp	r0, #0
  400ea6:	f040 80ac 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  400eaa:	485a      	ldr	r0, [pc, #360]	; (401014 <m2m_wifi_cb+0x260>)
  400eac:	4c5a      	ldr	r4, [pc, #360]	; (401018 <m2m_wifi_cb+0x264>)
  400eae:	47a0      	blx	r4
  400eb0:	9903      	ldr	r1, [sp, #12]
  400eb2:	0e0b      	lsrs	r3, r1, #24
  400eb4:	9300      	str	r3, [sp, #0]
  400eb6:	f3c1 4307 	ubfx	r3, r1, #16, #8
  400eba:	f3c1 2207 	ubfx	r2, r1, #8, #8
  400ebe:	b2c9      	uxtb	r1, r1
  400ec0:	4856      	ldr	r0, [pc, #344]	; (40101c <m2m_wifi_cb+0x268>)
  400ec2:	47a0      	blx	r4
  400ec4:	4856      	ldr	r0, [pc, #344]	; (401020 <m2m_wifi_cb+0x26c>)
  400ec6:	47a0      	blx	r4
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
  400ec8:	4b50      	ldr	r3, [pc, #320]	; (40100c <m2m_wifi_cb+0x258>)
  400eca:	681b      	ldr	r3, [r3, #0]
  400ecc:	2b00      	cmp	r3, #0
  400ece:	f000 8098 	beq.w	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  400ed2:	2100      	movs	r1, #0
  400ed4:	2034      	movs	r0, #52	; 0x34
  400ed6:	4798      	blx	r3
  400ed8:	e093      	b.n	401002 <m2m_wifi_cb+0x24e>

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  400eda:	2811      	cmp	r0, #17
  400edc:	d116      	bne.n	400f0c <m2m_wifi_cb+0x158>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
  400ede:	2300      	movs	r3, #0
  400ee0:	4a50      	ldr	r2, [pc, #320]	; (401024 <m2m_wifi_cb+0x270>)
  400ee2:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  400ee4:	2204      	movs	r2, #4
  400ee6:	a903      	add	r1, sp, #12
  400ee8:	4628      	mov	r0, r5
  400eea:	4c47      	ldr	r4, [pc, #284]	; (401008 <m2m_wifi_cb+0x254>)
  400eec:	47a0      	blx	r4
  400eee:	2800      	cmp	r0, #0
  400ef0:	f040 8087 	bne.w	401002 <m2m_wifi_cb+0x24e>
		{
			gu8ChNum = strState.u8NumofCh;
  400ef4:	f89d 200c 	ldrb.w	r2, [sp, #12]
  400ef8:	4b4b      	ldr	r3, [pc, #300]	; (401028 <m2m_wifi_cb+0x274>)
  400efa:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  400efc:	4b43      	ldr	r3, [pc, #268]	; (40100c <m2m_wifi_cb+0x258>)
  400efe:	681b      	ldr	r3, [r3, #0]
  400f00:	2b00      	cmp	r3, #0
  400f02:	d07e      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  400f04:	a903      	add	r1, sp, #12
  400f06:	2011      	movs	r0, #17
  400f08:	4798      	blx	r3
  400f0a:	e07a      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  400f0c:	2813      	cmp	r0, #19
  400f0e:	d10f      	bne.n	400f30 <m2m_wifi_cb+0x17c>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  400f10:	2300      	movs	r3, #0
  400f12:	222c      	movs	r2, #44	; 0x2c
  400f14:	a903      	add	r1, sp, #12
  400f16:	4628      	mov	r0, r5
  400f18:	4c3b      	ldr	r4, [pc, #236]	; (401008 <m2m_wifi_cb+0x254>)
  400f1a:	47a0      	blx	r4
  400f1c:	2800      	cmp	r0, #0
  400f1e:	d170      	bne.n	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400f20:	4b3a      	ldr	r3, [pc, #232]	; (40100c <m2m_wifi_cb+0x258>)
  400f22:	681b      	ldr	r3, [r3, #0]
  400f24:	2b00      	cmp	r3, #0
  400f26:	d06c      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  400f28:	a903      	add	r1, sp, #12
  400f2a:	2013      	movs	r0, #19
  400f2c:	4798      	blx	r3
  400f2e:	e068      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  400f30:	2804      	cmp	r0, #4
  400f32:	d10f      	bne.n	400f54 <m2m_wifi_cb+0x1a0>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  400f34:	2300      	movs	r3, #0
  400f36:	2204      	movs	r2, #4
  400f38:	a91c      	add	r1, sp, #112	; 0x70
  400f3a:	4628      	mov	r0, r5
  400f3c:	4c32      	ldr	r4, [pc, #200]	; (401008 <m2m_wifi_cb+0x254>)
  400f3e:	47a0      	blx	r4
  400f40:	2800      	cmp	r0, #0
  400f42:	d15e      	bne.n	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400f44:	4b31      	ldr	r3, [pc, #196]	; (40100c <m2m_wifi_cb+0x258>)
  400f46:	681b      	ldr	r3, [r3, #0]
  400f48:	2b00      	cmp	r3, #0
  400f4a:	d05a      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  400f4c:	a91c      	add	r1, sp, #112	; 0x70
  400f4e:	2004      	movs	r0, #4
  400f50:	4798      	blx	r3
  400f52:	e056      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  400f54:	2865      	cmp	r0, #101	; 0x65
  400f56:	d10f      	bne.n	400f78 <m2m_wifi_cb+0x1c4>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  400f58:	2300      	movs	r3, #0
  400f5a:	2204      	movs	r2, #4
  400f5c:	a91c      	add	r1, sp, #112	; 0x70
  400f5e:	4628      	mov	r0, r5
  400f60:	4c29      	ldr	r4, [pc, #164]	; (401008 <m2m_wifi_cb+0x254>)
  400f62:	47a0      	blx	r4
  400f64:	2800      	cmp	r0, #0
  400f66:	d14c      	bne.n	401002 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400f68:	4b28      	ldr	r3, [pc, #160]	; (40100c <m2m_wifi_cb+0x258>)
  400f6a:	681b      	ldr	r3, [r3, #0]
  400f6c:	2b00      	cmp	r3, #0
  400f6e:	d048      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  400f70:	a91c      	add	r1, sp, #112	; 0x70
  400f72:	2065      	movs	r0, #101	; 0x65
  400f74:	4798      	blx	r3
  400f76:	e044      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  400f78:	2809      	cmp	r0, #9
  400f7a:	d10f      	bne.n	400f9c <m2m_wifi_cb+0x1e8>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  400f7c:	2301      	movs	r3, #1
  400f7e:	2264      	movs	r2, #100	; 0x64
  400f80:	a903      	add	r1, sp, #12
  400f82:	4628      	mov	r0, r5
  400f84:	4c20      	ldr	r4, [pc, #128]	; (401008 <m2m_wifi_cb+0x254>)
  400f86:	47a0      	blx	r4
  400f88:	2800      	cmp	r0, #0
  400f8a:	d13a      	bne.n	401002 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  400f8c:	4b1f      	ldr	r3, [pc, #124]	; (40100c <m2m_wifi_cb+0x258>)
  400f8e:	681b      	ldr	r3, [r3, #0]
  400f90:	2b00      	cmp	r3, #0
  400f92:	d036      	beq.n	401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  400f94:	a903      	add	r1, sp, #12
  400f96:	2009      	movs	r0, #9
  400f98:	4798      	blx	r3
  400f9a:	e032      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  400f9c:	282a      	cmp	r0, #42	; 0x2a
  400f9e:	d10d      	bne.n	400fbc <m2m_wifi_cb+0x208>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  400fa0:	2301      	movs	r3, #1
  400fa2:	2204      	movs	r2, #4
  400fa4:	a903      	add	r1, sp, #12
  400fa6:	4628      	mov	r0, r5
  400fa8:	4c17      	ldr	r4, [pc, #92]	; (401008 <m2m_wifi_cb+0x254>)
  400faa:	47a0      	blx	r4
  400fac:	bb48      	cbnz	r0, 401002 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  400fae:	4b17      	ldr	r3, [pc, #92]	; (40100c <m2m_wifi_cb+0x258>)
  400fb0:	681b      	ldr	r3, [r3, #0]
  400fb2:	b333      	cbz	r3, 401002 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  400fb4:	a903      	add	r1, sp, #12
  400fb6:	202a      	movs	r0, #42	; 0x2a
  400fb8:	4798      	blx	r3
  400fba:	e022      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  400fbc:	2820      	cmp	r0, #32
  400fbe:	d115      	bne.n	400fec <m2m_wifi_cb+0x238>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  400fc0:	2300      	movs	r3, #0
  400fc2:	2208      	movs	r2, #8
  400fc4:	a903      	add	r1, sp, #12
  400fc6:	4628      	mov	r0, r5
  400fc8:	4c0f      	ldr	r4, [pc, #60]	; (401008 <m2m_wifi_cb+0x254>)
  400fca:	47a0      	blx	r4
  400fcc:	b9c8      	cbnz	r0, 401002 <m2m_wifi_cb+0x24e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  400fce:	2301      	movs	r3, #1
  400fd0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  400fd4:	9903      	ldr	r1, [sp, #12]
  400fd6:	f105 0008 	add.w	r0, r5, #8
  400fda:	47a0      	blx	r4
  400fdc:	b988      	cbnz	r0, 401002 <m2m_wifi_cb+0x24e>
			{
				if(gpfAppWifiCb)
  400fde:	4b0b      	ldr	r3, [pc, #44]	; (40100c <m2m_wifi_cb+0x258>)
  400fe0:	681b      	ldr	r3, [r3, #0]
  400fe2:	b173      	cbz	r3, 401002 <m2m_wifi_cb+0x24e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  400fe4:	a903      	add	r1, sp, #12
  400fe6:	2020      	movs	r0, #32
  400fe8:	4798      	blx	r3
  400fea:	e00a      	b.n	401002 <m2m_wifi_cb+0x24e>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  400fec:	f44f 7295 	mov.w	r2, #298	; 0x12a
  400ff0:	490e      	ldr	r1, [pc, #56]	; (40102c <m2m_wifi_cb+0x278>)
  400ff2:	480f      	ldr	r0, [pc, #60]	; (401030 <m2m_wifi_cb+0x27c>)
  400ff4:	4d08      	ldr	r5, [pc, #32]	; (401018 <m2m_wifi_cb+0x264>)
  400ff6:	47a8      	blx	r5
  400ff8:	4621      	mov	r1, r4
  400ffa:	480e      	ldr	r0, [pc, #56]	; (401034 <m2m_wifi_cb+0x280>)
  400ffc:	47a8      	blx	r5
  400ffe:	4808      	ldr	r0, [pc, #32]	; (401020 <m2m_wifi_cb+0x26c>)
  401000:	47a8      	blx	r5
	}
}
  401002:	b01f      	add	sp, #124	; 0x7c
  401004:	bd30      	pop	{r4, r5, pc}
  401006:	bf00      	nop
  401008:	00400bc5 	.word	0x00400bc5
  40100c:	20400908 	.word	0x20400908
  401010:	00400569 	.word	0x00400569
  401014:	0040b1f4 	.word	0x0040b1f4
  401018:	004040ad 	.word	0x004040ad
  40101c:	0040b200 	.word	0x0040b200
  401020:	0040af4c 	.word	0x0040af4c
  401024:	2040090c 	.word	0x2040090c
  401028:	2040090d 	.word	0x2040090d
  40102c:	0040b1e8 	.word	0x0040b1e8
  401030:	0040af20 	.word	0x0040af20
  401034:	0040b220 	.word	0x0040b220

00401038 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  401038:	b5f0      	push	{r4, r5, r6, r7, lr}
  40103a:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  40103c:	2301      	movs	r3, #1
  40103e:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  401042:	2800      	cmp	r0, #0
  401044:	d04e      	beq.n	4010e4 <m2m_wifi_init+0xac>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  401046:	6802      	ldr	r2, [r0, #0]
  401048:	4b29      	ldr	r3, [pc, #164]	; (4010f0 <m2m_wifi_init+0xb8>)
  40104a:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  40104c:	2200      	movs	r2, #0
  40104e:	4b29      	ldr	r3, [pc, #164]	; (4010f4 <m2m_wifi_init+0xbc>)
  401050:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  401052:	f10d 0007 	add.w	r0, sp, #7
  401056:	4b28      	ldr	r3, [pc, #160]	; (4010f8 <m2m_wifi_init+0xc0>)
  401058:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  40105a:	4604      	mov	r4, r0
  40105c:	2800      	cmp	r0, #0
  40105e:	d143      	bne.n	4010e8 <m2m_wifi_init+0xb0>
	/* Initialize host interface module */
	ret = hif_init(NULL);
  401060:	4b26      	ldr	r3, [pc, #152]	; (4010fc <m2m_wifi_init+0xc4>)
  401062:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  401064:	4604      	mov	r4, r0
  401066:	2800      	cmp	r0, #0
  401068:	d138      	bne.n	4010dc <m2m_wifi_init+0xa4>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  40106a:	4925      	ldr	r1, [pc, #148]	; (401100 <m2m_wifi_init+0xc8>)
  40106c:	2001      	movs	r0, #1
  40106e:	4b25      	ldr	r3, [pc, #148]	; (401104 <m2m_wifi_init+0xcc>)
  401070:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
  401072:	a802      	add	r0, sp, #8
  401074:	4b24      	ldr	r3, [pc, #144]	; (401108 <m2m_wifi_init+0xd0>)
  401076:	4798      	blx	r3
  401078:	4604      	mov	r4, r0

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  40107a:	4f24      	ldr	r7, [pc, #144]	; (40110c <m2m_wifi_init+0xd4>)
  40107c:	4638      	mov	r0, r7
  40107e:	4d24      	ldr	r5, [pc, #144]	; (401110 <m2m_wifi_init+0xd8>)
  401080:	47a8      	blx	r5
  401082:	f89d 300e 	ldrb.w	r3, [sp, #14]
  401086:	f89d 200d 	ldrb.w	r2, [sp, #13]
  40108a:	f89d 100c 	ldrb.w	r1, [sp, #12]
  40108e:	4821      	ldr	r0, [pc, #132]	; (401114 <m2m_wifi_init+0xdc>)
  401090:	47a8      	blx	r5
  401092:	4e21      	ldr	r6, [pc, #132]	; (401118 <m2m_wifi_init+0xe0>)
  401094:	4630      	mov	r0, r6
  401096:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  401098:	4638      	mov	r0, r7
  40109a:	47a8      	blx	r5
  40109c:	f89d 3011 	ldrb.w	r3, [sp, #17]
  4010a0:	f89d 2010 	ldrb.w	r2, [sp, #16]
  4010a4:	f89d 100f 	ldrb.w	r1, [sp, #15]
  4010a8:	481c      	ldr	r0, [pc, #112]	; (40111c <m2m_wifi_init+0xe4>)
  4010aa:	47a8      	blx	r5
  4010ac:	4630      	mov	r0, r6
  4010ae:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  4010b0:	4638      	mov	r0, r7
  4010b2:	47a8      	blx	r5
  4010b4:	2300      	movs	r3, #0
  4010b6:	2203      	movs	r2, #3
  4010b8:	2113      	movs	r1, #19
  4010ba:	4819      	ldr	r0, [pc, #100]	; (401120 <m2m_wifi_init+0xe8>)
  4010bc:	47a8      	blx	r5
  4010be:	4630      	mov	r0, r6
  4010c0:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  4010c2:	f114 0f0d 	cmn.w	r4, #13
  4010c6:	d10f      	bne.n	4010e8 <m2m_wifi_init+0xb0>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
  4010c8:	f240 12d5 	movw	r2, #469	; 0x1d5
  4010cc:	4915      	ldr	r1, [pc, #84]	; (401124 <m2m_wifi_init+0xec>)
  4010ce:	4816      	ldr	r0, [pc, #88]	; (401128 <m2m_wifi_init+0xf0>)
  4010d0:	47a8      	blx	r5
  4010d2:	4816      	ldr	r0, [pc, #88]	; (40112c <m2m_wifi_init+0xf4>)
  4010d4:	47a8      	blx	r5
  4010d6:	4630      	mov	r0, r6
  4010d8:	47a8      	blx	r5
  4010da:	e005      	b.n	4010e8 <m2m_wifi_init+0xb0>
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
  4010dc:	2000      	movs	r0, #0
  4010de:	4b14      	ldr	r3, [pc, #80]	; (401130 <m2m_wifi_init+0xf8>)
  4010e0:	4798      	blx	r3
  4010e2:	e001      	b.n	4010e8 <m2m_wifi_init+0xb0>
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
	
	if(param == NULL) {
		ret = M2M_ERR_FAIL;
  4010e4:	f06f 040b 	mvn.w	r4, #11

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  4010e8:	4620      	mov	r0, r4
  4010ea:	b00b      	add	sp, #44	; 0x2c
  4010ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4010ee:	bf00      	nop
  4010f0:	20400908 	.word	0x20400908
  4010f4:	2040090c 	.word	0x2040090c
  4010f8:	004019f5 	.word	0x004019f5
  4010fc:	00400d65 	.word	0x00400d65
  401100:	00400db5 	.word	0x00400db5
  401104:	00400cd5 	.word	0x00400cd5
  401108:	00401949 	.word	0x00401949
  40110c:	0040b1f4 	.word	0x0040b1f4
  401110:	004040ad 	.word	0x004040ad
  401114:	0040b2d8 	.word	0x0040b2d8
  401118:	0040af4c 	.word	0x0040af4c
  40111c:	0040b2f4 	.word	0x0040b2f4
  401120:	0040b310 	.word	0x0040b310
  401124:	0040b51c 	.word	0x0040b51c
  401128:	0040af20 	.word	0x0040af20
  40112c:	0040b32c 	.word	0x0040b32c
  401130:	00401abd 	.word	0x00401abd

00401134 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  401134:	b508      	push	{r3, lr}
	return hif_handle_isr();
  401136:	4b01      	ldr	r3, [pc, #4]	; (40113c <m2m_wifi_handle_events+0x8>)
  401138:	4798      	blx	r3
}
  40113a:	bd08      	pop	{r3, pc}
  40113c:	004008a5 	.word	0x004008a5

00401140 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  401140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401144:	b0a0      	sub	sp, #128	; 0x80
  401146:	4680      	mov	r8, r0
  401148:	460d      	mov	r5, r1
  40114a:	4614      	mov	r4, r2
  40114c:	461e      	mov	r6, r3
  40114e:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  401152:	2a01      	cmp	r2, #1
  401154:	d045      	beq.n	4011e2 <m2m_wifi_connect_sc+0xa2>
	{
		if(pvAuthInfo == NULL)
  401156:	b963      	cbnz	r3, 401172 <m2m_wifi_connect_sc+0x32>
		{
			M2M_ERR("Key is not valid\n");
  401158:	f240 2203 	movw	r2, #515	; 0x203
  40115c:	497a      	ldr	r1, [pc, #488]	; (401348 <m2m_wifi_connect_sc+0x208>)
  40115e:	487b      	ldr	r0, [pc, #492]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  401160:	4c7b      	ldr	r4, [pc, #492]	; (401350 <m2m_wifi_connect_sc+0x210>)
  401162:	47a0      	blx	r4
  401164:	487b      	ldr	r0, [pc, #492]	; (401354 <m2m_wifi_connect_sc+0x214>)
  401166:	47a0      	blx	r4
  401168:	487b      	ldr	r0, [pc, #492]	; (401358 <m2m_wifi_connect_sc+0x218>)
  40116a:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40116c:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401170:	e0e7      	b.n	401342 <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  401172:	2a02      	cmp	r2, #2
  401174:	d135      	bne.n	4011e2 <m2m_wifi_connect_sc+0xa2>
  401176:	4618      	mov	r0, r3
  401178:	4b78      	ldr	r3, [pc, #480]	; (40135c <m2m_wifi_connect_sc+0x21c>)
  40117a:	4798      	blx	r3
  40117c:	2840      	cmp	r0, #64	; 0x40
  40117e:	d130      	bne.n	4011e2 <m2m_wifi_connect_sc+0xa2>
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  401180:	7833      	ldrb	r3, [r6, #0]
  401182:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401186:	b2d2      	uxtb	r2, r2
  401188:	2a36      	cmp	r2, #54	; 0x36
  40118a:	d81b      	bhi.n	4011c4 <m2m_wifi_connect_sc+0x84>
  40118c:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  401190:	b2d2      	uxtb	r2, r2
  401192:	2a06      	cmp	r2, #6
  401194:	d916      	bls.n	4011c4 <m2m_wifi_connect_sc+0x84>
  401196:	3b47      	subs	r3, #71	; 0x47
  401198:	b2db      	uxtb	r3, r3
  40119a:	2b19      	cmp	r3, #25
  40119c:	d912      	bls.n	4011c4 <m2m_wifi_connect_sc+0x84>
  40119e:	4631      	mov	r1, r6
  4011a0:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  4011a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4011a8:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  4011ac:	b2d2      	uxtb	r2, r2
  4011ae:	2a06      	cmp	r2, #6
  4011b0:	d908      	bls.n	4011c4 <m2m_wifi_connect_sc+0x84>
  4011b2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4011b6:	b2d2      	uxtb	r2, r2
  4011b8:	2a36      	cmp	r2, #54	; 0x36
  4011ba:	d803      	bhi.n	4011c4 <m2m_wifi_connect_sc+0x84>
  4011bc:	3b47      	subs	r3, #71	; 0x47
  4011be:	b2db      	uxtb	r3, r3
  4011c0:	2b19      	cmp	r3, #25
  4011c2:	d80c      	bhi.n	4011de <m2m_wifi_connect_sc+0x9e>
				{
					M2M_ERR("Invalid Key\n");
  4011c4:	f240 220f 	movw	r2, #527	; 0x20f
  4011c8:	495f      	ldr	r1, [pc, #380]	; (401348 <m2m_wifi_connect_sc+0x208>)
  4011ca:	4860      	ldr	r0, [pc, #384]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  4011cc:	4c60      	ldr	r4, [pc, #384]	; (401350 <m2m_wifi_connect_sc+0x210>)
  4011ce:	47a0      	blx	r4
  4011d0:	4863      	ldr	r0, [pc, #396]	; (401360 <m2m_wifi_connect_sc+0x220>)
  4011d2:	47a0      	blx	r4
  4011d4:	4860      	ldr	r0, [pc, #384]	; (401358 <m2m_wifi_connect_sc+0x218>)
  4011d6:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  4011d8:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  4011dc:	e0b1      	b.n	401342 <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
  4011de:	4288      	cmp	r0, r1
  4011e0:	d1e0      	bne.n	4011a4 <m2m_wifi_connect_sc+0x64>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  4011e2:	1e6b      	subs	r3, r5, #1
  4011e4:	b2db      	uxtb	r3, r3
  4011e6:	2b1f      	cmp	r3, #31
  4011e8:	d90c      	bls.n	401204 <m2m_wifi_connect_sc+0xc4>
	{
		M2M_ERR("SSID LEN INVALID\n");
  4011ea:	f240 2219 	movw	r2, #537	; 0x219
  4011ee:	4956      	ldr	r1, [pc, #344]	; (401348 <m2m_wifi_connect_sc+0x208>)
  4011f0:	4856      	ldr	r0, [pc, #344]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  4011f2:	4c57      	ldr	r4, [pc, #348]	; (401350 <m2m_wifi_connect_sc+0x210>)
  4011f4:	47a0      	blx	r4
  4011f6:	485b      	ldr	r0, [pc, #364]	; (401364 <m2m_wifi_connect_sc+0x224>)
  4011f8:	47a0      	blx	r4
  4011fa:	4857      	ldr	r0, [pc, #348]	; (401358 <m2m_wifi_connect_sc+0x218>)
  4011fc:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4011fe:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  401202:	e09e      	b.n	401342 <m2m_wifi_connect_sc+0x202>
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  401204:	2fff      	cmp	r7, #255	; 0xff
  401206:	d00e      	beq.n	401226 <m2m_wifi_connect_sc+0xe6>
  401208:	2f0d      	cmp	r7, #13
  40120a:	d90c      	bls.n	401226 <m2m_wifi_connect_sc+0xe6>
		{
			M2M_ERR("CH INVALID\n");
  40120c:	f240 2222 	movw	r2, #546	; 0x222
  401210:	494d      	ldr	r1, [pc, #308]	; (401348 <m2m_wifi_connect_sc+0x208>)
  401212:	484e      	ldr	r0, [pc, #312]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  401214:	4c4e      	ldr	r4, [pc, #312]	; (401350 <m2m_wifi_connect_sc+0x210>)
  401216:	47a0      	blx	r4
  401218:	4853      	ldr	r0, [pc, #332]	; (401368 <m2m_wifi_connect_sc+0x228>)
  40121a:	47a0      	blx	r4
  40121c:	484e      	ldr	r0, [pc, #312]	; (401358 <m2m_wifi_connect_sc+0x218>)
  40121e:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  401220:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401224:	e08d      	b.n	401342 <m2m_wifi_connect_sc+0x202>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  401226:	462a      	mov	r2, r5
  401228:	4641      	mov	r1, r8
  40122a:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  40122e:	4b4f      	ldr	r3, [pc, #316]	; (40136c <m2m_wifi_connect_sc+0x22c>)
  401230:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  401232:	ab20      	add	r3, sp, #128	; 0x80
  401234:	441d      	add	r5, r3
  401236:	2300      	movs	r3, #0
  401238:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  40123c:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  401240:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  401244:	3300      	adds	r3, #0
  401246:	bf18      	it	ne
  401248:	2301      	movne	r3, #1
  40124a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  40124e:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  401252:	2c03      	cmp	r4, #3
  401254:	d138      	bne.n	4012c8 <m2m_wifi_connect_sc+0x188>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  401256:	7833      	ldrb	r3, [r6, #0]
  401258:	3b01      	subs	r3, #1
  40125a:	b2db      	uxtb	r3, r3
  40125c:	f88d 3014 	strb.w	r3, [sp, #20]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  401260:	2b03      	cmp	r3, #3
  401262:	d90e      	bls.n	401282 <m2m_wifi_connect_sc+0x142>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  401264:	f240 2239 	movw	r2, #569	; 0x239
  401268:	4937      	ldr	r1, [pc, #220]	; (401348 <m2m_wifi_connect_sc+0x208>)
  40126a:	4838      	ldr	r0, [pc, #224]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  40126c:	4c38      	ldr	r4, [pc, #224]	; (401350 <m2m_wifi_connect_sc+0x210>)
  40126e:	47a0      	blx	r4
  401270:	f89d 1014 	ldrb.w	r1, [sp, #20]
  401274:	483e      	ldr	r0, [pc, #248]	; (401370 <m2m_wifi_connect_sc+0x230>)
  401276:	47a0      	blx	r4
  401278:	4837      	ldr	r0, [pc, #220]	; (401358 <m2m_wifi_connect_sc+0x218>)
  40127a:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40127c:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401280:	e05f      	b.n	401342 <m2m_wifi_connect_sc+0x202>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  401282:	7872      	ldrb	r2, [r6, #1]
  401284:	1e53      	subs	r3, r2, #1
  401286:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  40128a:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  40128e:	2b0b      	cmp	r3, #11
  401290:	d00e      	beq.n	4012b0 <m2m_wifi_connect_sc+0x170>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  401292:	f44f 7210 	mov.w	r2, #576	; 0x240
  401296:	492c      	ldr	r1, [pc, #176]	; (401348 <m2m_wifi_connect_sc+0x208>)
  401298:	482c      	ldr	r0, [pc, #176]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  40129a:	4c2d      	ldr	r4, [pc, #180]	; (401350 <m2m_wifi_connect_sc+0x210>)
  40129c:	47a0      	blx	r4
  40129e:	f89d 1015 	ldrb.w	r1, [sp, #21]
  4012a2:	4834      	ldr	r0, [pc, #208]	; (401374 <m2m_wifi_connect_sc+0x234>)
  4012a4:	47a0      	blx	r4
  4012a6:	482c      	ldr	r0, [pc, #176]	; (401358 <m2m_wifi_connect_sc+0x218>)
  4012a8:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4012aa:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4012ae:	e048      	b.n	401342 <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  4012b0:	1cb1      	adds	r1, r6, #2
  4012b2:	f10d 0016 	add.w	r0, sp, #22
  4012b6:	4b2d      	ldr	r3, [pc, #180]	; (40136c <m2m_wifi_connect_sc+0x22c>)
  4012b8:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  4012ba:	7873      	ldrb	r3, [r6, #1]
  4012bc:	aa20      	add	r2, sp, #128	; 0x80
  4012be:	4413      	add	r3, r2
  4012c0:	2200      	movs	r2, #0
  4012c2:	f803 2c6a 	strb.w	r2, [r3, #-106]
  4012c6:	e032      	b.n	40132e <m2m_wifi_connect_sc+0x1ee>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  4012c8:	2c02      	cmp	r4, #2
  4012ca:	d119      	bne.n	401300 <m2m_wifi_connect_sc+0x1c0>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  4012cc:	4630      	mov	r0, r6
  4012ce:	4b23      	ldr	r3, [pc, #140]	; (40135c <m2m_wifi_connect_sc+0x21c>)
  4012d0:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  4012d2:	1e43      	subs	r3, r0, #1
  4012d4:	b29b      	uxth	r3, r3
  4012d6:	2b3f      	cmp	r3, #63	; 0x3f
  4012d8:	d90c      	bls.n	4012f4 <m2m_wifi_connect_sc+0x1b4>
		{
			M2M_ERR("Incorrect PSK key length\n");
  4012da:	f240 224f 	movw	r2, #591	; 0x24f
  4012de:	491a      	ldr	r1, [pc, #104]	; (401348 <m2m_wifi_connect_sc+0x208>)
  4012e0:	481a      	ldr	r0, [pc, #104]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  4012e2:	4c1b      	ldr	r4, [pc, #108]	; (401350 <m2m_wifi_connect_sc+0x210>)
  4012e4:	47a0      	blx	r4
  4012e6:	4824      	ldr	r0, [pc, #144]	; (401378 <m2m_wifi_connect_sc+0x238>)
  4012e8:	47a0      	blx	r4
  4012ea:	481b      	ldr	r0, [pc, #108]	; (401358 <m2m_wifi_connect_sc+0x218>)
  4012ec:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4012ee:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4012f2:	e026      	b.n	401342 <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  4012f4:	1c42      	adds	r2, r0, #1
  4012f6:	4631      	mov	r1, r6
  4012f8:	a805      	add	r0, sp, #20
  4012fa:	4b1c      	ldr	r3, [pc, #112]	; (40136c <m2m_wifi_connect_sc+0x22c>)
  4012fc:	4798      	blx	r3
  4012fe:	e016      	b.n	40132e <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  401300:	2c04      	cmp	r4, #4
  401302:	d105      	bne.n	401310 <m2m_wifi_connect_sc+0x1d0>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  401304:	223e      	movs	r2, #62	; 0x3e
  401306:	4631      	mov	r1, r6
  401308:	a805      	add	r0, sp, #20
  40130a:	4b18      	ldr	r3, [pc, #96]	; (40136c <m2m_wifi_connect_sc+0x22c>)
  40130c:	4798      	blx	r3
  40130e:	e00e      	b.n	40132e <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  401310:	2c01      	cmp	r4, #1
  401312:	d00c      	beq.n	40132e <m2m_wifi_connect_sc+0x1ee>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
  401314:	f240 225f 	movw	r2, #607	; 0x25f
  401318:	490b      	ldr	r1, [pc, #44]	; (401348 <m2m_wifi_connect_sc+0x208>)
  40131a:	480c      	ldr	r0, [pc, #48]	; (40134c <m2m_wifi_connect_sc+0x20c>)
  40131c:	4c0c      	ldr	r4, [pc, #48]	; (401350 <m2m_wifi_connect_sc+0x210>)
  40131e:	47a0      	blx	r4
  401320:	4816      	ldr	r0, [pc, #88]	; (40137c <m2m_wifi_connect_sc+0x23c>)
  401322:	47a0      	blx	r4
  401324:	480c      	ldr	r0, [pc, #48]	; (401358 <m2m_wifi_connect_sc+0x218>)
  401326:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  401328:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  40132c:	e009      	b.n	401342 <m2m_wifi_connect_sc+0x202>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  40132e:	2300      	movs	r3, #0
  401330:	9302      	str	r3, [sp, #8]
  401332:	9301      	str	r3, [sp, #4]
  401334:	9300      	str	r3, [sp, #0]
  401336:	236c      	movs	r3, #108	; 0x6c
  401338:	aa05      	add	r2, sp, #20
  40133a:	2128      	movs	r1, #40	; 0x28
  40133c:	2001      	movs	r0, #1
  40133e:	4c10      	ldr	r4, [pc, #64]	; (401380 <m2m_wifi_connect_sc+0x240>)
  401340:	47a0      	blx	r4

ERR1:
	return ret;
}
  401342:	b020      	add	sp, #128	; 0x80
  401344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401348:	0040b1d4 	.word	0x0040b1d4
  40134c:	0040af20 	.word	0x0040af20
  401350:	004040ad 	.word	0x004040ad
  401354:	0040b348 	.word	0x0040b348
  401358:	0040af4c 	.word	0x0040af4c
  40135c:	00400579 	.word	0x00400579
  401360:	0040b35c 	.word	0x0040b35c
  401364:	0040b36c 	.word	0x0040b36c
  401368:	0040b380 	.word	0x0040b380
  40136c:	00400555 	.word	0x00400555
  401370:	0040b38c 	.word	0x0040b38c
  401374:	0040b3a8 	.word	0x0040b3a8
  401378:	0040b3c4 	.word	0x0040b3c4
  40137c:	0040b3e0 	.word	0x0040b3e0
  401380:	004006cd 	.word	0x004006cd

00401384 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
  401384:	b510      	push	{r4, lr}
  401386:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  401388:	2400      	movs	r4, #0
  40138a:	9401      	str	r4, [sp, #4]
  40138c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  401390:	9400      	str	r4, [sp, #0]
  401392:	4c02      	ldr	r4, [pc, #8]	; (40139c <m2m_wifi_connect+0x18>)
  401394:	47a0      	blx	r4
}
  401396:	b002      	add	sp, #8
  401398:	bd10      	pop	{r4, pc}
  40139a:	bf00      	nop
  40139c:	00401141 	.word	0x00401141

004013a0 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  4013a0:	2000      	movs	r0, #0
  4013a2:	4770      	bx	lr

004013a4 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  4013a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4013a6:	b083      	sub	sp, #12
  4013a8:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  4013aa:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  4013ae:	4e0a      	ldr	r6, [pc, #40]	; (4013d8 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4013b0:	4f0a      	ldr	r7, [pc, #40]	; (4013dc <chip_apply_conf+0x38>)
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  4013b2:	4621      	mov	r1, r4
  4013b4:	4628      	mov	r0, r5
  4013b6:	47b0      	blx	r6
		if(val32 != 0) {		
  4013b8:	b154      	cbz	r4, 4013d0 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  4013ba:	a902      	add	r1, sp, #8
  4013bc:	2300      	movs	r3, #0
  4013be:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4013c2:	4628      	mov	r0, r5
  4013c4:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  4013c6:	2800      	cmp	r0, #0
  4013c8:	d1f3      	bne.n	4013b2 <chip_apply_conf+0xe>
				if(reg == val32)
  4013ca:	9b01      	ldr	r3, [sp, #4]
  4013cc:	429c      	cmp	r4, r3
  4013ce:	d1f0      	bne.n	4013b2 <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  4013d0:	2000      	movs	r0, #0
  4013d2:	b003      	add	sp, #12
  4013d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4013d6:	bf00      	nop
  4013d8:	0040187d 	.word	0x0040187d
  4013dc:	00401871 	.word	0x00401871

004013e0 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  4013e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4013e4:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  4013e6:	2001      	movs	r0, #1
  4013e8:	4b3d      	ldr	r3, [pc, #244]	; (4014e0 <nm_clkless_wake+0x100>)
  4013ea:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  4013ec:	a901      	add	r1, sp, #4
  4013ee:	2001      	movs	r0, #1
  4013f0:	4b3c      	ldr	r3, [pc, #240]	; (4014e4 <nm_clkless_wake+0x104>)
  4013f2:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  4013f4:	4682      	mov	sl, r0
  4013f6:	b148      	cbz	r0, 40140c <nm_clkless_wake+0x2c>
		M2M_ERR("Bus error (1). Wake up failed\n");
  4013f8:	2272      	movs	r2, #114	; 0x72
  4013fa:	493b      	ldr	r1, [pc, #236]	; (4014e8 <nm_clkless_wake+0x108>)
  4013fc:	483b      	ldr	r0, [pc, #236]	; (4014ec <nm_clkless_wake+0x10c>)
  4013fe:	4c3c      	ldr	r4, [pc, #240]	; (4014f0 <nm_clkless_wake+0x110>)
  401400:	47a0      	blx	r4
  401402:	483c      	ldr	r0, [pc, #240]	; (4014f4 <nm_clkless_wake+0x114>)
  401404:	47a0      	blx	r4
  401406:	483c      	ldr	r0, [pc, #240]	; (4014f8 <nm_clkless_wake+0x118>)
  401408:	47a0      	blx	r4
		goto _WAKE_EXIT;
  40140a:	e064      	b.n	4014d6 <nm_clkless_wake+0xf6>
  40140c:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  40140e:	f04f 0801 	mov.w	r8, #1
  401412:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 40150c <nm_clkless_wake+0x12c>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  401416:	4d32      	ldr	r5, [pc, #200]	; (4014e0 <nm_clkless_wake+0x100>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  401418:	4f38      	ldr	r7, [pc, #224]	; (4014fc <nm_clkless_wake+0x11c>)
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  40141a:	9901      	ldr	r1, [sp, #4]
  40141c:	f041 0102 	orr.w	r1, r1, #2
  401420:	4640      	mov	r0, r8
  401422:	47c8      	blx	r9
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  401424:	4640      	mov	r0, r8
  401426:	47a8      	blx	r5
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401428:	4669      	mov	r1, sp
  40142a:	4b35      	ldr	r3, [pc, #212]	; (401500 <nm_clkless_wake+0x120>)
  40142c:	6818      	ldr	r0, [r3, #0]
  40142e:	4b2d      	ldr	r3, [pc, #180]	; (4014e4 <nm_clkless_wake+0x104>)
  401430:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  401432:	b918      	cbnz	r0, 40143c <nm_clkless_wake+0x5c>
  401434:	9b00      	ldr	r3, [sp, #0]
  401436:	b10b      	cbz	r3, 40143c <nm_clkless_wake+0x5c>
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401438:	4e31      	ldr	r6, [pc, #196]	; (401500 <nm_clkless_wake+0x120>)
  40143a:	e037      	b.n	4014ac <nm_clkless_wake+0xcc>
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
  40143c:	4e30      	ldr	r6, [pc, #192]	; (401500 <nm_clkless_wake+0x120>)
  40143e:	230e      	movs	r3, #14
  401440:	6033      	str	r3, [r6, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
  401442:	4640      	mov	r0, r8
  401444:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401446:	4669      	mov	r1, sp
  401448:	6830      	ldr	r0, [r6, #0]
  40144a:	4b26      	ldr	r3, [pc, #152]	; (4014e4 <nm_clkless_wake+0x104>)
  40144c:	4798      	blx	r3
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40144e:	b910      	cbnz	r0, 401456 <nm_clkless_wake+0x76>
  401450:	9b00      	ldr	r3, [sp, #0]
  401452:	2b00      	cmp	r3, #0
  401454:	d1f0      	bne.n	401438 <nm_clkless_wake+0x58>
				 
				clk_status_reg_adr = 0x13;
  401456:	4e2a      	ldr	r6, [pc, #168]	; (401500 <nm_clkless_wake+0x120>)
  401458:	2313      	movs	r3, #19
  40145a:	6033      	str	r3, [r6, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
  40145c:	4640      	mov	r0, r8
  40145e:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401460:	4669      	mov	r1, sp
  401462:	6830      	ldr	r0, [r6, #0]
  401464:	4b1f      	ldr	r3, [pc, #124]	; (4014e4 <nm_clkless_wake+0x104>)
  401466:	4798      	blx	r3
			
				if(ret != M2M_SUCCESS) {
  401468:	4606      	mov	r6, r0
  40146a:	2800      	cmp	r0, #0
  40146c:	d0e4      	beq.n	401438 <nm_clkless_wake+0x58>
					M2M_ERR("Bus error (2). Wake up failed\n");
  40146e:	2296      	movs	r2, #150	; 0x96
  401470:	491d      	ldr	r1, [pc, #116]	; (4014e8 <nm_clkless_wake+0x108>)
  401472:	481e      	ldr	r0, [pc, #120]	; (4014ec <nm_clkless_wake+0x10c>)
  401474:	4c1e      	ldr	r4, [pc, #120]	; (4014f0 <nm_clkless_wake+0x110>)
  401476:	47a0      	blx	r4
  401478:	4822      	ldr	r0, [pc, #136]	; (401504 <nm_clkless_wake+0x124>)
  40147a:	47a0      	blx	r4
  40147c:	481e      	ldr	r0, [pc, #120]	; (4014f8 <nm_clkless_wake+0x118>)
  40147e:	47a0      	blx	r4
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
				 
				clk_status_reg_adr = 0x13;
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401480:	46b2      	mov	sl, r6
			
				if(ret != M2M_SUCCESS) {
					M2M_ERR("Bus error (2). Wake up failed\n");
					goto _WAKE_EXIT;
  401482:	e028      	b.n	4014d6 <nm_clkless_wake+0xf6>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
  401484:	2002      	movs	r0, #2
  401486:	47a8      	blx	r5

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401488:	4669      	mov	r1, sp
  40148a:	6830      	ldr	r0, [r6, #0]
  40148c:	4b15      	ldr	r3, [pc, #84]	; (4014e4 <nm_clkless_wake+0x104>)
  40148e:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
  401490:	9b00      	ldr	r3, [sp, #0]
  401492:	f013 0f04 	tst.w	r3, #4
  401496:	d109      	bne.n	4014ac <nm_clkless_wake+0xcc>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
  401498:	22aa      	movs	r2, #170	; 0xaa
  40149a:	4913      	ldr	r1, [pc, #76]	; (4014e8 <nm_clkless_wake+0x108>)
  40149c:	4813      	ldr	r0, [pc, #76]	; (4014ec <nm_clkless_wake+0x10c>)
  40149e:	f8df b050 	ldr.w	fp, [pc, #80]	; 4014f0 <nm_clkless_wake+0x110>
  4014a2:	47d8      	blx	fp
  4014a4:	4818      	ldr	r0, [pc, #96]	; (401508 <nm_clkless_wake+0x128>)
  4014a6:	47d8      	blx	fp
  4014a8:	4813      	ldr	r0, [pc, #76]	; (4014f8 <nm_clkless_wake+0x118>)
  4014aa:	47d8      	blx	fp
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4014ac:	9b00      	ldr	r3, [sp, #0]
  4014ae:	f013 0f04 	tst.w	r3, #4
  4014b2:	d110      	bne.n	4014d6 <nm_clkless_wake+0xf6>
  4014b4:	3401      	adds	r4, #1
  4014b6:	fba7 2304 	umull	r2, r3, r7, r4
  4014ba:	085b      	lsrs	r3, r3, #1
  4014bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4014c0:	429c      	cmp	r4, r3
  4014c2:	d0df      	beq.n	401484 <nm_clkless_wake+0xa4>
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
  4014c4:	9901      	ldr	r1, [sp, #4]
  4014c6:	f041 0102 	orr.w	r1, r1, #2
  4014ca:	4640      	mov	r0, r8
  4014cc:	47c8      	blx	r9
		}
	} while((clk_status_reg & 0x4) == 0);
  4014ce:	9b00      	ldr	r3, [sp, #0]
  4014d0:	f013 0f04 	tst.w	r3, #4
  4014d4:	d0a1      	beq.n	40141a <nm_clkless_wake+0x3a>

_WAKE_EXIT:
	return ret;
}
  4014d6:	4650      	mov	r0, sl
  4014d8:	b003      	add	sp, #12
  4014da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4014de:	bf00      	nop
  4014e0:	004001b9 	.word	0x004001b9
  4014e4:	00401871 	.word	0x00401871
  4014e8:	0040b538 	.word	0x0040b538
  4014ec:	0040af20 	.word	0x0040af20
  4014f0:	004040ad 	.word	0x004040ad
  4014f4:	0040b548 	.word	0x0040b548
  4014f8:	0040af4c 	.word	0x0040af4c
  4014fc:	aaaaaaab 	.word	0xaaaaaaab
  401500:	20400010 	.word	0x20400010
  401504:	0040b568 	.word	0x0040b568
  401508:	0040b588 	.word	0x0040b588
  40150c:	0040187d 	.word	0x0040187d

00401510 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  401510:	b500      	push	{lr}
  401512:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  401514:	a901      	add	r1, sp, #4
  401516:	f241 4008 	movw	r0, #5128	; 0x1408
  40151a:	4b15      	ldr	r3, [pc, #84]	; (401570 <enable_interrupts+0x60>)
  40151c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40151e:	b9e0      	cbnz	r0, 40155a <enable_interrupts+0x4a>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  401520:	9901      	ldr	r1, [sp, #4]
  401522:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  401526:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  401528:	f241 4008 	movw	r0, #5128	; 0x1408
  40152c:	4b11      	ldr	r3, [pc, #68]	; (401574 <enable_interrupts+0x64>)
  40152e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401530:	b9b0      	cbnz	r0, 401560 <enable_interrupts+0x50>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  401532:	a901      	add	r1, sp, #4
  401534:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  401538:	4b0d      	ldr	r3, [pc, #52]	; (401570 <enable_interrupts+0x60>)
  40153a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40153c:	b998      	cbnz	r0, 401566 <enable_interrupts+0x56>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  40153e:	9901      	ldr	r1, [sp, #4]
  401540:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  401544:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  401546:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40154a:	4b0a      	ldr	r3, [pc, #40]	; (401574 <enable_interrupts+0x64>)
  40154c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40154e:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
  401550:	bf14      	ite	ne
  401552:	f06f 0005 	mvnne.w	r0, #5
  401556:	2000      	moveq	r0, #0
  401558:	e007      	b.n	40156a <enable_interrupts+0x5a>
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  40155a:	f06f 0005 	mvn.w	r0, #5
  40155e:	e004      	b.n	40156a <enable_interrupts+0x5a>
	}
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  401560:	f06f 0005 	mvn.w	r0, #5
  401564:	e001      	b.n	40156a <enable_interrupts+0x5a>
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  401566:	f06f 0005 	mvn.w	r0, #5
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
}
  40156a:	b003      	add	sp, #12
  40156c:	f85d fb04 	ldr.w	pc, [sp], #4
  401570:	00401871 	.word	0x00401871
  401574:	0040187d 	.word	0x0040187d

00401578 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  401578:	b510      	push	{r4, lr}
  40157a:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  40157c:	4b24      	ldr	r3, [pc, #144]	; (401610 <nmi_get_chipid+0x98>)
  40157e:	681c      	ldr	r4, [r3, #0]
  401580:	2c00      	cmp	r4, #0
  401582:	d140      	bne.n	401606 <nmi_get_chipid+0x8e>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  401584:	4619      	mov	r1, r3
  401586:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40158a:	4b22      	ldr	r3, [pc, #136]	; (401614 <nmi_get_chipid+0x9c>)
  40158c:	4798      	blx	r3
  40158e:	b118      	cbz	r0, 401598 <nmi_get_chipid+0x20>
			chipid = 0;
  401590:	2200      	movs	r2, #0
  401592:	4b1f      	ldr	r3, [pc, #124]	; (401610 <nmi_get_chipid+0x98>)
  401594:	601a      	str	r2, [r3, #0]
			return 0;
  401596:	e038      	b.n	40160a <nmi_get_chipid+0x92>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  401598:	a901      	add	r1, sp, #4
  40159a:	f241 30f4 	movw	r0, #5108	; 0x13f4
  40159e:	4b1d      	ldr	r3, [pc, #116]	; (401614 <nmi_get_chipid+0x9c>)
  4015a0:	4798      	blx	r3
  4015a2:	b118      	cbz	r0, 4015ac <nmi_get_chipid+0x34>
			chipid = 0;
  4015a4:	2200      	movs	r2, #0
  4015a6:	4b1a      	ldr	r3, [pc, #104]	; (401610 <nmi_get_chipid+0x98>)
  4015a8:	601a      	str	r2, [r3, #0]
			return 0;
  4015aa:	e02e      	b.n	40160a <nmi_get_chipid+0x92>
		}

		if (chipid == 0x1002a0)  {
  4015ac:	4b18      	ldr	r3, [pc, #96]	; (401610 <nmi_get_chipid+0x98>)
  4015ae:	681b      	ldr	r3, [r3, #0]
  4015b0:	4a19      	ldr	r2, [pc, #100]	; (401618 <nmi_get_chipid+0xa0>)
  4015b2:	4293      	cmp	r3, r2
  4015b4:	d106      	bne.n	4015c4 <nmi_get_chipid+0x4c>
			if (rfrevid == 0x1) { /* 1002A0 */
  4015b6:	9b01      	ldr	r3, [sp, #4]
  4015b8:	2b01      	cmp	r3, #1
  4015ba:	d01d      	beq.n	4015f8 <nmi_get_chipid+0x80>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
  4015bc:	3201      	adds	r2, #1
  4015be:	4b14      	ldr	r3, [pc, #80]	; (401610 <nmi_get_chipid+0x98>)
  4015c0:	601a      	str	r2, [r3, #0]
  4015c2:	e019      	b.n	4015f8 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1002b0) {
  4015c4:	4a15      	ldr	r2, [pc, #84]	; (40161c <nmi_get_chipid+0xa4>)
  4015c6:	4293      	cmp	r3, r2
  4015c8:	d109      	bne.n	4015de <nmi_get_chipid+0x66>
			if(rfrevid == 3) { /* 1002B0 */
  4015ca:	9b01      	ldr	r3, [sp, #4]
  4015cc:	2b03      	cmp	r3, #3
  4015ce:	d013      	beq.n	4015f8 <nmi_get_chipid+0x80>
			} else if(rfrevid == 4) { /* 1002B1 */
  4015d0:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  4015d2:	bf0c      	ite	eq
  4015d4:	3201      	addeq	r2, #1
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
  4015d6:	4a12      	ldrne	r2, [pc, #72]	; (401620 <nmi_get_chipid+0xa8>)
  4015d8:	4b0d      	ldr	r3, [pc, #52]	; (401610 <nmi_get_chipid+0x98>)
  4015da:	601a      	str	r2, [r3, #0]
  4015dc:	e00c      	b.n	4015f8 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1000F0) { 
  4015de:	4a11      	ldr	r2, [pc, #68]	; (401624 <nmi_get_chipid+0xac>)
  4015e0:	4293      	cmp	r3, r2
  4015e2:	d109      	bne.n	4015f8 <nmi_get_chipid+0x80>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  4015e4:	490a      	ldr	r1, [pc, #40]	; (401610 <nmi_get_chipid+0x98>)
  4015e6:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  4015ea:	4b0a      	ldr	r3, [pc, #40]	; (401614 <nmi_get_chipid+0x9c>)
  4015ec:	4798      	blx	r3
  4015ee:	b118      	cbz	r0, 4015f8 <nmi_get_chipid+0x80>
			chipid = 0;
  4015f0:	2200      	movs	r2, #0
  4015f2:	4b07      	ldr	r3, [pc, #28]	; (401610 <nmi_get_chipid+0x98>)
  4015f4:	601a      	str	r2, [r3, #0]
			return 0;
  4015f6:	e008      	b.n	40160a <nmi_get_chipid+0x92>
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
  4015f8:	4a05      	ldr	r2, [pc, #20]	; (401610 <nmi_get_chipid+0x98>)
  4015fa:	6813      	ldr	r3, [r2, #0]
  4015fc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  401600:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  401604:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
  401606:	4b02      	ldr	r3, [pc, #8]	; (401610 <nmi_get_chipid+0x98>)
  401608:	681c      	ldr	r4, [r3, #0]
}
  40160a:	4620      	mov	r0, r4
  40160c:	b002      	add	sp, #8
  40160e:	bd10      	pop	{r4, pc}
  401610:	20400910 	.word	0x20400910
  401614:	00401871 	.word	0x00401871
  401618:	001002a0 	.word	0x001002a0
  40161c:	001002b0 	.word	0x001002b0
  401620:	001002b2 	.word	0x001002b2
  401624:	001000f0 	.word	0x001000f0

00401628 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  401628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40162c:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40162e:	f241 0514 	movw	r5, #4116	; 0x1014
  401632:	4c28      	ldr	r4, [pc, #160]	; (4016d4 <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  401634:	4e28      	ldr	r6, [pc, #160]	; (4016d8 <wait_for_bootrom+0xb0>)
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  401636:	4628      	mov	r0, r5
  401638:	47a0      	blx	r4
		if (reg & 0x80000000) {
  40163a:	2800      	cmp	r0, #0
  40163c:	db02      	blt.n	401644 <wait_for_bootrom+0x1c>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  40163e:	2001      	movs	r0, #1
  401640:	47b0      	blx	r6
	}
  401642:	e7f8      	b.n	401636 <wait_for_bootrom+0xe>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  401644:	4825      	ldr	r0, [pc, #148]	; (4016dc <wait_for_bootrom+0xb4>)
  401646:	4b23      	ldr	r3, [pc, #140]	; (4016d4 <wait_for_bootrom+0xac>)
  401648:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  40164a:	f010 0f01 	tst.w	r0, #1
  40164e:	d110      	bne.n	401672 <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  401650:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4016d8 <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  401654:	4e1f      	ldr	r6, [pc, #124]	; (4016d4 <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  401656:	4d22      	ldr	r5, [pc, #136]	; (4016e0 <wait_for_bootrom+0xb8>)
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  401658:	2001      	movs	r0, #1
  40165a:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  40165c:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  401660:	47b0      	blx	r6
  401662:	4604      	mov	r4, r0

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  401664:	462a      	mov	r2, r5
  401666:	4601      	mov	r1, r0
  401668:	481e      	ldr	r0, [pc, #120]	; (4016e4 <wait_for_bootrom+0xbc>)
  40166a:	4b1f      	ldr	r3, [pc, #124]	; (4016e8 <wait_for_bootrom+0xc0>)
  40166c:	4798      	blx	r3

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
  40166e:	42ac      	cmp	r4, r5
  401670:	d1f2      	bne.n	401658 <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  401672:	2f02      	cmp	r7, #2
  401674:	d10a      	bne.n	40168c <wait_for_bootrom+0x64>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  401676:	491d      	ldr	r1, [pc, #116]	; (4016ec <wait_for_bootrom+0xc4>)
  401678:	481d      	ldr	r0, [pc, #116]	; (4016f0 <wait_for_bootrom+0xc8>)
  40167a:	4c1e      	ldr	r4, [pc, #120]	; (4016f4 <wait_for_bootrom+0xcc>)
  40167c:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  40167e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  401682:	f241 008c 	movw	r0, #4236	; 0x108c
  401686:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  401688:	2400      	movs	r4, #0
  40168a:	e00f      	b.n	4016ac <wait_for_bootrom+0x84>
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  40168c:	2f03      	cmp	r7, #3
  40168e:	d109      	bne.n	4016a4 <wait_for_bootrom+0x7c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  401690:	4916      	ldr	r1, [pc, #88]	; (4016ec <wait_for_bootrom+0xc4>)
  401692:	4817      	ldr	r0, [pc, #92]	; (4016f0 <wait_for_bootrom+0xc8>)
  401694:	4c17      	ldr	r4, [pc, #92]	; (4016f4 <wait_for_bootrom+0xcc>)
  401696:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  401698:	2100      	movs	r1, #0
  40169a:	f241 008c 	movw	r0, #4236	; 0x108c
  40169e:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  4016a0:	2400      	movs	r4, #0
  4016a2:	e003      	b.n	4016ac <wait_for_bootrom+0x84>
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  4016a4:	2f04      	cmp	r7, #4
  4016a6:	bf14      	ite	ne
  4016a8:	2400      	movne	r4, #0
  4016aa:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  4016ac:	4b12      	ldr	r3, [pc, #72]	; (4016f8 <wait_for_bootrom+0xd0>)
  4016ae:	4798      	blx	r3
  4016b0:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4016b4:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  4016b8:	bf0c      	ite	eq
  4016ba:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  4016be:	4620      	movne	r0, r4
  4016c0:	4b0e      	ldr	r3, [pc, #56]	; (4016fc <wait_for_bootrom+0xd4>)
  4016c2:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  4016c4:	490e      	ldr	r1, [pc, #56]	; (401700 <wait_for_bootrom+0xd8>)
  4016c6:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  4016ca:	4b0a      	ldr	r3, [pc, #40]	; (4016f4 <wait_for_bootrom+0xcc>)
  4016cc:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  4016ce:	2000      	movs	r0, #0
  4016d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4016d4:	00401865 	.word	0x00401865
  4016d8:	004001b9 	.word	0x004001b9
  4016dc:	000207bc 	.word	0x000207bc
  4016e0:	10add09e 	.word	0x10add09e
  4016e4:	0040b5d4 	.word	0x0040b5d4
  4016e8:	004040ad 	.word	0x004040ad
  4016ec:	3c1cd57d 	.word	0x3c1cd57d
  4016f0:	000207ac 	.word	0x000207ac
  4016f4:	0040187d 	.word	0x0040187d
  4016f8:	00401579 	.word	0x00401579
  4016fc:	004013a5 	.word	0x004013a5
  401700:	ef522f61 	.word	0xef522f61

00401704 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  401704:	b5f0      	push	{r4, r5, r6, r7, lr}
  401706:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  401708:	f241 038c 	movw	r3, #4236	; 0x108c
  40170c:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  40170e:	4b18      	ldr	r3, [pc, #96]	; (401770 <wait_for_firmware_start+0x6c>)
  401710:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  401712:	3802      	subs	r0, #2
  401714:	b2c0      	uxtb	r0, r0
  401716:	2801      	cmp	r0, #1
  401718:	d810      	bhi.n	40173c <wait_for_firmware_start+0x38>
		regAddress = NMI_REV_REG;
  40171a:	4b16      	ldr	r3, [pc, #88]	; (401774 <wait_for_firmware_start+0x70>)
  40171c:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  40171e:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  401722:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  401726:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  40172a:	9300      	str	r3, [sp, #0]
  40172c:	e006      	b.n	40173c <wait_for_firmware_start+0x38>
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  40172e:	4638      	mov	r0, r7
  401730:	47b0      	blx	r6
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  401732:	9801      	ldr	r0, [sp, #4]
  401734:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  401736:	3c01      	subs	r4, #1
  401738:	d106      	bne.n	401748 <wait_for_firmware_start+0x44>
  40173a:	e013      	b.n	401764 <wait_for_firmware_start+0x60>
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
  40173c:	f04f 34ff 	mov.w	r4, #4294967295
  401740:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  401742:	2702      	movs	r7, #2
  401744:	4e0c      	ldr	r6, [pc, #48]	; (401778 <wait_for_firmware_start+0x74>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  401746:	4d0d      	ldr	r5, [pc, #52]	; (40177c <wait_for_firmware_start+0x78>)
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
  401748:	9b00      	ldr	r3, [sp, #0]
  40174a:	4298      	cmp	r0, r3
  40174c:	d1ef      	bne.n	40172e <wait_for_firmware_start+0x2a>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  40174e:	9a00      	ldr	r2, [sp, #0]
  401750:	4b07      	ldr	r3, [pc, #28]	; (401770 <wait_for_firmware_start+0x6c>)
  401752:	429a      	cmp	r2, r3
  401754:	d109      	bne.n	40176a <wait_for_firmware_start+0x66>
	{
		nm_write_reg(NMI_STATE_REG, 0);
  401756:	2100      	movs	r1, #0
  401758:	f241 008c 	movw	r0, #4236	; 0x108c
  40175c:	4b08      	ldr	r3, [pc, #32]	; (401780 <wait_for_firmware_start+0x7c>)
  40175e:	4798      	blx	r3
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  401760:	2000      	movs	r0, #0
  401762:	e003      	b.n	40176c <wait_for_firmware_start+0x68>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
		if(++cnt >= u32Timeout)
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  401764:	f06f 0004 	mvn.w	r0, #4
  401768:	e000      	b.n	40176c <wait_for_firmware_start+0x68>
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  40176a:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  40176c:	b003      	add	sp, #12
  40176e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401770:	02532636 	.word	0x02532636
  401774:	000207ac 	.word	0x000207ac
  401778:	004001b9 	.word	0x004001b9
  40177c:	00401865 	.word	0x00401865
  401780:	0040187d 	.word	0x0040187d

00401784 <chip_deinit>:

sint8 chip_deinit(void)
{
  401784:	b5f0      	push	{r4, r5, r6, r7, lr}
  401786:	b083      	sub	sp, #12
	uint32 reg = 0;
  401788:	a902      	add	r1, sp, #8
  40178a:	2300      	movs	r3, #0
  40178c:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401790:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401794:	4b24      	ldr	r3, [pc, #144]	; (401828 <chip_deinit+0xa4>)
  401796:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  401798:	b148      	cbz	r0, 4017ae <chip_deinit+0x2a>
		M2M_ERR("failed to de-initialize\n");
  40179a:	f240 2231 	movw	r2, #561	; 0x231
  40179e:	4923      	ldr	r1, [pc, #140]	; (40182c <chip_deinit+0xa8>)
  4017a0:	4823      	ldr	r0, [pc, #140]	; (401830 <chip_deinit+0xac>)
  4017a2:	4c24      	ldr	r4, [pc, #144]	; (401834 <chip_deinit+0xb0>)
  4017a4:	47a0      	blx	r4
  4017a6:	4824      	ldr	r0, [pc, #144]	; (401838 <chip_deinit+0xb4>)
  4017a8:	47a0      	blx	r4
  4017aa:	4824      	ldr	r0, [pc, #144]	; (40183c <chip_deinit+0xb8>)
  4017ac:	47a0      	blx	r4
	}
	reg &= ~(1 << 10);
  4017ae:	9901      	ldr	r1, [sp, #4]
  4017b0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4017b4:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4017b6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4017ba:	4b21      	ldr	r3, [pc, #132]	; (401840 <chip_deinit+0xbc>)
  4017bc:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  4017be:	4605      	mov	r5, r0
  4017c0:	b158      	cbz	r0, 4017da <chip_deinit+0x56>
		M2M_ERR("Error while writing reg\n");
  4017c2:	f240 2237 	movw	r2, #567	; 0x237
  4017c6:	4919      	ldr	r1, [pc, #100]	; (40182c <chip_deinit+0xa8>)
  4017c8:	4819      	ldr	r0, [pc, #100]	; (401830 <chip_deinit+0xac>)
  4017ca:	4c1a      	ldr	r4, [pc, #104]	; (401834 <chip_deinit+0xb0>)
  4017cc:	47a0      	blx	r4
  4017ce:	481d      	ldr	r0, [pc, #116]	; (401844 <chip_deinit+0xc0>)
  4017d0:	47a0      	blx	r4
  4017d2:	481a      	ldr	r0, [pc, #104]	; (40183c <chip_deinit+0xb8>)
  4017d4:	47a0      	blx	r4
		return ret;
  4017d6:	4628      	mov	r0, r5
  4017d8:	e024      	b.n	401824 <chip_deinit+0xa0>
  4017da:	240a      	movs	r4, #10
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4017dc:	4e12      	ldr	r6, [pc, #72]	; (401828 <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4017de:	4f18      	ldr	r7, [pc, #96]	; (401840 <chip_deinit+0xbc>)
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4017e0:	a901      	add	r1, sp, #4
  4017e2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4017e6:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  4017e8:	4605      	mov	r5, r0
  4017ea:	b158      	cbz	r0, 401804 <chip_deinit+0x80>
			M2M_ERR("Error while reading reg\n");
  4017ec:	f240 223e 	movw	r2, #574	; 0x23e
  4017f0:	490e      	ldr	r1, [pc, #56]	; (40182c <chip_deinit+0xa8>)
  4017f2:	480f      	ldr	r0, [pc, #60]	; (401830 <chip_deinit+0xac>)
  4017f4:	4c0f      	ldr	r4, [pc, #60]	; (401834 <chip_deinit+0xb0>)
  4017f6:	47a0      	blx	r4
  4017f8:	4813      	ldr	r0, [pc, #76]	; (401848 <chip_deinit+0xc4>)
  4017fa:	47a0      	blx	r4
  4017fc:	480f      	ldr	r0, [pc, #60]	; (40183c <chip_deinit+0xb8>)
  4017fe:	47a0      	blx	r4
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401800:	4628      	mov	r0, r5
		if (ret != M2M_SUCCESS) {
			M2M_ERR("Error while reading reg\n");
			return ret;
  401802:	e00f      	b.n	401824 <chip_deinit+0xa0>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
  401804:	9901      	ldr	r1, [sp, #4]
  401806:	f411 6f80 	tst.w	r1, #1024	; 0x400
  40180a:	d00a      	beq.n	401822 <chip_deinit+0x9e>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
  40180c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  401810:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  401812:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401816:	47b8      	blx	r7
  401818:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  40181a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  40181e:	d1df      	bne.n	4017e0 <chip_deinit+0x5c>
  401820:	e000      	b.n	401824 <chip_deinit+0xa0>
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401822:	2000      	movs	r0, #0
		}

	} while (timeout);

	return ret;
}
  401824:	b003      	add	sp, #12
  401826:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401828:	00401871 	.word	0x00401871
  40182c:	0040b52c 	.word	0x0040b52c
  401830:	0040af20 	.word	0x0040af20
  401834:	004040ad 	.word	0x004040ad
  401838:	0040b5e4 	.word	0x0040b5e4
  40183c:	0040af4c 	.word	0x0040af4c
  401840:	0040187d 	.word	0x0040187d
  401844:	0040b600 	.word	0x0040b600
  401848:	0040b61c 	.word	0x0040b61c

0040184c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  40184c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  40184e:	4b01      	ldr	r3, [pc, #4]	; (401854 <nm_bus_iface_init+0x8>)
  401850:	4798      	blx	r3

	return ret;
}
  401852:	bd08      	pop	{r3, pc}
  401854:	00400329 	.word	0x00400329

00401858 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  401858:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  40185a:	4b01      	ldr	r3, [pc, #4]	; (401860 <nm_bus_iface_deinit+0x8>)
  40185c:	4798      	blx	r3

	return ret;
}
  40185e:	bd08      	pop	{r3, pc}
  401860:	00400515 	.word	0x00400515

00401864 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  401864:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  401866:	4b01      	ldr	r3, [pc, #4]	; (40186c <nm_read_reg+0x8>)
  401868:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  40186a:	bd08      	pop	{r3, pc}
  40186c:	004020b5 	.word	0x004020b5

00401870 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  401870:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  401872:	4b01      	ldr	r3, [pc, #4]	; (401878 <nm_read_reg_with_ret+0x8>)
  401874:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  401876:	bd08      	pop	{r3, pc}
  401878:	004020cd 	.word	0x004020cd

0040187c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  40187c:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  40187e:	4b01      	ldr	r3, [pc, #4]	; (401884 <nm_write_reg+0x8>)
  401880:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  401882:	bd08      	pop	{r3, pc}
  401884:	004020e5 	.word	0x004020e5

00401888 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  401888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40188c:	4607      	mov	r7, r0
  40188e:	4689      	mov	r9, r1
  401890:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  401892:	4b13      	ldr	r3, [pc, #76]	; (4018e0 <nm_read_block+0x58>)
  401894:	f8b3 8000 	ldrh.w	r8, [r3]
  401898:	f1a8 0808 	sub.w	r8, r8, #8
  40189c:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4018a0:	4542      	cmp	r2, r8
  4018a2:	d808      	bhi.n	4018b6 <nm_read_block+0x2e>
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  4018a4:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4018a6:	b2aa      	uxth	r2, r5
  4018a8:	eb09 0106 	add.w	r1, r9, r6
  4018ac:	4638      	mov	r0, r7
  4018ae:	4b0d      	ldr	r3, [pc, #52]	; (4018e4 <nm_read_block+0x5c>)
  4018b0:	4798      	blx	r3
  4018b2:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  4018b4:	e010      	b.n	4018d8 <nm_read_block+0x50>
  4018b6:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4018b8:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4018ba:	f8df a028 	ldr.w	sl, [pc, #40]	; 4018e4 <nm_read_block+0x5c>
  4018be:	4642      	mov	r2, r8
  4018c0:	eb09 0106 	add.w	r1, r9, r6
  4018c4:	4638      	mov	r0, r7
  4018c6:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4018c8:	4603      	mov	r3, r0
  4018ca:	b928      	cbnz	r0, 4018d8 <nm_read_block+0x50>
			u32Sz -= u16MaxTrxSz;
  4018cc:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  4018ce:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  4018d0:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4018d2:	42a5      	cmp	r5, r4
  4018d4:	d8f3      	bhi.n	4018be <nm_read_block+0x36>
  4018d6:	e7e6      	b.n	4018a6 <nm_read_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  4018d8:	4618      	mov	r0, r3
  4018da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4018de:	bf00      	nop
  4018e0:	2040000c 	.word	0x2040000c
  4018e4:	00402209 	.word	0x00402209

004018e8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  4018e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4018ec:	4607      	mov	r7, r0
  4018ee:	4689      	mov	r9, r1
  4018f0:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  4018f2:	4b13      	ldr	r3, [pc, #76]	; (401940 <nm_write_block+0x58>)
  4018f4:	f8b3 8000 	ldrh.w	r8, [r3]
  4018f8:	f1a8 0808 	sub.w	r8, r8, #8
  4018fc:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401900:	4542      	cmp	r2, r8
  401902:	d808      	bhi.n	401916 <nm_write_block+0x2e>
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  401904:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  401906:	b2aa      	uxth	r2, r5
  401908:	eb09 0106 	add.w	r1, r9, r6
  40190c:	4638      	mov	r0, r7
  40190e:	4b0d      	ldr	r3, [pc, #52]	; (401944 <nm_write_block+0x5c>)
  401910:	4798      	blx	r3
  401912:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  401914:	e010      	b.n	401938 <nm_write_block+0x50>
  401916:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401918:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  40191a:	f8df a028 	ldr.w	sl, [pc, #40]	; 401944 <nm_write_block+0x5c>
  40191e:	4642      	mov	r2, r8
  401920:	eb09 0106 	add.w	r1, r9, r6
  401924:	4638      	mov	r0, r7
  401926:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  401928:	4603      	mov	r3, r0
  40192a:	b928      	cbnz	r0, 401938 <nm_write_block+0x50>
			u32Sz -= u16MaxTrxSz;
  40192c:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  40192e:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  401930:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401932:	42a5      	cmp	r5, r4
  401934:	d8f3      	bhi.n	40191e <nm_write_block+0x36>
  401936:	e7e6      	b.n	401906 <nm_write_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  401938:	4618      	mov	r0, r3
  40193a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40193e:	bf00      	nop
  401940:	2040000c 	.word	0x2040000c
  401944:	004022d5 	.word	0x004022d5

00401948 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  401948:	b530      	push	{r4, r5, lr}
  40194a:	b083      	sub	sp, #12
  40194c:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  40194e:	a902      	add	r1, sp, #8
  401950:	2300      	movs	r3, #0
  401952:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  401956:	4823      	ldr	r0, [pc, #140]	; (4019e4 <nm_get_firmware_info+0x9c>)
  401958:	4b23      	ldr	r3, [pc, #140]	; (4019e8 <nm_get_firmware_info+0xa0>)
  40195a:	4798      	blx	r3
  40195c:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  40195e:	9a01      	ldr	r2, [sp, #4]
  401960:	4b22      	ldr	r3, [pc, #136]	; (4019ec <nm_get_firmware_info+0xa4>)
  401962:	429a      	cmp	r2, r3
  401964:	d105      	bne.n	401972 <nm_get_firmware_info+0x2a>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  401966:	a901      	add	r1, sp, #4
  401968:	f241 0048 	movw	r0, #4168	; 0x1048
  40196c:	4b1e      	ldr	r3, [pc, #120]	; (4019e8 <nm_get_firmware_info+0xa0>)
  40196e:	4798      	blx	r3
  401970:	4605      	mov	r5, r0
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  401972:	9b01      	ldr	r3, [sp, #4]
  401974:	0c1a      	lsrs	r2, r3, #16
  401976:	1211      	asrs	r1, r2, #8
  401978:	71e1      	strb	r1, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  40197a:	f3c2 1103 	ubfx	r1, r2, #4, #4
  40197e:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  401980:	f002 020f 	and.w	r2, r2, #15
  401984:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  401986:	121a      	asrs	r2, r3, #8
  401988:	7122      	strb	r2, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  40198a:	f3c3 1203 	ubfx	r2, r3, #4, #4
  40198e:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  401990:	f003 030f 	and.w	r3, r3, #15
  401994:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  401996:	4b16      	ldr	r3, [pc, #88]	; (4019f0 <nm_get_firmware_info+0xa8>)
  401998:	4798      	blx	r3
  40199a:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  40199c:	7922      	ldrb	r2, [r4, #4]
  40199e:	79a3      	ldrb	r3, [r4, #6]
  4019a0:	f003 030f 	and.w	r3, r3, #15
  4019a4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  4019a8:	7963      	ldrb	r3, [r4, #5]
  4019aa:	011b      	lsls	r3, r3, #4
  4019ac:	b2db      	uxtb	r3, r3
  4019ae:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
	if(curr_drv_ver <  min_req_drv_ver) {
  4019b0:	79e1      	ldrb	r1, [r4, #7]
  4019b2:	7a62      	ldrb	r2, [r4, #9]
  4019b4:	f002 020f 	and.w	r2, r2, #15
  4019b8:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
  4019bc:	7a22      	ldrb	r2, [r4, #8]
  4019be:	0112      	lsls	r2, r2, #4
  4019c0:	b2d2      	uxtb	r2, r2
  4019c2:	430a      	orrs	r2, r1
  4019c4:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  4019c8:	428a      	cmp	r2, r1
  4019ca:	bf88      	it	hi
  4019cc:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  4019d0:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  4019d4:	4293      	cmp	r3, r2
	}
	return ret;
}
  4019d6:	bf8c      	ite	hi
  4019d8:	4628      	movhi	r0, r5
  4019da:	f06f 000c 	mvnls.w	r0, #12
  4019de:	b003      	add	sp, #12
  4019e0:	bd30      	pop	{r4, r5, pc}
  4019e2:	bf00      	nop
  4019e4:	000207ac 	.word	0x000207ac
  4019e8:	00401871 	.word	0x00401871
  4019ec:	d75dc1c3 	.word	0xd75dc1c3
  4019f0:	00401579 	.word	0x00401579

004019f4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  4019f4:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  4019f6:	b130      	cbz	r0, 401a06 <nm_drv_init+0x12>
		u8Mode = *((uint8 *)arg);
  4019f8:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  4019fa:	1e63      	subs	r3, r4, #1
  4019fc:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  4019fe:	2b04      	cmp	r3, #4
  401a00:	bf28      	it	cs
  401a02:	2401      	movcs	r4, #1
  401a04:	e000      	b.n	401a08 <nm_drv_init+0x14>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
  401a06:	2401      	movs	r4, #1
	}
	
	ret = nm_bus_iface_init(NULL);
  401a08:	2000      	movs	r0, #0
  401a0a:	4b1d      	ldr	r3, [pc, #116]	; (401a80 <nm_drv_init+0x8c>)
  401a0c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401a0e:	4605      	mov	r5, r0
  401a10:	b150      	cbz	r0, 401a28 <nm_drv_init+0x34>
		M2M_ERR("[nmi start]: fail init bus\n");
  401a12:	f44f 7292 	mov.w	r2, #292	; 0x124
  401a16:	491b      	ldr	r1, [pc, #108]	; (401a84 <nm_drv_init+0x90>)
  401a18:	481b      	ldr	r0, [pc, #108]	; (401a88 <nm_drv_init+0x94>)
  401a1a:	4c1c      	ldr	r4, [pc, #112]	; (401a8c <nm_drv_init+0x98>)
  401a1c:	47a0      	blx	r4
  401a1e:	481c      	ldr	r0, [pc, #112]	; (401a90 <nm_drv_init+0x9c>)
  401a20:	47a0      	blx	r4
  401a22:	481c      	ldr	r0, [pc, #112]	; (401a94 <nm_drv_init+0xa0>)
  401a24:	47a0      	blx	r4
		goto ERR1;
  401a26:	e029      	b.n	401a7c <nm_drv_init+0x88>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  401a28:	481b      	ldr	r0, [pc, #108]	; (401a98 <nm_drv_init+0xa4>)
  401a2a:	4d18      	ldr	r5, [pc, #96]	; (401a8c <nm_drv_init+0x98>)
  401a2c:	47a8      	blx	r5
  401a2e:	4b1b      	ldr	r3, [pc, #108]	; (401a9c <nm_drv_init+0xa8>)
  401a30:	4798      	blx	r3
  401a32:	4601      	mov	r1, r0
  401a34:	481a      	ldr	r0, [pc, #104]	; (401aa0 <nm_drv_init+0xac>)
  401a36:	47a8      	blx	r5
  401a38:	4816      	ldr	r0, [pc, #88]	; (401a94 <nm_drv_init+0xa0>)
  401a3a:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  401a3c:	4b19      	ldr	r3, [pc, #100]	; (401aa4 <nm_drv_init+0xb0>)
  401a3e:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  401a40:	4620      	mov	r0, r4
  401a42:	4b19      	ldr	r3, [pc, #100]	; (401aa8 <nm_drv_init+0xb4>)
  401a44:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401a46:	4605      	mov	r5, r0
  401a48:	b9b0      	cbnz	r0, 401a78 <nm_drv_init+0x84>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  401a4a:	4620      	mov	r0, r4
  401a4c:	4b17      	ldr	r3, [pc, #92]	; (401aac <nm_drv_init+0xb8>)
  401a4e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401a50:	4605      	mov	r5, r0
  401a52:	b988      	cbnz	r0, 401a78 <nm_drv_init+0x84>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  401a54:	3c02      	subs	r4, #2
  401a56:	b2e4      	uxtb	r4, r4
  401a58:	2c01      	cmp	r4, #1
  401a5a:	d90f      	bls.n	401a7c <nm_drv_init+0x88>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  401a5c:	4b14      	ldr	r3, [pc, #80]	; (401ab0 <nm_drv_init+0xbc>)
  401a5e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401a60:	4605      	mov	r5, r0
  401a62:	b158      	cbz	r0, 401a7c <nm_drv_init+0x88>
		M2M_ERR("failed to enable interrupts..\n");
  401a64:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  401a68:	4906      	ldr	r1, [pc, #24]	; (401a84 <nm_drv_init+0x90>)
  401a6a:	4807      	ldr	r0, [pc, #28]	; (401a88 <nm_drv_init+0x94>)
  401a6c:	4c07      	ldr	r4, [pc, #28]	; (401a8c <nm_drv_init+0x98>)
  401a6e:	47a0      	blx	r4
  401a70:	4810      	ldr	r0, [pc, #64]	; (401ab4 <nm_drv_init+0xc0>)
  401a72:	47a0      	blx	r4
  401a74:	4807      	ldr	r0, [pc, #28]	; (401a94 <nm_drv_init+0xa0>)
  401a76:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  401a78:	4b0f      	ldr	r3, [pc, #60]	; (401ab8 <nm_drv_init+0xc4>)
  401a7a:	4798      	blx	r3
ERR1:
	return ret;
}
  401a7c:	4628      	mov	r0, r5
  401a7e:	bd38      	pop	{r3, r4, r5, pc}
  401a80:	0040184d 	.word	0x0040184d
  401a84:	0040b724 	.word	0x0040b724
  401a88:	0040af20 	.word	0x0040af20
  401a8c:	004040ad 	.word	0x004040ad
  401a90:	0040b678 	.word	0x0040b678
  401a94:	0040af4c 	.word	0x0040af4c
  401a98:	0040b1f4 	.word	0x0040b1f4
  401a9c:	00401579 	.word	0x00401579
  401aa0:	0040b694 	.word	0x0040b694
  401aa4:	004020fd 	.word	0x004020fd
  401aa8:	00401629 	.word	0x00401629
  401aac:	00401705 	.word	0x00401705
  401ab0:	00401511 	.word	0x00401511
  401ab4:	0040b6a4 	.word	0x0040b6a4
  401ab8:	00401859 	.word	0x00401859

00401abc <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  401abc:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  401abe:	4b19      	ldr	r3, [pc, #100]	; (401b24 <nm_drv_deinit+0x68>)
  401ac0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401ac2:	b158      	cbz	r0, 401adc <nm_drv_deinit+0x20>
  401ac4:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  401ac6:	f44f 72ba 	mov.w	r2, #372	; 0x174
  401aca:	4917      	ldr	r1, [pc, #92]	; (401b28 <nm_drv_deinit+0x6c>)
  401acc:	4817      	ldr	r0, [pc, #92]	; (401b2c <nm_drv_deinit+0x70>)
  401ace:	4d18      	ldr	r5, [pc, #96]	; (401b30 <nm_drv_deinit+0x74>)
  401ad0:	47a8      	blx	r5
  401ad2:	4818      	ldr	r0, [pc, #96]	; (401b34 <nm_drv_deinit+0x78>)
  401ad4:	47a8      	blx	r5
  401ad6:	4818      	ldr	r0, [pc, #96]	; (401b38 <nm_drv_deinit+0x7c>)
  401ad8:	47a8      	blx	r5
		goto ERR1;
  401ada:	e020      	b.n	401b1e <nm_drv_deinit+0x62>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  401adc:	2000      	movs	r0, #0
  401ade:	4b17      	ldr	r3, [pc, #92]	; (401b3c <nm_drv_deinit+0x80>)
  401ae0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401ae2:	4604      	mov	r4, r0
  401ae4:	b150      	cbz	r0, 401afc <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  401ae6:	f240 127b 	movw	r2, #379	; 0x17b
  401aea:	490f      	ldr	r1, [pc, #60]	; (401b28 <nm_drv_deinit+0x6c>)
  401aec:	480f      	ldr	r0, [pc, #60]	; (401b2c <nm_drv_deinit+0x70>)
  401aee:	4d10      	ldr	r5, [pc, #64]	; (401b30 <nm_drv_deinit+0x74>)
  401af0:	47a8      	blx	r5
  401af2:	4813      	ldr	r0, [pc, #76]	; (401b40 <nm_drv_deinit+0x84>)
  401af4:	47a8      	blx	r5
  401af6:	4810      	ldr	r0, [pc, #64]	; (401b38 <nm_drv_deinit+0x7c>)
  401af8:	47a8      	blx	r5
		goto ERR1;
  401afa:	e010      	b.n	401b1e <nm_drv_deinit+0x62>
	}

	ret = nm_bus_iface_deinit();
  401afc:	4b11      	ldr	r3, [pc, #68]	; (401b44 <nm_drv_deinit+0x88>)
  401afe:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401b00:	4604      	mov	r4, r0
  401b02:	b150      	cbz	r0, 401b1a <nm_drv_deinit+0x5e>
		M2M_ERR("[nmi stop]: fail init bus\n");
  401b04:	f240 1281 	movw	r2, #385	; 0x181
  401b08:	4907      	ldr	r1, [pc, #28]	; (401b28 <nm_drv_deinit+0x6c>)
  401b0a:	4808      	ldr	r0, [pc, #32]	; (401b2c <nm_drv_deinit+0x70>)
  401b0c:	4d08      	ldr	r5, [pc, #32]	; (401b30 <nm_drv_deinit+0x74>)
  401b0e:	47a8      	blx	r5
  401b10:	480d      	ldr	r0, [pc, #52]	; (401b48 <nm_drv_deinit+0x8c>)
  401b12:	47a8      	blx	r5
  401b14:	4808      	ldr	r0, [pc, #32]	; (401b38 <nm_drv_deinit+0x7c>)
  401b16:	47a8      	blx	r5
		goto ERR1;
  401b18:	e001      	b.n	401b1e <nm_drv_deinit+0x62>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  401b1a:	4b0c      	ldr	r3, [pc, #48]	; (401b4c <nm_drv_deinit+0x90>)
  401b1c:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
  401b1e:	4620      	mov	r0, r4
  401b20:	bd38      	pop	{r3, r4, r5, pc}
  401b22:	bf00      	nop
  401b24:	00401785 	.word	0x00401785
  401b28:	0040b730 	.word	0x0040b730
  401b2c:	0040af20 	.word	0x0040af20
  401b30:	004040ad 	.word	0x004040ad
  401b34:	0040b6c4 	.word	0x0040b6c4
  401b38:	0040af4c 	.word	0x0040af4c
  401b3c:	00402b65 	.word	0x00402b65
  401b40:	0040b6e4 	.word	0x0040b6e4
  401b44:	00401859 	.word	0x00401859
  401b48:	0040b708 	.word	0x0040b708
  401b4c:	004020a9 	.word	0x004020a9

00401b50 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  401b50:	b500      	push	{lr}
  401b52:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  401b54:	2300      	movs	r3, #0
  401b56:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  401b58:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  401b5a:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  401b5e:	a901      	add	r1, sp, #4
  401b60:	2003      	movs	r0, #3
  401b62:	4b02      	ldr	r3, [pc, #8]	; (401b6c <nmi_spi_read+0x1c>)
  401b64:	4798      	blx	r3
}
  401b66:	b005      	add	sp, #20
  401b68:	f85d fb04 	ldr.w	pc, [sp], #4
  401b6c:	00400445 	.word	0x00400445

00401b70 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  401b70:	b5f0      	push	{r4, r5, r6, r7, lr}
  401b72:	b083      	sub	sp, #12
  401b74:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  401b76:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  401b7a:	b2db      	uxtb	r3, r3
  401b7c:	2b01      	cmp	r3, #1
  401b7e:	d901      	bls.n	401b84 <spi_cmd_rsp+0x14>
  401b80:	28cf      	cmp	r0, #207	; 0xcf
  401b82:	d106      	bne.n	401b92 <spi_cmd_rsp+0x22>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401b84:	2101      	movs	r1, #1
  401b86:	f10d 0007 	add.w	r0, sp, #7
  401b8a:	4b22      	ldr	r3, [pc, #136]	; (401c14 <spi_cmd_rsp+0xa4>)
  401b8c:	4798      	blx	r3
  401b8e:	2800      	cmp	r0, #0
  401b90:	d13a      	bne.n	401c08 <spi_cmd_rsp+0x98>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  401b92:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401b94:	2701      	movs	r7, #1
  401b96:	4e1f      	ldr	r6, [pc, #124]	; (401c14 <spi_cmd_rsp+0xa4>)
  401b98:	4639      	mov	r1, r7
  401b9a:	f10d 0007 	add.w	r0, sp, #7
  401b9e:	47b0      	blx	r6
  401ba0:	b158      	cbz	r0, 401bba <spi_cmd_rsp+0x4a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  401ba2:	f240 1227 	movw	r2, #295	; 0x127
  401ba6:	491c      	ldr	r1, [pc, #112]	; (401c18 <spi_cmd_rsp+0xa8>)
  401ba8:	481c      	ldr	r0, [pc, #112]	; (401c1c <spi_cmd_rsp+0xac>)
  401baa:	4c1d      	ldr	r4, [pc, #116]	; (401c20 <spi_cmd_rsp+0xb0>)
  401bac:	47a0      	blx	r4
  401bae:	481d      	ldr	r0, [pc, #116]	; (401c24 <spi_cmd_rsp+0xb4>)
  401bb0:	47a0      	blx	r4
  401bb2:	481d      	ldr	r0, [pc, #116]	; (401c28 <spi_cmd_rsp+0xb8>)
  401bb4:	47a0      	blx	r4
			result = N_FAIL;
  401bb6:	2000      	movs	r0, #0
			goto _fail_;
  401bb8:	e029      	b.n	401c0e <spi_cmd_rsp+0x9e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  401bba:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401bbe:	42ab      	cmp	r3, r5
  401bc0:	d005      	beq.n	401bce <spi_cmd_rsp+0x5e>
  401bc2:	1e63      	subs	r3, r4, #1
  401bc4:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401bc8:	d1e6      	bne.n	401b98 <spi_cmd_rsp+0x28>
  401bca:	240b      	movs	r4, #11
  401bcc:	e000      	b.n	401bd0 <spi_cmd_rsp+0x60>
  401bce:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401bd0:	2601      	movs	r6, #1
  401bd2:	4d10      	ldr	r5, [pc, #64]	; (401c14 <spi_cmd_rsp+0xa4>)
  401bd4:	4631      	mov	r1, r6
  401bd6:	f10d 0007 	add.w	r0, sp, #7
  401bda:	47a8      	blx	r5
  401bdc:	b158      	cbz	r0, 401bf6 <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  401bde:	f240 1235 	movw	r2, #309	; 0x135
  401be2:	490d      	ldr	r1, [pc, #52]	; (401c18 <spi_cmd_rsp+0xa8>)
  401be4:	480d      	ldr	r0, [pc, #52]	; (401c1c <spi_cmd_rsp+0xac>)
  401be6:	4c0e      	ldr	r4, [pc, #56]	; (401c20 <spi_cmd_rsp+0xb0>)
  401be8:	47a0      	blx	r4
  401bea:	480e      	ldr	r0, [pc, #56]	; (401c24 <spi_cmd_rsp+0xb4>)
  401bec:	47a0      	blx	r4
  401bee:	480e      	ldr	r0, [pc, #56]	; (401c28 <spi_cmd_rsp+0xb8>)
  401bf0:	47a0      	blx	r4
			result = N_FAIL;
  401bf2:	2000      	movs	r0, #0
			goto _fail_;
  401bf4:	e00b      	b.n	401c0e <spi_cmd_rsp+0x9e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  401bf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401bfa:	b13b      	cbz	r3, 401c0c <spi_cmd_rsp+0x9c>
  401bfc:	1e63      	subs	r3, r4, #1
  401bfe:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401c02:	d1e7      	bne.n	401bd4 <spi_cmd_rsp+0x64>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  401c04:	2001      	movs	r0, #1
  401c06:	e002      	b.n	401c0e <spi_cmd_rsp+0x9e>
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			result = N_FAIL;
  401c08:	2000      	movs	r0, #0
  401c0a:	e000      	b.n	401c0e <spi_cmd_rsp+0x9e>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  401c0c:	2001      	movs	r0, #1
	} while((rsp != 0x00) && (s8RetryCnt-- >0));

_fail_:

	return result;
}
  401c0e:	b003      	add	sp, #12
  401c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401c12:	bf00      	nop
  401c14:	00401b51 	.word	0x00401b51
  401c18:	0040bd54 	.word	0x0040bd54
  401c1c:	0040af20 	.word	0x0040af20
  401c20:	004040ad 	.word	0x004040ad
  401c24:	0040b878 	.word	0x0040b878
  401c28:	0040af4c 	.word	0x0040af4c

00401c2c <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  401c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c30:	b083      	sub	sp, #12
  401c32:	4682      	mov	sl, r0
  401c34:	4689      	mov	r9, r1
  401c36:	4693      	mov	fp, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  401c38:	f04f 0800 	mov.w	r8, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401c3c:	4d35      	ldr	r5, [pc, #212]	; (401d14 <spi_data_read+0xe8>)
	/**
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
  401c3e:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
			nbytes = sz;
  401c42:	bf94      	ite	ls
  401c44:	fa0f f789 	sxthls.w	r7, r9
		else
			nbytes = DATA_PKT_SZ;
  401c48:	f44f 5700 	movhi.w	r7, #8192	; 0x2000

		/**
			Data Respnose header
		**/
		retry = 10;
  401c4c:	240a      	movs	r4, #10
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401c4e:	2601      	movs	r6, #1
  401c50:	4631      	mov	r1, r6
  401c52:	f10d 0003 	add.w	r0, sp, #3
  401c56:	47a8      	blx	r5
  401c58:	b158      	cbz	r0, 401c72 <spi_data_read+0x46>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  401c5a:	f240 1257 	movw	r2, #343	; 0x157
  401c5e:	492e      	ldr	r1, [pc, #184]	; (401d18 <spi_data_read+0xec>)
  401c60:	482e      	ldr	r0, [pc, #184]	; (401d1c <spi_data_read+0xf0>)
  401c62:	4c2f      	ldr	r4, [pc, #188]	; (401d20 <spi_data_read+0xf4>)
  401c64:	47a0      	blx	r4
  401c66:	482f      	ldr	r0, [pc, #188]	; (401d24 <spi_data_read+0xf8>)
  401c68:	47a0      	blx	r4
  401c6a:	482f      	ldr	r0, [pc, #188]	; (401d28 <spi_data_read+0xfc>)
  401c6c:	47a0      	blx	r4
  401c6e:	2000      	movs	r0, #0
  401c70:	e04d      	b.n	401d0e <spi_data_read+0xe2>
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
  401c72:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401c76:	091b      	lsrs	r3, r3, #4
  401c78:	2b0f      	cmp	r3, #15
  401c7a:	d005      	beq.n	401c88 <spi_data_read+0x5c>
  401c7c:	3c01      	subs	r4, #1
  401c7e:	b224      	sxth	r4, r4
				break;
		} while (retry--);
  401c80:	f1b4 3fff 	cmp.w	r4, #4294967295
  401c84:	d1e4      	bne.n	401c50 <spi_data_read+0x24>
  401c86:	e001      	b.n	401c8c <spi_data_read+0x60>

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
  401c88:	2c00      	cmp	r4, #0
  401c8a:	dc0d      	bgt.n	401ca8 <spi_data_read+0x7c>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  401c8c:	f240 1263 	movw	r2, #355	; 0x163
  401c90:	4921      	ldr	r1, [pc, #132]	; (401d18 <spi_data_read+0xec>)
  401c92:	4822      	ldr	r0, [pc, #136]	; (401d1c <spi_data_read+0xf0>)
  401c94:	4c22      	ldr	r4, [pc, #136]	; (401d20 <spi_data_read+0xf4>)
  401c96:	47a0      	blx	r4
  401c98:	f89d 1003 	ldrb.w	r1, [sp, #3]
  401c9c:	4823      	ldr	r0, [pc, #140]	; (401d2c <spi_data_read+0x100>)
  401c9e:	47a0      	blx	r4
  401ca0:	4821      	ldr	r0, [pc, #132]	; (401d28 <spi_data_read+0xfc>)
  401ca2:	47a0      	blx	r4
			result = N_FAIL;
  401ca4:	2000      	movs	r0, #0
			break;
  401ca6:	e032      	b.n	401d0e <spi_data_read+0xe2>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  401ca8:	b2bf      	uxth	r7, r7
  401caa:	4639      	mov	r1, r7
  401cac:	eb0a 0008 	add.w	r0, sl, r8
  401cb0:	47a8      	blx	r5
  401cb2:	b158      	cbz	r0, 401ccc <spi_data_read+0xa0>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  401cb4:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  401cb8:	4917      	ldr	r1, [pc, #92]	; (401d18 <spi_data_read+0xec>)
  401cba:	4818      	ldr	r0, [pc, #96]	; (401d1c <spi_data_read+0xf0>)
  401cbc:	4c18      	ldr	r4, [pc, #96]	; (401d20 <spi_data_read+0xf4>)
  401cbe:	47a0      	blx	r4
  401cc0:	481b      	ldr	r0, [pc, #108]	; (401d30 <spi_data_read+0x104>)
  401cc2:	47a0      	blx	r4
  401cc4:	4818      	ldr	r0, [pc, #96]	; (401d28 <spi_data_read+0xfc>)
  401cc6:	47a0      	blx	r4
			result = N_FAIL;
  401cc8:	2000      	movs	r0, #0
			break;
  401cca:	e020      	b.n	401d0e <spi_data_read+0xe2>
		}
		if(!clockless)
  401ccc:	f1bb 0f00 	cmp.w	fp, #0
  401cd0:	d112      	bne.n	401cf8 <spi_data_read+0xcc>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
  401cd2:	4b18      	ldr	r3, [pc, #96]	; (401d34 <spi_data_read+0x108>)
  401cd4:	781b      	ldrb	r3, [r3, #0]
  401cd6:	b97b      	cbnz	r3, 401cf8 <spi_data_read+0xcc>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  401cd8:	2102      	movs	r1, #2
  401cda:	a801      	add	r0, sp, #4
  401cdc:	47a8      	blx	r5
  401cde:	b158      	cbz	r0, 401cf8 <spi_data_read+0xcc>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  401ce0:	f240 1277 	movw	r2, #375	; 0x177
  401ce4:	490c      	ldr	r1, [pc, #48]	; (401d18 <spi_data_read+0xec>)
  401ce6:	480d      	ldr	r0, [pc, #52]	; (401d1c <spi_data_read+0xf0>)
  401ce8:	4c0d      	ldr	r4, [pc, #52]	; (401d20 <spi_data_read+0xf4>)
  401cea:	47a0      	blx	r4
  401cec:	4812      	ldr	r0, [pc, #72]	; (401d38 <spi_data_read+0x10c>)
  401cee:	47a0      	blx	r4
  401cf0:	480d      	ldr	r0, [pc, #52]	; (401d28 <spi_data_read+0xfc>)
  401cf2:	47a0      	blx	r4
					result = N_FAIL;
  401cf4:	2000      	movs	r0, #0
					break;
  401cf6:	e00a      	b.n	401d0e <spi_data_read+0xe2>
				}
			}
		}
		ix += nbytes;
  401cf8:	44b8      	add	r8, r7
  401cfa:	fa0f f888 	sxth.w	r8, r8
		sz -= nbytes;
  401cfe:	ebc7 0709 	rsb	r7, r7, r9
  401d02:	fa1f f987 	uxth.w	r9, r7

	} while (sz);
  401d06:	f1b9 0f00 	cmp.w	r9, #0
  401d0a:	d198      	bne.n	401c3e <spi_data_read+0x12>
  401d0c:	2001      	movs	r0, #1

	return result;
}
  401d0e:	b003      	add	sp, #12
  401d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d14:	00401b51 	.word	0x00401b51
  401d18:	0040b740 	.word	0x0040b740
  401d1c:	0040af20 	.word	0x0040af20
  401d20:	004040ad 	.word	0x004040ad
  401d24:	0040b8ac 	.word	0x0040b8ac
  401d28:	0040af4c 	.word	0x0040af4c
  401d2c:	0040b8e0 	.word	0x0040b8e0
  401d30:	0040b910 	.word	0x0040b910
  401d34:	20400914 	.word	0x20400914
  401d38:	0040b944 	.word	0x0040b944

00401d3c <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
  401d3c:	b500      	push	{lr}
  401d3e:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
  401d40:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  401d42:	2300      	movs	r3, #0
  401d44:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  401d46:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  401d4a:	a901      	add	r1, sp, #4
  401d4c:	2003      	movs	r0, #3
  401d4e:	4b02      	ldr	r3, [pc, #8]	; (401d58 <nmi_spi_write+0x1c>)
  401d50:	4798      	blx	r3
}
  401d52:	b005      	add	sp, #20
  401d54:	f85d fb04 	ldr.w	pc, [sp], #4
  401d58:	00400445 	.word	0x00400445

00401d5c <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
  401d5c:	b570      	push	{r4, r5, r6, lr}
  401d5e:	b084      	sub	sp, #16
  401d60:	f89d 4020 	ldrb.w	r4, [sp, #32]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
  401d64:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  401d68:	38c1      	subs	r0, #193	; 0xc1
  401d6a:	280e      	cmp	r0, #14
  401d6c:	f200 80ae 	bhi.w	401ecc <spi_cmd+0x170>
  401d70:	e8df f000 	tbb	[pc, r0]
  401d74:	125f3e3e 	.word	0x125f3e3e
  401d78:	4d4d2c23 	.word	0x4d4d2c23
  401d7c:	acac0878 	.word	0xacac0878
  401d80:	acac      	.short	0xacac
  401d82:	35          	.byte	0x35
  401d83:	00          	.byte	0x00
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
  401d84:	0c0b      	lsrs	r3, r1, #16
  401d86:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401d8a:	0a0b      	lsrs	r3, r1, #8
  401d8c:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  401d90:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  401d94:	2105      	movs	r1, #5
		break;
  401d96:	e0a4      	b.n	401ee2 <spi_cmd+0x186>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  401d98:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  401d9c:	b914      	cbnz	r4, 401da4 <spi_cmd+0x48>
		bc[2] = (uint8)(adr >> 8);
		bc[3] = (uint8)adr;
		len = 5;
		break;
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  401d9e:	f88d 3005 	strb.w	r3, [sp, #5]
  401da2:	e003      	b.n	401dac <spi_cmd+0x50>
		if(clockless)  bc[1] |= (1 << 7);
  401da4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401da8:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  401dac:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  401db0:	2300      	movs	r3, #0
  401db2:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401db6:	2105      	movs	r1, #5
		break;
  401db8:	e093      	b.n	401ee2 <spi_cmd+0x186>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
  401dba:	2300      	movs	r3, #0
  401dbc:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  401dc0:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  401dc4:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401dc8:	2105      	movs	r1, #5
		break;
  401dca:	e08a      	b.n	401ee2 <spi_cmd+0x186>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
  401dcc:	2300      	movs	r3, #0
  401dce:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  401dd2:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  401dd6:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401dda:	2105      	movs	r1, #5
		break;
  401ddc:	e081      	b.n	401ee2 <spi_cmd+0x186>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
  401dde:	23ff      	movs	r3, #255	; 0xff
  401de0:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  401de4:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  401de8:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401dec:	2105      	movs	r1, #5
		break;
  401dee:	e078      	b.n	401ee2 <spi_cmd+0x186>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
  401df0:	0c0a      	lsrs	r2, r1, #16
  401df2:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401df6:	0a0a      	lsrs	r2, r1, #8
  401df8:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  401dfc:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  401e00:	0a1a      	lsrs	r2, r3, #8
  401e02:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  401e06:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  401e0a:	2107      	movs	r1, #7
		break;
  401e0c:	e069      	b.n	401ee2 <spi_cmd+0x186>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
  401e0e:	0c0a      	lsrs	r2, r1, #16
  401e10:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401e14:	0a0a      	lsrs	r2, r1, #8
  401e16:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  401e1a:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  401e1e:	0c1a      	lsrs	r2, r3, #16
  401e20:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  401e24:	0a1a      	lsrs	r2, r3, #8
  401e26:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  401e2a:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  401e2e:	2108      	movs	r1, #8
		break;
  401e30:	e057      	b.n	401ee2 <spi_cmd+0x186>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  401e32:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  401e36:	b914      	cbnz	r4, 401e3e <spi_cmd+0xe2>
		bc[5] = (uint8)(sz >> 8);
		bc[6] = (uint8)(sz);
		len = 8;
		break;
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  401e38:	f88d 3005 	strb.w	r3, [sp, #5]
  401e3c:	e003      	b.n	401e46 <spi_cmd+0xea>
		if(clockless)  bc[1] |= (1 << 7);
  401e3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401e42:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  401e46:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  401e4a:	0e13      	lsrs	r3, r2, #24
  401e4c:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  401e50:	0c13      	lsrs	r3, r2, #16
  401e52:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  401e56:	0a13      	lsrs	r3, r2, #8
  401e58:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  401e5c:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  401e60:	2108      	movs	r1, #8
		break;
  401e62:	e03e      	b.n	401ee2 <spi_cmd+0x186>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
  401e64:	0c0b      	lsrs	r3, r1, #16
  401e66:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401e6a:	0a0b      	lsrs	r3, r1, #8
  401e6c:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  401e70:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  401e74:	0e13      	lsrs	r3, r2, #24
  401e76:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  401e7a:	0c13      	lsrs	r3, r2, #16
  401e7c:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  401e80:	0a13      	lsrs	r3, r2, #8
  401e82:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  401e86:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  401e8a:	2109      	movs	r1, #9
		break;
  401e8c:	e029      	b.n	401ee2 <spi_cmd+0x186>
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  401e8e:	f812 3b01 	ldrb.w	r3, [r2], #1
  401e92:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  401e96:	5ce0      	ldrb	r0, [r4, r3]
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
  401e98:	4295      	cmp	r5, r2
  401e9a:	d1f8      	bne.n	401e8e <spi_cmd+0x132>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  401e9c:	ab04      	add	r3, sp, #16
  401e9e:	441e      	add	r6, r3
  401ea0:	0043      	lsls	r3, r0, #1
  401ea2:	f806 3c0c 	strb.w	r3, [r6, #-12]
  401ea6:	e001      	b.n	401eac <spi_cmd+0x150>
		else
			len-=1;
  401ea8:	3901      	subs	r1, #1
  401eaa:	b2c9      	uxtb	r1, r1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  401eac:	a801      	add	r0, sp, #4
  401eae:	4b10      	ldr	r3, [pc, #64]	; (401ef0 <spi_cmd+0x194>)
  401eb0:	4798      	blx	r3
  401eb2:	b168      	cbz	r0, 401ed0 <spi_cmd+0x174>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  401eb4:	f44f 7284 	mov.w	r2, #264	; 0x108
  401eb8:	490e      	ldr	r1, [pc, #56]	; (401ef4 <spi_cmd+0x198>)
  401eba:	480f      	ldr	r0, [pc, #60]	; (401ef8 <spi_cmd+0x19c>)
  401ebc:	4c0f      	ldr	r4, [pc, #60]	; (401efc <spi_cmd+0x1a0>)
  401ebe:	47a0      	blx	r4
  401ec0:	480f      	ldr	r0, [pc, #60]	; (401f00 <spi_cmd+0x1a4>)
  401ec2:	47a0      	blx	r4
  401ec4:	480f      	ldr	r0, [pc, #60]	; (401f04 <spi_cmd+0x1a8>)
  401ec6:	47a0      	blx	r4
			result = N_FAIL;
  401ec8:	2000      	movs	r0, #0
  401eca:	e00f      	b.n	401eec <spi_cmd+0x190>
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
	switch (cmd) {
  401ecc:	2000      	movs	r0, #0
  401ece:	e00d      	b.n	401eec <spi_cmd+0x190>
  401ed0:	2001      	movs	r0, #1
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
		}
	}

	return result;
  401ed2:	e00b      	b.n	401eec <spi_cmd+0x190>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  401ed4:	1e4e      	subs	r6, r1, #1
  401ed6:	ab01      	add	r3, sp, #4
  401ed8:	199d      	adds	r5, r3, r6
  401eda:	207f      	movs	r0, #127	; 0x7f
  401edc:	461a      	mov	r2, r3
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  401ede:	4c0a      	ldr	r4, [pc, #40]	; (401f08 <spi_cmd+0x1ac>)
  401ee0:	e7d5      	b.n	401e8e <spi_cmd+0x132>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
  401ee2:	4b0a      	ldr	r3, [pc, #40]	; (401f0c <spi_cmd+0x1b0>)
  401ee4:	781b      	ldrb	r3, [r3, #0]
  401ee6:	2b00      	cmp	r3, #0
  401ee8:	d1de      	bne.n	401ea8 <spi_cmd+0x14c>
  401eea:	e7f3      	b.n	401ed4 <spi_cmd+0x178>
			result = N_FAIL;
		}
	}

	return result;
}
  401eec:	b004      	add	sp, #16
  401eee:	bd70      	pop	{r4, r5, r6, pc}
  401ef0:	00401d3d 	.word	0x00401d3d
  401ef4:	0040bd3c 	.word	0x0040bd3c
  401ef8:	0040af20 	.word	0x0040af20
  401efc:	004040ad 	.word	0x004040ad
  401f00:	0040b97c 	.word	0x0040b97c
  401f04:	0040af4c 	.word	0x0040af4c
  401f08:	0040b750 	.word	0x0040b750
  401f0c:	20400914 	.word	0x20400914

00401f10 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  401f10:	b570      	push	{r4, r5, r6, lr}
  401f12:	b082      	sub	sp, #8
  401f14:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  401f16:	2831      	cmp	r0, #49	; 0x31
  401f18:	bf35      	itete	cc
  401f1a:	2301      	movcc	r3, #1
  401f1c:	2300      	movcs	r3, #0
  401f1e:	25c3      	movcc	r5, #195	; 0xc3
  401f20:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  401f22:	9300      	str	r3, [sp, #0]
  401f24:	2304      	movs	r3, #4
  401f26:	460a      	mov	r2, r1
  401f28:	4601      	mov	r1, r0
  401f2a:	4628      	mov	r0, r5
  401f2c:	4e16      	ldr	r6, [pc, #88]	; (401f88 <spi_write_reg+0x78>)
  401f2e:	47b0      	blx	r6
	if (result != N_OK) {
  401f30:	2801      	cmp	r0, #1
  401f32:	d00c      	beq.n	401f4e <spi_write_reg+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  401f34:	f240 12eb 	movw	r2, #491	; 0x1eb
  401f38:	4914      	ldr	r1, [pc, #80]	; (401f8c <spi_write_reg+0x7c>)
  401f3a:	4815      	ldr	r0, [pc, #84]	; (401f90 <spi_write_reg+0x80>)
  401f3c:	4d15      	ldr	r5, [pc, #84]	; (401f94 <spi_write_reg+0x84>)
  401f3e:	47a8      	blx	r5
  401f40:	4621      	mov	r1, r4
  401f42:	4815      	ldr	r0, [pc, #84]	; (401f98 <spi_write_reg+0x88>)
  401f44:	47a8      	blx	r5
  401f46:	4815      	ldr	r0, [pc, #84]	; (401f9c <spi_write_reg+0x8c>)
  401f48:	47a8      	blx	r5
		return N_FAIL;
  401f4a:	2000      	movs	r0, #0
  401f4c:	e01a      	b.n	401f84 <spi_write_reg+0x74>
	}

	result = spi_cmd_rsp(cmd);
  401f4e:	4628      	mov	r0, r5
  401f50:	4b13      	ldr	r3, [pc, #76]	; (401fa0 <spi_write_reg+0x90>)
  401f52:	4798      	blx	r3
	if (result != N_OK) {
  401f54:	2801      	cmp	r0, #1
  401f56:	d014      	beq.n	401f82 <spi_write_reg+0x72>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  401f58:	f240 12f1 	movw	r2, #497	; 0x1f1
  401f5c:	490b      	ldr	r1, [pc, #44]	; (401f8c <spi_write_reg+0x7c>)
  401f5e:	480c      	ldr	r0, [pc, #48]	; (401f90 <spi_write_reg+0x80>)
  401f60:	4d0c      	ldr	r5, [pc, #48]	; (401f94 <spi_write_reg+0x84>)
  401f62:	47a8      	blx	r5
  401f64:	4621      	mov	r1, r4
  401f66:	480f      	ldr	r0, [pc, #60]	; (401fa4 <spi_write_reg+0x94>)
  401f68:	47a8      	blx	r5
  401f6a:	480c      	ldr	r0, [pc, #48]	; (401f9c <spi_write_reg+0x8c>)
  401f6c:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  401f6e:	2400      	movs	r4, #0
  401f70:	9400      	str	r4, [sp, #0]
  401f72:	4623      	mov	r3, r4
  401f74:	4622      	mov	r2, r4
  401f76:	4621      	mov	r1, r4
  401f78:	20cf      	movs	r0, #207	; 0xcf
  401f7a:	4d03      	ldr	r5, [pc, #12]	; (401f88 <spi_write_reg+0x78>)
  401f7c:	47a8      	blx	r5
		return N_FAIL;
  401f7e:	4620      	mov	r0, r4
  401f80:	e000      	b.n	401f84 <spi_write_reg+0x74>
	}

	return N_OK;
  401f82:	2001      	movs	r0, #1
	}

	return result;

#endif
}
  401f84:	b002      	add	sp, #8
  401f86:	bd70      	pop	{r4, r5, r6, pc}
  401f88:	00401d5d 	.word	0x00401d5d
  401f8c:	0040bd2c 	.word	0x0040bd2c
  401f90:	0040af20 	.word	0x0040af20
  401f94:	004040ad 	.word	0x004040ad
  401f98:	0040b9a8 	.word	0x0040b9a8
  401f9c:	0040af4c 	.word	0x0040af4c
  401fa0:	00401b71 	.word	0x00401b71
  401fa4:	0040b9d4 	.word	0x0040b9d4

00401fa8 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  401fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401fac:	b084      	sub	sp, #16
  401fae:	4604      	mov	r4, r0
  401fb0:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  401fb2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  401fb6:	bf35      	itete	cc
  401fb8:	2601      	movcc	r6, #1
  401fba:	2600      	movcs	r6, #0
  401fbc:	25c4      	movcc	r5, #196	; 0xc4
  401fbe:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  401fc0:	9600      	str	r6, [sp, #0]
  401fc2:	2304      	movs	r3, #4
  401fc4:	2200      	movs	r2, #0
  401fc6:	4601      	mov	r1, r0
  401fc8:	4628      	mov	r0, r5
  401fca:	4f2d      	ldr	r7, [pc, #180]	; (402080 <spi_read_reg+0xd8>)
  401fcc:	47b8      	blx	r7
	if (result != N_OK) {
  401fce:	2801      	cmp	r0, #1
  401fd0:	d00c      	beq.n	401fec <spi_read_reg+0x44>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  401fd2:	f240 2245 	movw	r2, #581	; 0x245
  401fd6:	492b      	ldr	r1, [pc, #172]	; (402084 <spi_read_reg+0xdc>)
  401fd8:	482b      	ldr	r0, [pc, #172]	; (402088 <spi_read_reg+0xe0>)
  401fda:	4d2c      	ldr	r5, [pc, #176]	; (40208c <spi_read_reg+0xe4>)
  401fdc:	47a8      	blx	r5
  401fde:	4621      	mov	r1, r4
  401fe0:	482b      	ldr	r0, [pc, #172]	; (402090 <spi_read_reg+0xe8>)
  401fe2:	47a8      	blx	r5
  401fe4:	482b      	ldr	r0, [pc, #172]	; (402094 <spi_read_reg+0xec>)
  401fe6:	47a8      	blx	r5
		return N_FAIL;
  401fe8:	2000      	movs	r0, #0
  401fea:	e045      	b.n	402078 <spi_read_reg+0xd0>
	}

	result = spi_cmd_rsp(cmd);
  401fec:	4628      	mov	r0, r5
  401fee:	4b2a      	ldr	r3, [pc, #168]	; (402098 <spi_read_reg+0xf0>)
  401ff0:	4798      	blx	r3
	if (result != N_OK) {
  401ff2:	2801      	cmp	r0, #1
  401ff4:	d014      	beq.n	402020 <spi_read_reg+0x78>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  401ff6:	f240 224b 	movw	r2, #587	; 0x24b
  401ffa:	4922      	ldr	r1, [pc, #136]	; (402084 <spi_read_reg+0xdc>)
  401ffc:	4822      	ldr	r0, [pc, #136]	; (402088 <spi_read_reg+0xe0>)
  401ffe:	4d23      	ldr	r5, [pc, #140]	; (40208c <spi_read_reg+0xe4>)
  402000:	47a8      	blx	r5
  402002:	4621      	mov	r1, r4
  402004:	4825      	ldr	r0, [pc, #148]	; (40209c <spi_read_reg+0xf4>)
  402006:	47a8      	blx	r5
  402008:	4822      	ldr	r0, [pc, #136]	; (402094 <spi_read_reg+0xec>)
  40200a:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40200c:	2400      	movs	r4, #0
  40200e:	9400      	str	r4, [sp, #0]
  402010:	4623      	mov	r3, r4
  402012:	4622      	mov	r2, r4
  402014:	4621      	mov	r1, r4
  402016:	20cf      	movs	r0, #207	; 0xcf
  402018:	4d19      	ldr	r5, [pc, #100]	; (402080 <spi_read_reg+0xd8>)
  40201a:	47a8      	blx	r5
		return N_FAIL;
  40201c:	4620      	mov	r0, r4
  40201e:	e02b      	b.n	402078 <spi_read_reg+0xd0>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
  402020:	4632      	mov	r2, r6
  402022:	2104      	movs	r1, #4
  402024:	a803      	add	r0, sp, #12
  402026:	4b1e      	ldr	r3, [pc, #120]	; (4020a0 <spi_read_reg+0xf8>)
  402028:	4798      	blx	r3
	if (result != N_OK) {
  40202a:	2801      	cmp	r0, #1
  40202c:	d013      	beq.n	402056 <spi_read_reg+0xae>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  40202e:	f240 2253 	movw	r2, #595	; 0x253
  402032:	4914      	ldr	r1, [pc, #80]	; (402084 <spi_read_reg+0xdc>)
  402034:	4814      	ldr	r0, [pc, #80]	; (402088 <spi_read_reg+0xe0>)
  402036:	4c15      	ldr	r4, [pc, #84]	; (40208c <spi_read_reg+0xe4>)
  402038:	47a0      	blx	r4
  40203a:	481a      	ldr	r0, [pc, #104]	; (4020a4 <spi_read_reg+0xfc>)
  40203c:	47a0      	blx	r4
  40203e:	4815      	ldr	r0, [pc, #84]	; (402094 <spi_read_reg+0xec>)
  402040:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402042:	2400      	movs	r4, #0
  402044:	9400      	str	r4, [sp, #0]
  402046:	4623      	mov	r3, r4
  402048:	4622      	mov	r2, r4
  40204a:	4621      	mov	r1, r4
  40204c:	20cf      	movs	r0, #207	; 0xcf
  40204e:	4d0c      	ldr	r5, [pc, #48]	; (402080 <spi_read_reg+0xd8>)
  402050:	47a8      	blx	r5
		return N_FAIL;
  402052:	4620      	mov	r0, r4
  402054:	e010      	b.n	402078 <spi_read_reg+0xd0>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
  402056:	f89d 100d 	ldrb.w	r1, [sp, #13]
  40205a:	f89d 200e 	ldrb.w	r2, [sp, #14]
  40205e:	0413      	lsls	r3, r2, #16
  402060:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
  402064:	f89d 300c 	ldrb.w	r3, [sp, #12]
  402068:	4313      	orrs	r3, r2
  40206a:	f89d 200f 	ldrb.w	r2, [sp, #15]
  40206e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402072:	f8c8 3000 	str.w	r3, [r8]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
  402076:	2001      	movs	r0, #1
}
  402078:	b004      	add	sp, #16
  40207a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40207e:	bf00      	nop
  402080:	00401d5d 	.word	0x00401d5d
  402084:	0040bd60 	.word	0x0040bd60
  402088:	0040af20 	.word	0x0040af20
  40208c:	004040ad 	.word	0x004040ad
  402090:	0040ba0c 	.word	0x0040ba0c
  402094:	0040af4c 	.word	0x0040af4c
  402098:	00401b71 	.word	0x00401b71
  40209c:	0040ba38 	.word	0x0040ba38
  4020a0:	00401c2d 	.word	0x00401c2d
  4020a4:	0040ba6c 	.word	0x0040ba6c

004020a8 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  4020a8:	2000      	movs	r0, #0
  4020aa:	4b01      	ldr	r3, [pc, #4]	; (4020b0 <nm_spi_deinit+0x8>)
  4020ac:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  4020ae:	4770      	bx	lr
  4020b0:	20400914 	.word	0x20400914

004020b4 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  4020b4:	b500      	push	{lr}
  4020b6:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  4020b8:	a901      	add	r1, sp, #4
  4020ba:	4b03      	ldr	r3, [pc, #12]	; (4020c8 <nm_spi_read_reg+0x14>)
  4020bc:	4798      	blx	r3

	return u32Val;
}
  4020be:	9801      	ldr	r0, [sp, #4]
  4020c0:	b003      	add	sp, #12
  4020c2:	f85d fb04 	ldr.w	pc, [sp], #4
  4020c6:	bf00      	nop
  4020c8:	00401fa9 	.word	0x00401fa9

004020cc <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4020cc:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  4020ce:	4b04      	ldr	r3, [pc, #16]	; (4020e0 <nm_spi_read_reg_with_ret+0x14>)
  4020d0:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4020d2:	2801      	cmp	r0, #1

	return s8Ret;
}
  4020d4:	bf0c      	ite	eq
  4020d6:	2000      	moveq	r0, #0
  4020d8:	f06f 0005 	mvnne.w	r0, #5
  4020dc:	bd08      	pop	{r3, pc}
  4020de:	bf00      	nop
  4020e0:	00401fa9 	.word	0x00401fa9

004020e4 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  4020e4:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  4020e6:	4b04      	ldr	r3, [pc, #16]	; (4020f8 <nm_spi_write_reg+0x14>)
  4020e8:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4020ea:	2801      	cmp	r0, #1

	return s8Ret;
}
  4020ec:	bf0c      	ite	eq
  4020ee:	2000      	moveq	r0, #0
  4020f0:	f06f 0005 	mvnne.w	r0, #5
  4020f4:	bd08      	pop	{r3, pc}
  4020f6:	bf00      	nop
  4020f8:	00401f11 	.word	0x00401f11

004020fc <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
  4020fc:	b530      	push	{r4, r5, lr}
  4020fe:	b083      	sub	sp, #12
	uint32 chipid;
	uint32 reg =0;
  402100:	2300      	movs	r3, #0
  402102:	a902      	add	r1, sp, #8
  402104:	f841 3d08 	str.w	r3, [r1, #-8]!

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
  402108:	4a32      	ldr	r2, [pc, #200]	; (4021d4 <nm_spi_init+0xd8>)
  40210a:	7013      	strb	r3, [r2, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  40210c:	f64e 0024 	movw	r0, #59428	; 0xe824
  402110:	4b31      	ldr	r3, [pc, #196]	; (4021d8 <nm_spi_init+0xdc>)
  402112:	4798      	blx	r3
  402114:	b9f0      	cbnz	r0, 402154 <nm_spi_init+0x58>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
  402116:	2201      	movs	r2, #1
  402118:	4b2e      	ldr	r3, [pc, #184]	; (4021d4 <nm_spi_init+0xd8>)
  40211a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  40211c:	f240 22c5 	movw	r2, #709	; 0x2c5
  402120:	492e      	ldr	r1, [pc, #184]	; (4021dc <nm_spi_init+0xe0>)
  402122:	482f      	ldr	r0, [pc, #188]	; (4021e0 <nm_spi_init+0xe4>)
  402124:	4c2f      	ldr	r4, [pc, #188]	; (4021e4 <nm_spi_init+0xe8>)
  402126:	47a0      	blx	r4
  402128:	482f      	ldr	r0, [pc, #188]	; (4021e8 <nm_spi_init+0xec>)
  40212a:	47a0      	blx	r4
  40212c:	482f      	ldr	r0, [pc, #188]	; (4021ec <nm_spi_init+0xf0>)
  40212e:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  402130:	4669      	mov	r1, sp
  402132:	f64e 0024 	movw	r0, #59428	; 0xe824
  402136:	4b28      	ldr	r3, [pc, #160]	; (4021d8 <nm_spi_init+0xdc>)
  402138:	4798      	blx	r3
  40213a:	4604      	mov	r4, r0
  40213c:	b950      	cbnz	r0, 402154 <nm_spi_init+0x58>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  40213e:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  402142:	4926      	ldr	r1, [pc, #152]	; (4021dc <nm_spi_init+0xe0>)
  402144:	4826      	ldr	r0, [pc, #152]	; (4021e0 <nm_spi_init+0xe4>)
  402146:	4d27      	ldr	r5, [pc, #156]	; (4021e4 <nm_spi_init+0xe8>)
  402148:	47a8      	blx	r5
  40214a:	4829      	ldr	r0, [pc, #164]	; (4021f0 <nm_spi_init+0xf4>)
  40214c:	47a8      	blx	r5
  40214e:	4827      	ldr	r0, [pc, #156]	; (4021ec <nm_spi_init+0xf0>)
  402150:	47a8      	blx	r5
			return 0;
  402152:	e03c      	b.n	4021ce <nm_spi_init+0xd2>
		}
	}
	if(gu8Crc_off == 0)
  402154:	4b1f      	ldr	r3, [pc, #124]	; (4021d4 <nm_spi_init+0xd8>)
  402156:	781b      	ldrb	r3, [r3, #0]
  402158:	b9cb      	cbnz	r3, 40218e <nm_spi_init+0x92>
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
		reg |= (0x5 << 4);
  40215a:	9900      	ldr	r1, [sp, #0]
  40215c:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
  402160:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  402164:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  402166:	f64e 0024 	movw	r0, #59428	; 0xe824
  40216a:	4b22      	ldr	r3, [pc, #136]	; (4021f4 <nm_spi_init+0xf8>)
  40216c:	4798      	blx	r3
  40216e:	4604      	mov	r4, r0
  402170:	b950      	cbnz	r0, 402188 <nm_spi_init+0x8c>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  402172:	f240 22d2 	movw	r2, #722	; 0x2d2
  402176:	4919      	ldr	r1, [pc, #100]	; (4021dc <nm_spi_init+0xe0>)
  402178:	4819      	ldr	r0, [pc, #100]	; (4021e0 <nm_spi_init+0xe4>)
  40217a:	4d1a      	ldr	r5, [pc, #104]	; (4021e4 <nm_spi_init+0xe8>)
  40217c:	47a8      	blx	r5
  40217e:	481e      	ldr	r0, [pc, #120]	; (4021f8 <nm_spi_init+0xfc>)
  402180:	47a8      	blx	r5
  402182:	481a      	ldr	r0, [pc, #104]	; (4021ec <nm_spi_init+0xf0>)
  402184:	47a8      	blx	r5
			return 0;
  402186:	e022      	b.n	4021ce <nm_spi_init+0xd2>
		}
		gu8Crc_off = 1;
  402188:	2201      	movs	r2, #1
  40218a:	4b12      	ldr	r3, [pc, #72]	; (4021d4 <nm_spi_init+0xd8>)
  40218c:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
  40218e:	a901      	add	r1, sp, #4
  402190:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  402194:	4b10      	ldr	r3, [pc, #64]	; (4021d8 <nm_spi_init+0xdc>)
  402196:	4798      	blx	r3
  402198:	b960      	cbnz	r0, 4021b4 <nm_spi_init+0xb8>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  40219a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  40219e:	490f      	ldr	r1, [pc, #60]	; (4021dc <nm_spi_init+0xe0>)
  4021a0:	480f      	ldr	r0, [pc, #60]	; (4021e0 <nm_spi_init+0xe4>)
  4021a2:	4c10      	ldr	r4, [pc, #64]	; (4021e4 <nm_spi_init+0xe8>)
  4021a4:	47a0      	blx	r4
  4021a6:	4815      	ldr	r0, [pc, #84]	; (4021fc <nm_spi_init+0x100>)
  4021a8:	47a0      	blx	r4
  4021aa:	4810      	ldr	r0, [pc, #64]	; (4021ec <nm_spi_init+0xf0>)
  4021ac:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  4021ae:	f06f 0405 	mvn.w	r4, #5
  4021b2:	e00c      	b.n	4021ce <nm_spi_init+0xd2>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  4021b4:	f64e 0024 	movw	r0, #59428	; 0xe824
  4021b8:	4b11      	ldr	r3, [pc, #68]	; (402200 <nm_spi_init+0x104>)
  4021ba:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  4021bc:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  4021c0:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  4021c4:	f64e 0024 	movw	r0, #59428	; 0xe824
  4021c8:	4b0e      	ldr	r3, [pc, #56]	; (402204 <nm_spi_init+0x108>)
  4021ca:	4798      	blx	r3

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
  4021cc:	2400      	movs	r4, #0
}
  4021ce:	4620      	mov	r0, r4
  4021d0:	b003      	add	sp, #12
  4021d2:	bd30      	pop	{r4, r5, pc}
  4021d4:	20400914 	.word	0x20400914
  4021d8:	00401fa9 	.word	0x00401fa9
  4021dc:	0040b850 	.word	0x0040b850
  4021e0:	0040af20 	.word	0x0040af20
  4021e4:	004040ad 	.word	0x004040ad
  4021e8:	0040ba8c 	.word	0x0040ba8c
  4021ec:	0040af4c 	.word	0x0040af4c
  4021f0:	0040badc 	.word	0x0040badc
  4021f4:	00401f11 	.word	0x00401f11
  4021f8:	0040bb0c 	.word	0x0040bb0c
  4021fc:	0040bb40 	.word	0x0040bb40
  402200:	004020b5 	.word	0x004020b5
  402204:	004020e5 	.word	0x004020e5

00402208 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  402208:	b5f0      	push	{r4, r5, r6, r7, lr}
  40220a:	b083      	sub	sp, #12
  40220c:	4604      	mov	r4, r0
  40220e:	460f      	mov	r7, r1
  402210:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  402212:	2200      	movs	r2, #0
  402214:	9200      	str	r2, [sp, #0]
  402216:	462b      	mov	r3, r5
  402218:	4601      	mov	r1, r0
  40221a:	20c8      	movs	r0, #200	; 0xc8
  40221c:	4e23      	ldr	r6, [pc, #140]	; (4022ac <nm_spi_read_block+0xa4>)
  40221e:	47b0      	blx	r6
	if (result != N_OK) {
  402220:	2801      	cmp	r0, #1
  402222:	d00b      	beq.n	40223c <nm_spi_read_block+0x34>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  402224:	f44f 721d 	mov.w	r2, #628	; 0x274
  402228:	4921      	ldr	r1, [pc, #132]	; (4022b0 <nm_spi_read_block+0xa8>)
  40222a:	4822      	ldr	r0, [pc, #136]	; (4022b4 <nm_spi_read_block+0xac>)
  40222c:	4d22      	ldr	r5, [pc, #136]	; (4022b8 <nm_spi_read_block+0xb0>)
  40222e:	47a8      	blx	r5
  402230:	4621      	mov	r1, r4
  402232:	4822      	ldr	r0, [pc, #136]	; (4022bc <nm_spi_read_block+0xb4>)
  402234:	47a8      	blx	r5
  402236:	4822      	ldr	r0, [pc, #136]	; (4022c0 <nm_spi_read_block+0xb8>)
  402238:	47a8      	blx	r5
  40223a:	e032      	b.n	4022a2 <nm_spi_read_block+0x9a>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  40223c:	20c8      	movs	r0, #200	; 0xc8
  40223e:	4b21      	ldr	r3, [pc, #132]	; (4022c4 <nm_spi_read_block+0xbc>)
  402240:	4798      	blx	r3
	if (result != N_OK) {
  402242:	2801      	cmp	r0, #1
  402244:	d012      	beq.n	40226c <nm_spi_read_block+0x64>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  402246:	f240 227a 	movw	r2, #634	; 0x27a
  40224a:	4919      	ldr	r1, [pc, #100]	; (4022b0 <nm_spi_read_block+0xa8>)
  40224c:	4819      	ldr	r0, [pc, #100]	; (4022b4 <nm_spi_read_block+0xac>)
  40224e:	4d1a      	ldr	r5, [pc, #104]	; (4022b8 <nm_spi_read_block+0xb0>)
  402250:	47a8      	blx	r5
  402252:	4621      	mov	r1, r4
  402254:	481c      	ldr	r0, [pc, #112]	; (4022c8 <nm_spi_read_block+0xc0>)
  402256:	47a8      	blx	r5
  402258:	4819      	ldr	r0, [pc, #100]	; (4022c0 <nm_spi_read_block+0xb8>)
  40225a:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40225c:	2100      	movs	r1, #0
  40225e:	9100      	str	r1, [sp, #0]
  402260:	460b      	mov	r3, r1
  402262:	460a      	mov	r2, r1
  402264:	20cf      	movs	r0, #207	; 0xcf
  402266:	4c11      	ldr	r4, [pc, #68]	; (4022ac <nm_spi_read_block+0xa4>)
  402268:	47a0      	blx	r4
  40226a:	e01a      	b.n	4022a2 <nm_spi_read_block+0x9a>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
  40226c:	2200      	movs	r2, #0
  40226e:	4629      	mov	r1, r5
  402270:	4638      	mov	r0, r7
  402272:	4b16      	ldr	r3, [pc, #88]	; (4022cc <nm_spi_read_block+0xc4>)
  402274:	4798      	blx	r3
	if (result != N_OK) {
  402276:	2801      	cmp	r0, #1
  402278:	d011      	beq.n	40229e <nm_spi_read_block+0x96>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  40227a:	f44f 7221 	mov.w	r2, #644	; 0x284
  40227e:	490c      	ldr	r1, [pc, #48]	; (4022b0 <nm_spi_read_block+0xa8>)
  402280:	480c      	ldr	r0, [pc, #48]	; (4022b4 <nm_spi_read_block+0xac>)
  402282:	4c0d      	ldr	r4, [pc, #52]	; (4022b8 <nm_spi_read_block+0xb0>)
  402284:	47a0      	blx	r4
  402286:	4812      	ldr	r0, [pc, #72]	; (4022d0 <nm_spi_read_block+0xc8>)
  402288:	47a0      	blx	r4
  40228a:	480d      	ldr	r0, [pc, #52]	; (4022c0 <nm_spi_read_block+0xb8>)
  40228c:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40228e:	2100      	movs	r1, #0
  402290:	9100      	str	r1, [sp, #0]
  402292:	460b      	mov	r3, r1
  402294:	460a      	mov	r2, r1
  402296:	20cf      	movs	r0, #207	; 0xcf
  402298:	4c04      	ldr	r4, [pc, #16]	; (4022ac <nm_spi_read_block+0xa4>)
  40229a:	47a0      	blx	r4
  40229c:	e001      	b.n	4022a2 <nm_spi_read_block+0x9a>
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  40229e:	2000      	movs	r0, #0
  4022a0:	e001      	b.n	4022a6 <nm_spi_read_block+0x9e>
	else s8Ret = M2M_ERR_BUS_FAIL;
  4022a2:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  4022a6:	b003      	add	sp, #12
  4022a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4022aa:	bf00      	nop
  4022ac:	00401d5d 	.word	0x00401d5d
  4022b0:	0040b86c 	.word	0x0040b86c
  4022b4:	0040af20 	.word	0x0040af20
  4022b8:	004040ad 	.word	0x004040ad
  4022bc:	0040bb68 	.word	0x0040bb68
  4022c0:	0040af4c 	.word	0x0040af4c
  4022c4:	00401b71 	.word	0x00401b71
  4022c8:	0040bb98 	.word	0x0040bb98
  4022cc:	00401c2d 	.word	0x00401c2d
  4022d0:	0040bbd0 	.word	0x0040bbd0

004022d4 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4022d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4022d8:	b085      	sub	sp, #20
  4022da:	4604      	mov	r4, r0
  4022dc:	4688      	mov	r8, r1
  4022de:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  4022e0:	2200      	movs	r2, #0
  4022e2:	9200      	str	r2, [sp, #0]
  4022e4:	462b      	mov	r3, r5
  4022e6:	4601      	mov	r1, r0
  4022e8:	20c7      	movs	r0, #199	; 0xc7
  4022ea:	4e4c      	ldr	r6, [pc, #304]	; (40241c <nm_spi_write_block+0x148>)
  4022ec:	47b0      	blx	r6
	if (result != N_OK) {
  4022ee:	2801      	cmp	r0, #1
  4022f0:	d00b      	beq.n	40230a <nm_spi_write_block+0x36>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  4022f2:	f240 220f 	movw	r2, #527	; 0x20f
  4022f6:	494a      	ldr	r1, [pc, #296]	; (402420 <nm_spi_write_block+0x14c>)
  4022f8:	484a      	ldr	r0, [pc, #296]	; (402424 <nm_spi_write_block+0x150>)
  4022fa:	4d4b      	ldr	r5, [pc, #300]	; (402428 <nm_spi_write_block+0x154>)
  4022fc:	47a8      	blx	r5
  4022fe:	4621      	mov	r1, r4
  402300:	484a      	ldr	r0, [pc, #296]	; (40242c <nm_spi_write_block+0x158>)
  402302:	47a8      	blx	r5
  402304:	484a      	ldr	r0, [pc, #296]	; (402430 <nm_spi_write_block+0x15c>)
  402306:	47a8      	blx	r5
  402308:	e082      	b.n	402410 <nm_spi_write_block+0x13c>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  40230a:	20c7      	movs	r0, #199	; 0xc7
  40230c:	4b49      	ldr	r3, [pc, #292]	; (402434 <nm_spi_write_block+0x160>)
  40230e:	4798      	blx	r3
	if (result != N_OK) {
  402310:	2801      	cmp	r0, #1
  402312:	d012      	beq.n	40233a <nm_spi_write_block+0x66>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  402314:	f240 2215 	movw	r2, #533	; 0x215
  402318:	4941      	ldr	r1, [pc, #260]	; (402420 <nm_spi_write_block+0x14c>)
  40231a:	4842      	ldr	r0, [pc, #264]	; (402424 <nm_spi_write_block+0x150>)
  40231c:	4d42      	ldr	r5, [pc, #264]	; (402428 <nm_spi_write_block+0x154>)
  40231e:	47a8      	blx	r5
  402320:	4621      	mov	r1, r4
  402322:	4845      	ldr	r0, [pc, #276]	; (402438 <nm_spi_write_block+0x164>)
  402324:	47a8      	blx	r5
  402326:	4842      	ldr	r0, [pc, #264]	; (402430 <nm_spi_write_block+0x15c>)
  402328:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40232a:	2100      	movs	r1, #0
  40232c:	9100      	str	r1, [sp, #0]
  40232e:	460b      	mov	r3, r1
  402330:	460a      	mov	r2, r1
  402332:	20cf      	movs	r0, #207	; 0xcf
  402334:	4c39      	ldr	r4, [pc, #228]	; (40241c <nm_spi_write_block+0x148>)
  402336:	47a0      	blx	r4
  402338:	e06a      	b.n	402410 <nm_spi_write_block+0x13c>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
  40233a:	2400      	movs	r4, #0
  40233c:	f8ad 400c 	strh.w	r4, [sp, #12]
				order = 0x3;
			else
				order = 0x2;
		}
		cmd |= order;
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  402340:	4f3e      	ldr	r7, [pc, #248]	; (40243c <nm_spi_write_block+0x168>)
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  402342:	f8df 9110 	ldr.w	r9, [pc, #272]	; 402454 <nm_spi_write_block+0x180>
  402346:	462e      	mov	r6, r5
  402348:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  40234c:	bf28      	it	cs
  40234e:	f44f 5600 	movcs.w	r6, #8192	; 0x2000

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
  402352:	b92c      	cbnz	r4, 402360 <nm_spi_write_block+0x8c>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x1;
  402354:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  402358:	bf94      	ite	ls
  40235a:	2303      	movls	r3, #3
  40235c:	2301      	movhi	r3, #1
  40235e:	e004      	b.n	40236a <nm_spi_write_block+0x96>
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x2;
  402360:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  402364:	bf94      	ite	ls
  402366:	2303      	movls	r3, #3
  402368:	2302      	movhi	r3, #2
		}
		cmd |= order;
  40236a:	f063 030f 	orn	r3, r3, #15
  40236e:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  402372:	2101      	movs	r1, #1
  402374:	f10d 000b 	add.w	r0, sp, #11
  402378:	47b8      	blx	r7
  40237a:	b150      	cbz	r0, 402392 <nm_spi_write_block+0xbe>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  40237c:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  402380:	492f      	ldr	r1, [pc, #188]	; (402440 <nm_spi_write_block+0x16c>)
  402382:	4828      	ldr	r0, [pc, #160]	; (402424 <nm_spi_write_block+0x150>)
  402384:	4c28      	ldr	r4, [pc, #160]	; (402428 <nm_spi_write_block+0x154>)
  402386:	47a0      	blx	r4
  402388:	482e      	ldr	r0, [pc, #184]	; (402444 <nm_spi_write_block+0x170>)
  40238a:	47a0      	blx	r4
  40238c:	4828      	ldr	r0, [pc, #160]	; (402430 <nm_spi_write_block+0x15c>)
  40238e:	47a0      	blx	r4
  402390:	e028      	b.n	4023e4 <nm_spi_write_block+0x110>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  402392:	4631      	mov	r1, r6
  402394:	eb08 0004 	add.w	r0, r8, r4
  402398:	47b8      	blx	r7
  40239a:	b150      	cbz	r0, 4023b2 <nm_spi_write_block+0xde>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  40239c:	f240 12b1 	movw	r2, #433	; 0x1b1
  4023a0:	4927      	ldr	r1, [pc, #156]	; (402440 <nm_spi_write_block+0x16c>)
  4023a2:	4820      	ldr	r0, [pc, #128]	; (402424 <nm_spi_write_block+0x150>)
  4023a4:	4c20      	ldr	r4, [pc, #128]	; (402428 <nm_spi_write_block+0x154>)
  4023a6:	47a0      	blx	r4
  4023a8:	4827      	ldr	r0, [pc, #156]	; (402448 <nm_spi_write_block+0x174>)
  4023aa:	47a0      	blx	r4
  4023ac:	4820      	ldr	r0, [pc, #128]	; (402430 <nm_spi_write_block+0x15c>)
  4023ae:	47a0      	blx	r4
  4023b0:	e018      	b.n	4023e4 <nm_spi_write_block+0x110>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  4023b2:	f899 3000 	ldrb.w	r3, [r9]
  4023b6:	b973      	cbnz	r3, 4023d6 <nm_spi_write_block+0x102>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  4023b8:	2102      	movs	r1, #2
  4023ba:	a803      	add	r0, sp, #12
  4023bc:	47b8      	blx	r7
  4023be:	b150      	cbz	r0, 4023d6 <nm_spi_write_block+0x102>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  4023c0:	f240 12bb 	movw	r2, #443	; 0x1bb
  4023c4:	491e      	ldr	r1, [pc, #120]	; (402440 <nm_spi_write_block+0x16c>)
  4023c6:	4817      	ldr	r0, [pc, #92]	; (402424 <nm_spi_write_block+0x150>)
  4023c8:	4c17      	ldr	r4, [pc, #92]	; (402428 <nm_spi_write_block+0x154>)
  4023ca:	47a0      	blx	r4
  4023cc:	481f      	ldr	r0, [pc, #124]	; (40244c <nm_spi_write_block+0x178>)
  4023ce:	47a0      	blx	r4
  4023d0:	4817      	ldr	r0, [pc, #92]	; (402430 <nm_spi_write_block+0x15c>)
  4023d2:	47a0      	blx	r4
  4023d4:	e006      	b.n	4023e4 <nm_spi_write_block+0x110>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
  4023d6:	4434      	add	r4, r6
  4023d8:	b224      	sxth	r4, r4
		sz -= nbytes;
  4023da:	1bad      	subs	r5, r5, r6
  4023dc:	b2ad      	uxth	r5, r5
	} while (sz);
  4023de:	2d00      	cmp	r5, #0
  4023e0:	d1b1      	bne.n	402346 <nm_spi_write_block+0x72>
  4023e2:	e013      	b.n	40240c <nm_spi_write_block+0x138>
	/**
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  4023e4:	f240 2226 	movw	r2, #550	; 0x226
  4023e8:	490d      	ldr	r1, [pc, #52]	; (402420 <nm_spi_write_block+0x14c>)
  4023ea:	480e      	ldr	r0, [pc, #56]	; (402424 <nm_spi_write_block+0x150>)
  4023ec:	4c0e      	ldr	r4, [pc, #56]	; (402428 <nm_spi_write_block+0x154>)
  4023ee:	47a0      	blx	r4
  4023f0:	4817      	ldr	r0, [pc, #92]	; (402450 <nm_spi_write_block+0x17c>)
  4023f2:	47a0      	blx	r4
  4023f4:	480e      	ldr	r0, [pc, #56]	; (402430 <nm_spi_write_block+0x15c>)
  4023f6:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4023f8:	2400      	movs	r4, #0
  4023fa:	9400      	str	r4, [sp, #0]
  4023fc:	4623      	mov	r3, r4
  4023fe:	4622      	mov	r2, r4
  402400:	4621      	mov	r1, r4
  402402:	20cf      	movs	r0, #207	; 0xcf
  402404:	4d05      	ldr	r5, [pc, #20]	; (40241c <nm_spi_write_block+0x148>)
  402406:	47a8      	blx	r5
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  402408:	4620      	mov	r0, r4
  40240a:	e003      	b.n	402414 <nm_spi_write_block+0x140>
  40240c:	2000      	movs	r0, #0
  40240e:	e001      	b.n	402414 <nm_spi_write_block+0x140>
	else s8Ret = M2M_ERR_BUS_FAIL;
  402410:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  402414:	b005      	add	sp, #20
  402416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40241a:	bf00      	nop
  40241c:	00401d5d 	.word	0x00401d5d
  402420:	0040bd44 	.word	0x0040bd44
  402424:	0040af20 	.word	0x0040af20
  402428:	004040ad 	.word	0x004040ad
  40242c:	0040bbf8 	.word	0x0040bbf8
  402430:	0040af4c 	.word	0x0040af4c
  402434:	00401b71 	.word	0x00401b71
  402438:	0040bc28 	.word	0x0040bc28
  40243c:	00401d3d 	.word	0x00401d3d
  402440:	0040b85c 	.word	0x0040b85c
  402444:	0040bc60 	.word	0x0040bc60
  402448:	0040bc98 	.word	0x0040bc98
  40244c:	0040bccc 	.word	0x0040bccc
  402450:	0040bd04 	.word	0x0040bd04
  402454:	20400914 	.word	0x20400914

00402458 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  402458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40245c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  402460:	2c00      	cmp	r4, #0
  402462:	d047      	beq.n	4024f4 <Socket_ReadSocketData+0x9c>
  402464:	4681      	mov	r9, r0
  402466:	460e      	mov	r6, r1
  402468:	4692      	mov	sl, r2
  40246a:	4698      	mov	r8, r3
  40246c:	0103      	lsls	r3, r0, #4
  40246e:	4922      	ldr	r1, [pc, #136]	; (4024f8 <Socket_ReadSocketData+0xa0>)
  402470:	58cb      	ldr	r3, [r1, r3]
  402472:	2b00      	cmp	r3, #0
  402474:	d03e      	beq.n	4024f4 <Socket_ReadSocketData+0x9c>
  402476:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  40247a:	889b      	ldrh	r3, [r3, #4]
  40247c:	b29b      	uxth	r3, r3
  40247e:	2b00      	cmp	r3, #0
  402480:	d038      	beq.n	4024f4 <Socket_ReadSocketData+0x9c>
  402482:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  402486:	7a9b      	ldrb	r3, [r3, #10]
  402488:	b2db      	uxtb	r3, r3
  40248a:	2b01      	cmp	r3, #1
  40248c:	d132      	bne.n	4024f4 <Socket_ReadSocketData+0x9c>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  40248e:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  402490:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  402494:	f8df b078 	ldr.w	fp, [pc, #120]	; 402510 <Socket_ReadSocketData+0xb8>
		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  402498:	88bb      	ldrh	r3, [r7, #4]
			if(s16Diff > 0)
  40249a:	1ae3      	subs	r3, r4, r3
  40249c:	b21b      	sxth	r3, r3
  40249e:	2b00      	cmp	r3, #0
  4024a0:	dd03      	ble.n	4024aa <Socket_ReadSocketData+0x52>
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  4024a2:	88bd      	ldrh	r5, [r7, #4]
  4024a4:	b2ad      	uxth	r5, r5
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
  4024a6:	2300      	movs	r3, #0
  4024a8:	e001      	b.n	4024ae <Socket_ReadSocketData+0x56>
  4024aa:	4625      	mov	r5, r4
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
  4024ac:	2301      	movs	r3, #1
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4024ae:	6839      	ldr	r1, [r7, #0]
  4024b0:	462a      	mov	r2, r5
  4024b2:	4640      	mov	r0, r8
  4024b4:	47d8      	blx	fp
  4024b6:	b9a8      	cbnz	r0, 4024e4 <Socket_ReadSocketData+0x8c>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  4024b8:	683b      	ldr	r3, [r7, #0]
  4024ba:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  4024bc:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  4024be:	88f3      	ldrh	r3, [r6, #6]
  4024c0:	1b5b      	subs	r3, r3, r5
  4024c2:	80f3      	strh	r3, [r6, #6]

				if (gpfAppSocketCb)
  4024c4:	4b0d      	ldr	r3, [pc, #52]	; (4024fc <Socket_ReadSocketData+0xa4>)
  4024c6:	681b      	ldr	r3, [r3, #0]
  4024c8:	b12b      	cbz	r3, 4024d6 <Socket_ReadSocketData+0x7e>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  4024ca:	4b0c      	ldr	r3, [pc, #48]	; (4024fc <Socket_ReadSocketData+0xa4>)
  4024cc:	681b      	ldr	r3, [r3, #0]
  4024ce:	4632      	mov	r2, r6
  4024d0:	4651      	mov	r1, sl
  4024d2:	4648      	mov	r0, r9
  4024d4:	4798      	blx	r3

				u16ReadCount -= u16Read;
  4024d6:	1b64      	subs	r4, r4, r5
  4024d8:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  4024da:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  4024dc:	2c00      	cmp	r4, #0
  4024de:	d1db      	bne.n	402498 <Socket_ReadSocketData+0x40>
  4024e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u16ReadCount -= u16Read;
				u32Address += u16Read;
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  4024e4:	4806      	ldr	r0, [pc, #24]	; (402500 <Socket_ReadSocketData+0xa8>)
  4024e6:	4d07      	ldr	r5, [pc, #28]	; (402504 <Socket_ReadSocketData+0xac>)
  4024e8:	47a8      	blx	r5
  4024ea:	4621      	mov	r1, r4
  4024ec:	4806      	ldr	r0, [pc, #24]	; (402508 <Socket_ReadSocketData+0xb0>)
  4024ee:	47a8      	blx	r5
  4024f0:	4806      	ldr	r0, [pc, #24]	; (40250c <Socket_ReadSocketData+0xb4>)
  4024f2:	47a8      	blx	r5
  4024f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4024f8:	20400f54 	.word	0x20400f54
  4024fc:	20401004 	.word	0x20401004
  402500:	0040b1f4 	.word	0x0040b1f4
  402504:	004040ad 	.word	0x004040ad
  402508:	0040bd70 	.word	0x0040bd70
  40250c:	0040af4c 	.word	0x0040af4c
  402510:	00400bc5 	.word	0x00400bc5

00402514 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  402514:	b5f0      	push	{r4, r5, r6, r7, lr}
  402516:	b099      	sub	sp, #100	; 0x64
  402518:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  40251a:	2841      	cmp	r0, #65	; 0x41
  40251c:	d119      	bne.n	402552 <m2m_ip_cb+0x3e>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  40251e:	2300      	movs	r3, #0
  402520:	2204      	movs	r2, #4
  402522:	a907      	add	r1, sp, #28
  402524:	4620      	mov	r0, r4
  402526:	4ca4      	ldr	r4, [pc, #656]	; (4027b8 <m2m_ip_cb+0x2a4>)
  402528:	47a0      	blx	r4
  40252a:	2800      	cmp	r0, #0
  40252c:	f040 8141 	bne.w	4027b2 <m2m_ip_cb+0x29e>
		{
			strBind.status = strBindReply.s8Status;
  402530:	f89d 301d 	ldrb.w	r3, [sp, #29]
  402534:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  402538:	4ba0      	ldr	r3, [pc, #640]	; (4027bc <m2m_ip_cb+0x2a8>)
  40253a:	681b      	ldr	r3, [r3, #0]
  40253c:	2b00      	cmp	r3, #0
  40253e:	f000 8138 	beq.w	4027b2 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  402542:	4b9e      	ldr	r3, [pc, #632]	; (4027bc <m2m_ip_cb+0x2a8>)
  402544:	681b      	ldr	r3, [r3, #0]
  402546:	aa03      	add	r2, sp, #12
  402548:	2101      	movs	r1, #1
  40254a:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  40254e:	4798      	blx	r3
  402550:	e12f      	b.n	4027b2 <m2m_ip_cb+0x29e>
  402552:	460d      	mov	r5, r1
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  402554:	2842      	cmp	r0, #66	; 0x42
  402556:	d119      	bne.n	40258c <m2m_ip_cb+0x78>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  402558:	2300      	movs	r3, #0
  40255a:	2204      	movs	r2, #4
  40255c:	a907      	add	r1, sp, #28
  40255e:	4620      	mov	r0, r4
  402560:	4c95      	ldr	r4, [pc, #596]	; (4027b8 <m2m_ip_cb+0x2a4>)
  402562:	47a0      	blx	r4
  402564:	2800      	cmp	r0, #0
  402566:	f040 8124 	bne.w	4027b2 <m2m_ip_cb+0x29e>
		{
			strListen.status = strListenReply.s8Status;
  40256a:	f89d 301d 	ldrb.w	r3, [sp, #29]
  40256e:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  402572:	4b92      	ldr	r3, [pc, #584]	; (4027bc <m2m_ip_cb+0x2a8>)
  402574:	681b      	ldr	r3, [r3, #0]
  402576:	2b00      	cmp	r3, #0
  402578:	f000 811b 	beq.w	4027b2 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  40257c:	4b8f      	ldr	r3, [pc, #572]	; (4027bc <m2m_ip_cb+0x2a8>)
  40257e:	681b      	ldr	r3, [r3, #0]
  402580:	aa03      	add	r2, sp, #12
  402582:	2102      	movs	r1, #2
  402584:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  402588:	4798      	blx	r3
  40258a:	e112      	b.n	4027b2 <m2m_ip_cb+0x29e>
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  40258c:	2843      	cmp	r0, #67	; 0x43
  40258e:	d13f      	bne.n	402610 <m2m_ip_cb+0xfc>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  402590:	2300      	movs	r3, #0
  402592:	220c      	movs	r2, #12
  402594:	eb0d 0102 	add.w	r1, sp, r2
  402598:	4620      	mov	r0, r4
  40259a:	4c87      	ldr	r4, [pc, #540]	; (4027b8 <m2m_ip_cb+0x2a4>)
  40259c:	47a0      	blx	r4
  40259e:	2800      	cmp	r0, #0
  4025a0:	f040 8107 	bne.w	4027b2 <m2m_ip_cb+0x29e>
		{
			if(strAcceptReply.sConnectedSock >= 0)
  4025a4:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  4025a8:	2b00      	cmp	r3, #0
  4025aa:	db19      	blt.n	4025e0 <m2m_ip_cb+0xcc>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  4025ac:	4a84      	ldr	r2, [pc, #528]	; (4027c0 <m2m_ip_cb+0x2ac>)
  4025ae:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  4025b2:	2100      	movs	r1, #0
  4025b4:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  4025b6:	2101      	movs	r1, #1
  4025b8:	7291      	strb	r1, [r2, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  4025ba:	4982      	ldr	r1, [pc, #520]	; (4027c4 <m2m_ip_cb+0x2b0>)
  4025bc:	880a      	ldrh	r2, [r1, #0]
  4025be:	3201      	adds	r2, #1
  4025c0:	b292      	uxth	r2, r2
  4025c2:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  4025c4:	880a      	ldrh	r2, [r1, #0]
  4025c6:	b292      	uxth	r2, r2
  4025c8:	b91a      	cbnz	r2, 4025d2 <m2m_ip_cb+0xbe>
					++gu16SessionID;
  4025ca:	880a      	ldrh	r2, [r1, #0]
  4025cc:	3201      	adds	r2, #1
  4025ce:	b292      	uxth	r2, r2
  4025d0:	800a      	strh	r2, [r1, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  4025d2:	4a7c      	ldr	r2, [pc, #496]	; (4027c4 <m2m_ip_cb+0x2b0>)
  4025d4:	8811      	ldrh	r1, [r2, #0]
  4025d6:	b289      	uxth	r1, r1
  4025d8:	4a79      	ldr	r2, [pc, #484]	; (4027c0 <m2m_ip_cb+0x2ac>)
  4025da:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  4025de:	80d1      	strh	r1, [r2, #6]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
  4025e0:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  4025e4:	2302      	movs	r3, #2
  4025e6:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  4025ea:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  4025ee:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  4025f2:	9b04      	ldr	r3, [sp, #16]
  4025f4:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  4025f6:	4b71      	ldr	r3, [pc, #452]	; (4027bc <m2m_ip_cb+0x2a8>)
  4025f8:	681b      	ldr	r3, [r3, #0]
  4025fa:	2b00      	cmp	r3, #0
  4025fc:	f000 80d9 	beq.w	4027b2 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  402600:	4b6e      	ldr	r3, [pc, #440]	; (4027bc <m2m_ip_cb+0x2a8>)
  402602:	681b      	ldr	r3, [r3, #0]
  402604:	aa07      	add	r2, sp, #28
  402606:	2104      	movs	r1, #4
  402608:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  40260c:	4798      	blx	r3
  40260e:	e0d0      	b.n	4027b2 <m2m_ip_cb+0x29e>
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  402610:	2844      	cmp	r0, #68	; 0x44
  402612:	d001      	beq.n	402618 <m2m_ip_cb+0x104>
  402614:	284b      	cmp	r0, #75	; 0x4b
  402616:	d124      	bne.n	402662 <m2m_ip_cb+0x14e>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  402618:	2300      	movs	r3, #0
  40261a:	2204      	movs	r2, #4
  40261c:	a907      	add	r1, sp, #28
  40261e:	4620      	mov	r0, r4
  402620:	4c65      	ldr	r4, [pc, #404]	; (4027b8 <m2m_ip_cb+0x2a4>)
  402622:	47a0      	blx	r4
  402624:	2800      	cmp	r0, #0
  402626:	f040 80c4 	bne.w	4027b2 <m2m_ip_cb+0x29e>
		{
			strConnMsg.sock		= strConnectReply.sock;
  40262a:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  40262e:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  402632:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  402636:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  40263a:	b93b      	cbnz	r3, 40264c <m2m_ip_cb+0x138>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  40263c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  402640:	3b08      	subs	r3, #8
  402642:	b29b      	uxth	r3, r3
  402644:	4a5e      	ldr	r2, [pc, #376]	; (4027c0 <m2m_ip_cb+0x2ac>)
  402646:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  40264a:	8113      	strh	r3, [r2, #8]
			}
			if(gpfAppSocketCb)
  40264c:	4b5b      	ldr	r3, [pc, #364]	; (4027bc <m2m_ip_cb+0x2a8>)
  40264e:	681b      	ldr	r3, [r3, #0]
  402650:	2b00      	cmp	r3, #0
  402652:	f000 80ae 	beq.w	4027b2 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  402656:	4b59      	ldr	r3, [pc, #356]	; (4027bc <m2m_ip_cb+0x2a8>)
  402658:	681b      	ldr	r3, [r3, #0]
  40265a:	aa03      	add	r2, sp, #12
  40265c:	2105      	movs	r1, #5
  40265e:	4798      	blx	r3
  402660:	e0a7      	b.n	4027b2 <m2m_ip_cb+0x29e>
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  402662:	284a      	cmp	r0, #74	; 0x4a
  402664:	d113      	bne.n	40268e <m2m_ip_cb+0x17a>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  402666:	2300      	movs	r3, #0
  402668:	2244      	movs	r2, #68	; 0x44
  40266a:	a907      	add	r1, sp, #28
  40266c:	4620      	mov	r0, r4
  40266e:	4c52      	ldr	r4, [pc, #328]	; (4027b8 <m2m_ip_cb+0x2a4>)
  402670:	47a0      	blx	r4
  402672:	2800      	cmp	r0, #0
  402674:	f040 809d 	bne.w	4027b2 <m2m_ip_cb+0x29e>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
  402678:	4b53      	ldr	r3, [pc, #332]	; (4027c8 <m2m_ip_cb+0x2b4>)
  40267a:	681b      	ldr	r3, [r3, #0]
  40267c:	2b00      	cmp	r3, #0
  40267e:	f000 8098 	beq.w	4027b2 <m2m_ip_cb+0x29e>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  402682:	4b51      	ldr	r3, [pc, #324]	; (4027c8 <m2m_ip_cb+0x2b4>)
  402684:	681b      	ldr	r3, [r3, #0]
  402686:	9917      	ldr	r1, [sp, #92]	; 0x5c
  402688:	a807      	add	r0, sp, #28
  40268a:	4798      	blx	r3
  40268c:	e091      	b.n	4027b2 <m2m_ip_cb+0x29e>
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  40268e:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  402692:	b2db      	uxtb	r3, r3
  402694:	2b07      	cmp	r3, #7
  402696:	d84d      	bhi.n	402734 <m2m_ip_cb+0x220>
  402698:	2285      	movs	r2, #133	; 0x85
  40269a:	fa22 f303 	lsr.w	r3, r2, r3
  40269e:	f013 0f01 	tst.w	r3, #1
  4026a2:	d047      	beq.n	402734 <m2m_ip_cb+0x220>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  4026a4:	2848      	cmp	r0, #72	; 0x48
  4026a6:	bf14      	ite	ne
  4026a8:	2706      	movne	r7, #6
  4026aa:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  4026ac:	2300      	movs	r3, #0
  4026ae:	2210      	movs	r2, #16
  4026b0:	a903      	add	r1, sp, #12
  4026b2:	4620      	mov	r0, r4
  4026b4:	4e40      	ldr	r6, [pc, #256]	; (4027b8 <m2m_ip_cb+0x2a4>)
  4026b6:	47b0      	blx	r6
  4026b8:	2800      	cmp	r0, #0
  4026ba:	d17a      	bne.n	4027b2 <m2m_ip_cb+0x29e>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  4026bc:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  4026c0:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  4026c4:	4a3e      	ldr	r2, [pc, #248]	; (4027c0 <m2m_ip_cb+0x2ac>)
  4026c6:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4026ca:	2300      	movs	r3, #0
  4026cc:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  4026ce:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  4026d2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  4026d6:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  4026da:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  4026de:	9e04      	ldr	r6, [sp, #16]
  4026e0:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4026e2:	88d2      	ldrh	r2, [r2, #6]
  4026e4:	b292      	uxth	r2, r2
  4026e6:	4291      	cmp	r1, r2
  4026e8:	d11b      	bne.n	402722 <m2m_ip_cb+0x20e>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  4026ea:	f1be 0f00 	cmp.w	lr, #0
  4026ee:	dd0a      	ble.n	402706 <m2m_ip_cb+0x1f2>
  4026f0:	45ae      	cmp	lr, r5
  4026f2:	da08      	bge.n	402706 <m2m_ip_cb+0x1f2>
					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  4026f4:	fa1f f28e 	uxth.w	r2, lr
  4026f8:	9200      	str	r2, [sp, #0]
  4026fa:	4423      	add	r3, r4
  4026fc:	463a      	mov	r2, r7
  4026fe:	a907      	add	r1, sp, #28
  402700:	4c32      	ldr	r4, [pc, #200]	; (4027cc <m2m_ip_cb+0x2b8>)
  402702:	47a0      	blx	r4
  402704:	e055      	b.n	4027b2 <m2m_ip_cb+0x29e>
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  402706:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  40270a:	2300      	movs	r3, #0
  40270c:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  40270e:	4b2b      	ldr	r3, [pc, #172]	; (4027bc <m2m_ip_cb+0x2a8>)
  402710:	681b      	ldr	r3, [r3, #0]
  402712:	2b00      	cmp	r3, #0
  402714:	d04d      	beq.n	4027b2 <m2m_ip_cb+0x29e>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  402716:	4b29      	ldr	r3, [pc, #164]	; (4027bc <m2m_ip_cb+0x2a8>)
  402718:	681b      	ldr	r3, [r3, #0]
  40271a:	aa07      	add	r2, sp, #28
  40271c:	4639      	mov	r1, r7
  40271e:	4798      	blx	r3
  402720:	e047      	b.n	4027b2 <m2m_ip_cb+0x29e>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  402722:	2d10      	cmp	r5, #16
  402724:	d945      	bls.n	4027b2 <m2m_ip_cb+0x29e>
					hif_receive(0, NULL, 0, 1);
  402726:	2301      	movs	r3, #1
  402728:	2200      	movs	r2, #0
  40272a:	4611      	mov	r1, r2
  40272c:	4610      	mov	r0, r2
  40272e:	4c22      	ldr	r4, [pc, #136]	; (4027b8 <m2m_ip_cb+0x2a4>)
  402730:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
  402732:	e03e      	b.n	4027b2 <m2m_ip_cb+0x29e>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  402734:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  402738:	2b45      	cmp	r3, #69	; 0x45
  40273a:	d001      	beq.n	402740 <m2m_ip_cb+0x22c>
  40273c:	284c      	cmp	r0, #76	; 0x4c
  40273e:	d123      	bne.n	402788 <m2m_ip_cb+0x274>
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;

		if(u8OpCode == SOCKET_CMD_SENDTO)
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  402740:	2847      	cmp	r0, #71	; 0x47
  402742:	bf14      	ite	ne
  402744:	2507      	movne	r5, #7
  402746:	2508      	moveq	r5, #8

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  402748:	2300      	movs	r3, #0
  40274a:	2208      	movs	r2, #8
  40274c:	a907      	add	r1, sp, #28
  40274e:	4620      	mov	r0, r4
  402750:	4c19      	ldr	r4, [pc, #100]	; (4027b8 <m2m_ip_cb+0x2a4>)
  402752:	47a0      	blx	r4
  402754:	2800      	cmp	r0, #0
  402756:	d12c      	bne.n	4027b2 <m2m_ip_cb+0x29e>
		{
			uint16 u16SessionID = 0;
			
			sock = strReply.sock;
  402758:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  40275c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  402760:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  402764:	f8ad 300c 	strh.w	r3, [sp, #12]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  402768:	4b15      	ldr	r3, [pc, #84]	; (4027c0 <m2m_ip_cb+0x2ac>)
  40276a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40276e:	88db      	ldrh	r3, [r3, #6]
  402770:	b29b      	uxth	r3, r3
  402772:	429a      	cmp	r2, r3
  402774:	d11d      	bne.n	4027b2 <m2m_ip_cb+0x29e>
			{
				if(gpfAppSocketCb)
  402776:	4b11      	ldr	r3, [pc, #68]	; (4027bc <m2m_ip_cb+0x2a8>)
  402778:	681b      	ldr	r3, [r3, #0]
  40277a:	b1d3      	cbz	r3, 4027b2 <m2m_ip_cb+0x29e>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  40277c:	4b0f      	ldr	r3, [pc, #60]	; (4027bc <m2m_ip_cb+0x2a8>)
  40277e:	681b      	ldr	r3, [r3, #0]
  402780:	aa03      	add	r2, sp, #12
  402782:	4629      	mov	r1, r5
  402784:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
  402786:	e014      	b.n	4027b2 <m2m_ip_cb+0x29e>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
  402788:	2852      	cmp	r0, #82	; 0x52
  40278a:	d112      	bne.n	4027b2 <m2m_ip_cb+0x29e>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  40278c:	2301      	movs	r3, #1
  40278e:	2214      	movs	r2, #20
  402790:	a907      	add	r1, sp, #28
  402792:	4620      	mov	r0, r4
  402794:	4c08      	ldr	r4, [pc, #32]	; (4027b8 <m2m_ip_cb+0x2a4>)
  402796:	47a0      	blx	r4
  402798:	b958      	cbnz	r0, 4027b2 <m2m_ip_cb+0x29e>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  40279a:	4b0d      	ldr	r3, [pc, #52]	; (4027d0 <m2m_ip_cb+0x2bc>)
  40279c:	9a08      	ldr	r2, [sp, #32]
  40279e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  4027a0:	681b      	ldr	r3, [r3, #0]
  4027a2:	b133      	cbz	r3, 4027b2 <m2m_ip_cb+0x29e>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  4027a4:	4b0a      	ldr	r3, [pc, #40]	; (4027d0 <m2m_ip_cb+0x2bc>)
  4027a6:	681b      	ldr	r3, [r3, #0]
  4027a8:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  4027ac:	9909      	ldr	r1, [sp, #36]	; 0x24
  4027ae:	9807      	ldr	r0, [sp, #28]
  4027b0:	4798      	blx	r3
			}
		}
	}
}
  4027b2:	b019      	add	sp, #100	; 0x64
  4027b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4027b6:	bf00      	nop
  4027b8:	00400bc5 	.word	0x00400bc5
  4027bc:	20401004 	.word	0x20401004
  4027c0:	20400f54 	.word	0x20400f54
  4027c4:	20400916 	.word	0x20400916
  4027c8:	2040100c 	.word	0x2040100c
  4027cc:	00402459 	.word	0x00402459
  4027d0:	20401008 	.word	0x20401008

004027d4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  4027d4:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  4027d6:	4b0a      	ldr	r3, [pc, #40]	; (402800 <socketInit+0x2c>)
  4027d8:	781b      	ldrb	r3, [r3, #0]
  4027da:	f013 0fff 	tst.w	r3, #255	; 0xff
  4027de:	d10e      	bne.n	4027fe <socketInit+0x2a>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  4027e0:	22b0      	movs	r2, #176	; 0xb0
  4027e2:	2100      	movs	r1, #0
  4027e4:	4807      	ldr	r0, [pc, #28]	; (402804 <socketInit+0x30>)
  4027e6:	4b08      	ldr	r3, [pc, #32]	; (402808 <socketInit+0x34>)
  4027e8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  4027ea:	4908      	ldr	r1, [pc, #32]	; (40280c <socketInit+0x38>)
  4027ec:	2002      	movs	r0, #2
  4027ee:	4b08      	ldr	r3, [pc, #32]	; (402810 <socketInit+0x3c>)
  4027f0:	4798      	blx	r3
		gbSocketInit=1;
  4027f2:	2201      	movs	r2, #1
  4027f4:	4b02      	ldr	r3, [pc, #8]	; (402800 <socketInit+0x2c>)
  4027f6:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  4027f8:	2200      	movs	r2, #0
  4027fa:	4b06      	ldr	r3, [pc, #24]	; (402814 <socketInit+0x40>)
  4027fc:	801a      	strh	r2, [r3, #0]
  4027fe:	bd08      	pop	{r3, pc}
  402800:	20400915 	.word	0x20400915
  402804:	20400f54 	.word	0x20400f54
  402808:	00400569 	.word	0x00400569
  40280c:	00402515 	.word	0x00402515
  402810:	00400cd5 	.word	0x00400cd5
  402814:	20400916 	.word	0x20400916

00402818 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  402818:	4b02      	ldr	r3, [pc, #8]	; (402824 <registerSocketCallback+0xc>)
  40281a:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  40281c:	4b02      	ldr	r3, [pc, #8]	; (402828 <registerSocketCallback+0x10>)
  40281e:	6019      	str	r1, [r3, #0]
  402820:	4770      	bx	lr
  402822:	bf00      	nop
  402824:	20401004 	.word	0x20401004
  402828:	2040100c 	.word	0x2040100c

0040282c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  40282c:	b570      	push	{r4, r5, r6, lr}
  40282e:	b086      	sub	sp, #24
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  402830:	2802      	cmp	r0, #2
  402832:	d14b      	bne.n	4028cc <socket+0xa0>
	{
		if(u8Type == SOCK_STREAM)
  402834:	2901      	cmp	r1, #1
  402836:	d04c      	beq.n	4028d2 <socket+0xa6>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  402838:	2902      	cmp	r1, #2
  40283a:	d04d      	beq.n	4028d8 <socket+0xac>
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;
  40283c:	f04f 34ff 	mov.w	r4, #4294967295
  402840:	e058      	b.n	4028f4 <socket+0xc8>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  402842:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  402844:	eb00 1304 	add.w	r3, r0, r4, lsl #4
  402848:	7a9b      	ldrb	r3, [r3, #10]
  40284a:	f013 0fff 	tst.w	r3, #255	; 0xff
  40284e:	d136      	bne.n	4028be <socket+0x92>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  402850:	482a      	ldr	r0, [pc, #168]	; (4028fc <socket+0xd0>)
  402852:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  402856:	4616      	mov	r6, r2
			if(pstrSock->bIsUsed == 0)
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  402858:	2210      	movs	r2, #16
  40285a:	2100      	movs	r1, #0
  40285c:	4b28      	ldr	r3, [pc, #160]	; (402900 <socket+0xd4>)
  40285e:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  402860:	4b26      	ldr	r3, [pc, #152]	; (4028fc <socket+0xd0>)
  402862:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  402866:	2201      	movs	r2, #1
  402868:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  40286a:	4a26      	ldr	r2, [pc, #152]	; (402904 <socket+0xd8>)
  40286c:	8813      	ldrh	r3, [r2, #0]
  40286e:	3301      	adds	r3, #1
  402870:	b29b      	uxth	r3, r3
  402872:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  402874:	8813      	ldrh	r3, [r2, #0]
  402876:	b29b      	uxth	r3, r3
  402878:	b91b      	cbnz	r3, 402882 <socket+0x56>
					++gu16SessionID;
  40287a:	8813      	ldrh	r3, [r2, #0]
  40287c:	3301      	adds	r3, #1
  40287e:	b29b      	uxth	r3, r3
  402880:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  402882:	4b20      	ldr	r3, [pc, #128]	; (402904 <socket+0xd8>)
  402884:	881a      	ldrh	r2, [r3, #0]
  402886:	b292      	uxth	r2, r2
  402888:	4b1c      	ldr	r3, [pc, #112]	; (4028fc <socket+0xd0>)
  40288a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  40288e:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  402890:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  402892:	f016 0f01 	tst.w	r6, #1
  402896:	d02d      	beq.n	4028f4 <socket+0xc8>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  402898:	aa06      	add	r2, sp, #24
  40289a:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  40289e:	4b17      	ldr	r3, [pc, #92]	; (4028fc <socket+0xd0>)
  4028a0:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  4028a4:	2321      	movs	r3, #33	; 0x21
  4028a6:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  4028a8:	2300      	movs	r3, #0
  4028aa:	9302      	str	r3, [sp, #8]
  4028ac:	9301      	str	r3, [sp, #4]
  4028ae:	9300      	str	r3, [sp, #0]
  4028b0:	2304      	movs	r3, #4
  4028b2:	2150      	movs	r1, #80	; 0x50
  4028b4:	2002      	movs	r0, #2
  4028b6:	4d14      	ldr	r5, [pc, #80]	; (402908 <socket+0xdc>)
  4028b8:	47a8      	blx	r5
  4028ba:	e01b      	b.n	4028f4 <socket+0xc8>
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
			if(pstrSock->bIsUsed == 0)
  4028bc:	480f      	ldr	r0, [pc, #60]	; (4028fc <socket+0xd0>)
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
  4028be:	3401      	adds	r4, #1
  4028c0:	b2e4      	uxtb	r4, r4
  4028c2:	428c      	cmp	r4, r1
  4028c4:	d3bd      	bcc.n	402842 <socket+0x16>
Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
	SOCKET		sock = -1;
  4028c6:	f04f 34ff 	mov.w	r4, #4294967295
  4028ca:	e013      	b.n	4028f4 <socket+0xc8>
  4028cc:	f04f 34ff 	mov.w	r4, #4294967295
  4028d0:	e010      	b.n	4028f4 <socket+0xc8>
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
	{
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
  4028d2:	2107      	movs	r1, #7
			u8Count = 0;
  4028d4:	2400      	movs	r4, #0
  4028d6:	e001      	b.n	4028dc <socket+0xb0>
		}
		else if(u8Type == SOCK_DGRAM)
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  4028d8:	210b      	movs	r1, #11
			u8Count = TCP_SOCK_MAX;
  4028da:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  4028dc:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  4028de:	4b07      	ldr	r3, [pc, #28]	; (4028fc <socket+0xd0>)
  4028e0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  4028e4:	7a9b      	ldrb	r3, [r3, #10]
  4028e6:	f013 0fff 	tst.w	r3, #255	; 0xff
  4028ea:	d1e7      	bne.n	4028bc <socket+0x90>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  4028ec:	4803      	ldr	r0, [pc, #12]	; (4028fc <socket+0xd0>)
  4028ee:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  4028f2:	e7b0      	b.n	402856 <socket+0x2a>
				break;
			}
		}
	}
	return sock;
}
  4028f4:	4620      	mov	r0, r4
  4028f6:	b006      	add	sp, #24
  4028f8:	bd70      	pop	{r4, r5, r6, pc}
  4028fa:	bf00      	nop
  4028fc:	20400f54 	.word	0x20400f54
  402900:	00400569 	.word	0x00400569
  402904:	20400916 	.word	0x20400916
  402908:	004006cd 	.word	0x004006cd

0040290c <connect>:
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  40290c:	2800      	cmp	r0, #0
  40290e:	db38      	blt.n	402982 <connect+0x76>
  402910:	2900      	cmp	r1, #0
  402912:	d036      	beq.n	402982 <connect+0x76>
  402914:	4b1f      	ldr	r3, [pc, #124]	; (402994 <connect+0x88>)
  402916:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40291a:	7a9b      	ldrb	r3, [r3, #10]
  40291c:	b2db      	uxtb	r3, r3
  40291e:	2a00      	cmp	r2, #0
  402920:	d032      	beq.n	402988 <connect+0x7c>
  402922:	2b01      	cmp	r3, #1
  402924:	d130      	bne.n	402988 <connect+0x7c>

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  402926:	b530      	push	{r4, r5, lr}
  402928:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  40292a:	4b1a      	ldr	r3, [pc, #104]	; (402994 <connect+0x88>)
  40292c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402930:	7adb      	ldrb	r3, [r3, #11]
  402932:	f013 0f01 	tst.w	r3, #1
  402936:	d007      	beq.n	402948 <connect+0x3c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  402938:	4b16      	ldr	r3, [pc, #88]	; (402994 <connect+0x88>)
  40293a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40293e:	7adb      	ldrb	r3, [r3, #11]
  402940:	f88d 301d 	strb.w	r3, [sp, #29]
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  402944:	254b      	movs	r5, #75	; 0x4b
  402946:	e000      	b.n	40294a <connect+0x3e>
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  402948:	2544      	movs	r5, #68	; 0x44
  40294a:	4604      	mov	r4, r0
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
		}
		strConnect.sock = sock;
  40294c:	f88d 001c 	strb.w	r0, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  402950:	2208      	movs	r2, #8
  402952:	a805      	add	r0, sp, #20
  402954:	4b10      	ldr	r3, [pc, #64]	; (402998 <connect+0x8c>)
  402956:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  402958:	480e      	ldr	r0, [pc, #56]	; (402994 <connect+0x88>)
  40295a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  40295e:	88c3      	ldrh	r3, [r0, #6]
  402960:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  402964:	2300      	movs	r3, #0
  402966:	9302      	str	r3, [sp, #8]
  402968:	9301      	str	r3, [sp, #4]
  40296a:	9300      	str	r3, [sp, #0]
  40296c:	230c      	movs	r3, #12
  40296e:	aa05      	add	r2, sp, #20
  402970:	4629      	mov	r1, r5
  402972:	2002      	movs	r0, #2
  402974:	4c09      	ldr	r4, [pc, #36]	; (40299c <connect+0x90>)
  402976:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  402978:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  40297a:	bf18      	it	ne
  40297c:	f06f 0008 	mvnne.w	r0, #8
  402980:	e005      	b.n	40298e <connect+0x82>
Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  402982:	f06f 0005 	mvn.w	r0, #5
  402986:	4770      	bx	lr
  402988:	f06f 0005 	mvn.w	r0, #5
  40298c:	4770      	bx	lr
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
  40298e:	b009      	add	sp, #36	; 0x24
  402990:	bd30      	pop	{r4, r5, pc}
  402992:	bf00      	nop
  402994:	20400f54 	.word	0x20400f54
  402998:	00400555 	.word	0x00400555
  40299c:	004006cd 	.word	0x004006cd

004029a0 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  4029a0:	b530      	push	{r4, r5, lr}
  4029a2:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  4029a4:	460c      	mov	r4, r1
  4029a6:	3100      	adds	r1, #0
  4029a8:	bf18      	it	ne
  4029aa:	2101      	movne	r1, #1
  4029ac:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  4029b0:	bf88      	it	hi
  4029b2:	2100      	movhi	r1, #0
  4029b4:	2900      	cmp	r1, #0
  4029b6:	d036      	beq.n	402a26 <send+0x86>
  4029b8:	2800      	cmp	r0, #0
  4029ba:	db34      	blt.n	402a26 <send+0x86>
  4029bc:	4b1d      	ldr	r3, [pc, #116]	; (402a34 <send+0x94>)
  4029be:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4029c2:	7a9b      	ldrb	r3, [r3, #10]
  4029c4:	b2db      	uxtb	r3, r3
  4029c6:	2b01      	cmp	r3, #1
  4029c8:	d130      	bne.n	402a2c <send+0x8c>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  4029ca:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  4029ce:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  4029d2:	4b18      	ldr	r3, [pc, #96]	; (402a34 <send+0x94>)
  4029d4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4029d8:	88db      	ldrh	r3, [r3, #6]
  4029da:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  4029de:	2807      	cmp	r0, #7
  4029e0:	bfb4      	ite	lt
  4029e2:	2550      	movlt	r5, #80	; 0x50
  4029e4:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  4029e6:	4b13      	ldr	r3, [pc, #76]	; (402a34 <send+0x94>)
  4029e8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4029ec:	7adb      	ldrb	r3, [r3, #11]
  4029ee:	f013 0f01 	tst.w	r3, #1
  4029f2:	d006      	beq.n	402a02 <send+0x62>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  4029f4:	4b0f      	ldr	r3, [pc, #60]	; (402a34 <send+0x94>)
  4029f6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4029fa:	8905      	ldrh	r5, [r0, #8]
  4029fc:	b2ad      	uxth	r5, r5
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  4029fe:	214c      	movs	r1, #76	; 0x4c
  402a00:	e000      	b.n	402a04 <send+0x64>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
  402a02:	2145      	movs	r1, #69	; 0x45
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  402a04:	9502      	str	r5, [sp, #8]
  402a06:	9201      	str	r2, [sp, #4]
  402a08:	9400      	str	r4, [sp, #0]
  402a0a:	2310      	movs	r3, #16
  402a0c:	eb0d 0203 	add.w	r2, sp, r3
  402a10:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  402a14:	2002      	movs	r0, #2
  402a16:	4c08      	ldr	r4, [pc, #32]	; (402a38 <send+0x98>)
  402a18:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  402a1a:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  402a1c:	bf0c      	ite	eq
  402a1e:	2000      	moveq	r0, #0
  402a20:	f06f 000d 	mvnne.w	r0, #13
  402a24:	e004      	b.n	402a30 <send+0x90>
Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  402a26:	f06f 0005 	mvn.w	r0, #5
  402a2a:	e001      	b.n	402a30 <send+0x90>
  402a2c:	f06f 0005 	mvn.w	r0, #5
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
		}
	}
	return s16Ret;
}
  402a30:	b009      	add	sp, #36	; 0x24
  402a32:	bd30      	pop	{r4, r5, pc}
  402a34:	20400f54 	.word	0x20400f54
  402a38:	004006cd 	.word	0x004006cd

00402a3c <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  402a3c:	2900      	cmp	r1, #0
  402a3e:	bf18      	it	ne
  402a40:	2a00      	cmpne	r2, #0
  402a42:	d045      	beq.n	402ad0 <recv+0x94>

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
  402a44:	b570      	push	{r4, r5, r6, lr}
  402a46:	b086      	sub	sp, #24
  402a48:	460e      	mov	r6, r1
  402a4a:	4615      	mov	r5, r2
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  402a4c:	2800      	cmp	r0, #0
  402a4e:	db36      	blt.n	402abe <recv+0x82>
  402a50:	4a21      	ldr	r2, [pc, #132]	; (402ad8 <recv+0x9c>)
  402a52:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  402a56:	7a92      	ldrb	r2, [r2, #10]
  402a58:	b2d2      	uxtb	r2, r2
  402a5a:	2a01      	cmp	r2, #1
  402a5c:	d132      	bne.n	402ac4 <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  402a5e:	4c1e      	ldr	r4, [pc, #120]	; (402ad8 <recv+0x9c>)
  402a60:	0101      	lsls	r1, r0, #4
  402a62:	1862      	adds	r2, r4, r1
  402a64:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  402a66:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  402a68:	7b12      	ldrb	r2, [r2, #12]
  402a6a:	f012 0fff 	tst.w	r2, #255	; 0xff
  402a6e:	d12c      	bne.n	402aca <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  402a70:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  402a74:	2101      	movs	r1, #1
  402a76:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  402a78:	7ad2      	ldrb	r2, [r2, #11]
  402a7a:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  402a7c:	2a00      	cmp	r2, #0
  402a7e:	bf0c      	ite	eq
  402a80:	2146      	moveq	r1, #70	; 0x46
  402a82:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  402a84:	b91b      	cbnz	r3, 402a8e <recv+0x52>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  402a86:	f04f 33ff 	mov.w	r3, #4294967295
  402a8a:	9304      	str	r3, [sp, #16]
  402a8c:	e000      	b.n	402a90 <recv+0x54>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  402a8e:	9304      	str	r3, [sp, #16]
			strRecv.sock = sock;
  402a90:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  402a94:	4b10      	ldr	r3, [pc, #64]	; (402ad8 <recv+0x9c>)
  402a96:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  402a9a:	88c3      	ldrh	r3, [r0, #6]
  402a9c:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  402aa0:	2300      	movs	r3, #0
  402aa2:	9302      	str	r3, [sp, #8]
  402aa4:	9301      	str	r3, [sp, #4]
  402aa6:	9300      	str	r3, [sp, #0]
  402aa8:	2308      	movs	r3, #8
  402aaa:	aa04      	add	r2, sp, #16
  402aac:	2002      	movs	r0, #2
  402aae:	4c0b      	ldr	r4, [pc, #44]	; (402adc <recv+0xa0>)
  402ab0:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  402ab2:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  402ab4:	bf0c      	ite	eq
  402ab6:	2000      	moveq	r0, #0
  402ab8:	f06f 000d 	mvnne.w	r0, #13
  402abc:	e006      	b.n	402acc <recv+0x90>
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  402abe:	f06f 0005 	mvn.w	r0, #5
  402ac2:	e003      	b.n	402acc <recv+0x90>
  402ac4:	f06f 0005 	mvn.w	r0, #5
  402ac8:	e000      	b.n	402acc <recv+0x90>
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		s16Ret = SOCK_ERR_NO_ERROR;
  402aca:	2000      	movs	r0, #0
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  402acc:	b006      	add	sp, #24
  402ace:	bd70      	pop	{r4, r5, r6, pc}
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  402ad0:	f06f 0005 	mvn.w	r0, #5
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  402ad4:	4770      	bx	lr
  402ad6:	bf00      	nop
  402ad8:	20400f54 	.word	0x20400f54
  402adc:	004006cd 	.word	0x004006cd

00402ae0 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  402ae0:	b530      	push	{r4, r5, lr}
  402ae2:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  402ae4:	2800      	cmp	r0, #0
  402ae6:	db2e      	blt.n	402b46 <close+0x66>
  402ae8:	4b1b      	ldr	r3, [pc, #108]	; (402b58 <close+0x78>)
  402aea:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402aee:	7a9b      	ldrb	r3, [r3, #10]
  402af0:	b2db      	uxtb	r3, r3
  402af2:	2b01      	cmp	r3, #1
  402af4:	d12a      	bne.n	402b4c <close+0x6c>
  402af6:	4604      	mov	r4, r0
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  402af8:	f88d 0014 	strb.w	r0, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  402afc:	4b16      	ldr	r3, [pc, #88]	; (402b58 <close+0x78>)
  402afe:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402b02:	88da      	ldrh	r2, [r3, #6]
  402b04:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  402b08:	2200      	movs	r2, #0
  402b0a:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  402b0c:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  402b0e:	7adb      	ldrb	r3, [r3, #11]
  402b10:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  402b14:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  402b16:	9202      	str	r2, [sp, #8]
  402b18:	9201      	str	r2, [sp, #4]
  402b1a:	9200      	str	r2, [sp, #0]
  402b1c:	f04f 0304 	mov.w	r3, #4
  402b20:	aa05      	add	r2, sp, #20
  402b22:	bf0c      	ite	eq
  402b24:	2149      	moveq	r1, #73	; 0x49
  402b26:	214e      	movne	r1, #78	; 0x4e
  402b28:	2002      	movs	r0, #2
  402b2a:	4d0c      	ldr	r5, [pc, #48]	; (402b5c <close+0x7c>)
  402b2c:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  402b2e:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  402b30:	bf18      	it	ne
  402b32:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  402b36:	2210      	movs	r2, #16
  402b38:	2100      	movs	r1, #0
  402b3a:	4807      	ldr	r0, [pc, #28]	; (402b58 <close+0x78>)
  402b3c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  402b40:	4b07      	ldr	r3, [pc, #28]	; (402b60 <close+0x80>)
  402b42:	4798      	blx	r3
  402b44:	e004      	b.n	402b50 <close+0x70>
Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  402b46:	f06f 0505 	mvn.w	r5, #5
  402b4a:	e001      	b.n	402b50 <close+0x70>
  402b4c:	f06f 0505 	mvn.w	r5, #5
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
	}
	return s8Ret;
}
  402b50:	4628      	mov	r0, r5
  402b52:	b007      	add	sp, #28
  402b54:	bd30      	pop	{r4, r5, pc}
  402b56:	bf00      	nop
  402b58:	20400f54 	.word	0x20400f54
  402b5c:	004006cd 	.word	0x004006cd
  402b60:	00400569 	.word	0x00400569

00402b64 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  402b64:	b570      	push	{r4, r5, r6, lr}
  402b66:	b082      	sub	sp, #8
  402b68:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  402b6a:	4b2b      	ldr	r3, [pc, #172]	; (402c18 <spi_flash_enable+0xb4>)
  402b6c:	4798      	blx	r3
  402b6e:	f3c0 000b 	ubfx	r0, r0, #0, #12
  402b72:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  402b76:	d34a      	bcc.n	402c0e <spi_flash_enable+0xaa>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  402b78:	a901      	add	r1, sp, #4
  402b7a:	f241 4010 	movw	r0, #5136	; 0x1410
  402b7e:	4b27      	ldr	r3, [pc, #156]	; (402c1c <spi_flash_enable+0xb8>)
  402b80:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  402b82:	4604      	mov	r4, r0
  402b84:	2800      	cmp	r0, #0
  402b86:	d143      	bne.n	402c10 <spi_flash_enable+0xac>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x1111ul) << 12);
  402b88:	4b25      	ldr	r3, [pc, #148]	; (402c20 <spi_flash_enable+0xbc>)
  402b8a:	9a01      	ldr	r2, [sp, #4]
  402b8c:	4013      	ands	r3, r2
  402b8e:	4925      	ldr	r1, [pc, #148]	; (402c24 <spi_flash_enable+0xc0>)
  402b90:	4319      	orrs	r1, r3
  402b92:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  402b94:	f241 4010 	movw	r0, #5136	; 0x1410
  402b98:	4b23      	ldr	r3, [pc, #140]	; (402c28 <spi_flash_enable+0xc4>)
  402b9a:	4798      	blx	r3
		if(enable) {
  402b9c:	b1b5      	cbz	r5, 402bcc <spi_flash_enable+0x68>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xab;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  402b9e:	2100      	movs	r1, #0
  402ba0:	4822      	ldr	r0, [pc, #136]	; (402c2c <spi_flash_enable+0xc8>)
  402ba2:	4d21      	ldr	r5, [pc, #132]	; (402c28 <spi_flash_enable+0xc4>)
  402ba4:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  402ba6:	21ab      	movs	r1, #171	; 0xab
  402ba8:	4821      	ldr	r0, [pc, #132]	; (402c30 <spi_flash_enable+0xcc>)
  402baa:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  402bac:	2101      	movs	r1, #1
  402bae:	4821      	ldr	r0, [pc, #132]	; (402c34 <spi_flash_enable+0xd0>)
  402bb0:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  402bb2:	2100      	movs	r1, #0
  402bb4:	4820      	ldr	r0, [pc, #128]	; (402c38 <spi_flash_enable+0xd4>)
  402bb6:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  402bb8:	2181      	movs	r1, #129	; 0x81
  402bba:	4820      	ldr	r0, [pc, #128]	; (402c3c <spi_flash_enable+0xd8>)
  402bbc:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  402bbe:	4e20      	ldr	r6, [pc, #128]	; (402c40 <spi_flash_enable+0xdc>)
  402bc0:	4d20      	ldr	r5, [pc, #128]	; (402c44 <spi_flash_enable+0xe0>)
  402bc2:	4630      	mov	r0, r6
  402bc4:	47a8      	blx	r5
  402bc6:	2801      	cmp	r0, #1
  402bc8:	d1fb      	bne.n	402bc2 <spi_flash_enable+0x5e>
  402bca:	e015      	b.n	402bf8 <spi_flash_enable+0x94>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xb9;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  402bcc:	2100      	movs	r1, #0
  402bce:	4817      	ldr	r0, [pc, #92]	; (402c2c <spi_flash_enable+0xc8>)
  402bd0:	4d15      	ldr	r5, [pc, #84]	; (402c28 <spi_flash_enable+0xc4>)
  402bd2:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  402bd4:	21b9      	movs	r1, #185	; 0xb9
  402bd6:	4816      	ldr	r0, [pc, #88]	; (402c30 <spi_flash_enable+0xcc>)
  402bd8:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  402bda:	2101      	movs	r1, #1
  402bdc:	4815      	ldr	r0, [pc, #84]	; (402c34 <spi_flash_enable+0xd0>)
  402bde:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  402be0:	2100      	movs	r1, #0
  402be2:	4815      	ldr	r0, [pc, #84]	; (402c38 <spi_flash_enable+0xd4>)
  402be4:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  402be6:	2181      	movs	r1, #129	; 0x81
  402be8:	4814      	ldr	r0, [pc, #80]	; (402c3c <spi_flash_enable+0xd8>)
  402bea:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  402bec:	4e14      	ldr	r6, [pc, #80]	; (402c40 <spi_flash_enable+0xdc>)
  402bee:	4d15      	ldr	r5, [pc, #84]	; (402c44 <spi_flash_enable+0xe0>)
  402bf0:	4630      	mov	r0, r6
  402bf2:	47a8      	blx	r5
  402bf4:	2801      	cmp	r0, #1
  402bf6:	d1fb      	bne.n	402bf0 <spi_flash_enable+0x8c>
		} else {
			spi_flash_enter_low_power_mode();
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
  402bf8:	4909      	ldr	r1, [pc, #36]	; (402c20 <spi_flash_enable+0xbc>)
  402bfa:	9b01      	ldr	r3, [sp, #4]
  402bfc:	4019      	ands	r1, r3
  402bfe:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  402c02:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  402c04:	f241 4010 	movw	r0, #5136	; 0x1410
  402c08:	4b07      	ldr	r3, [pc, #28]	; (402c28 <spi_flash_enable+0xc4>)
  402c0a:	4798      	blx	r3
  402c0c:	e000      	b.n	402c10 <spi_flash_enable+0xac>
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
	sint8 s8Ret = M2M_SUCCESS;
  402c0e:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  402c10:	4620      	mov	r0, r4
  402c12:	b002      	add	sp, #8
  402c14:	bd70      	pop	{r4, r5, r6, pc}
  402c16:	bf00      	nop
  402c18:	00401579 	.word	0x00401579
  402c1c:	00401871 	.word	0x00401871
  402c20:	f8888fff 	.word	0xf8888fff
  402c24:	01111000 	.word	0x01111000
  402c28:	0040187d 	.word	0x0040187d
  402c2c:	00010208 	.word	0x00010208
  402c30:	0001020c 	.word	0x0001020c
  402c34:	00010214 	.word	0x00010214
  402c38:	0001021c 	.word	0x0001021c
  402c3c:	00010204 	.word	0x00010204
  402c40:	00010218 	.word	0x00010218
  402c44:	00401865 	.word	0x00401865

00402c48 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402c48:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402c4a:	4810      	ldr	r0, [pc, #64]	; (402c8c <sysclk_init+0x44>)
  402c4c:	4b10      	ldr	r3, [pc, #64]	; (402c90 <sysclk_init+0x48>)
  402c4e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402c50:	213e      	movs	r1, #62	; 0x3e
  402c52:	2000      	movs	r0, #0
  402c54:	4b0f      	ldr	r3, [pc, #60]	; (402c94 <sysclk_init+0x4c>)
  402c56:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402c58:	4c0f      	ldr	r4, [pc, #60]	; (402c98 <sysclk_init+0x50>)
  402c5a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402c5c:	2800      	cmp	r0, #0
  402c5e:	d0fc      	beq.n	402c5a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402c60:	4b0e      	ldr	r3, [pc, #56]	; (402c9c <sysclk_init+0x54>)
  402c62:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402c64:	4a0e      	ldr	r2, [pc, #56]	; (402ca0 <sysclk_init+0x58>)
  402c66:	4b0f      	ldr	r3, [pc, #60]	; (402ca4 <sysclk_init+0x5c>)
  402c68:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  402c6a:	4c0f      	ldr	r4, [pc, #60]	; (402ca8 <sysclk_init+0x60>)
  402c6c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402c6e:	2800      	cmp	r0, #0
  402c70:	d0fc      	beq.n	402c6c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  402c72:	2002      	movs	r0, #2
  402c74:	4b0d      	ldr	r3, [pc, #52]	; (402cac <sysclk_init+0x64>)
  402c76:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402c78:	2000      	movs	r0, #0
  402c7a:	4b0d      	ldr	r3, [pc, #52]	; (402cb0 <sysclk_init+0x68>)
  402c7c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402c7e:	4b0d      	ldr	r3, [pc, #52]	; (402cb4 <sysclk_init+0x6c>)
  402c80:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402c82:	4802      	ldr	r0, [pc, #8]	; (402c8c <sysclk_init+0x44>)
  402c84:	4b02      	ldr	r3, [pc, #8]	; (402c90 <sysclk_init+0x48>)
  402c86:	4798      	blx	r3
  402c88:	bd10      	pop	{r4, pc}
  402c8a:	bf00      	nop
  402c8c:	11e1a300 	.word	0x11e1a300
  402c90:	00403905 	.word	0x00403905
  402c94:	00403389 	.word	0x00403389
  402c98:	004033dd 	.word	0x004033dd
  402c9c:	004033ed 	.word	0x004033ed
  402ca0:	20183f01 	.word	0x20183f01
  402ca4:	400e0600 	.word	0x400e0600
  402ca8:	004033fd 	.word	0x004033fd
  402cac:	004032e5 	.word	0x004032e5
  402cb0:	00403321 	.word	0x00403321
  402cb4:	004037f5 	.word	0x004037f5

00402cb8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  402cb8:	b990      	cbnz	r0, 402ce0 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  402cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402cbe:	460c      	mov	r4, r1
  402cc0:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  402cc2:	2a00      	cmp	r2, #0
  402cc4:	dd0f      	ble.n	402ce6 <_read+0x2e>
  402cc6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  402cc8:	4e08      	ldr	r6, [pc, #32]	; (402cec <_read+0x34>)
  402cca:	4d09      	ldr	r5, [pc, #36]	; (402cf0 <_read+0x38>)
  402ccc:	6830      	ldr	r0, [r6, #0]
  402cce:	4621      	mov	r1, r4
  402cd0:	682b      	ldr	r3, [r5, #0]
  402cd2:	4798      	blx	r3
		ptr++;
  402cd4:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  402cd6:	42a7      	cmp	r7, r4
  402cd8:	d1f8      	bne.n	402ccc <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  402cda:	4640      	mov	r0, r8
  402cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  402ce0:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  402ce4:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  402ce6:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  402ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402cec:	20401018 	.word	0x20401018
  402cf0:	20401010 	.word	0x20401010

00402cf4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  402cf4:	3801      	subs	r0, #1
  402cf6:	2802      	cmp	r0, #2
  402cf8:	d815      	bhi.n	402d26 <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  402cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402cfe:	460e      	mov	r6, r1
  402d00:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  402d02:	b19a      	cbz	r2, 402d2c <_write+0x38>
  402d04:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  402d06:	f8df 8038 	ldr.w	r8, [pc, #56]	; 402d40 <_write+0x4c>
  402d0a:	4f0c      	ldr	r7, [pc, #48]	; (402d3c <_write+0x48>)
  402d0c:	f8d8 0000 	ldr.w	r0, [r8]
  402d10:	f815 1b01 	ldrb.w	r1, [r5], #1
  402d14:	683b      	ldr	r3, [r7, #0]
  402d16:	4798      	blx	r3
  402d18:	2800      	cmp	r0, #0
  402d1a:	db0a      	blt.n	402d32 <_write+0x3e>
  402d1c:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  402d1e:	3c01      	subs	r4, #1
  402d20:	d1f4      	bne.n	402d0c <_write+0x18>
  402d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  402d26:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  402d2a:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  402d2c:	2000      	movs	r0, #0
  402d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  402d32:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  402d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402d3a:	bf00      	nop
  402d3c:	20401014 	.word	0x20401014
  402d40:	20401018 	.word	0x20401018

00402d44 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  402d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402d46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402d4a:	4b57      	ldr	r3, [pc, #348]	; (402ea8 <board_init+0x164>)
  402d4c:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402d4e:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  402d52:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  402d56:	4b55      	ldr	r3, [pc, #340]	; (402eac <board_init+0x168>)
  402d58:	2200      	movs	r2, #0
  402d5a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  402d5e:	695a      	ldr	r2, [r3, #20]
  402d60:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  402d64:	615a      	str	r2, [r3, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402d66:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  402d6a:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  402d6e:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  402d72:	f3c6 354e 	ubfx	r5, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  402d76:	f006 0707 	and.w	r7, r6, #7
  402d7a:	3704      	adds	r7, #4
    ways    = CCSIDR_WAYS(ccsidr);
  402d7c:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  402d80:	fab6 f086 	clz	r0, r6
    wshift  = __CLZ(ways) & 0x1f;
  402d84:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402d88:	f3bf 8f4f 	dsb	sy

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  402d8c:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  402d8e:	4633      	mov	r3, r6
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  402d90:	fa05 f107 	lsl.w	r1, r5, r7
  402d94:	fa03 f200 	lsl.w	r2, r3, r0
  402d98:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  402d9a:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
            } while(tmpways--);
  402d9e:	3b01      	subs	r3, #1
  402da0:	f1b3 3fff 	cmp.w	r3, #4294967295
  402da4:	d1f6      	bne.n	402d94 <board_init+0x50>
        } while(sets--);
  402da6:	3d01      	subs	r5, #1
  402da8:	f1b5 3fff 	cmp.w	r5, #4294967295
  402dac:	d1ef      	bne.n	402d8e <board_init+0x4a>
  402dae:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  402db2:	4b3e      	ldr	r3, [pc, #248]	; (402eac <board_init+0x168>)
  402db4:	695a      	ldr	r2, [r3, #20]
  402db6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  402dba:	615a      	str	r2, [r3, #20]
  402dbc:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  402dc0:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  402dc4:	4a3a      	ldr	r2, [pc, #232]	; (402eb0 <board_init+0x16c>)
  402dc6:	493b      	ldr	r1, [pc, #236]	; (402eb4 <board_init+0x170>)
  402dc8:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  402dca:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  402dce:	6051      	str	r1, [r2, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402dd0:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  402dd4:	f3bf 8f6f 	isb	sy
static inline void tcm_disable(void) 
{

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  402dd8:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  402ddc:	f022 0201 	bic.w	r2, r2, #1
  402de0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  402de4:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  402de8:	f022 0201 	bic.w	r2, r2, #1
  402dec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402df0:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  402df4:	f3bf 8f6f 	isb	sy
  402df8:	200a      	movs	r0, #10
  402dfa:	4c2f      	ldr	r4, [pc, #188]	; (402eb8 <board_init+0x174>)
  402dfc:	47a0      	blx	r4
  402dfe:	200b      	movs	r0, #11
  402e00:	47a0      	blx	r4
  402e02:	200c      	movs	r0, #12
  402e04:	47a0      	blx	r4
  402e06:	2010      	movs	r0, #16
  402e08:	47a0      	blx	r4
  402e0a:	2011      	movs	r0, #17
  402e0c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402e0e:	4b2b      	ldr	r3, [pc, #172]	; (402ebc <board_init+0x178>)
  402e10:	f44f 7280 	mov.w	r2, #256	; 0x100
  402e14:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402e16:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402e1a:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402e1c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  402e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402e24:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402e26:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  402e2a:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  402e2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  402e30:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  402e32:	621a      	str	r2, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  402e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402e38:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402e3a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  402e3e:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  402e40:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402e42:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  402e46:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  402e48:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402e4c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  402e50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  402e54:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402e58:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  402e5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  402e5e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  402e60:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402e66:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402e68:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  402e6c:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  402e6e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402e70:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  402e74:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402e76:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  402e78:	4a11      	ldr	r2, [pc, #68]	; (402ec0 <board_init+0x17c>)
  402e7a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  402e7e:	f043 0310 	orr.w	r3, r3, #16
  402e82:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  402e86:	4b0f      	ldr	r3, [pc, #60]	; (402ec4 <board_init+0x180>)
  402e88:	2210      	movs	r2, #16
  402e8a:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  402e8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  402e90:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  402e92:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  402e98:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402e9a:	4311      	orrs	r1, r2
  402e9c:	6719      	str	r1, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  402e9e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402ea0:	4311      	orrs	r1, r2
  402ea2:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402ea4:	605a      	str	r2, [r3, #4]
  402ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402ea8:	400e1850 	.word	0x400e1850
  402eac:	e000ed00 	.word	0xe000ed00
  402eb0:	400e0c00 	.word	0x400e0c00
  402eb4:	5a00080c 	.word	0x5a00080c
  402eb8:	0040340d 	.word	0x0040340d
  402ebc:	400e1200 	.word	0x400e1200
  402ec0:	40088000 	.word	0x40088000
  402ec4:	400e1000 	.word	0x400e1000

00402ec8 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402ec8:	b10a      	cbz	r2, 402ece <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  402eca:	6641      	str	r1, [r0, #100]	; 0x64
  402ecc:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402ece:	6601      	str	r1, [r0, #96]	; 0x60
  402ed0:	4770      	bx	lr
  402ed2:	bf00      	nop

00402ed4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402ed4:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402ed6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402eda:	d02f      	beq.n	402f3c <pio_set_peripheral+0x68>
  402edc:	d807      	bhi.n	402eee <pio_set_peripheral+0x1a>
  402ede:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402ee2:	d014      	beq.n	402f0e <pio_set_peripheral+0x3a>
  402ee4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402ee8:	d01e      	beq.n	402f28 <pio_set_peripheral+0x54>
  402eea:	b939      	cbnz	r1, 402efc <pio_set_peripheral+0x28>
  402eec:	4770      	bx	lr
  402eee:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402ef2:	d037      	beq.n	402f64 <pio_set_peripheral+0x90>
  402ef4:	d804      	bhi.n	402f00 <pio_set_peripheral+0x2c>
  402ef6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402efa:	d029      	beq.n	402f50 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402efc:	6042      	str	r2, [r0, #4]
  402efe:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402f00:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402f04:	d02e      	beq.n	402f64 <pio_set_peripheral+0x90>
  402f06:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402f0a:	d02b      	beq.n	402f64 <pio_set_peripheral+0x90>
  402f0c:	e7f6      	b.n	402efc <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  402f0e:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402f10:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402f12:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402f14:	43d3      	mvns	r3, r2
  402f16:	4021      	ands	r1, r4
  402f18:	4019      	ands	r1, r3
  402f1a:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402f1c:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402f1e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402f20:	4021      	ands	r1, r4
  402f22:	400b      	ands	r3, r1
  402f24:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402f26:	e01a      	b.n	402f5e <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402f28:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402f2a:	4313      	orrs	r3, r2
  402f2c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402f2e:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402f30:	6f43      	ldr	r3, [r0, #116]	; 0x74
  402f32:	400b      	ands	r3, r1
  402f34:	ea23 0302 	bic.w	r3, r3, r2
  402f38:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402f3a:	e7df      	b.n	402efc <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402f3c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402f3e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  402f40:	400b      	ands	r3, r1
  402f42:	ea23 0302 	bic.w	r3, r3, r2
  402f46:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402f48:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402f4a:	4313      	orrs	r3, r2
  402f4c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402f4e:	e7d5      	b.n	402efc <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402f50:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402f52:	4313      	orrs	r3, r2
  402f54:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402f56:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402f58:	4313      	orrs	r3, r2
  402f5a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402f5c:	e7ce      	b.n	402efc <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402f5e:	6042      	str	r2, [r0, #4]
}
  402f60:	f85d 4b04 	ldr.w	r4, [sp], #4
  402f64:	4770      	bx	lr
  402f66:	bf00      	nop

00402f68 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402f68:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402f6a:	f012 0f01 	tst.w	r2, #1
  402f6e:	d001      	beq.n	402f74 <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  402f70:	6641      	str	r1, [r0, #100]	; 0x64
  402f72:	e000      	b.n	402f76 <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402f74:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402f76:	f012 0f0a 	tst.w	r2, #10
  402f7a:	d001      	beq.n	402f80 <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  402f7c:	6201      	str	r1, [r0, #32]
  402f7e:	e000      	b.n	402f82 <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  402f80:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  402f82:	f012 0f02 	tst.w	r2, #2
  402f86:	d002      	beq.n	402f8e <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  402f88:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  402f8c:	e004      	b.n	402f98 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  402f8e:	f012 0f08 	tst.w	r2, #8
  402f92:	d001      	beq.n	402f98 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  402f94:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  402f98:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402f9a:	6001      	str	r1, [r0, #0]
  402f9c:	4770      	bx	lr
  402f9e:	bf00      	nop

00402fa0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  402fa0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402fa2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402fa4:	9c01      	ldr	r4, [sp, #4]
  402fa6:	b10c      	cbz	r4, 402fac <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  402fa8:	6641      	str	r1, [r0, #100]	; 0x64
  402faa:	e000      	b.n	402fae <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402fac:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  402fae:	b10b      	cbz	r3, 402fb4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  402fb0:	6501      	str	r1, [r0, #80]	; 0x50
  402fb2:	e000      	b.n	402fb6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  402fb4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  402fb6:	b10a      	cbz	r2, 402fbc <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  402fb8:	6301      	str	r1, [r0, #48]	; 0x30
  402fba:	e000      	b.n	402fbe <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  402fbc:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  402fbe:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402fc0:	6001      	str	r1, [r0, #0]
}
  402fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
  402fc6:	4770      	bx	lr

00402fc8 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402fc8:	f012 0f10 	tst.w	r2, #16
  402fcc:	d012      	beq.n	402ff4 <pio_configure_interrupt+0x2c>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  402fce:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  402fd2:	f012 0f20 	tst.w	r2, #32
  402fd6:	d002      	beq.n	402fde <pio_configure_interrupt+0x16>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  402fd8:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
  402fdc:	e001      	b.n	402fe2 <pio_configure_interrupt+0x1a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  402fde:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  402fe2:	f012 0f40 	tst.w	r2, #64	; 0x40
  402fe6:	d002      	beq.n	402fee <pio_configure_interrupt+0x26>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  402fe8:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  402fec:	4770      	bx	lr
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  402fee:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  402ff2:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  402ff4:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  402ff8:	4770      	bx	lr
  402ffa:	bf00      	nop

00402ffc <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  402ffc:	6401      	str	r1, [r0, #64]	; 0x40
  402ffe:	4770      	bx	lr

00403000 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  403000:	6441      	str	r1, [r0, #68]	; 0x44
  403002:	4770      	bx	lr

00403004 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  403004:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  403006:	4770      	bx	lr

00403008 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  403008:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40300a:	4770      	bx	lr

0040300c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40300c:	b570      	push	{r4, r5, r6, lr}
  40300e:	b082      	sub	sp, #8
  403010:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  403012:	4c47      	ldr	r4, [pc, #284]	; (403130 <pio_configure_pin+0x124>)
  403014:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  403018:	0264      	lsls	r4, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40301a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40301e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  403022:	d04d      	beq.n	4030c0 <pio_configure_pin+0xb4>
  403024:	d809      	bhi.n	40303a <pio_configure_pin+0x2e>
  403026:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40302a:	d023      	beq.n	403074 <pio_configure_pin+0x68>
  40302c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403030:	d033      	beq.n	40309a <pio_configure_pin+0x8e>
  403032:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  403036:	d177      	bne.n	403128 <pio_configure_pin+0x11c>
  403038:	e009      	b.n	40304e <pio_configure_pin+0x42>
  40303a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40303e:	d05d      	beq.n	4030fc <pio_configure_pin+0xf0>
  403040:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  403044:	d05a      	beq.n	4030fc <pio_configure_pin+0xf0>
  403046:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40304a:	d04c      	beq.n	4030e6 <pio_configure_pin+0xda>
  40304c:	e06c      	b.n	403128 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40304e:	f000 001f 	and.w	r0, r0, #31
  403052:	2601      	movs	r6, #1
  403054:	4086      	lsls	r6, r0
  403056:	4632      	mov	r2, r6
  403058:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40305c:	4620      	mov	r0, r4
  40305e:	4b35      	ldr	r3, [pc, #212]	; (403134 <pio_configure_pin+0x128>)
  403060:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403062:	f015 0f01 	tst.w	r5, #1
  403066:	d002      	beq.n	40306e <pio_configure_pin+0x62>
		p_pio->PIO_PUER = ul_mask;
  403068:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  40306a:	2001      	movs	r0, #1
  40306c:	e05d      	b.n	40312a <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40306e:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  403070:	2001      	movs	r0, #1
  403072:	e05a      	b.n	40312a <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  403074:	f000 001f 	and.w	r0, r0, #31
  403078:	2601      	movs	r6, #1
  40307a:	4086      	lsls	r6, r0
  40307c:	4632      	mov	r2, r6
  40307e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403082:	4620      	mov	r0, r4
  403084:	4b2b      	ldr	r3, [pc, #172]	; (403134 <pio_configure_pin+0x128>)
  403086:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403088:	f015 0f01 	tst.w	r5, #1
  40308c:	d002      	beq.n	403094 <pio_configure_pin+0x88>
		p_pio->PIO_PUER = ul_mask;
  40308e:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  403090:	2001      	movs	r0, #1
  403092:	e04a      	b.n	40312a <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403094:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  403096:	2001      	movs	r0, #1
  403098:	e047      	b.n	40312a <pio_configure_pin+0x11e>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40309a:	f000 001f 	and.w	r0, r0, #31
  40309e:	2601      	movs	r6, #1
  4030a0:	4086      	lsls	r6, r0
  4030a2:	4632      	mov	r2, r6
  4030a4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4030a8:	4620      	mov	r0, r4
  4030aa:	4b22      	ldr	r3, [pc, #136]	; (403134 <pio_configure_pin+0x128>)
  4030ac:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4030ae:	f015 0f01 	tst.w	r5, #1
  4030b2:	d002      	beq.n	4030ba <pio_configure_pin+0xae>
		p_pio->PIO_PUER = ul_mask;
  4030b4:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  4030b6:	2001      	movs	r0, #1
  4030b8:	e037      	b.n	40312a <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4030ba:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4030bc:	2001      	movs	r0, #1
  4030be:	e034      	b.n	40312a <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4030c0:	f000 001f 	and.w	r0, r0, #31
  4030c4:	2601      	movs	r6, #1
  4030c6:	4086      	lsls	r6, r0
  4030c8:	4632      	mov	r2, r6
  4030ca:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4030ce:	4620      	mov	r0, r4
  4030d0:	4b18      	ldr	r3, [pc, #96]	; (403134 <pio_configure_pin+0x128>)
  4030d2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4030d4:	f015 0f01 	tst.w	r5, #1
  4030d8:	d002      	beq.n	4030e0 <pio_configure_pin+0xd4>
		p_pio->PIO_PUER = ul_mask;
  4030da:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  4030dc:	2001      	movs	r0, #1
  4030de:	e024      	b.n	40312a <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4030e0:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4030e2:	2001      	movs	r0, #1
  4030e4:	e021      	b.n	40312a <pio_configure_pin+0x11e>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4030e6:	f000 011f 	and.w	r1, r0, #31
  4030ea:	2601      	movs	r6, #1
  4030ec:	462a      	mov	r2, r5
  4030ee:	fa06 f101 	lsl.w	r1, r6, r1
  4030f2:	4620      	mov	r0, r4
  4030f4:	4b10      	ldr	r3, [pc, #64]	; (403138 <pio_configure_pin+0x12c>)
  4030f6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4030f8:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4030fa:	e016      	b.n	40312a <pio_configure_pin+0x11e>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4030fc:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  403100:	f000 011f 	and.w	r1, r0, #31
  403104:	2601      	movs	r6, #1
  403106:	ea05 0306 	and.w	r3, r5, r6
  40310a:	9300      	str	r3, [sp, #0]
  40310c:	f3c5 0380 	ubfx	r3, r5, #2, #1
  403110:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  403114:	bf14      	ite	ne
  403116:	2200      	movne	r2, #0
  403118:	2201      	moveq	r2, #1
  40311a:	fa06 f101 	lsl.w	r1, r6, r1
  40311e:	4620      	mov	r0, r4
  403120:	4c06      	ldr	r4, [pc, #24]	; (40313c <pio_configure_pin+0x130>)
  403122:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  403124:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  403126:	e000      	b.n	40312a <pio_configure_pin+0x11e>

	default:
		return 0;
  403128:	2000      	movs	r0, #0
	}

	return 1;
}
  40312a:	b002      	add	sp, #8
  40312c:	bd70      	pop	{r4, r5, r6, pc}
  40312e:	bf00      	nop
  403130:	00200707 	.word	0x00200707
  403134:	00402ed5 	.word	0x00402ed5
  403138:	00402f69 	.word	0x00402f69
  40313c:	00402fa1 	.word	0x00402fa1

00403140 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  403140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403144:	4604      	mov	r4, r0
  403146:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  403148:	4b0e      	ldr	r3, [pc, #56]	; (403184 <pio_handler_process+0x44>)
  40314a:	4798      	blx	r3
  40314c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40314e:	4620      	mov	r0, r4
  403150:	4b0d      	ldr	r3, [pc, #52]	; (403188 <pio_handler_process+0x48>)
  403152:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  403154:	4005      	ands	r5, r0
  403156:	d013      	beq.n	403180 <pio_handler_process+0x40>
  403158:	4c0c      	ldr	r4, [pc, #48]	; (40318c <pio_handler_process+0x4c>)
  40315a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40315e:	6823      	ldr	r3, [r4, #0]
  403160:	4543      	cmp	r3, r8
  403162:	d108      	bne.n	403176 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  403164:	6861      	ldr	r1, [r4, #4]
  403166:	4229      	tst	r1, r5
  403168:	d005      	beq.n	403176 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40316a:	68e3      	ldr	r3, [r4, #12]
  40316c:	4640      	mov	r0, r8
  40316e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  403170:	6863      	ldr	r3, [r4, #4]
  403172:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  403176:	42b4      	cmp	r4, r6
  403178:	d002      	beq.n	403180 <pio_handler_process+0x40>
  40317a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40317c:	2d00      	cmp	r5, #0
  40317e:	d1ee      	bne.n	40315e <pio_handler_process+0x1e>
  403180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403184:	00403005 	.word	0x00403005
  403188:	00403009 	.word	0x00403009
  40318c:	2040091c 	.word	0x2040091c

00403190 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  403190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  403192:	4c17      	ldr	r4, [pc, #92]	; (4031f0 <pio_handler_set+0x60>)
  403194:	6826      	ldr	r6, [r4, #0]
  403196:	2e06      	cmp	r6, #6
  403198:	d828      	bhi.n	4031ec <pio_handler_set+0x5c>
  40319a:	f04f 0c00 	mov.w	ip, #0
  40319e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4031a0:	4f14      	ldr	r7, [pc, #80]	; (4031f4 <pio_handler_set+0x64>)
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
  4031a2:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4031a4:	0125      	lsls	r5, r4, #4
  4031a6:	597d      	ldr	r5, [r7, r5]
  4031a8:	428d      	cmp	r5, r1
  4031aa:	d104      	bne.n	4031b6 <pio_handler_set+0x26>
  4031ac:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4031b0:	686d      	ldr	r5, [r5, #4]
  4031b2:	4295      	cmp	r5, r2
  4031b4:	d004      	beq.n	4031c0 <pio_handler_set+0x30>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4031b6:	3401      	adds	r4, #1
  4031b8:	b2e4      	uxtb	r4, r4
  4031ba:	46a4      	mov	ip, r4
  4031bc:	42a6      	cmp	r6, r4
  4031be:	d2f0      	bcs.n	4031a2 <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4031c0:	4d0c      	ldr	r5, [pc, #48]	; (4031f4 <pio_handler_set+0x64>)
  4031c2:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4031c6:	eb05 040e 	add.w	r4, r5, lr
  4031ca:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4031ce:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4031d0:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4031d2:	9906      	ldr	r1, [sp, #24]
  4031d4:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4031d6:	3601      	adds	r6, #1
  4031d8:	4566      	cmp	r6, ip
  4031da:	d101      	bne.n	4031e0 <pio_handler_set+0x50>
		gs_ul_nb_sources++;
  4031dc:	4904      	ldr	r1, [pc, #16]	; (4031f0 <pio_handler_set+0x60>)
  4031de:	600e      	str	r6, [r1, #0]
  4031e0:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4031e2:	461a      	mov	r2, r3
  4031e4:	4b04      	ldr	r3, [pc, #16]	; (4031f8 <pio_handler_set+0x68>)
  4031e6:	4798      	blx	r3

	return 0;
  4031e8:	2000      	movs	r0, #0
  4031ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  4031ec:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  4031ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4031f0:	20400918 	.word	0x20400918
  4031f4:	2040091c 	.word	0x2040091c
  4031f8:	00402fc9 	.word	0x00402fc9

004031fc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4031fc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4031fe:	210a      	movs	r1, #10
  403200:	4801      	ldr	r0, [pc, #4]	; (403208 <PIOA_Handler+0xc>)
  403202:	4b02      	ldr	r3, [pc, #8]	; (40320c <PIOA_Handler+0x10>)
  403204:	4798      	blx	r3
  403206:	bd08      	pop	{r3, pc}
  403208:	400e0e00 	.word	0x400e0e00
  40320c:	00403141 	.word	0x00403141

00403210 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  403210:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  403212:	210b      	movs	r1, #11
  403214:	4801      	ldr	r0, [pc, #4]	; (40321c <PIOB_Handler+0xc>)
  403216:	4b02      	ldr	r3, [pc, #8]	; (403220 <PIOB_Handler+0x10>)
  403218:	4798      	blx	r3
  40321a:	bd08      	pop	{r3, pc}
  40321c:	400e1000 	.word	0x400e1000
  403220:	00403141 	.word	0x00403141

00403224 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  403224:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  403226:	210c      	movs	r1, #12
  403228:	4801      	ldr	r0, [pc, #4]	; (403230 <PIOC_Handler+0xc>)
  40322a:	4b02      	ldr	r3, [pc, #8]	; (403234 <PIOC_Handler+0x10>)
  40322c:	4798      	blx	r3
  40322e:	bd08      	pop	{r3, pc}
  403230:	400e1200 	.word	0x400e1200
  403234:	00403141 	.word	0x00403141

00403238 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  403238:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40323a:	2110      	movs	r1, #16
  40323c:	4801      	ldr	r0, [pc, #4]	; (403244 <PIOD_Handler+0xc>)
  40323e:	4b02      	ldr	r3, [pc, #8]	; (403248 <PIOD_Handler+0x10>)
  403240:	4798      	blx	r3
  403242:	bd08      	pop	{r3, pc}
  403244:	400e1400 	.word	0x400e1400
  403248:	00403141 	.word	0x00403141

0040324c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40324c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40324e:	2111      	movs	r1, #17
  403250:	4801      	ldr	r0, [pc, #4]	; (403258 <PIOE_Handler+0xc>)
  403252:	4b02      	ldr	r3, [pc, #8]	; (40325c <PIOE_Handler+0x10>)
  403254:	4798      	blx	r3
  403256:	bd08      	pop	{r3, pc}
  403258:	400e1600 	.word	0x400e1600
  40325c:	00403141 	.word	0x00403141

00403260 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  403260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403262:	4606      	mov	r6, r0
  403264:	460d      	mov	r5, r1
  403266:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  403268:	4b17      	ldr	r3, [pc, #92]	; (4032c8 <pio_handler_set_priority+0x68>)
  40326a:	4798      	blx	r3
  40326c:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  40326e:	f04f 31ff 	mov.w	r1, #4294967295
  403272:	4630      	mov	r0, r6
  403274:	4b15      	ldr	r3, [pc, #84]	; (4032cc <pio_handler_set_priority+0x6c>)
  403276:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  403278:	4630      	mov	r0, r6
  40327a:	4b15      	ldr	r3, [pc, #84]	; (4032d0 <pio_handler_set_priority+0x70>)
  40327c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40327e:	fa5f fe85 	uxtb.w	lr, r5
  403282:	f00e 031f 	and.w	r3, lr, #31
  403286:	2201      	movs	r2, #1
  403288:	fa02 f303 	lsl.w	r3, r2, r3
  40328c:	0968      	lsrs	r0, r5, #5
  40328e:	4911      	ldr	r1, [pc, #68]	; (4032d4 <pio_handler_set_priority+0x74>)
  403290:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  403294:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403298:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  40329c:	2d00      	cmp	r5, #0
  40329e:	da07      	bge.n	4032b0 <pio_handler_set_priority+0x50>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4032a0:	f00e 0e0f 	and.w	lr, lr, #15
  4032a4:	0164      	lsls	r4, r4, #5
  4032a6:	b2e4      	uxtb	r4, r4
  4032a8:	4a0b      	ldr	r2, [pc, #44]	; (4032d8 <pio_handler_set_priority+0x78>)
  4032aa:	f802 400e 	strb.w	r4, [r2, lr]
  4032ae:	e003      	b.n	4032b8 <pio_handler_set_priority+0x58>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4032b0:	0164      	lsls	r4, r4, #5
  4032b2:	b2e4      	uxtb	r4, r4
  4032b4:	4a09      	ldr	r2, [pc, #36]	; (4032dc <pio_handler_set_priority+0x7c>)
  4032b6:	5554      	strb	r4, [r2, r5]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4032b8:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  4032bc:	4639      	mov	r1, r7
  4032be:	4630      	mov	r0, r6
  4032c0:	4b07      	ldr	r3, [pc, #28]	; (4032e0 <pio_handler_set_priority+0x80>)
  4032c2:	4798      	blx	r3
  4032c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4032c6:	bf00      	nop
  4032c8:	00403009 	.word	0x00403009
  4032cc:	00403001 	.word	0x00403001
  4032d0:	00403005 	.word	0x00403005
  4032d4:	e000e100 	.word	0xe000e100
  4032d8:	e000ed14 	.word	0xe000ed14
  4032dc:	e000e400 	.word	0xe000e400
  4032e0:	00402ffd 	.word	0x00402ffd

004032e4 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4032e4:	2803      	cmp	r0, #3
  4032e6:	d007      	beq.n	4032f8 <pmc_mck_set_division+0x14>
  4032e8:	2804      	cmp	r0, #4
  4032ea:	d008      	beq.n	4032fe <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4032ec:	2802      	cmp	r0, #2
  4032ee:	bf0c      	ite	eq
  4032f0:	f44f 7280 	moveq.w	r2, #256	; 0x100
  4032f4:	2200      	movne	r2, #0
  4032f6:	e004      	b.n	403302 <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4032f8:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  4032fc:	e001      	b.n	403302 <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4032fe:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  403302:	4906      	ldr	r1, [pc, #24]	; (40331c <pmc_mck_set_division+0x38>)
  403304:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40330a:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  40330c:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40330e:	460a      	mov	r2, r1
  403310:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403312:	f013 0f08 	tst.w	r3, #8
  403316:	d0fb      	beq.n	403310 <pmc_mck_set_division+0x2c>
}
  403318:	4770      	bx	lr
  40331a:	bf00      	nop
  40331c:	400e0600 	.word	0x400e0600

00403320 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  403320:	4a18      	ldr	r2, [pc, #96]	; (403384 <pmc_switch_mck_to_pllack+0x64>)
  403322:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403328:	4318      	orrs	r0, r3
  40332a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40332c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40332e:	f013 0f08 	tst.w	r3, #8
  403332:	d003      	beq.n	40333c <pmc_switch_mck_to_pllack+0x1c>
  403334:	e009      	b.n	40334a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  403336:	3b01      	subs	r3, #1
  403338:	d103      	bne.n	403342 <pmc_switch_mck_to_pllack+0x22>
  40333a:	e01e      	b.n	40337a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40333c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  403340:	4910      	ldr	r1, [pc, #64]	; (403384 <pmc_switch_mck_to_pllack+0x64>)
  403342:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403344:	f012 0f08 	tst.w	r2, #8
  403348:	d0f5      	beq.n	403336 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40334a:	4a0e      	ldr	r2, [pc, #56]	; (403384 <pmc_switch_mck_to_pllack+0x64>)
  40334c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40334e:	f023 0303 	bic.w	r3, r3, #3
  403352:	f043 0302 	orr.w	r3, r3, #2
  403356:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403358:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40335a:	f010 0008 	ands.w	r0, r0, #8
  40335e:	d004      	beq.n	40336a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  403360:	2000      	movs	r0, #0
  403362:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  403364:	3b01      	subs	r3, #1
  403366:	d103      	bne.n	403370 <pmc_switch_mck_to_pllack+0x50>
  403368:	e009      	b.n	40337e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40336a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40336e:	4905      	ldr	r1, [pc, #20]	; (403384 <pmc_switch_mck_to_pllack+0x64>)
  403370:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403372:	f012 0f08 	tst.w	r2, #8
  403376:	d0f5      	beq.n	403364 <pmc_switch_mck_to_pllack+0x44>
  403378:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40337a:	2001      	movs	r0, #1
  40337c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40337e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  403380:	4770      	bx	lr
  403382:	bf00      	nop
  403384:	400e0600 	.word	0x400e0600

00403388 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  403388:	b138      	cbz	r0, 40339a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40338a:	490e      	ldr	r1, [pc, #56]	; (4033c4 <pmc_switch_mainck_to_xtal+0x3c>)
  40338c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40338e:	4a0e      	ldr	r2, [pc, #56]	; (4033c8 <pmc_switch_mainck_to_xtal+0x40>)
  403390:	401a      	ands	r2, r3
  403392:	4b0e      	ldr	r3, [pc, #56]	; (4033cc <pmc_switch_mainck_to_xtal+0x44>)
  403394:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403396:	620b      	str	r3, [r1, #32]
  403398:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40339a:	480a      	ldr	r0, [pc, #40]	; (4033c4 <pmc_switch_mainck_to_xtal+0x3c>)
  40339c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40339e:	0209      	lsls	r1, r1, #8
  4033a0:	b289      	uxth	r1, r1
  4033a2:	4a0b      	ldr	r2, [pc, #44]	; (4033d0 <pmc_switch_mainck_to_xtal+0x48>)
  4033a4:	401a      	ands	r2, r3
  4033a6:	4b0b      	ldr	r3, [pc, #44]	; (4033d4 <pmc_switch_mainck_to_xtal+0x4c>)
  4033a8:	4313      	orrs	r3, r2
  4033aa:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4033ac:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4033ae:	4602      	mov	r2, r0
  4033b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4033b2:	f013 0f01 	tst.w	r3, #1
  4033b6:	d0fb      	beq.n	4033b0 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4033b8:	4a02      	ldr	r2, [pc, #8]	; (4033c4 <pmc_switch_mainck_to_xtal+0x3c>)
  4033ba:	6a11      	ldr	r1, [r2, #32]
  4033bc:	4b06      	ldr	r3, [pc, #24]	; (4033d8 <pmc_switch_mainck_to_xtal+0x50>)
  4033be:	430b      	orrs	r3, r1
  4033c0:	6213      	str	r3, [r2, #32]
  4033c2:	4770      	bx	lr
  4033c4:	400e0600 	.word	0x400e0600
  4033c8:	fec8fffc 	.word	0xfec8fffc
  4033cc:	01370002 	.word	0x01370002
  4033d0:	ffc8fffc 	.word	0xffc8fffc
  4033d4:	00370001 	.word	0x00370001
  4033d8:	01370000 	.word	0x01370000

004033dc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4033dc:	4b02      	ldr	r3, [pc, #8]	; (4033e8 <pmc_osc_is_ready_mainck+0xc>)
  4033de:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4033e0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4033e4:	4770      	bx	lr
  4033e6:	bf00      	nop
  4033e8:	400e0600 	.word	0x400e0600

004033ec <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4033ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4033f0:	4b01      	ldr	r3, [pc, #4]	; (4033f8 <pmc_disable_pllack+0xc>)
  4033f2:	629a      	str	r2, [r3, #40]	; 0x28
  4033f4:	4770      	bx	lr
  4033f6:	bf00      	nop
  4033f8:	400e0600 	.word	0x400e0600

004033fc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4033fc:	4b02      	ldr	r3, [pc, #8]	; (403408 <pmc_is_locked_pllack+0xc>)
  4033fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403400:	f000 0002 	and.w	r0, r0, #2
  403404:	4770      	bx	lr
  403406:	bf00      	nop
  403408:	400e0600 	.word	0x400e0600

0040340c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40340c:	283f      	cmp	r0, #63	; 0x3f
  40340e:	d81e      	bhi.n	40344e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  403410:	281f      	cmp	r0, #31
  403412:	d80c      	bhi.n	40342e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  403414:	4b11      	ldr	r3, [pc, #68]	; (40345c <pmc_enable_periph_clk+0x50>)
  403416:	699a      	ldr	r2, [r3, #24]
  403418:	2301      	movs	r3, #1
  40341a:	4083      	lsls	r3, r0
  40341c:	4393      	bics	r3, r2
  40341e:	d018      	beq.n	403452 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  403420:	2301      	movs	r3, #1
  403422:	fa03 f000 	lsl.w	r0, r3, r0
  403426:	4b0d      	ldr	r3, [pc, #52]	; (40345c <pmc_enable_periph_clk+0x50>)
  403428:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40342a:	2000      	movs	r0, #0
  40342c:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  40342e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  403430:	4b0a      	ldr	r3, [pc, #40]	; (40345c <pmc_enable_periph_clk+0x50>)
  403432:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  403436:	2301      	movs	r3, #1
  403438:	4083      	lsls	r3, r0
  40343a:	4393      	bics	r3, r2
  40343c:	d00b      	beq.n	403456 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40343e:	2301      	movs	r3, #1
  403440:	fa03 f000 	lsl.w	r0, r3, r0
  403444:	4b05      	ldr	r3, [pc, #20]	; (40345c <pmc_enable_periph_clk+0x50>)
  403446:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  40344a:	2000      	movs	r0, #0
  40344c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40344e:	2001      	movs	r0, #1
  403450:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  403452:	2000      	movs	r0, #0
  403454:	4770      	bx	lr
  403456:	2000      	movs	r0, #0
}
  403458:	4770      	bx	lr
  40345a:	bf00      	nop
  40345c:	400e0600 	.word	0x400e0600

00403460 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  403460:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  403462:	4b07      	ldr	r3, [pc, #28]	; (403480 <spi_enable_clock+0x20>)
  403464:	4298      	cmp	r0, r3
  403466:	d103      	bne.n	403470 <spi_enable_clock+0x10>
  403468:	2015      	movs	r0, #21
  40346a:	4b06      	ldr	r3, [pc, #24]	; (403484 <spi_enable_clock+0x24>)
  40346c:	4798      	blx	r3
  40346e:	bd08      	pop	{r3, pc}
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  403470:	4b05      	ldr	r3, [pc, #20]	; (403488 <spi_enable_clock+0x28>)
  403472:	4298      	cmp	r0, r3
  403474:	d102      	bne.n	40347c <spi_enable_clock+0x1c>
  403476:	202a      	movs	r0, #42	; 0x2a
  403478:	4b02      	ldr	r3, [pc, #8]	; (403484 <spi_enable_clock+0x24>)
  40347a:	4798      	blx	r3
  40347c:	bd08      	pop	{r3, pc}
  40347e:	bf00      	nop
  403480:	40008000 	.word	0x40008000
  403484:	0040340d 	.word	0x0040340d
  403488:	40058000 	.word	0x40058000

0040348c <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  40348c:	6843      	ldr	r3, [r0, #4]
  40348e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  403492:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  403494:	6843      	ldr	r3, [r0, #4]
  403496:	0409      	lsls	r1, r1, #16
  403498:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  40349c:	430b      	orrs	r3, r1
  40349e:	6043      	str	r3, [r0, #4]
  4034a0:	4770      	bx	lr
  4034a2:	bf00      	nop

004034a4 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  4034a4:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4034a6:	f643 2399 	movw	r3, #15001	; 0x3a99
  4034aa:	e001      	b.n	4034b0 <spi_read+0xc>
		if (!timeout--) {
  4034ac:	3b01      	subs	r3, #1
  4034ae:	d00e      	beq.n	4034ce <spi_read+0x2a>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4034b0:	6904      	ldr	r4, [r0, #16]
  4034b2:	f014 0f01 	tst.w	r4, #1
  4034b6:	d0f9      	beq.n	4034ac <spi_read+0x8>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
  4034b8:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4034ba:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  4034bc:	f010 0f02 	tst.w	r0, #2
  4034c0:	d002      	beq.n	4034c8 <spi_read+0x24>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  4034c2:	f3c3 4003 	ubfx	r0, r3, #16, #4
  4034c6:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  4034c8:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  4034ca:	2000      	movs	r0, #0
  4034cc:	e000      	b.n	4034d0 <spi_read+0x2c>
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  4034ce:	2001      	movs	r0, #1
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);

	return SPI_OK;
}
  4034d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4034d4:	4770      	bx	lr
  4034d6:	bf00      	nop

004034d8 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4034d8:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4034da:	f643 2499 	movw	r4, #15001	; 0x3a99
  4034de:	e001      	b.n	4034e4 <spi_write+0xc>
		if (!timeout--) {
  4034e0:	3c01      	subs	r4, #1
  4034e2:	d011      	beq.n	403508 <spi_write+0x30>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4034e4:	6905      	ldr	r5, [r0, #16]
  4034e6:	f015 0f02 	tst.w	r5, #2
  4034ea:	d0f9      	beq.n	4034e0 <spi_write+0x8>
  4034ec:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4034ee:	f014 0f02 	tst.w	r4, #2
  4034f2:	d006      	beq.n	403502 <spi_write+0x2a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4034f4:	0412      	lsls	r2, r2, #16
  4034f6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4034fa:	4311      	orrs	r1, r2
		if (uc_last) {
  4034fc:	b10b      	cbz	r3, 403502 <spi_write+0x2a>
			value |= SPI_TDR_LASTXFER;
  4034fe:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  403502:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  403504:	2000      	movs	r0, #0
  403506:	e000      	b.n	40350a <spi_write+0x32>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  403508:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
  40350a:	bc30      	pop	{r4, r5}
  40350c:	4770      	bx	lr
  40350e:	bf00      	nop

00403510 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  403510:	b132      	cbz	r2, 403520 <spi_set_clock_polarity+0x10>
  403512:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  403516:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403518:	f043 0301 	orr.w	r3, r3, #1
  40351c:	6303      	str	r3, [r0, #48]	; 0x30
  40351e:	4770      	bx	lr
  403520:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  403524:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403526:	f023 0301 	bic.w	r3, r3, #1
  40352a:	6303      	str	r3, [r0, #48]	; 0x30
  40352c:	4770      	bx	lr
  40352e:	bf00      	nop

00403530 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  403530:	b132      	cbz	r2, 403540 <spi_set_clock_phase+0x10>
  403532:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  403536:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403538:	f043 0302 	orr.w	r3, r3, #2
  40353c:	6303      	str	r3, [r0, #48]	; 0x30
  40353e:	4770      	bx	lr
  403540:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  403544:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403546:	f023 0302 	bic.w	r3, r3, #2
  40354a:	6303      	str	r3, [r0, #48]	; 0x30
  40354c:	4770      	bx	lr
  40354e:	bf00      	nop

00403550 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  403550:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  403554:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40355a:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40355c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40355e:	431a      	orrs	r2, r3
  403560:	630a      	str	r2, [r1, #48]	; 0x30
  403562:	4770      	bx	lr

00403564 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  403564:	1e43      	subs	r3, r0, #1
  403566:	4419      	add	r1, r3
  403568:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40356c:	1e43      	subs	r3, r0, #1
  40356e:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  403570:	bf94      	ite	ls
  403572:	b200      	sxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  403574:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	return baud_div;
}
  403578:	4770      	bx	lr
  40357a:	bf00      	nop

0040357c <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  40357c:	b16a      	cbz	r2, 40359a <spi_set_baudrate_div+0x1e>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  40357e:	b410      	push	{r4}
  403580:	4614      	mov	r4, r2
  403582:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  403586:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403588:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  40358c:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  40358e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  403590:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  403594:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  403596:	2000      	movs	r0, #0
  403598:	e002      	b.n	4035a0 <spi_set_baudrate_div+0x24>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
  40359a:	f04f 30ff 	mov.w	r0, #4294967295
  40359e:	4770      	bx	lr

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
  4035a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4035a4:	4770      	bx	lr
  4035a6:	bf00      	nop

004035a8 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4035a8:	b410      	push	{r4}
  4035aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4035ae:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4035b0:	b280      	uxth	r0, r0
  4035b2:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4035b4:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4035b6:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4035ba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  4035be:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4035c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4035c4:	4770      	bx	lr
  4035c6:	bf00      	nop

004035c8 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4035c8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4035cc:	6a08      	ldr	r0, [r1, #32]
}
  4035ce:	4770      	bx	lr

004035d0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4035d0:	6943      	ldr	r3, [r0, #20]
  4035d2:	f013 0f02 	tst.w	r3, #2
  4035d6:	d002      	beq.n	4035de <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4035d8:	61c1      	str	r1, [r0, #28]
	return 0;
  4035da:	2000      	movs	r0, #0
  4035dc:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  4035de:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  4035e0:	4770      	bx	lr
  4035e2:	bf00      	nop

004035e4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4035e4:	6943      	ldr	r3, [r0, #20]
  4035e6:	f013 0f01 	tst.w	r3, #1
  4035ea:	d003      	beq.n	4035f4 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4035ec:	6983      	ldr	r3, [r0, #24]
  4035ee:	700b      	strb	r3, [r1, #0]
	return 0;
  4035f0:	2000      	movs	r0, #0
  4035f2:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  4035f4:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  4035f6:	4770      	bx	lr

004035f8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4035f8:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4035fa:	010c      	lsls	r4, r1, #4
  4035fc:	4294      	cmp	r4, r2
  4035fe:	d90f      	bls.n	403620 <usart_set_async_baudrate+0x28>
  403600:	e01a      	b.n	403638 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  403602:	6841      	ldr	r1, [r0, #4]
  403604:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  403608:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40360a:	0412      	lsls	r2, r2, #16
  40360c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  403610:	431a      	orrs	r2, r3
  403612:	6202      	str	r2, [r0, #32]

	return 0;
  403614:	2000      	movs	r0, #0
  403616:	e01c      	b.n	403652 <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  403618:	2001      	movs	r0, #1
  40361a:	e01a      	b.n	403652 <usart_set_async_baudrate+0x5a>
  40361c:	2001      	movs	r0, #1
  40361e:	e018      	b.n	403652 <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  403620:	0863      	lsrs	r3, r4, #1
  403622:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  403626:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  40362a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40362c:	1e5c      	subs	r4, r3, #1
  40362e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  403632:	428c      	cmp	r4, r1
  403634:	d9e9      	bls.n	40360a <usart_set_async_baudrate+0x12>
  403636:	e7ef      	b.n	403618 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  403638:	00c9      	lsls	r1, r1, #3
  40363a:	084b      	lsrs	r3, r1, #1
  40363c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  403640:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  403644:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  403646:	1e5c      	subs	r4, r3, #1
  403648:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40364c:	428c      	cmp	r4, r1
  40364e:	d8e5      	bhi.n	40361c <usart_set_async_baudrate+0x24>
  403650:	e7d7      	b.n	403602 <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  403652:	f85d 4b04 	ldr.w	r4, [sp], #4
  403656:	4770      	bx	lr

00403658 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  403658:	4b08      	ldr	r3, [pc, #32]	; (40367c <usart_reset+0x24>)
  40365a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40365e:	2300      	movs	r3, #0
  403660:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  403662:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  403664:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  403666:	2388      	movs	r3, #136	; 0x88
  403668:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40366a:	2324      	movs	r3, #36	; 0x24
  40366c:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  40366e:	f44f 7380 	mov.w	r3, #256	; 0x100
  403672:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  403674:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  403678:	6003      	str	r3, [r0, #0]
  40367a:	4770      	bx	lr
  40367c:	55534100 	.word	0x55534100

00403680 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  403680:	b570      	push	{r4, r5, r6, lr}
  403682:	4605      	mov	r5, r0
  403684:	460c      	mov	r4, r1
  403686:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  403688:	4b0f      	ldr	r3, [pc, #60]	; (4036c8 <usart_init_rs232+0x48>)
  40368a:	4798      	blx	r3

	ul_reg_val = 0;
  40368c:	2200      	movs	r2, #0
  40368e:	4b0f      	ldr	r3, [pc, #60]	; (4036cc <usart_init_rs232+0x4c>)
  403690:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  403692:	b19c      	cbz	r4, 4036bc <usart_init_rs232+0x3c>
  403694:	4632      	mov	r2, r6
  403696:	6821      	ldr	r1, [r4, #0]
  403698:	4628      	mov	r0, r5
  40369a:	4b0d      	ldr	r3, [pc, #52]	; (4036d0 <usart_init_rs232+0x50>)
  40369c:	4798      	blx	r3
  40369e:	4602      	mov	r2, r0
  4036a0:	b970      	cbnz	r0, 4036c0 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4036a2:	6861      	ldr	r1, [r4, #4]
  4036a4:	68a3      	ldr	r3, [r4, #8]
  4036a6:	4319      	orrs	r1, r3
  4036a8:	6923      	ldr	r3, [r4, #16]
  4036aa:	4319      	orrs	r1, r3
  4036ac:	68e3      	ldr	r3, [r4, #12]
  4036ae:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4036b0:	4906      	ldr	r1, [pc, #24]	; (4036cc <usart_init_rs232+0x4c>)
  4036b2:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  4036b4:	6869      	ldr	r1, [r5, #4]
  4036b6:	430b      	orrs	r3, r1
  4036b8:	606b      	str	r3, [r5, #4]

	return 0;
  4036ba:	e002      	b.n	4036c2 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4036bc:	2201      	movs	r2, #1
  4036be:	e000      	b.n	4036c2 <usart_init_rs232+0x42>
  4036c0:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  4036c2:	4610      	mov	r0, r2
  4036c4:	bd70      	pop	{r4, r5, r6, pc}
  4036c6:	bf00      	nop
  4036c8:	00403659 	.word	0x00403659
  4036cc:	2040098c 	.word	0x2040098c
  4036d0:	004035f9 	.word	0x004035f9

004036d4 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  4036d4:	2340      	movs	r3, #64	; 0x40
  4036d6:	6003      	str	r3, [r0, #0]
  4036d8:	4770      	bx	lr
  4036da:	bf00      	nop

004036dc <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  4036dc:	2310      	movs	r3, #16
  4036de:	6003      	str	r3, [r0, #0]
  4036e0:	4770      	bx	lr
  4036e2:	bf00      	nop

004036e4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4036e4:	6943      	ldr	r3, [r0, #20]
  4036e6:	f013 0f02 	tst.w	r3, #2
  4036ea:	d004      	beq.n	4036f6 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4036ec:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4036f0:	61c1      	str	r1, [r0, #28]
	return 0;
  4036f2:	2000      	movs	r0, #0
  4036f4:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  4036f6:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  4036f8:	4770      	bx	lr
  4036fa:	bf00      	nop

004036fc <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4036fc:	6943      	ldr	r3, [r0, #20]
  4036fe:	f013 0f01 	tst.w	r3, #1
  403702:	d005      	beq.n	403710 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  403704:	6983      	ldr	r3, [r0, #24]
  403706:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40370a:	600b      	str	r3, [r1, #0]

	return 0;
  40370c:	2000      	movs	r0, #0
  40370e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  403710:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  403712:	4770      	bx	lr

00403714 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403714:	e7fe      	b.n	403714 <Dummy_Handler>
  403716:	bf00      	nop

00403718 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  403718:	b500      	push	{lr}
  40371a:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  40371c:	4b27      	ldr	r3, [pc, #156]	; (4037bc <Reset_Handler+0xa4>)
  40371e:	4a28      	ldr	r2, [pc, #160]	; (4037c0 <Reset_Handler+0xa8>)
  403720:	429a      	cmp	r2, r3
  403722:	d003      	beq.n	40372c <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  403724:	4b27      	ldr	r3, [pc, #156]	; (4037c4 <Reset_Handler+0xac>)
  403726:	4a25      	ldr	r2, [pc, #148]	; (4037bc <Reset_Handler+0xa4>)
  403728:	429a      	cmp	r2, r3
  40372a:	d304      	bcc.n	403736 <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  40372c:	4b26      	ldr	r3, [pc, #152]	; (4037c8 <Reset_Handler+0xb0>)
  40372e:	4a27      	ldr	r2, [pc, #156]	; (4037cc <Reset_Handler+0xb4>)
  403730:	429a      	cmp	r2, r3
  403732:	d30f      	bcc.n	403754 <Reset_Handler+0x3c>
  403734:	e01a      	b.n	40376c <Reset_Handler+0x54>
  403736:	4921      	ldr	r1, [pc, #132]	; (4037bc <Reset_Handler+0xa4>)
  403738:	4b25      	ldr	r3, [pc, #148]	; (4037d0 <Reset_Handler+0xb8>)
  40373a:	1a5b      	subs	r3, r3, r1
  40373c:	f023 0303 	bic.w	r3, r3, #3
  403740:	3304      	adds	r3, #4
  403742:	4a1f      	ldr	r2, [pc, #124]	; (4037c0 <Reset_Handler+0xa8>)
  403744:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  403746:	f852 0b04 	ldr.w	r0, [r2], #4
  40374a:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  40374e:	429a      	cmp	r2, r3
  403750:	d1f9      	bne.n	403746 <Reset_Handler+0x2e>
  403752:	e7eb      	b.n	40372c <Reset_Handler+0x14>
  403754:	4b1f      	ldr	r3, [pc, #124]	; (4037d4 <Reset_Handler+0xbc>)
  403756:	4a20      	ldr	r2, [pc, #128]	; (4037d8 <Reset_Handler+0xc0>)
  403758:	1ad2      	subs	r2, r2, r3
  40375a:	f022 0203 	bic.w	r2, r2, #3
  40375e:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  403760:	3b04      	subs	r3, #4
                *pDest++ = 0;
  403762:	2100      	movs	r1, #0
  403764:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  403768:	4293      	cmp	r3, r2
  40376a:	d1fb      	bne.n	403764 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40376c:	4a1b      	ldr	r2, [pc, #108]	; (4037dc <Reset_Handler+0xc4>)
  40376e:	4b1c      	ldr	r3, [pc, #112]	; (4037e0 <Reset_Handler+0xc8>)
  403770:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403774:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403776:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40377a:	fab3 f383 	clz	r3, r3
  40377e:	095b      	lsrs	r3, r3, #5
  403780:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  403782:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  403784:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403788:	2200      	movs	r2, #0
  40378a:	4b16      	ldr	r3, [pc, #88]	; (4037e4 <Reset_Handler+0xcc>)
  40378c:	701a      	strb	r2, [r3, #0]
	return flags;
  40378e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  403790:	4a15      	ldr	r2, [pc, #84]	; (4037e8 <Reset_Handler+0xd0>)
  403792:	6813      	ldr	r3, [r2, #0]
  403794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  403798:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40379a:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40379e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4037a2:	b129      	cbz	r1, 4037b0 <Reset_Handler+0x98>
		cpu_irq_enable();
  4037a4:	2201      	movs	r2, #1
  4037a6:	4b0f      	ldr	r3, [pc, #60]	; (4037e4 <Reset_Handler+0xcc>)
  4037a8:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4037aa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4037ae:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4037b0:	4b0e      	ldr	r3, [pc, #56]	; (4037ec <Reset_Handler+0xd4>)
  4037b2:	4798      	blx	r3

        /* Branch to main function */
        main();
  4037b4:	4b0e      	ldr	r3, [pc, #56]	; (4037f0 <Reset_Handler+0xd8>)
  4037b6:	4798      	blx	r3
  4037b8:	e7fe      	b.n	4037b8 <Reset_Handler+0xa0>
  4037ba:	bf00      	nop
  4037bc:	20400000 	.word	0x20400000
  4037c0:	0040c320 	.word	0x0040c320
  4037c4:	204008c0 	.word	0x204008c0
  4037c8:	20401020 	.word	0x20401020
  4037cc:	204008c0 	.word	0x204008c0
  4037d0:	204008bf 	.word	0x204008bf
  4037d4:	204008c4 	.word	0x204008c4
  4037d8:	20401023 	.word	0x20401023
  4037dc:	e000ed00 	.word	0xe000ed00
  4037e0:	00400000 	.word	0x00400000
  4037e4:	20400014 	.word	0x20400014
  4037e8:	e000ed88 	.word	0xe000ed88
  4037ec:	0040405d 	.word	0x0040405d
  4037f0:	00403e95 	.word	0x00403e95

004037f4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4037f4:	4b3c      	ldr	r3, [pc, #240]	; (4038e8 <SystemCoreClockUpdate+0xf4>)
  4037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4037f8:	f003 0303 	and.w	r3, r3, #3
  4037fc:	2b01      	cmp	r3, #1
  4037fe:	d00f      	beq.n	403820 <SystemCoreClockUpdate+0x2c>
  403800:	b113      	cbz	r3, 403808 <SystemCoreClockUpdate+0x14>
  403802:	2b02      	cmp	r3, #2
  403804:	d029      	beq.n	40385a <SystemCoreClockUpdate+0x66>
  403806:	e057      	b.n	4038b8 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  403808:	4b38      	ldr	r3, [pc, #224]	; (4038ec <SystemCoreClockUpdate+0xf8>)
  40380a:	695b      	ldr	r3, [r3, #20]
  40380c:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403810:	bf14      	ite	ne
  403812:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  403816:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40381a:	4b35      	ldr	r3, [pc, #212]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  40381c:	601a      	str	r2, [r3, #0]
  40381e:	e04b      	b.n	4038b8 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403820:	4b31      	ldr	r3, [pc, #196]	; (4038e8 <SystemCoreClockUpdate+0xf4>)
  403822:	6a1b      	ldr	r3, [r3, #32]
  403824:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403828:	d003      	beq.n	403832 <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40382a:	4a32      	ldr	r2, [pc, #200]	; (4038f4 <SystemCoreClockUpdate+0x100>)
  40382c:	4b30      	ldr	r3, [pc, #192]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  40382e:	601a      	str	r2, [r3, #0]
  403830:	e042      	b.n	4038b8 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403832:	4a31      	ldr	r2, [pc, #196]	; (4038f8 <SystemCoreClockUpdate+0x104>)
  403834:	4b2e      	ldr	r3, [pc, #184]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  403836:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403838:	4b2b      	ldr	r3, [pc, #172]	; (4038e8 <SystemCoreClockUpdate+0xf4>)
  40383a:	6a1b      	ldr	r3, [r3, #32]
  40383c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403840:	2b10      	cmp	r3, #16
  403842:	d002      	beq.n	40384a <SystemCoreClockUpdate+0x56>
  403844:	2b20      	cmp	r3, #32
  403846:	d004      	beq.n	403852 <SystemCoreClockUpdate+0x5e>
  403848:	e036      	b.n	4038b8 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40384a:	4a2c      	ldr	r2, [pc, #176]	; (4038fc <SystemCoreClockUpdate+0x108>)
  40384c:	4b28      	ldr	r3, [pc, #160]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  40384e:	601a      	str	r2, [r3, #0]
          break;
  403850:	e032      	b.n	4038b8 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  403852:	4a28      	ldr	r2, [pc, #160]	; (4038f4 <SystemCoreClockUpdate+0x100>)
  403854:	4b26      	ldr	r3, [pc, #152]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  403856:	601a      	str	r2, [r3, #0]
          break;
  403858:	e02e      	b.n	4038b8 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40385a:	4b23      	ldr	r3, [pc, #140]	; (4038e8 <SystemCoreClockUpdate+0xf4>)
  40385c:	6a1b      	ldr	r3, [r3, #32]
  40385e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403862:	d003      	beq.n	40386c <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  403864:	4a23      	ldr	r2, [pc, #140]	; (4038f4 <SystemCoreClockUpdate+0x100>)
  403866:	4b22      	ldr	r3, [pc, #136]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  403868:	601a      	str	r2, [r3, #0]
  40386a:	e012      	b.n	403892 <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40386c:	4a22      	ldr	r2, [pc, #136]	; (4038f8 <SystemCoreClockUpdate+0x104>)
  40386e:	4b20      	ldr	r3, [pc, #128]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  403870:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403872:	4b1d      	ldr	r3, [pc, #116]	; (4038e8 <SystemCoreClockUpdate+0xf4>)
  403874:	6a1b      	ldr	r3, [r3, #32]
  403876:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40387a:	2b10      	cmp	r3, #16
  40387c:	d002      	beq.n	403884 <SystemCoreClockUpdate+0x90>
  40387e:	2b20      	cmp	r3, #32
  403880:	d004      	beq.n	40388c <SystemCoreClockUpdate+0x98>
  403882:	e006      	b.n	403892 <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  403884:	4a1d      	ldr	r2, [pc, #116]	; (4038fc <SystemCoreClockUpdate+0x108>)
  403886:	4b1a      	ldr	r3, [pc, #104]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  403888:	601a      	str	r2, [r3, #0]
          break;
  40388a:	e002      	b.n	403892 <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  40388c:	4a19      	ldr	r2, [pc, #100]	; (4038f4 <SystemCoreClockUpdate+0x100>)
  40388e:	4b18      	ldr	r3, [pc, #96]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  403890:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  403892:	4b15      	ldr	r3, [pc, #84]	; (4038e8 <SystemCoreClockUpdate+0xf4>)
  403894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403896:	f003 0303 	and.w	r3, r3, #3
  40389a:	2b02      	cmp	r3, #2
  40389c:	d10c      	bne.n	4038b8 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40389e:	4a12      	ldr	r2, [pc, #72]	; (4038e8 <SystemCoreClockUpdate+0xf4>)
  4038a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4038a2:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4038a4:	4812      	ldr	r0, [pc, #72]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  4038a6:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4038aa:	6803      	ldr	r3, [r0, #0]
  4038ac:	fb01 3303 	mla	r3, r1, r3, r3
  4038b0:	b2d2      	uxtb	r2, r2
  4038b2:	fbb3 f3f2 	udiv	r3, r3, r2
  4038b6:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4038b8:	4b0b      	ldr	r3, [pc, #44]	; (4038e8 <SystemCoreClockUpdate+0xf4>)
  4038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4038bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4038c0:	2b70      	cmp	r3, #112	; 0x70
  4038c2:	d107      	bne.n	4038d4 <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  4038c4:	4a0a      	ldr	r2, [pc, #40]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  4038c6:	6813      	ldr	r3, [r2, #0]
  4038c8:	490d      	ldr	r1, [pc, #52]	; (403900 <SystemCoreClockUpdate+0x10c>)
  4038ca:	fba1 1303 	umull	r1, r3, r1, r3
  4038ce:	085b      	lsrs	r3, r3, #1
  4038d0:	6013      	str	r3, [r2, #0]
  4038d2:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4038d4:	4b04      	ldr	r3, [pc, #16]	; (4038e8 <SystemCoreClockUpdate+0xf4>)
  4038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4038d8:	4905      	ldr	r1, [pc, #20]	; (4038f0 <SystemCoreClockUpdate+0xfc>)
  4038da:	f3c3 1202 	ubfx	r2, r3, #4, #3
  4038de:	680b      	ldr	r3, [r1, #0]
  4038e0:	40d3      	lsrs	r3, r2
  4038e2:	600b      	str	r3, [r1, #0]
  4038e4:	4770      	bx	lr
  4038e6:	bf00      	nop
  4038e8:	400e0600 	.word	0x400e0600
  4038ec:	400e1810 	.word	0x400e1810
  4038f0:	20400018 	.word	0x20400018
  4038f4:	00b71b00 	.word	0x00b71b00
  4038f8:	003d0900 	.word	0x003d0900
  4038fc:	007a1200 	.word	0x007a1200
  403900:	aaaaaaab 	.word	0xaaaaaaab

00403904 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  403904:	4b12      	ldr	r3, [pc, #72]	; (403950 <system_init_flash+0x4c>)
  403906:	4298      	cmp	r0, r3
  403908:	d804      	bhi.n	403914 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40390a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40390e:	4b11      	ldr	r3, [pc, #68]	; (403954 <system_init_flash+0x50>)
  403910:	601a      	str	r2, [r3, #0]
  403912:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  403914:	4b10      	ldr	r3, [pc, #64]	; (403958 <system_init_flash+0x54>)
  403916:	4298      	cmp	r0, r3
  403918:	d803      	bhi.n	403922 <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40391a:	4a10      	ldr	r2, [pc, #64]	; (40395c <system_init_flash+0x58>)
  40391c:	4b0d      	ldr	r3, [pc, #52]	; (403954 <system_init_flash+0x50>)
  40391e:	601a      	str	r2, [r3, #0]
  403920:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  403922:	4b0f      	ldr	r3, [pc, #60]	; (403960 <system_init_flash+0x5c>)
  403924:	4298      	cmp	r0, r3
  403926:	d803      	bhi.n	403930 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403928:	4a0e      	ldr	r2, [pc, #56]	; (403964 <system_init_flash+0x60>)
  40392a:	4b0a      	ldr	r3, [pc, #40]	; (403954 <system_init_flash+0x50>)
  40392c:	601a      	str	r2, [r3, #0]
  40392e:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  403930:	4b0d      	ldr	r3, [pc, #52]	; (403968 <system_init_flash+0x64>)
  403932:	4298      	cmp	r0, r3
  403934:	d803      	bhi.n	40393e <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403936:	4a0d      	ldr	r2, [pc, #52]	; (40396c <system_init_flash+0x68>)
  403938:	4b06      	ldr	r3, [pc, #24]	; (403954 <system_init_flash+0x50>)
  40393a:	601a      	str	r2, [r3, #0]
  40393c:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40393e:	4b0c      	ldr	r3, [pc, #48]	; (403970 <system_init_flash+0x6c>)
  403940:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403942:	bf94      	ite	ls
  403944:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403948:	4a0a      	ldrhi	r2, [pc, #40]	; (403974 <system_init_flash+0x70>)
  40394a:	4b02      	ldr	r3, [pc, #8]	; (403954 <system_init_flash+0x50>)
  40394c:	601a      	str	r2, [r3, #0]
  40394e:	4770      	bx	lr
  403950:	01312cff 	.word	0x01312cff
  403954:	400e0c00 	.word	0x400e0c00
  403958:	026259ff 	.word	0x026259ff
  40395c:	04000100 	.word	0x04000100
  403960:	039386ff 	.word	0x039386ff
  403964:	04000200 	.word	0x04000200
  403968:	04c4b3ff 	.word	0x04c4b3ff
  40396c:	04000300 	.word	0x04000300
  403970:	05f5e0ff 	.word	0x05f5e0ff
  403974:	04000500 	.word	0x04000500

00403978 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403978:	4b09      	ldr	r3, [pc, #36]	; (4039a0 <_sbrk+0x28>)
  40397a:	681b      	ldr	r3, [r3, #0]
  40397c:	b913      	cbnz	r3, 403984 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  40397e:	4a09      	ldr	r2, [pc, #36]	; (4039a4 <_sbrk+0x2c>)
  403980:	4b07      	ldr	r3, [pc, #28]	; (4039a0 <_sbrk+0x28>)
  403982:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  403984:	4b06      	ldr	r3, [pc, #24]	; (4039a0 <_sbrk+0x28>)
  403986:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403988:	181a      	adds	r2, r3, r0
  40398a:	4907      	ldr	r1, [pc, #28]	; (4039a8 <_sbrk+0x30>)
  40398c:	4291      	cmp	r1, r2
  40398e:	db04      	blt.n	40399a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  403990:	4610      	mov	r0, r2
  403992:	4a03      	ldr	r2, [pc, #12]	; (4039a0 <_sbrk+0x28>)
  403994:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403996:	4618      	mov	r0, r3
  403998:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  40399a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  40399e:	4770      	bx	lr
  4039a0:	20400990 	.word	0x20400990
  4039a4:	20403220 	.word	0x20403220
  4039a8:	2045fffc 	.word	0x2045fffc

004039ac <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4039ac:	f04f 30ff 	mov.w	r0, #4294967295
  4039b0:	4770      	bx	lr
  4039b2:	bf00      	nop

004039b4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4039b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4039b8:	604b      	str	r3, [r1, #4]

	return 0;
}
  4039ba:	2000      	movs	r0, #0
  4039bc:	4770      	bx	lr
  4039be:	bf00      	nop

004039c0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4039c0:	2001      	movs	r0, #1
  4039c2:	4770      	bx	lr

004039c4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4039c4:	2000      	movs	r0, #0
  4039c6:	4770      	bx	lr

004039c8 <resolve_cb>:
 * \param[in] hostIp Server IP.
 *
 * \return None.
 */
static void resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
  4039c8:	b510      	push	{r4, lr}
  4039ca:	b082      	sub	sp, #8
	gu32HostIp = hostIp;
  4039cc:	4b07      	ldr	r3, [pc, #28]	; (4039ec <resolve_cb+0x24>)
  4039ce:	6019      	str	r1, [r3, #0]
	gbHostIpByName = true;
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  4039d0:	0e0b      	lsrs	r3, r1, #24
  4039d2:	9301      	str	r3, [sp, #4]
  4039d4:	f3c1 4307 	ubfx	r3, r1, #16, #8
  4039d8:	9300      	str	r3, [sp, #0]
  4039da:	f3c1 2307 	ubfx	r3, r1, #8, #8
  4039de:	b2ca      	uxtb	r2, r1
  4039e0:	4601      	mov	r1, r0
  4039e2:	4803      	ldr	r0, [pc, #12]	; (4039f0 <resolve_cb+0x28>)
  4039e4:	4c03      	ldr	r4, [pc, #12]	; (4039f4 <resolve_cb+0x2c>)
  4039e6:	47a0      	blx	r4
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
}
  4039e8:	b002      	add	sp, #8
  4039ea:	bd10      	pop	{r4, pc}
  4039ec:	20400f14 	.word	0x20400f14
  4039f0:	0040bdcc 	.word	0x0040bdcc
  4039f4:	004040ad 	.word	0x004040ad

004039f8 <socket_cb>:
 * \param[in] pvMsg A structure contains notification informations.
 *
 * \return None.
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
  4039f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4039fc:	b088      	sub	sp, #32
	/* Check for socket event on TCP socket. */
	if (sock == tcp_client_socket) {
  4039fe:	4b49      	ldr	r3, [pc, #292]	; (403b24 <socket_cb+0x12c>)
  403a00:	f993 4000 	ldrsb.w	r4, [r3]
  403a04:	4284      	cmp	r4, r0
  403a06:	f040 808a 	bne.w	403b1e <socket_cb+0x126>
  403a0a:	4615      	mov	r5, r2
		switch (u8Msg) {
  403a0c:	2905      	cmp	r1, #5
  403a0e:	d002      	beq.n	403a16 <socket_cb+0x1e>
  403a10:	2906      	cmp	r1, #6
  403a12:	d02b      	beq.n	403a6c <socket_cb+0x74>
  403a14:	e083      	b.n	403b1e <socket_cb+0x126>
		case SOCKET_MSG_CONNECT:
		{
			if (gbTcpConnection) {
  403a16:	4b44      	ldr	r3, [pc, #272]	; (403b28 <socket_cb+0x130>)
  403a18:	781b      	ldrb	r3, [r3, #0]
  403a1a:	2b00      	cmp	r3, #0
  403a1c:	d07f      	beq.n	403b1e <socket_cb+0x126>
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  403a1e:	4c43      	ldr	r4, [pc, #268]	; (403b2c <socket_cb+0x134>)
  403a20:	f44f 62af 	mov.w	r2, #1400	; 0x578
  403a24:	2100      	movs	r1, #0
  403a26:	4620      	mov	r0, r4
  403a28:	4b41      	ldr	r3, [pc, #260]	; (403b30 <socket_cb+0x138>)
  403a2a:	4798      	blx	r3
				sprintf((char *)gau8ReceivedBuffer, "%s", MAIN_PREFIX_BUFFER);
  403a2c:	4e41      	ldr	r6, [pc, #260]	; (403b34 <socket_cb+0x13c>)
  403a2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403a32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403a36:	6833      	ldr	r3, [r6, #0]
  403a38:	7023      	strb	r3, [r4, #0]
				tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
				if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
  403a3a:	b13d      	cbz	r5, 403a4c <socket_cb+0x54>
  403a3c:	f995 3001 	ldrsb.w	r3, [r5, #1]
  403a40:	2b00      	cmp	r3, #0
  403a42:	db03      	blt.n	403a4c <socket_cb+0x54>
					connectedON = 1;
  403a44:	2201      	movs	r2, #1
  403a46:	4b3c      	ldr	r3, [pc, #240]	; (403b38 <socket_cb+0x140>)
  403a48:	701a      	strb	r2, [r3, #0]
  403a4a:	e068      	b.n	403b1e <socket_cb+0x126>
					//printf("%s",gau8ReceivedBuffer);
				} else {
					printf("socket_cb: connect error!\r\n");
  403a4c:	483b      	ldr	r0, [pc, #236]	; (403b3c <socket_cb+0x144>)
  403a4e:	4b3c      	ldr	r3, [pc, #240]	; (403b40 <socket_cb+0x148>)
  403a50:	4798      	blx	r3
					gbTcpConnection = false;
  403a52:	2400      	movs	r4, #0
  403a54:	4b34      	ldr	r3, [pc, #208]	; (403b28 <socket_cb+0x130>)
  403a56:	701c      	strb	r4, [r3, #0]
					close(tcp_client_socket);
  403a58:	4d32      	ldr	r5, [pc, #200]	; (403b24 <socket_cb+0x12c>)
  403a5a:	f995 0000 	ldrsb.w	r0, [r5]
  403a5e:	4b39      	ldr	r3, [pc, #228]	; (403b44 <socket_cb+0x14c>)
  403a60:	4798      	blx	r3
					tcp_client_socket = -1;
  403a62:	23ff      	movs	r3, #255	; 0xff
  403a64:	702b      	strb	r3, [r5, #0]
					connectedON=0;
  403a66:	4b34      	ldr	r3, [pc, #208]	; (403b38 <socket_cb+0x140>)
  403a68:	701c      	strb	r4, [r3, #0]
  403a6a:	e058      	b.n	403b1e <socket_cb+0x126>
			char *pcEndPtr = NULL;
			char tempString[32];
			
			tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
		
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {			
  403a6c:	2a00      	cmp	r2, #0
  403a6e:	d04c      	beq.n	403b0a <socket_cb+0x112>
  403a70:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  403a74:	2b00      	cmp	r3, #0
  403a76:	dd48      	ble.n	403b0a <socket_cb+0x112>
				if(stop == 0){	
  403a78:	4b33      	ldr	r3, [pc, #204]	; (403b48 <socket_cb+0x150>)
  403a7a:	781b      	ldrb	r3, [r3, #0]
  403a7c:	b94b      	cbnz	r3, 403a92 <socket_cb+0x9a>
					recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  403a7e:	f44f 62af 	mov.w	r2, #1400	; 0x578
  403a82:	492a      	ldr	r1, [pc, #168]	; (403b2c <socket_cb+0x134>)
  403a84:	4620      	mov	r0, r4
  403a86:	4c31      	ldr	r4, [pc, #196]	; (403b4c <socket_cb+0x154>)
  403a88:	47a0      	blx	r4
					stop = 1;
  403a8a:	2201      	movs	r2, #1
  403a8c:	4b2e      	ldr	r3, [pc, #184]	; (403b48 <socket_cb+0x150>)
  403a8e:	701a      	strb	r2, [r3, #0]
  403a90:	e034      	b.n	403afc <socket_cb+0x104>
				}
				else{				
					printf("-------------- \n");
  403a92:	482f      	ldr	r0, [pc, #188]	; (403b50 <socket_cb+0x158>)
  403a94:	4e2a      	ldr	r6, [pc, #168]	; (403b40 <socket_cb+0x148>)
  403a96:	47b0      	blx	r6
					pcIndxPtr = strstr(pstrRecv->pu8Buffer, "<p>temp:");
  403a98:	492e      	ldr	r1, [pc, #184]	; (403b54 <socket_cb+0x15c>)
  403a9a:	6828      	ldr	r0, [r5, #0]
  403a9c:	4b2e      	ldr	r3, [pc, #184]	; (403b58 <socket_cb+0x160>)
  403a9e:	4798      	blx	r3
  403aa0:	4604      	mov	r4, r0
					printf(tempString);
  403aa2:	4668      	mov	r0, sp
  403aa4:	47b0      	blx	r6
					sprintf(tempString, "%c%c", *(pcIndxPtr+8), *(pcIndxPtr+9));
  403aa6:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 403b80 <socket_cb+0x188>
  403aaa:	7a63      	ldrb	r3, [r4, #9]
  403aac:	7a22      	ldrb	r2, [r4, #8]
  403aae:	4641      	mov	r1, r8
  403ab0:	4668      	mov	r0, sp
  403ab2:	4f2a      	ldr	r7, [pc, #168]	; (403b5c <socket_cb+0x164>)
  403ab4:	47b8      	blx	r7
					globalTemp1  = atoi(tempString);
  403ab6:	4668      	mov	r0, sp
  403ab8:	4d29      	ldr	r5, [pc, #164]	; (403b60 <socket_cb+0x168>)
  403aba:	47a8      	blx	r5
  403abc:	4b29      	ldr	r3, [pc, #164]	; (403b64 <socket_cb+0x16c>)
  403abe:	7018      	strb	r0, [r3, #0]
					printf("Temp 1 = %d\n", globalTemp1);
  403ac0:	b2c1      	uxtb	r1, r0
  403ac2:	4829      	ldr	r0, [pc, #164]	; (403b68 <socket_cb+0x170>)
  403ac4:	47b0      	blx	r6
					sprintf(tempString, "%c%c", *(pcIndxPtr+11), *(pcIndxPtr+12));
  403ac6:	7b23      	ldrb	r3, [r4, #12]
  403ac8:	7ae2      	ldrb	r2, [r4, #11]
  403aca:	4641      	mov	r1, r8
  403acc:	4668      	mov	r0, sp
  403ace:	47b8      	blx	r7
					globalTemp2  = atoi(tempString);
  403ad0:	4668      	mov	r0, sp
  403ad2:	47a8      	blx	r5
  403ad4:	4b25      	ldr	r3, [pc, #148]	; (403b6c <socket_cb+0x174>)
  403ad6:	7018      	strb	r0, [r3, #0]
					printf("Temp 2 = %d\n", globalTemp2);
  403ad8:	b2c1      	uxtb	r1, r0
  403ada:	4825      	ldr	r0, [pc, #148]	; (403b70 <socket_cb+0x178>)
  403adc:	47b0      	blx	r6
					sprintf(tempString, "%c%c", *(pcIndxPtr+14), *(pcIndxPtr+15));
  403ade:	7be3      	ldrb	r3, [r4, #15]
  403ae0:	7ba2      	ldrb	r2, [r4, #14]
  403ae2:	4641      	mov	r1, r8
  403ae4:	4668      	mov	r0, sp
  403ae6:	47b8      	blx	r7
					globalTemp3  = atoi(tempString);
  403ae8:	4668      	mov	r0, sp
  403aea:	47a8      	blx	r5
  403aec:	4b21      	ldr	r3, [pc, #132]	; (403b74 <socket_cb+0x17c>)
  403aee:	7018      	strb	r0, [r3, #0]
					printf("Temp 3 = %d\n", globalTemp3);
  403af0:	b2c1      	uxtb	r1, r0
  403af2:	4821      	ldr	r0, [pc, #132]	; (403b78 <socket_cb+0x180>)
  403af4:	47b0      	blx	r6
					stop = 0;
  403af6:	2200      	movs	r2, #0
  403af8:	4b13      	ldr	r3, [pc, #76]	; (403b48 <socket_cb+0x150>)
  403afa:	701a      	strb	r2, [r3, #0]
				}
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  403afc:	f44f 62af 	mov.w	r2, #1400	; 0x578
  403b00:	2100      	movs	r1, #0
  403b02:	480a      	ldr	r0, [pc, #40]	; (403b2c <socket_cb+0x134>)
  403b04:	4b0a      	ldr	r3, [pc, #40]	; (403b30 <socket_cb+0x138>)
  403b06:	4798      	blx	r3
  403b08:	e009      	b.n	403b1e <socket_cb+0x126>
			
			} else {
				printf("socket_cb: recv error!\r\n");
  403b0a:	481c      	ldr	r0, [pc, #112]	; (403b7c <socket_cb+0x184>)
  403b0c:	4b0c      	ldr	r3, [pc, #48]	; (403b40 <socket_cb+0x148>)
  403b0e:	4798      	blx	r3
				close(tcp_client_socket);
  403b10:	4c04      	ldr	r4, [pc, #16]	; (403b24 <socket_cb+0x12c>)
  403b12:	f994 0000 	ldrsb.w	r0, [r4]
  403b16:	4b0b      	ldr	r3, [pc, #44]	; (403b44 <socket_cb+0x14c>)
  403b18:	4798      	blx	r3
				tcp_client_socket = -1;
  403b1a:	23ff      	movs	r3, #255	; 0xff
  403b1c:	7023      	strb	r3, [r4, #0]

		default:
			break;
		}
	}
}
  403b1e:	b008      	add	sp, #32
  403b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b24:	2040001c 	.word	0x2040001c
  403b28:	20400f10 	.word	0x20400f10
  403b2c:	20400998 	.word	0x20400998
  403b30:	004040d5 	.word	0x004040d5
  403b34:	0040bdfc 	.word	0x0040bdfc
  403b38:	20400f18 	.word	0x20400f18
  403b3c:	0040be20 	.word	0x0040be20
  403b40:	004040ad 	.word	0x004040ad
  403b44:	00402ae1 	.word	0x00402ae1
  403b48:	20400994 	.word	0x20400994
  403b4c:	00402a3d 	.word	0x00402a3d
  403b50:	0040be3c 	.word	0x0040be3c
  403b54:	0040be50 	.word	0x0040be50
  403b58:	004046d5 	.word	0x004046d5
  403b5c:	004042d1 	.word	0x004042d1
  403b60:	00404055 	.word	0x00404055
  403b64:	2040001d 	.word	0x2040001d
  403b68:	0040be64 	.word	0x0040be64
  403b6c:	2040001e 	.word	0x2040001e
  403b70:	0040be74 	.word	0x0040be74
  403b74:	2040001f 	.word	0x2040001f
  403b78:	0040be84 	.word	0x0040be84
  403b7c:	0040be94 	.word	0x0040be94
  403b80:	0040be5c 	.word	0x0040be5c

00403b84 <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters.
 *
 * \return None.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  403b84:	b510      	push	{r4, lr}
  403b86:	b082      	sub	sp, #8
	switch (u8MsgType) {
  403b88:	282c      	cmp	r0, #44	; 0x2c
  403b8a:	d002      	beq.n	403b92 <wifi_cb+0xe>
  403b8c:	2832      	cmp	r0, #50	; 0x32
  403b8e:	d011      	beq.n	403bb4 <wifi_cb+0x30>
  403b90:	e01c      	b.n	403bcc <wifi_cb+0x48>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  403b92:	780b      	ldrb	r3, [r1, #0]
  403b94:	2b01      	cmp	r3, #1
  403b96:	d105      	bne.n	403ba4 <wifi_cb+0x20>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
  403b98:	480d      	ldr	r0, [pc, #52]	; (403bd0 <wifi_cb+0x4c>)
  403b9a:	4b0e      	ldr	r3, [pc, #56]	; (403bd4 <wifi_cb+0x50>)
  403b9c:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
  403b9e:	4b0e      	ldr	r3, [pc, #56]	; (403bd8 <wifi_cb+0x54>)
  403ba0:	4798      	blx	r3
  403ba2:	e013      	b.n	403bcc <wifi_cb+0x48>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  403ba4:	b993      	cbnz	r3, 403bcc <wifi_cb+0x48>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
  403ba6:	480d      	ldr	r0, [pc, #52]	; (403bdc <wifi_cb+0x58>)
  403ba8:	4b0a      	ldr	r3, [pc, #40]	; (403bd4 <wifi_cb+0x50>)
  403baa:	4798      	blx	r3
			gbConnectedWifi = false;
  403bac:	2200      	movs	r2, #0
  403bae:	4b0c      	ldr	r3, [pc, #48]	; (403be0 <wifi_cb+0x5c>)
  403bb0:	701a      	strb	r2, [r3, #0]
  403bb2:	e00b      	b.n	403bcc <wifi_cb+0x48>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
  403bb4:	788b      	ldrb	r3, [r1, #2]
  403bb6:	784a      	ldrb	r2, [r1, #1]
  403bb8:	7808      	ldrb	r0, [r1, #0]
  403bba:	78c9      	ldrb	r1, [r1, #3]
  403bbc:	9100      	str	r1, [sp, #0]
  403bbe:	4601      	mov	r1, r0
  403bc0:	4808      	ldr	r0, [pc, #32]	; (403be4 <wifi_cb+0x60>)
  403bc2:	4c04      	ldr	r4, [pc, #16]	; (403bd4 <wifi_cb+0x50>)
  403bc4:	47a0      	blx	r4
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
		gbConnectedWifi = true;
  403bc6:	2201      	movs	r2, #1
  403bc8:	4b05      	ldr	r3, [pc, #20]	; (403be0 <wifi_cb+0x5c>)
  403bca:	701a      	strb	r2, [r3, #0]
	default:
	{
		break;
	}
	}
}
  403bcc:	b002      	add	sp, #8
  403bce:	bd10      	pop	{r4, pc}
  403bd0:	0040beb0 	.word	0x0040beb0
  403bd4:	004040ad 	.word	0x004040ad
  403bd8:	004013a1 	.word	0x004013a1
  403bdc:	0040bed0 	.word	0x0040bed0
  403be0:	20400f11 	.word	0x20400f11
  403be4:	0040bef4 	.word	0x0040bef4

00403be8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403be8:	b5f0      	push	{r4, r5, r6, r7, lr}
  403bea:	b083      	sub	sp, #12
  403bec:	4605      	mov	r5, r0
  403bee:	460c      	mov	r4, r1
	uint32_t val = 0;
  403bf0:	2300      	movs	r3, #0
  403bf2:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403bf4:	4b29      	ldr	r3, [pc, #164]	; (403c9c <usart_serial_getchar+0xb4>)
  403bf6:	4298      	cmp	r0, r3
  403bf8:	d107      	bne.n	403c0a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  403bfa:	461f      	mov	r7, r3
  403bfc:	4e28      	ldr	r6, [pc, #160]	; (403ca0 <usart_serial_getchar+0xb8>)
  403bfe:	4621      	mov	r1, r4
  403c00:	4638      	mov	r0, r7
  403c02:	47b0      	blx	r6
  403c04:	2800      	cmp	r0, #0
  403c06:	d1fa      	bne.n	403bfe <usart_serial_getchar+0x16>
  403c08:	e015      	b.n	403c36 <usart_serial_getchar+0x4e>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403c0a:	4b26      	ldr	r3, [pc, #152]	; (403ca4 <usart_serial_getchar+0xbc>)
  403c0c:	4298      	cmp	r0, r3
  403c0e:	d107      	bne.n	403c20 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  403c10:	461f      	mov	r7, r3
  403c12:	4e23      	ldr	r6, [pc, #140]	; (403ca0 <usart_serial_getchar+0xb8>)
  403c14:	4621      	mov	r1, r4
  403c16:	4638      	mov	r0, r7
  403c18:	47b0      	blx	r6
  403c1a:	2800      	cmp	r0, #0
  403c1c:	d1fa      	bne.n	403c14 <usart_serial_getchar+0x2c>
  403c1e:	e015      	b.n	403c4c <usart_serial_getchar+0x64>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403c20:	4b21      	ldr	r3, [pc, #132]	; (403ca8 <usart_serial_getchar+0xc0>)
  403c22:	4298      	cmp	r0, r3
  403c24:	d107      	bne.n	403c36 <usart_serial_getchar+0x4e>
		while (uart_read((Uart*)p_usart, data));
  403c26:	461f      	mov	r7, r3
  403c28:	4e1d      	ldr	r6, [pc, #116]	; (403ca0 <usart_serial_getchar+0xb8>)
  403c2a:	4621      	mov	r1, r4
  403c2c:	4638      	mov	r0, r7
  403c2e:	47b0      	blx	r6
  403c30:	2800      	cmp	r0, #0
  403c32:	d1fa      	bne.n	403c2a <usart_serial_getchar+0x42>
  403c34:	e017      	b.n	403c66 <usart_serial_getchar+0x7e>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403c36:	4b1d      	ldr	r3, [pc, #116]	; (403cac <usart_serial_getchar+0xc4>)
  403c38:	429d      	cmp	r5, r3
  403c3a:	d107      	bne.n	403c4c <usart_serial_getchar+0x64>
		while (uart_read((Uart*)p_usart, data));
  403c3c:	461f      	mov	r7, r3
  403c3e:	4e18      	ldr	r6, [pc, #96]	; (403ca0 <usart_serial_getchar+0xb8>)
  403c40:	4621      	mov	r1, r4
  403c42:	4638      	mov	r0, r7
  403c44:	47b0      	blx	r6
  403c46:	2800      	cmp	r0, #0
  403c48:	d1fa      	bne.n	403c40 <usart_serial_getchar+0x58>
  403c4a:	e019      	b.n	403c80 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403c4c:	4b18      	ldr	r3, [pc, #96]	; (403cb0 <usart_serial_getchar+0xc8>)
  403c4e:	429d      	cmp	r5, r3
  403c50:	d109      	bne.n	403c66 <usart_serial_getchar+0x7e>
		while (usart_read(p_usart, &val));
  403c52:	461e      	mov	r6, r3
  403c54:	4d17      	ldr	r5, [pc, #92]	; (403cb4 <usart_serial_getchar+0xcc>)
  403c56:	a901      	add	r1, sp, #4
  403c58:	4630      	mov	r0, r6
  403c5a:	47a8      	blx	r5
  403c5c:	2800      	cmp	r0, #0
  403c5e:	d1fa      	bne.n	403c56 <usart_serial_getchar+0x6e>
		*data = (uint8_t)(val & 0xFF);
  403c60:	9b01      	ldr	r3, [sp, #4]
  403c62:	7023      	strb	r3, [r4, #0]
  403c64:	e018      	b.n	403c98 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403c66:	4b14      	ldr	r3, [pc, #80]	; (403cb8 <usart_serial_getchar+0xd0>)
  403c68:	429d      	cmp	r5, r3
  403c6a:	d109      	bne.n	403c80 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
  403c6c:	461e      	mov	r6, r3
  403c6e:	4d11      	ldr	r5, [pc, #68]	; (403cb4 <usart_serial_getchar+0xcc>)
  403c70:	a901      	add	r1, sp, #4
  403c72:	4630      	mov	r0, r6
  403c74:	47a8      	blx	r5
  403c76:	2800      	cmp	r0, #0
  403c78:	d1fa      	bne.n	403c70 <usart_serial_getchar+0x88>
		*data = (uint8_t)(val & 0xFF);
  403c7a:	9b01      	ldr	r3, [sp, #4]
  403c7c:	7023      	strb	r3, [r4, #0]
  403c7e:	e00b      	b.n	403c98 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403c80:	4b0e      	ldr	r3, [pc, #56]	; (403cbc <usart_serial_getchar+0xd4>)
  403c82:	429d      	cmp	r5, r3
  403c84:	d108      	bne.n	403c98 <usart_serial_getchar+0xb0>
		while (usart_read(p_usart, &val));
  403c86:	461e      	mov	r6, r3
  403c88:	4d0a      	ldr	r5, [pc, #40]	; (403cb4 <usart_serial_getchar+0xcc>)
  403c8a:	a901      	add	r1, sp, #4
  403c8c:	4630      	mov	r0, r6
  403c8e:	47a8      	blx	r5
  403c90:	2800      	cmp	r0, #0
  403c92:	d1fa      	bne.n	403c8a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
  403c94:	9b01      	ldr	r3, [sp, #4]
  403c96:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403c98:	b003      	add	sp, #12
  403c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403c9c:	400e0800 	.word	0x400e0800
  403ca0:	004035e5 	.word	0x004035e5
  403ca4:	400e0a00 	.word	0x400e0a00
  403ca8:	400e1a00 	.word	0x400e1a00
  403cac:	400e1c00 	.word	0x400e1c00
  403cb0:	40024000 	.word	0x40024000
  403cb4:	004036fd 	.word	0x004036fd
  403cb8:	40028000 	.word	0x40028000
  403cbc:	4002c000 	.word	0x4002c000

00403cc0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  403cc0:	b570      	push	{r4, r5, r6, lr}
  403cc2:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403cc4:	4b2a      	ldr	r3, [pc, #168]	; (403d70 <usart_serial_putchar+0xb0>)
  403cc6:	4298      	cmp	r0, r3
  403cc8:	d108      	bne.n	403cdc <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  403cca:	461e      	mov	r6, r3
  403ccc:	4d29      	ldr	r5, [pc, #164]	; (403d74 <usart_serial_putchar+0xb4>)
  403cce:	4621      	mov	r1, r4
  403cd0:	4630      	mov	r0, r6
  403cd2:	47a8      	blx	r5
  403cd4:	2800      	cmp	r0, #0
  403cd6:	d1fa      	bne.n	403cce <usart_serial_putchar+0xe>
		return 1;
  403cd8:	2001      	movs	r0, #1
  403cda:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403cdc:	4b26      	ldr	r3, [pc, #152]	; (403d78 <usart_serial_putchar+0xb8>)
  403cde:	4298      	cmp	r0, r3
  403ce0:	d108      	bne.n	403cf4 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  403ce2:	461e      	mov	r6, r3
  403ce4:	4d23      	ldr	r5, [pc, #140]	; (403d74 <usart_serial_putchar+0xb4>)
  403ce6:	4621      	mov	r1, r4
  403ce8:	4630      	mov	r0, r6
  403cea:	47a8      	blx	r5
  403cec:	2800      	cmp	r0, #0
  403cee:	d1fa      	bne.n	403ce6 <usart_serial_putchar+0x26>
		return 1;
  403cf0:	2001      	movs	r0, #1
  403cf2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403cf4:	4b21      	ldr	r3, [pc, #132]	; (403d7c <usart_serial_putchar+0xbc>)
  403cf6:	4298      	cmp	r0, r3
  403cf8:	d108      	bne.n	403d0c <usart_serial_putchar+0x4c>
		while (uart_write((Uart*)p_usart, c)!=0);
  403cfa:	461e      	mov	r6, r3
  403cfc:	4d1d      	ldr	r5, [pc, #116]	; (403d74 <usart_serial_putchar+0xb4>)
  403cfe:	4621      	mov	r1, r4
  403d00:	4630      	mov	r0, r6
  403d02:	47a8      	blx	r5
  403d04:	2800      	cmp	r0, #0
  403d06:	d1fa      	bne.n	403cfe <usart_serial_putchar+0x3e>
		return 1;
  403d08:	2001      	movs	r0, #1
  403d0a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403d0c:	4b1c      	ldr	r3, [pc, #112]	; (403d80 <usart_serial_putchar+0xc0>)
  403d0e:	4298      	cmp	r0, r3
  403d10:	d108      	bne.n	403d24 <usart_serial_putchar+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
  403d12:	461e      	mov	r6, r3
  403d14:	4d17      	ldr	r5, [pc, #92]	; (403d74 <usart_serial_putchar+0xb4>)
  403d16:	4621      	mov	r1, r4
  403d18:	4630      	mov	r0, r6
  403d1a:	47a8      	blx	r5
  403d1c:	2800      	cmp	r0, #0
  403d1e:	d1fa      	bne.n	403d16 <usart_serial_putchar+0x56>
		return 1;
  403d20:	2001      	movs	r0, #1
  403d22:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403d24:	4b17      	ldr	r3, [pc, #92]	; (403d84 <usart_serial_putchar+0xc4>)
  403d26:	4298      	cmp	r0, r3
  403d28:	d108      	bne.n	403d3c <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  403d2a:	461e      	mov	r6, r3
  403d2c:	4d16      	ldr	r5, [pc, #88]	; (403d88 <usart_serial_putchar+0xc8>)
  403d2e:	4621      	mov	r1, r4
  403d30:	4630      	mov	r0, r6
  403d32:	47a8      	blx	r5
  403d34:	2800      	cmp	r0, #0
  403d36:	d1fa      	bne.n	403d2e <usart_serial_putchar+0x6e>
		return 1;
  403d38:	2001      	movs	r0, #1
  403d3a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403d3c:	4b13      	ldr	r3, [pc, #76]	; (403d8c <usart_serial_putchar+0xcc>)
  403d3e:	4298      	cmp	r0, r3
  403d40:	d108      	bne.n	403d54 <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  403d42:	461e      	mov	r6, r3
  403d44:	4d10      	ldr	r5, [pc, #64]	; (403d88 <usart_serial_putchar+0xc8>)
  403d46:	4621      	mov	r1, r4
  403d48:	4630      	mov	r0, r6
  403d4a:	47a8      	blx	r5
  403d4c:	2800      	cmp	r0, #0
  403d4e:	d1fa      	bne.n	403d46 <usart_serial_putchar+0x86>
		return 1;
  403d50:	2001      	movs	r0, #1
  403d52:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403d54:	4b0e      	ldr	r3, [pc, #56]	; (403d90 <usart_serial_putchar+0xd0>)
  403d56:	4298      	cmp	r0, r3
  403d58:	d108      	bne.n	403d6c <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  403d5a:	461e      	mov	r6, r3
  403d5c:	4d0a      	ldr	r5, [pc, #40]	; (403d88 <usart_serial_putchar+0xc8>)
  403d5e:	4621      	mov	r1, r4
  403d60:	4630      	mov	r0, r6
  403d62:	47a8      	blx	r5
  403d64:	2800      	cmp	r0, #0
  403d66:	d1fa      	bne.n	403d5e <usart_serial_putchar+0x9e>
		return 1;
  403d68:	2001      	movs	r0, #1
  403d6a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  403d6c:	2000      	movs	r0, #0
}
  403d6e:	bd70      	pop	{r4, r5, r6, pc}
  403d70:	400e0800 	.word	0x400e0800
  403d74:	004035d1 	.word	0x004035d1
  403d78:	400e0a00 	.word	0x400e0a00
  403d7c:	400e1a00 	.word	0x400e1a00
  403d80:	400e1c00 	.word	0x400e1c00
  403d84:	40024000 	.word	0x40024000
  403d88:	004036e5 	.word	0x004036e5
  403d8c:	40028000 	.word	0x40028000
  403d90:	4002c000 	.word	0x4002c000

00403d94 <inet_aton>:
 * This replaces inet_addr, the return value from which
 * cannot distinguish between failure and a local broadcast address.
 */
 /* http://www.cs.cmu.edu/afs/cs/academic/class/15213-f00/unpv12e/libfree/inet_aton.c */
int inet_aton(const char *cp, in_addr *ap)
{
  403d94:	b4f0      	push	{r4, r5, r6, r7}
  403d96:	3801      	subs	r0, #1
  int dots = 0;
  register u_long acc = 0, addr = 0;
  403d98:	2400      	movs	r4, #0
  403d9a:	4622      	mov	r2, r4
 * cannot distinguish between failure and a local broadcast address.
 */
 /* http://www.cs.cmu.edu/afs/cs/academic/class/15213-f00/unpv12e/libfree/inet_aton.c */
int inet_aton(const char *cp, in_addr *ap)
{
  int dots = 0;
  403d9c:	4625      	mov	r5, r4
	    case '\0':
	        if (acc > 255) {
		    return 0;
	        }
	        addr = addr << 8 | acc;
	        acc = 0;
  403d9e:	4626      	mov	r6, r4
{
  int dots = 0;
  register u_long acc = 0, addr = 0;

  do {
	  register char cc = *cp;
  403da0:	f810 3f01 	ldrb.w	r3, [r0, #1]!

	  switch (cc) {
  403da4:	2b2e      	cmp	r3, #46	; 0x2e
  403da6:	d00b      	beq.n	403dc0 <inet_aton+0x2c>
  403da8:	d801      	bhi.n	403dae <inet_aton+0x1a>
  403daa:	b163      	cbz	r3, 403dc6 <inet_aton+0x32>
  403dac:	e027      	b.n	403dfe <inet_aton+0x6a>
  403dae:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  403db2:	2f09      	cmp	r7, #9
  403db4:	d823      	bhi.n	403dfe <inet_aton+0x6a>
	    case '5':
	    case '6':
	    case '7':
	    case '8':
	    case '9':
	        acc = acc * 10 + (cc - '0');
  403db6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  403dba:	eb07 0242 	add.w	r2, r7, r2, lsl #1
	        break;
  403dbe:	e007      	b.n	403dd0 <inet_aton+0x3c>

	    case '.':
	        if (++dots > 3) {
  403dc0:	3501      	adds	r5, #1
  403dc2:	2d03      	cmp	r5, #3
  403dc4:	dc1d      	bgt.n	403e02 <inet_aton+0x6e>
		    return 0;
	        }
	        /* Fall through */

	    case '\0':
	        if (acc > 255) {
  403dc6:	2aff      	cmp	r2, #255	; 0xff
  403dc8:	d81d      	bhi.n	403e06 <inet_aton+0x72>
		    return 0;
	        }
	        addr = addr << 8 | acc;
  403dca:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	        acc = 0;
  403dce:	4632      	mov	r2, r6
	        break;

	    default:
	        return 0;
    }
  } while (*cp++) ;
  403dd0:	2b00      	cmp	r3, #0
  403dd2:	d1e5      	bne.n	403da0 <inet_aton+0xc>

  /* Normalize the address */
  if (dots < 3) {
  403dd4:	2d02      	cmp	r5, #2
  403dd6:	dc03      	bgt.n	403de0 <inet_aton+0x4c>
	  addr <<= 8 * (3 - dots) ;
  403dd8:	f1c5 0303 	rsb	r3, r5, #3
  403ddc:	00db      	lsls	r3, r3, #3
  403dde:	409c      	lsls	r4, r3
  }

  /* Store it if requested */
  if (ap) {
  403de0:	b199      	cbz	r1, 403e0a <inet_aton+0x76>
	  ap->s_addr = _htonl(addr);
  403de2:	0e22      	lsrs	r2, r4, #24
  403de4:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  403de8:	0223      	lsls	r3, r4, #8
  403dea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  403dee:	431a      	orrs	r2, r3
  403df0:	0a23      	lsrs	r3, r4, #8
  403df2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  403df6:	4313      	orrs	r3, r2
  403df8:	600b      	str	r3, [r1, #0]
  }

  return 1;    
  403dfa:	2001      	movs	r0, #1
  403dfc:	e006      	b.n	403e0c <inet_aton+0x78>
	        addr = addr << 8 | acc;
	        acc = 0;
	        break;

	    default:
	        return 0;
  403dfe:	2000      	movs	r0, #0
  403e00:	e004      	b.n	403e0c <inet_aton+0x78>
	        acc = acc * 10 + (cc - '0');
	        break;

	    case '.':
	        if (++dots > 3) {
		    return 0;
  403e02:	2000      	movs	r0, #0
  403e04:	e002      	b.n	403e0c <inet_aton+0x78>
	        }
	        /* Fall through */

	    case '\0':
	        if (acc > 255) {
		    return 0;
  403e06:	2000      	movs	r0, #0
  403e08:	e000      	b.n	403e0c <inet_aton+0x78>
  /* Store it if requested */
  if (ap) {
	  ap->s_addr = _htonl(addr);
  }

  return 1;    
  403e0a:	2001      	movs	r0, #1
}
  403e0c:	bcf0      	pop	{r4, r5, r6, r7}
  403e0e:	4770      	bx	lr

00403e10 <TC1_Handler>:
	tc_enable_interrupt(TC0, channel, TC_IER_CPCS);

	/* Inicializa o canal 0 do TC */
	tc_start(TC0, channel);
}
void TC1_Handler(void){
  403e10:	b570      	push	{r4, r5, r6, lr}
  403e12:	b082      	sub	sp, #8
	volatile uint32_t ul_dummy;
	
 
	ul_dummy = tc_get_status(TC0, 1);
  403e14:	2101      	movs	r1, #1
  403e16:	4814      	ldr	r0, [pc, #80]	; (403e68 <TC1_Handler+0x58>)
  403e18:	4b14      	ldr	r3, [pc, #80]	; (403e6c <TC1_Handler+0x5c>)
  403e1a:	4798      	blx	r3
  403e1c:	9001      	str	r0, [sp, #4]

	UNUSED(ul_dummy);
  403e1e:	9b01      	ldr	r3, [sp, #4]
	
	
	if(connectedON){
  403e20:	4b13      	ldr	r3, [pc, #76]	; (403e70 <TC1_Handler+0x60>)
  403e22:	781b      	ldrb	r3, [r3, #0]
  403e24:	b1eb      	cbz	r3, 403e62 <TC1_Handler+0x52>
		printf("send : %d \n",gau8ReceivedBuffer );
  403e26:	4c13      	ldr	r4, [pc, #76]	; (403e74 <TC1_Handler+0x64>)
  403e28:	4621      	mov	r1, r4
  403e2a:	4813      	ldr	r0, [pc, #76]	; (403e78 <TC1_Handler+0x68>)
  403e2c:	4b13      	ldr	r3, [pc, #76]	; (403e7c <TC1_Handler+0x6c>)
  403e2e:	4798      	blx	r3
		send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  403e30:	4620      	mov	r0, r4
  403e32:	4b13      	ldr	r3, [pc, #76]	; (403e80 <TC1_Handler+0x70>)
  403e34:	4798      	blx	r3
  403e36:	4d13      	ldr	r5, [pc, #76]	; (403e84 <TC1_Handler+0x74>)
  403e38:	2300      	movs	r3, #0
  403e3a:	b282      	uxth	r2, r0
  403e3c:	4621      	mov	r1, r4
  403e3e:	f995 0000 	ldrsb.w	r0, [r5]
  403e42:	4e11      	ldr	r6, [pc, #68]	; (403e88 <TC1_Handler+0x78>)
  403e44:	47b0      	blx	r6
		memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  403e46:	f44f 66af 	mov.w	r6, #1400	; 0x578
  403e4a:	4632      	mov	r2, r6
  403e4c:	2100      	movs	r1, #0
  403e4e:	4620      	mov	r0, r4
  403e50:	4b0e      	ldr	r3, [pc, #56]	; (403e8c <TC1_Handler+0x7c>)
  403e52:	4798      	blx	r3
		recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  403e54:	2300      	movs	r3, #0
  403e56:	4632      	mov	r2, r6
  403e58:	4621      	mov	r1, r4
  403e5a:	f995 0000 	ldrsb.w	r0, [r5]
  403e5e:	4c0c      	ldr	r4, [pc, #48]	; (403e90 <TC1_Handler+0x80>)
  403e60:	47a0      	blx	r4
	}
}
  403e62:	b002      	add	sp, #8
  403e64:	bd70      	pop	{r4, r5, r6, pc}
  403e66:	bf00      	nop
  403e68:	4000c000 	.word	0x4000c000
  403e6c:	004035c9 	.word	0x004035c9
  403e70:	20400f18 	.word	0x20400f18
  403e74:	20400998 	.word	0x20400998
  403e78:	0040bf1c 	.word	0x0040bf1c
  403e7c:	004040ad 	.word	0x004040ad
  403e80:	00404341 	.word	0x00404341
  403e84:	2040001c 	.word	0x2040001c
  403e88:	004029a1 	.word	0x004029a1
  403e8c:	004040d5 	.word	0x004040d5
  403e90:	00402a3d 	.word	0x00402a3d

00403e94 <main>:
 * Initialize system, UART console, network then start weather client.
 *
 * \return Program return value.
 */
int main(void)
{
  403e94:	b570      	push	{r4, r5, r6, lr}
  403e96:	b092      	sub	sp, #72	; 0x48
	uint8_t mac_addr[6];
	uint8_t u8IsMacAddrValid;
	struct sockaddr_in addr_in;

	/* Initialize the board. */
	sysclk_init();
  403e98:	4b47      	ldr	r3, [pc, #284]	; (403fb8 <main+0x124>)
  403e9a:	4798      	blx	r3
	board_init();
  403e9c:	4b47      	ldr	r3, [pc, #284]	; (403fbc <main+0x128>)
  403e9e:	4798      	blx	r3
  403ea0:	200e      	movs	r0, #14
  403ea2:	4e47      	ldr	r6, [pc, #284]	; (403fc0 <main+0x12c>)
  403ea4:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403ea6:	4d47      	ldr	r5, [pc, #284]	; (403fc4 <main+0x130>)
  403ea8:	4b47      	ldr	r3, [pc, #284]	; (403fc8 <main+0x134>)
  403eaa:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403eac:	4a47      	ldr	r2, [pc, #284]	; (403fcc <main+0x138>)
  403eae:	4b48      	ldr	r3, [pc, #288]	; (403fd0 <main+0x13c>)
  403eb0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403eb2:	4a48      	ldr	r2, [pc, #288]	; (403fd4 <main+0x140>)
  403eb4:	4b48      	ldr	r3, [pc, #288]	; (403fd8 <main+0x144>)
  403eb6:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  403eb8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403ebc:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  403ebe:	23c0      	movs	r3, #192	; 0xc0
  403ec0:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  403ec2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403ec6:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  403ec8:	2400      	movs	r4, #0
  403eca:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403ecc:	9406      	str	r4, [sp, #24]
  403ece:	200e      	movs	r0, #14
  403ed0:	47b0      	blx	r6
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  403ed2:	4a42      	ldr	r2, [pc, #264]	; (403fdc <main+0x148>)
  403ed4:	a902      	add	r1, sp, #8
  403ed6:	4628      	mov	r0, r5
  403ed8:	4b41      	ldr	r3, [pc, #260]	; (403fe0 <main+0x14c>)
  403eda:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  403edc:	4628      	mov	r0, r5
  403ede:	4b41      	ldr	r3, [pc, #260]	; (403fe4 <main+0x150>)
  403ee0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403ee2:	4628      	mov	r0, r5
  403ee4:	4b40      	ldr	r3, [pc, #256]	; (403fe8 <main+0x154>)
  403ee6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403ee8:	4e40      	ldr	r6, [pc, #256]	; (403fec <main+0x158>)
  403eea:	6833      	ldr	r3, [r6, #0]
  403eec:	4621      	mov	r1, r4
  403eee:	6898      	ldr	r0, [r3, #8]
  403ef0:	4d3f      	ldr	r5, [pc, #252]	; (403ff0 <main+0x15c>)
  403ef2:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403ef4:	6833      	ldr	r3, [r6, #0]
  403ef6:	4621      	mov	r1, r4
  403ef8:	6858      	ldr	r0, [r3, #4]
  403efa:	47a8      	blx	r5
	
	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  403efc:	483d      	ldr	r0, [pc, #244]	; (403ff4 <main+0x160>)
  403efe:	4b3e      	ldr	r3, [pc, #248]	; (403ff8 <main+0x164>)
  403f00:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
  403f02:	4b3e      	ldr	r3, [pc, #248]	; (403ffc <main+0x168>)
  403f04:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  403f06:	940d      	str	r4, [sp, #52]	; 0x34
  403f08:	940e      	str	r4, [sp, #56]	; 0x38
  403f0a:	940f      	str	r4, [sp, #60]	; 0x3c
  403f0c:	9410      	str	r4, [sp, #64]	; 0x40
  403f0e:	9411      	str	r4, [sp, #68]	; 0x44

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  403f10:	4b3b      	ldr	r3, [pc, #236]	; (404000 <main+0x16c>)
  403f12:	930c      	str	r3, [sp, #48]	; 0x30
	ret = m2m_wifi_init(&param);
  403f14:	a80c      	add	r0, sp, #48	; 0x30
  403f16:	4b3b      	ldr	r3, [pc, #236]	; (404004 <main+0x170>)
  403f18:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403f1a:	b120      	cbz	r0, 403f26 <main+0x92>
  403f1c:	4601      	mov	r1, r0
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  403f1e:	483a      	ldr	r0, [pc, #232]	; (404008 <main+0x174>)
  403f20:	4b35      	ldr	r3, [pc, #212]	; (403ff8 <main+0x164>)
  403f22:	4798      	blx	r3
  403f24:	e7fe      	b.n	403f24 <main+0x90>
		while (1) {
		}
	}

	/* Initialize socket API. */
	socketInit();
  403f26:	4b39      	ldr	r3, [pc, #228]	; (40400c <main+0x178>)
  403f28:	4798      	blx	r3
	registerSocketCallback(socket_cb, resolve_cb);
  403f2a:	4939      	ldr	r1, [pc, #228]	; (404010 <main+0x17c>)
  403f2c:	4839      	ldr	r0, [pc, #228]	; (404014 <main+0x180>)
  403f2e:	4b3a      	ldr	r3, [pc, #232]	; (404018 <main+0x184>)
  403f30:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);	
  403f32:	23ff      	movs	r3, #255	; 0xff
  403f34:	9300      	str	r3, [sp, #0]
  403f36:	4b39      	ldr	r3, [pc, #228]	; (40401c <main+0x188>)
  403f38:	2202      	movs	r2, #2
  403f3a:	210a      	movs	r1, #10
  403f3c:	4838      	ldr	r0, [pc, #224]	; (404020 <main+0x18c>)
  403f3e:	4c39      	ldr	r4, [pc, #228]	; (404024 <main+0x190>)
  403f40:	47a0      	blx	r4
	/** Configura timer 1 */
	//TC1_init(2);
	

	while (1) {
		m2m_wifi_handle_events(NULL);
  403f42:	4d39      	ldr	r5, [pc, #228]	; (404028 <main+0x194>)

		if (gbConnectedWifi && !gbTcpConnection) {
  403f44:	4c39      	ldr	r4, [pc, #228]	; (40402c <main+0x198>)
  403f46:	4e3a      	ldr	r6, [pc, #232]	; (404030 <main+0x19c>)
	/** Configura timer 1 */
	//TC1_init(2);
	

	while (1) {
		m2m_wifi_handle_events(NULL);
  403f48:	2000      	movs	r0, #0
  403f4a:	47a8      	blx	r5

		if (gbConnectedWifi && !gbTcpConnection) {
  403f4c:	7823      	ldrb	r3, [r4, #0]
  403f4e:	2b00      	cmp	r3, #0
  403f50:	d0fa      	beq.n	403f48 <main+0xb4>
  403f52:	7833      	ldrb	r3, [r6, #0]
  403f54:	2b00      	cmp	r3, #0
  403f56:	d1f7      	bne.n	403f48 <main+0xb4>
			//if (gbHostIpByName) {
				/* Open TCP client socket. */
				if (tcp_client_socket < 0) {
  403f58:	4b36      	ldr	r3, [pc, #216]	; (404034 <main+0x1a0>)
  403f5a:	f993 3000 	ldrsb.w	r3, [r3]
  403f5e:	2b00      	cmp	r3, #0
  403f60:	da0c      	bge.n	403f7c <main+0xe8>
					if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  403f62:	2200      	movs	r2, #0
  403f64:	2101      	movs	r1, #1
  403f66:	2002      	movs	r0, #2
  403f68:	4b33      	ldr	r3, [pc, #204]	; (404038 <main+0x1a4>)
  403f6a:	4798      	blx	r3
  403f6c:	4b31      	ldr	r3, [pc, #196]	; (404034 <main+0x1a0>)
  403f6e:	7018      	strb	r0, [r3, #0]
  403f70:	2800      	cmp	r0, #0
  403f72:	da03      	bge.n	403f7c <main+0xe8>
						printf("main: failed to create TCP client socket error!\r\n");
  403f74:	4831      	ldr	r0, [pc, #196]	; (40403c <main+0x1a8>)
  403f76:	4b20      	ldr	r3, [pc, #128]	; (403ff8 <main+0x164>)
  403f78:	4798      	blx	r3
						continue;
  403f7a:	e7e5      	b.n	403f48 <main+0xb4>
					}
				}

        inet_aton(MAIN_SERVER_NAME, &addr_in.sin_addr);
  403f7c:	a909      	add	r1, sp, #36	; 0x24
  403f7e:	4830      	ldr	r0, [pc, #192]	; (404040 <main+0x1ac>)
  403f80:	4b30      	ldr	r3, [pc, #192]	; (404044 <main+0x1b0>)
  403f82:	4798      	blx	r3
       
        //addr_in.sin_addr.s_addr =  0xc0a8008a;
        printf("inet_aton : 0x%X \n", addr_in.sin_addr.s_addr);
  403f84:	9909      	ldr	r1, [sp, #36]	; 0x24
  403f86:	4830      	ldr	r0, [pc, #192]	; (404048 <main+0x1b4>)
  403f88:	4b1b      	ldr	r3, [pc, #108]	; (403ff8 <main+0x164>)
  403f8a:	4798      	blx	r3
        
				/* Connect TCP client socket. */
				addr_in.sin_family = AF_INET;
  403f8c:	2302      	movs	r3, #2
  403f8e:	f8ad 3020 	strh.w	r3, [sp, #32]
				addr_in.sin_port = _htons(MAIN_SERVER_PORT);
  403f92:	f648 0313 	movw	r3, #34835	; 0x8813
  403f96:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
				//addr_in.sin_addr.s_addr =
				if (connect(tcp_client_socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
  403f9a:	2210      	movs	r2, #16
  403f9c:	a908      	add	r1, sp, #32
  403f9e:	4b25      	ldr	r3, [pc, #148]	; (404034 <main+0x1a0>)
  403fa0:	f993 0000 	ldrsb.w	r0, [r3]
  403fa4:	4b29      	ldr	r3, [pc, #164]	; (40404c <main+0x1b8>)
  403fa6:	4798      	blx	r3
  403fa8:	b118      	cbz	r0, 403fb2 <main+0x11e>
					printf("main: failed to connect socket error!\r\n");
  403faa:	4829      	ldr	r0, [pc, #164]	; (404050 <main+0x1bc>)
  403fac:	4b12      	ldr	r3, [pc, #72]	; (403ff8 <main+0x164>)
  403fae:	4798      	blx	r3
					continue;
  403fb0:	e7ca      	b.n	403f48 <main+0xb4>
				}

				gbTcpConnection = true;
  403fb2:	2301      	movs	r3, #1
  403fb4:	7033      	strb	r3, [r6, #0]
  403fb6:	e7c7      	b.n	403f48 <main+0xb4>
  403fb8:	00402c49 	.word	0x00402c49
  403fbc:	00402d45 	.word	0x00402d45
  403fc0:	0040340d 	.word	0x0040340d
  403fc4:	40028000 	.word	0x40028000
  403fc8:	20401018 	.word	0x20401018
  403fcc:	00403cc1 	.word	0x00403cc1
  403fd0:	20401014 	.word	0x20401014
  403fd4:	00403be9 	.word	0x00403be9
  403fd8:	20401010 	.word	0x20401010
  403fdc:	08f0d180 	.word	0x08f0d180
  403fe0:	00403681 	.word	0x00403681
  403fe4:	004036d5 	.word	0x004036d5
  403fe8:	004036dd 	.word	0x004036dd
  403fec:	20400448 	.word	0x20400448
  403ff0:	00404171 	.word	0x00404171
  403ff4:	0040bf28 	.word	0x0040bf28
  403ff8:	004040ad 	.word	0x004040ad
  403ffc:	00400211 	.word	0x00400211
  404000:	00403b85 	.word	0x00403b85
  404004:	00401039 	.word	0x00401039
  404008:	0040bf8c 	.word	0x0040bf8c
  40400c:	004027d5 	.word	0x004027d5
  404010:	004039c9 	.word	0x004039c9
  404014:	004039f9 	.word	0x004039f9
  404018:	00402819 	.word	0x00402819
  40401c:	0040bfb4 	.word	0x0040bfb4
  404020:	0040bfc0 	.word	0x0040bfc0
  404024:	00401385 	.word	0x00401385
  404028:	00401135 	.word	0x00401135
  40402c:	20400f11 	.word	0x20400f11
  404030:	20400f10 	.word	0x20400f10
  404034:	2040001c 	.word	0x2040001c
  404038:	0040282d 	.word	0x0040282d
  40403c:	0040bfcc 	.word	0x0040bfcc
  404040:	0040c000 	.word	0x0040c000
  404044:	00403d95 	.word	0x00403d95
  404048:	0040c010 	.word	0x0040c010
  40404c:	0040290d 	.word	0x0040290d
  404050:	0040c024 	.word	0x0040c024

00404054 <atoi>:
  404054:	220a      	movs	r2, #10
  404056:	2100      	movs	r1, #0
  404058:	f000 bce0 	b.w	404a1c <strtol>

0040405c <__libc_init_array>:
  40405c:	b570      	push	{r4, r5, r6, lr}
  40405e:	4e0f      	ldr	r6, [pc, #60]	; (40409c <__libc_init_array+0x40>)
  404060:	4d0f      	ldr	r5, [pc, #60]	; (4040a0 <__libc_init_array+0x44>)
  404062:	1b76      	subs	r6, r6, r5
  404064:	10b6      	asrs	r6, r6, #2
  404066:	bf18      	it	ne
  404068:	2400      	movne	r4, #0
  40406a:	d005      	beq.n	404078 <__libc_init_array+0x1c>
  40406c:	3401      	adds	r4, #1
  40406e:	f855 3b04 	ldr.w	r3, [r5], #4
  404072:	4798      	blx	r3
  404074:	42a6      	cmp	r6, r4
  404076:	d1f9      	bne.n	40406c <__libc_init_array+0x10>
  404078:	4e0a      	ldr	r6, [pc, #40]	; (4040a4 <__libc_init_array+0x48>)
  40407a:	4d0b      	ldr	r5, [pc, #44]	; (4040a8 <__libc_init_array+0x4c>)
  40407c:	1b76      	subs	r6, r6, r5
  40407e:	f008 f939 	bl	40c2f4 <_init>
  404082:	10b6      	asrs	r6, r6, #2
  404084:	bf18      	it	ne
  404086:	2400      	movne	r4, #0
  404088:	d006      	beq.n	404098 <__libc_init_array+0x3c>
  40408a:	3401      	adds	r4, #1
  40408c:	f855 3b04 	ldr.w	r3, [r5], #4
  404090:	4798      	blx	r3
  404092:	42a6      	cmp	r6, r4
  404094:	d1f9      	bne.n	40408a <__libc_init_array+0x2e>
  404096:	bd70      	pop	{r4, r5, r6, pc}
  404098:	bd70      	pop	{r4, r5, r6, pc}
  40409a:	bf00      	nop
  40409c:	0040c300 	.word	0x0040c300
  4040a0:	0040c300 	.word	0x0040c300
  4040a4:	0040c308 	.word	0x0040c308
  4040a8:	0040c300 	.word	0x0040c300

004040ac <iprintf>:
  4040ac:	b40f      	push	{r0, r1, r2, r3}
  4040ae:	b500      	push	{lr}
  4040b0:	4907      	ldr	r1, [pc, #28]	; (4040d0 <iprintf+0x24>)
  4040b2:	b083      	sub	sp, #12
  4040b4:	ab04      	add	r3, sp, #16
  4040b6:	6808      	ldr	r0, [r1, #0]
  4040b8:	f853 2b04 	ldr.w	r2, [r3], #4
  4040bc:	6881      	ldr	r1, [r0, #8]
  4040be:	9301      	str	r3, [sp, #4]
  4040c0:	f002 f842 	bl	406148 <_vfiprintf_r>
  4040c4:	b003      	add	sp, #12
  4040c6:	f85d eb04 	ldr.w	lr, [sp], #4
  4040ca:	b004      	add	sp, #16
  4040cc:	4770      	bx	lr
  4040ce:	bf00      	nop
  4040d0:	20400448 	.word	0x20400448

004040d4 <memset>:
  4040d4:	b470      	push	{r4, r5, r6}
  4040d6:	0784      	lsls	r4, r0, #30
  4040d8:	d046      	beq.n	404168 <memset+0x94>
  4040da:	1e54      	subs	r4, r2, #1
  4040dc:	2a00      	cmp	r2, #0
  4040de:	d041      	beq.n	404164 <memset+0x90>
  4040e0:	b2cd      	uxtb	r5, r1
  4040e2:	4603      	mov	r3, r0
  4040e4:	e002      	b.n	4040ec <memset+0x18>
  4040e6:	1e62      	subs	r2, r4, #1
  4040e8:	b3e4      	cbz	r4, 404164 <memset+0x90>
  4040ea:	4614      	mov	r4, r2
  4040ec:	f803 5b01 	strb.w	r5, [r3], #1
  4040f0:	079a      	lsls	r2, r3, #30
  4040f2:	d1f8      	bne.n	4040e6 <memset+0x12>
  4040f4:	2c03      	cmp	r4, #3
  4040f6:	d92e      	bls.n	404156 <memset+0x82>
  4040f8:	b2cd      	uxtb	r5, r1
  4040fa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4040fe:	2c0f      	cmp	r4, #15
  404100:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404104:	d919      	bls.n	40413a <memset+0x66>
  404106:	f103 0210 	add.w	r2, r3, #16
  40410a:	4626      	mov	r6, r4
  40410c:	3e10      	subs	r6, #16
  40410e:	2e0f      	cmp	r6, #15
  404110:	f842 5c10 	str.w	r5, [r2, #-16]
  404114:	f842 5c0c 	str.w	r5, [r2, #-12]
  404118:	f842 5c08 	str.w	r5, [r2, #-8]
  40411c:	f842 5c04 	str.w	r5, [r2, #-4]
  404120:	f102 0210 	add.w	r2, r2, #16
  404124:	d8f2      	bhi.n	40410c <memset+0x38>
  404126:	f1a4 0210 	sub.w	r2, r4, #16
  40412a:	f022 020f 	bic.w	r2, r2, #15
  40412e:	f004 040f 	and.w	r4, r4, #15
  404132:	3210      	adds	r2, #16
  404134:	2c03      	cmp	r4, #3
  404136:	4413      	add	r3, r2
  404138:	d90d      	bls.n	404156 <memset+0x82>
  40413a:	461e      	mov	r6, r3
  40413c:	4622      	mov	r2, r4
  40413e:	3a04      	subs	r2, #4
  404140:	2a03      	cmp	r2, #3
  404142:	f846 5b04 	str.w	r5, [r6], #4
  404146:	d8fa      	bhi.n	40413e <memset+0x6a>
  404148:	1f22      	subs	r2, r4, #4
  40414a:	f022 0203 	bic.w	r2, r2, #3
  40414e:	3204      	adds	r2, #4
  404150:	4413      	add	r3, r2
  404152:	f004 0403 	and.w	r4, r4, #3
  404156:	b12c      	cbz	r4, 404164 <memset+0x90>
  404158:	b2c9      	uxtb	r1, r1
  40415a:	441c      	add	r4, r3
  40415c:	f803 1b01 	strb.w	r1, [r3], #1
  404160:	42a3      	cmp	r3, r4
  404162:	d1fb      	bne.n	40415c <memset+0x88>
  404164:	bc70      	pop	{r4, r5, r6}
  404166:	4770      	bx	lr
  404168:	4614      	mov	r4, r2
  40416a:	4603      	mov	r3, r0
  40416c:	e7c2      	b.n	4040f4 <memset+0x20>
  40416e:	bf00      	nop

00404170 <setbuf>:
  404170:	2900      	cmp	r1, #0
  404172:	bf0c      	ite	eq
  404174:	2202      	moveq	r2, #2
  404176:	2200      	movne	r2, #0
  404178:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40417c:	f000 b800 	b.w	404180 <setvbuf>

00404180 <setvbuf>:
  404180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404184:	4c51      	ldr	r4, [pc, #324]	; (4042cc <setvbuf+0x14c>)
  404186:	6825      	ldr	r5, [r4, #0]
  404188:	b083      	sub	sp, #12
  40418a:	4604      	mov	r4, r0
  40418c:	460f      	mov	r7, r1
  40418e:	4690      	mov	r8, r2
  404190:	461e      	mov	r6, r3
  404192:	b115      	cbz	r5, 40419a <setvbuf+0x1a>
  404194:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404196:	2b00      	cmp	r3, #0
  404198:	d079      	beq.n	40428e <setvbuf+0x10e>
  40419a:	f1b8 0f02 	cmp.w	r8, #2
  40419e:	d004      	beq.n	4041aa <setvbuf+0x2a>
  4041a0:	f1b8 0f01 	cmp.w	r8, #1
  4041a4:	d87f      	bhi.n	4042a6 <setvbuf+0x126>
  4041a6:	2e00      	cmp	r6, #0
  4041a8:	db7d      	blt.n	4042a6 <setvbuf+0x126>
  4041aa:	4621      	mov	r1, r4
  4041ac:	4628      	mov	r0, r5
  4041ae:	f003 ffd7 	bl	408160 <_fflush_r>
  4041b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4041b4:	b141      	cbz	r1, 4041c8 <setvbuf+0x48>
  4041b6:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4041ba:	4299      	cmp	r1, r3
  4041bc:	d002      	beq.n	4041c4 <setvbuf+0x44>
  4041be:	4628      	mov	r0, r5
  4041c0:	f004 f92c 	bl	40841c <_free_r>
  4041c4:	2300      	movs	r3, #0
  4041c6:	6323      	str	r3, [r4, #48]	; 0x30
  4041c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4041cc:	2200      	movs	r2, #0
  4041ce:	61a2      	str	r2, [r4, #24]
  4041d0:	6062      	str	r2, [r4, #4]
  4041d2:	061a      	lsls	r2, r3, #24
  4041d4:	d454      	bmi.n	404280 <setvbuf+0x100>
  4041d6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4041da:	f023 0303 	bic.w	r3, r3, #3
  4041de:	f1b8 0f02 	cmp.w	r8, #2
  4041e2:	81a3      	strh	r3, [r4, #12]
  4041e4:	d039      	beq.n	40425a <setvbuf+0xda>
  4041e6:	ab01      	add	r3, sp, #4
  4041e8:	466a      	mov	r2, sp
  4041ea:	4621      	mov	r1, r4
  4041ec:	4628      	mov	r0, r5
  4041ee:	f004 fbb7 	bl	408960 <__swhatbuf_r>
  4041f2:	89a3      	ldrh	r3, [r4, #12]
  4041f4:	4318      	orrs	r0, r3
  4041f6:	81a0      	strh	r0, [r4, #12]
  4041f8:	b326      	cbz	r6, 404244 <setvbuf+0xc4>
  4041fa:	b327      	cbz	r7, 404246 <setvbuf+0xc6>
  4041fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4041fe:	2b00      	cmp	r3, #0
  404200:	d04d      	beq.n	40429e <setvbuf+0x11e>
  404202:	9b00      	ldr	r3, [sp, #0]
  404204:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  404208:	6027      	str	r7, [r4, #0]
  40420a:	429e      	cmp	r6, r3
  40420c:	bf1c      	itt	ne
  40420e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  404212:	81a0      	strhne	r0, [r4, #12]
  404214:	f1b8 0f01 	cmp.w	r8, #1
  404218:	bf08      	it	eq
  40421a:	f040 0001 	orreq.w	r0, r0, #1
  40421e:	b283      	uxth	r3, r0
  404220:	bf08      	it	eq
  404222:	81a0      	strheq	r0, [r4, #12]
  404224:	f003 0008 	and.w	r0, r3, #8
  404228:	b280      	uxth	r0, r0
  40422a:	6127      	str	r7, [r4, #16]
  40422c:	6166      	str	r6, [r4, #20]
  40422e:	b318      	cbz	r0, 404278 <setvbuf+0xf8>
  404230:	f013 0001 	ands.w	r0, r3, #1
  404234:	d02f      	beq.n	404296 <setvbuf+0x116>
  404236:	2000      	movs	r0, #0
  404238:	4276      	negs	r6, r6
  40423a:	61a6      	str	r6, [r4, #24]
  40423c:	60a0      	str	r0, [r4, #8]
  40423e:	b003      	add	sp, #12
  404240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404244:	9e00      	ldr	r6, [sp, #0]
  404246:	4630      	mov	r0, r6
  404248:	f004 fbfe 	bl	408a48 <malloc>
  40424c:	4607      	mov	r7, r0
  40424e:	b368      	cbz	r0, 4042ac <setvbuf+0x12c>
  404250:	89a3      	ldrh	r3, [r4, #12]
  404252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404256:	81a3      	strh	r3, [r4, #12]
  404258:	e7d0      	b.n	4041fc <setvbuf+0x7c>
  40425a:	2000      	movs	r0, #0
  40425c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404260:	f043 0302 	orr.w	r3, r3, #2
  404264:	2500      	movs	r5, #0
  404266:	2101      	movs	r1, #1
  404268:	81a3      	strh	r3, [r4, #12]
  40426a:	60a5      	str	r5, [r4, #8]
  40426c:	6022      	str	r2, [r4, #0]
  40426e:	6122      	str	r2, [r4, #16]
  404270:	6161      	str	r1, [r4, #20]
  404272:	b003      	add	sp, #12
  404274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404278:	60a0      	str	r0, [r4, #8]
  40427a:	b003      	add	sp, #12
  40427c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404280:	6921      	ldr	r1, [r4, #16]
  404282:	4628      	mov	r0, r5
  404284:	f004 f8ca 	bl	40841c <_free_r>
  404288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40428c:	e7a3      	b.n	4041d6 <setvbuf+0x56>
  40428e:	4628      	mov	r0, r5
  404290:	f003 fffa 	bl	408288 <__sinit>
  404294:	e781      	b.n	40419a <setvbuf+0x1a>
  404296:	60a6      	str	r6, [r4, #8]
  404298:	b003      	add	sp, #12
  40429a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40429e:	4628      	mov	r0, r5
  4042a0:	f003 fff2 	bl	408288 <__sinit>
  4042a4:	e7ad      	b.n	404202 <setvbuf+0x82>
  4042a6:	f04f 30ff 	mov.w	r0, #4294967295
  4042aa:	e7e2      	b.n	404272 <setvbuf+0xf2>
  4042ac:	f8dd 9000 	ldr.w	r9, [sp]
  4042b0:	45b1      	cmp	r9, r6
  4042b2:	d006      	beq.n	4042c2 <setvbuf+0x142>
  4042b4:	4648      	mov	r0, r9
  4042b6:	f004 fbc7 	bl	408a48 <malloc>
  4042ba:	4607      	mov	r7, r0
  4042bc:	b108      	cbz	r0, 4042c2 <setvbuf+0x142>
  4042be:	464e      	mov	r6, r9
  4042c0:	e7c6      	b.n	404250 <setvbuf+0xd0>
  4042c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4042c6:	f04f 30ff 	mov.w	r0, #4294967295
  4042ca:	e7c7      	b.n	40425c <setvbuf+0xdc>
  4042cc:	20400448 	.word	0x20400448

004042d0 <sprintf>:
  4042d0:	b40e      	push	{r1, r2, r3}
  4042d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4042d4:	b09c      	sub	sp, #112	; 0x70
  4042d6:	ab21      	add	r3, sp, #132	; 0x84
  4042d8:	490f      	ldr	r1, [pc, #60]	; (404318 <sprintf+0x48>)
  4042da:	f853 2b04 	ldr.w	r2, [r3], #4
  4042de:	9301      	str	r3, [sp, #4]
  4042e0:	4605      	mov	r5, r0
  4042e2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4042e6:	6808      	ldr	r0, [r1, #0]
  4042e8:	9502      	str	r5, [sp, #8]
  4042ea:	f44f 7702 	mov.w	r7, #520	; 0x208
  4042ee:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4042f2:	a902      	add	r1, sp, #8
  4042f4:	9506      	str	r5, [sp, #24]
  4042f6:	f8ad 7014 	strh.w	r7, [sp, #20]
  4042fa:	9404      	str	r4, [sp, #16]
  4042fc:	9407      	str	r4, [sp, #28]
  4042fe:	f8ad 6016 	strh.w	r6, [sp, #22]
  404302:	f000 fb97 	bl	404a34 <_svfprintf_r>
  404306:	9b02      	ldr	r3, [sp, #8]
  404308:	2200      	movs	r2, #0
  40430a:	701a      	strb	r2, [r3, #0]
  40430c:	b01c      	add	sp, #112	; 0x70
  40430e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  404312:	b003      	add	sp, #12
  404314:	4770      	bx	lr
  404316:	bf00      	nop
  404318:	20400448 	.word	0x20400448
	...

00404340 <strlen>:
  404340:	f890 f000 	pld	[r0]
  404344:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404348:	f020 0107 	bic.w	r1, r0, #7
  40434c:	f06f 0c00 	mvn.w	ip, #0
  404350:	f010 0407 	ands.w	r4, r0, #7
  404354:	f891 f020 	pld	[r1, #32]
  404358:	f040 8049 	bne.w	4043ee <strlen+0xae>
  40435c:	f04f 0400 	mov.w	r4, #0
  404360:	f06f 0007 	mvn.w	r0, #7
  404364:	e9d1 2300 	ldrd	r2, r3, [r1]
  404368:	f891 f040 	pld	[r1, #64]	; 0x40
  40436c:	f100 0008 	add.w	r0, r0, #8
  404370:	fa82 f24c 	uadd8	r2, r2, ip
  404374:	faa4 f28c 	sel	r2, r4, ip
  404378:	fa83 f34c 	uadd8	r3, r3, ip
  40437c:	faa2 f38c 	sel	r3, r2, ip
  404380:	bb4b      	cbnz	r3, 4043d6 <strlen+0x96>
  404382:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404386:	fa82 f24c 	uadd8	r2, r2, ip
  40438a:	f100 0008 	add.w	r0, r0, #8
  40438e:	faa4 f28c 	sel	r2, r4, ip
  404392:	fa83 f34c 	uadd8	r3, r3, ip
  404396:	faa2 f38c 	sel	r3, r2, ip
  40439a:	b9e3      	cbnz	r3, 4043d6 <strlen+0x96>
  40439c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4043a0:	fa82 f24c 	uadd8	r2, r2, ip
  4043a4:	f100 0008 	add.w	r0, r0, #8
  4043a8:	faa4 f28c 	sel	r2, r4, ip
  4043ac:	fa83 f34c 	uadd8	r3, r3, ip
  4043b0:	faa2 f38c 	sel	r3, r2, ip
  4043b4:	b97b      	cbnz	r3, 4043d6 <strlen+0x96>
  4043b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4043ba:	f101 0120 	add.w	r1, r1, #32
  4043be:	fa82 f24c 	uadd8	r2, r2, ip
  4043c2:	f100 0008 	add.w	r0, r0, #8
  4043c6:	faa4 f28c 	sel	r2, r4, ip
  4043ca:	fa83 f34c 	uadd8	r3, r3, ip
  4043ce:	faa2 f38c 	sel	r3, r2, ip
  4043d2:	2b00      	cmp	r3, #0
  4043d4:	d0c6      	beq.n	404364 <strlen+0x24>
  4043d6:	2a00      	cmp	r2, #0
  4043d8:	bf04      	itt	eq
  4043da:	3004      	addeq	r0, #4
  4043dc:	461a      	moveq	r2, r3
  4043de:	ba12      	rev	r2, r2
  4043e0:	fab2 f282 	clz	r2, r2
  4043e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4043e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4043ec:	4770      	bx	lr
  4043ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4043f2:	f004 0503 	and.w	r5, r4, #3
  4043f6:	f1c4 0000 	rsb	r0, r4, #0
  4043fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4043fe:	f014 0f04 	tst.w	r4, #4
  404402:	f891 f040 	pld	[r1, #64]	; 0x40
  404406:	fa0c f505 	lsl.w	r5, ip, r5
  40440a:	ea62 0205 	orn	r2, r2, r5
  40440e:	bf1c      	itt	ne
  404410:	ea63 0305 	ornne	r3, r3, r5
  404414:	4662      	movne	r2, ip
  404416:	f04f 0400 	mov.w	r4, #0
  40441a:	e7a9      	b.n	404370 <strlen+0x30>

0040441c <critical_factorization>:
  40441c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404420:	f04f 0e01 	mov.w	lr, #1
  404424:	4674      	mov	r4, lr
  404426:	2500      	movs	r5, #0
  404428:	f04f 36ff 	mov.w	r6, #4294967295
  40442c:	192b      	adds	r3, r5, r4
  40442e:	428b      	cmp	r3, r1
  404430:	eb00 0706 	add.w	r7, r0, r6
  404434:	d20d      	bcs.n	404452 <critical_factorization+0x36>
  404436:	5d3f      	ldrb	r7, [r7, r4]
  404438:	f810 c003 	ldrb.w	ip, [r0, r3]
  40443c:	45bc      	cmp	ip, r7
  40443e:	d22d      	bcs.n	40449c <critical_factorization+0x80>
  404440:	461d      	mov	r5, r3
  404442:	2401      	movs	r4, #1
  404444:	ebc6 0e03 	rsb	lr, r6, r3
  404448:	192b      	adds	r3, r5, r4
  40444a:	428b      	cmp	r3, r1
  40444c:	eb00 0706 	add.w	r7, r0, r6
  404450:	d3f1      	bcc.n	404436 <critical_factorization+0x1a>
  404452:	f04f 0801 	mov.w	r8, #1
  404456:	f8c2 e000 	str.w	lr, [r2]
  40445a:	4644      	mov	r4, r8
  40445c:	2500      	movs	r5, #0
  40445e:	f04f 37ff 	mov.w	r7, #4294967295
  404462:	192b      	adds	r3, r5, r4
  404464:	4299      	cmp	r1, r3
  404466:	eb00 0e07 	add.w	lr, r0, r7
  40446a:	d90e      	bls.n	40448a <critical_factorization+0x6e>
  40446c:	f81e e004 	ldrb.w	lr, [lr, r4]
  404470:	f810 c003 	ldrb.w	ip, [r0, r3]
  404474:	45f4      	cmp	ip, lr
  404476:	d918      	bls.n	4044aa <critical_factorization+0x8e>
  404478:	461d      	mov	r5, r3
  40447a:	2401      	movs	r4, #1
  40447c:	ebc7 0803 	rsb	r8, r7, r3
  404480:	192b      	adds	r3, r5, r4
  404482:	4299      	cmp	r1, r3
  404484:	eb00 0e07 	add.w	lr, r0, r7
  404488:	d8f0      	bhi.n	40446c <critical_factorization+0x50>
  40448a:	3701      	adds	r7, #1
  40448c:	1c70      	adds	r0, r6, #1
  40448e:	4287      	cmp	r7, r0
  404490:	bf24      	itt	cs
  404492:	f8c2 8000 	strcs.w	r8, [r2]
  404496:	4638      	movcs	r0, r7
  404498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40449c:	d00c      	beq.n	4044b8 <critical_factorization+0x9c>
  40449e:	f04f 0e01 	mov.w	lr, #1
  4044a2:	462e      	mov	r6, r5
  4044a4:	4674      	mov	r4, lr
  4044a6:	4475      	add	r5, lr
  4044a8:	e7c0      	b.n	40442c <critical_factorization+0x10>
  4044aa:	d00c      	beq.n	4044c6 <critical_factorization+0xaa>
  4044ac:	f04f 0801 	mov.w	r8, #1
  4044b0:	462f      	mov	r7, r5
  4044b2:	4644      	mov	r4, r8
  4044b4:	4445      	add	r5, r8
  4044b6:	e7d4      	b.n	404462 <critical_factorization+0x46>
  4044b8:	4574      	cmp	r4, lr
  4044ba:	bf09      	itett	eq
  4044bc:	46a6      	moveq	lr, r4
  4044be:	3401      	addne	r4, #1
  4044c0:	461d      	moveq	r5, r3
  4044c2:	2401      	moveq	r4, #1
  4044c4:	e7b2      	b.n	40442c <critical_factorization+0x10>
  4044c6:	4544      	cmp	r4, r8
  4044c8:	bf09      	itett	eq
  4044ca:	46a0      	moveq	r8, r4
  4044cc:	3401      	addne	r4, #1
  4044ce:	461d      	moveq	r5, r3
  4044d0:	2401      	moveq	r4, #1
  4044d2:	e7c6      	b.n	404462 <critical_factorization+0x46>

004044d4 <two_way_long_needle>:
  4044d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044d8:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  4044dc:	4616      	mov	r6, r2
  4044de:	4605      	mov	r5, r0
  4044e0:	468b      	mov	fp, r1
  4044e2:	4610      	mov	r0, r2
  4044e4:	4619      	mov	r1, r3
  4044e6:	aa03      	add	r2, sp, #12
  4044e8:	461c      	mov	r4, r3
  4044ea:	f7ff ff97 	bl	40441c <critical_factorization>
  4044ee:	ab03      	add	r3, sp, #12
  4044f0:	4681      	mov	r9, r0
  4044f2:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  4044f6:	f843 4f04 	str.w	r4, [r3, #4]!
  4044fa:	4293      	cmp	r3, r2
  4044fc:	d1fb      	bne.n	4044f6 <two_way_long_needle+0x22>
  4044fe:	b14c      	cbz	r4, 404514 <two_way_long_needle+0x40>
  404500:	1e63      	subs	r3, r4, #1
  404502:	4632      	mov	r2, r6
  404504:	a804      	add	r0, sp, #16
  404506:	f812 1b01 	ldrb.w	r1, [r2], #1
  40450a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  40450e:	f113 33ff 	adds.w	r3, r3, #4294967295
  404512:	d2f8      	bcs.n	404506 <two_way_long_needle+0x32>
  404514:	9903      	ldr	r1, [sp, #12]
  404516:	464a      	mov	r2, r9
  404518:	4431      	add	r1, r6
  40451a:	4630      	mov	r0, r6
  40451c:	f004 fda8 	bl	409070 <memcmp>
  404520:	2800      	cmp	r0, #0
  404522:	d171      	bne.n	404608 <two_way_long_needle+0x134>
  404524:	f109 33ff 	add.w	r3, r9, #4294967295
  404528:	9300      	str	r3, [sp, #0]
  40452a:	18f3      	adds	r3, r6, r3
  40452c:	4682      	mov	sl, r0
  40452e:	9301      	str	r3, [sp, #4]
  404530:	4623      	mov	r3, r4
  404532:	4680      	mov	r8, r0
  404534:	4654      	mov	r4, sl
  404536:	4658      	mov	r0, fp
  404538:	469a      	mov	sl, r3
  40453a:	eb08 070a 	add.w	r7, r8, sl
  40453e:	1a3a      	subs	r2, r7, r0
  404540:	2100      	movs	r1, #0
  404542:	4428      	add	r0, r5
  404544:	f004 fd44 	bl	408fd0 <memchr>
  404548:	2800      	cmp	r0, #0
  40454a:	d158      	bne.n	4045fe <two_way_long_needle+0x12a>
  40454c:	2f00      	cmp	r7, #0
  40454e:	d056      	beq.n	4045fe <two_way_long_needle+0x12a>
  404550:	19eb      	adds	r3, r5, r7
  404552:	aa04      	add	r2, sp, #16
  404554:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  404558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40455c:	b14b      	cbz	r3, 404572 <two_way_long_needle+0x9e>
  40455e:	b124      	cbz	r4, 40456a <two_way_long_needle+0x96>
  404560:	9a03      	ldr	r2, [sp, #12]
  404562:	4293      	cmp	r3, r2
  404564:	d201      	bcs.n	40456a <two_way_long_needle+0x96>
  404566:	ebc2 030a 	rsb	r3, r2, sl
  40456a:	4498      	add	r8, r3
  40456c:	2400      	movs	r4, #0
  40456e:	4638      	mov	r0, r7
  404570:	e7e3      	b.n	40453a <two_way_long_needle+0x66>
  404572:	454c      	cmp	r4, r9
  404574:	4623      	mov	r3, r4
  404576:	f10a 3eff 	add.w	lr, sl, #4294967295
  40457a:	bf38      	it	cc
  40457c:	464b      	movcc	r3, r9
  40457e:	4573      	cmp	r3, lr
  404580:	d213      	bcs.n	4045aa <two_way_long_needle+0xd6>
  404582:	eb08 0203 	add.w	r2, r8, r3
  404586:	f816 c003 	ldrb.w	ip, [r6, r3]
  40458a:	5ca8      	ldrb	r0, [r5, r2]
  40458c:	4584      	cmp	ip, r0
  40458e:	442a      	add	r2, r5
  404590:	eb06 0103 	add.w	r1, r6, r3
  404594:	d006      	beq.n	4045a4 <two_way_long_needle+0xd0>
  404596:	e02e      	b.n	4045f6 <two_way_long_needle+0x122>
  404598:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  40459c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  4045a0:	4584      	cmp	ip, r0
  4045a2:	d128      	bne.n	4045f6 <two_way_long_needle+0x122>
  4045a4:	3301      	adds	r3, #1
  4045a6:	4573      	cmp	r3, lr
  4045a8:	d3f6      	bcc.n	404598 <two_way_long_needle+0xc4>
  4045aa:	454c      	cmp	r4, r9
  4045ac:	9900      	ldr	r1, [sp, #0]
  4045ae:	f080 808b 	bcs.w	4046c8 <two_way_long_needle+0x1f4>
  4045b2:	9b00      	ldr	r3, [sp, #0]
  4045b4:	9801      	ldr	r0, [sp, #4]
  4045b6:	eb08 0203 	add.w	r2, r8, r3
  4045ba:	7803      	ldrb	r3, [r0, #0]
  4045bc:	5ca8      	ldrb	r0, [r5, r2]
  4045be:	4283      	cmp	r3, r0
  4045c0:	442a      	add	r2, r5
  4045c2:	f040 8081 	bne.w	4046c8 <two_way_long_needle+0x1f4>
  4045c6:	9b01      	ldr	r3, [sp, #4]
  4045c8:	eb06 0b04 	add.w	fp, r6, r4
  4045cc:	e006      	b.n	4045dc <two_way_long_needle+0x108>
  4045ce:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
  4045d2:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
  4045d6:	4586      	cmp	lr, r0
  4045d8:	d104      	bne.n	4045e4 <two_way_long_needle+0x110>
  4045da:	4661      	mov	r1, ip
  4045dc:	459b      	cmp	fp, r3
  4045de:	f101 3cff 	add.w	ip, r1, #4294967295
  4045e2:	d1f4      	bne.n	4045ce <two_way_long_needle+0xfa>
  4045e4:	3401      	adds	r4, #1
  4045e6:	428c      	cmp	r4, r1
  4045e8:	d870      	bhi.n	4046cc <two_way_long_needle+0x1f8>
  4045ea:	9c03      	ldr	r4, [sp, #12]
  4045ec:	4638      	mov	r0, r7
  4045ee:	44a0      	add	r8, r4
  4045f0:	ebc4 040a 	rsb	r4, r4, sl
  4045f4:	e7a1      	b.n	40453a <two_way_long_needle+0x66>
  4045f6:	f1c9 0201 	rsb	r2, r9, #1
  4045fa:	4490      	add	r8, r2
  4045fc:	e7b5      	b.n	40456a <two_way_long_needle+0x96>
  4045fe:	2000      	movs	r0, #0
  404600:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  404604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404608:	ebc9 0304 	rsb	r3, r9, r4
  40460c:	454b      	cmp	r3, r9
  40460e:	bf38      	it	cc
  404610:	464b      	movcc	r3, r9
  404612:	3301      	adds	r3, #1
  404614:	f109 38ff 	add.w	r8, r9, #4294967295
  404618:	9303      	str	r3, [sp, #12]
  40461a:	eb06 0308 	add.w	r3, r6, r8
  40461e:	4658      	mov	r0, fp
  404620:	f04f 0a00 	mov.w	sl, #0
  404624:	46cb      	mov	fp, r9
  404626:	4699      	mov	r9, r3
  404628:	eb0a 0704 	add.w	r7, sl, r4
  40462c:	1a3a      	subs	r2, r7, r0
  40462e:	2100      	movs	r1, #0
  404630:	4428      	add	r0, r5
  404632:	f004 fccd 	bl	408fd0 <memchr>
  404636:	2800      	cmp	r0, #0
  404638:	d1e1      	bne.n	4045fe <two_way_long_needle+0x12a>
  40463a:	2f00      	cmp	r7, #0
  40463c:	d0df      	beq.n	4045fe <two_way_long_needle+0x12a>
  40463e:	19eb      	adds	r3, r5, r7
  404640:	aa04      	add	r2, sp, #16
  404642:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  404646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40464a:	bba3      	cbnz	r3, 4046b6 <two_way_long_needle+0x1e2>
  40464c:	1e61      	subs	r1, r4, #1
  40464e:	458b      	cmp	fp, r1
  404650:	d215      	bcs.n	40467e <two_way_long_needle+0x1aa>
  404652:	eb0a 020b 	add.w	r2, sl, fp
  404656:	f816 300b 	ldrb.w	r3, [r6, fp]
  40465a:	f815 e002 	ldrb.w	lr, [r5, r2]
  40465e:	459e      	cmp	lr, r3
  404660:	442a      	add	r2, r5
  404662:	eb06 000b 	add.w	r0, r6, fp
  404666:	465b      	mov	r3, fp
  404668:	d006      	beq.n	404678 <two_way_long_needle+0x1a4>
  40466a:	e027      	b.n	4046bc <two_way_long_needle+0x1e8>
  40466c:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  404670:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  404674:	45f4      	cmp	ip, lr
  404676:	d121      	bne.n	4046bc <two_way_long_needle+0x1e8>
  404678:	3301      	adds	r3, #1
  40467a:	428b      	cmp	r3, r1
  40467c:	d3f6      	bcc.n	40466c <two_way_long_needle+0x198>
  40467e:	f1b8 3fff 	cmp.w	r8, #4294967295
  404682:	d011      	beq.n	4046a8 <two_way_long_needle+0x1d4>
  404684:	eb0a 0208 	add.w	r2, sl, r8
  404688:	f899 1000 	ldrb.w	r1, [r9]
  40468c:	5cab      	ldrb	r3, [r5, r2]
  40468e:	4299      	cmp	r1, r3
  404690:	442a      	add	r2, r5
  404692:	d10f      	bne.n	4046b4 <two_way_long_needle+0x1e0>
  404694:	464b      	mov	r3, r9
  404696:	e005      	b.n	4046a4 <two_way_long_needle+0x1d0>
  404698:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  40469c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  4046a0:	4288      	cmp	r0, r1
  4046a2:	d107      	bne.n	4046b4 <two_way_long_needle+0x1e0>
  4046a4:	42b3      	cmp	r3, r6
  4046a6:	d1f7      	bne.n	404698 <two_way_long_needle+0x1c4>
  4046a8:	eb05 000a 	add.w	r0, r5, sl
  4046ac:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4046b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046b4:	9b03      	ldr	r3, [sp, #12]
  4046b6:	449a      	add	sl, r3
  4046b8:	4638      	mov	r0, r7
  4046ba:	e7b5      	b.n	404628 <two_way_long_needle+0x154>
  4046bc:	f1cb 0201 	rsb	r2, fp, #1
  4046c0:	4492      	add	sl, r2
  4046c2:	449a      	add	sl, r3
  4046c4:	4638      	mov	r0, r7
  4046c6:	e7af      	b.n	404628 <two_way_long_needle+0x154>
  4046c8:	4649      	mov	r1, r9
  4046ca:	e78b      	b.n	4045e4 <two_way_long_needle+0x110>
  4046cc:	eb05 0008 	add.w	r0, r5, r8
  4046d0:	e796      	b.n	404600 <two_way_long_needle+0x12c>
  4046d2:	bf00      	nop

004046d4 <strstr>:
  4046d4:	7803      	ldrb	r3, [r0, #0]
  4046d6:	2b00      	cmp	r3, #0
  4046d8:	f000 8104 	beq.w	4048e4 <strstr+0x210>
  4046dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4046e0:	f891 8000 	ldrb.w	r8, [r1]
  4046e4:	b085      	sub	sp, #20
  4046e6:	4644      	mov	r4, r8
  4046e8:	f1b8 0f00 	cmp.w	r8, #0
  4046ec:	d016      	beq.n	40471c <strstr+0x48>
  4046ee:	4686      	mov	lr, r0
  4046f0:	f101 0c01 	add.w	ip, r1, #1
  4046f4:	2701      	movs	r7, #1
  4046f6:	e003      	b.n	404700 <strstr+0x2c>
  4046f8:	f812 4b01 	ldrb.w	r4, [r2], #1
  4046fc:	b16c      	cbz	r4, 40471a <strstr+0x46>
  4046fe:	4694      	mov	ip, r2
  404700:	429c      	cmp	r4, r3
  404702:	bf14      	ite	ne
  404704:	2700      	movne	r7, #0
  404706:	f007 0701 	andeq.w	r7, r7, #1
  40470a:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
  40470e:	4662      	mov	r2, ip
  404710:	2b00      	cmp	r3, #0
  404712:	d1f1      	bne.n	4046f8 <strstr+0x24>
  404714:	f89c 3000 	ldrb.w	r3, [ip]
  404718:	bb0b      	cbnz	r3, 40475e <strstr+0x8a>
  40471a:	b117      	cbz	r7, 404722 <strstr+0x4e>
  40471c:	b005      	add	sp, #20
  40471e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404722:	460e      	mov	r6, r1
  404724:	4605      	mov	r5, r0
  404726:	4641      	mov	r1, r8
  404728:	3001      	adds	r0, #1
  40472a:	ebc6 040c 	rsb	r4, r6, ip
  40472e:	f005 fb27 	bl	409d80 <strchr>
  404732:	4607      	mov	r7, r0
  404734:	b198      	cbz	r0, 40475e <strstr+0x8a>
  404736:	2c01      	cmp	r4, #1
  404738:	d0f0      	beq.n	40471c <strstr+0x48>
  40473a:	1928      	adds	r0, r5, r4
  40473c:	4287      	cmp	r7, r0
  40473e:	bf94      	ite	ls
  404740:	ebc7 0b00 	rsbls	fp, r7, r0
  404744:	f04f 0b01 	movhi.w	fp, #1
  404748:	2c1f      	cmp	r4, #31
  40474a:	d90c      	bls.n	404766 <strstr+0x92>
  40474c:	4623      	mov	r3, r4
  40474e:	4632      	mov	r2, r6
  404750:	4659      	mov	r1, fp
  404752:	4638      	mov	r0, r7
  404754:	f7ff febe 	bl	4044d4 <two_way_long_needle>
  404758:	b005      	add	sp, #20
  40475a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40475e:	2000      	movs	r0, #0
  404760:	b005      	add	sp, #20
  404762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404766:	aa03      	add	r2, sp, #12
  404768:	4621      	mov	r1, r4
  40476a:	4630      	mov	r0, r6
  40476c:	f7ff fe56 	bl	40441c <critical_factorization>
  404770:	9903      	ldr	r1, [sp, #12]
  404772:	4680      	mov	r8, r0
  404774:	4602      	mov	r2, r0
  404776:	4431      	add	r1, r6
  404778:	4630      	mov	r0, r6
  40477a:	f004 fc79 	bl	409070 <memcmp>
  40477e:	2800      	cmp	r0, #0
  404780:	d158      	bne.n	404834 <strstr+0x160>
  404782:	f108 33ff 	add.w	r3, r8, #4294967295
  404786:	9301      	str	r3, [sp, #4]
  404788:	18f3      	adds	r3, r6, r3
  40478a:	4681      	mov	r9, r0
  40478c:	4605      	mov	r5, r0
  40478e:	9300      	str	r3, [sp, #0]
  404790:	4658      	mov	r0, fp
  404792:	46b2      	mov	sl, r6
  404794:	1966      	adds	r6, r4, r5
  404796:	1a32      	subs	r2, r6, r0
  404798:	2100      	movs	r1, #0
  40479a:	4438      	add	r0, r7
  40479c:	f004 fc18 	bl	408fd0 <memchr>
  4047a0:	2800      	cmp	r0, #0
  4047a2:	d1dc      	bne.n	40475e <strstr+0x8a>
  4047a4:	2e00      	cmp	r6, #0
  4047a6:	d0da      	beq.n	40475e <strstr+0x8a>
  4047a8:	45c8      	cmp	r8, r9
  4047aa:	4643      	mov	r3, r8
  4047ac:	bf38      	it	cc
  4047ae:	464b      	movcc	r3, r9
  4047b0:	429c      	cmp	r4, r3
  4047b2:	d912      	bls.n	4047da <strstr+0x106>
  4047b4:	195a      	adds	r2, r3, r5
  4047b6:	f81a 1003 	ldrb.w	r1, [sl, r3]
  4047ba:	5cb8      	ldrb	r0, [r7, r2]
  4047bc:	4288      	cmp	r0, r1
  4047be:	443a      	add	r2, r7
  4047c0:	eb0a 0e03 	add.w	lr, sl, r3
  4047c4:	d006      	beq.n	4047d4 <strstr+0x100>
  4047c6:	e02d      	b.n	404824 <strstr+0x150>
  4047c8:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  4047cc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4047d0:	4288      	cmp	r0, r1
  4047d2:	d127      	bne.n	404824 <strstr+0x150>
  4047d4:	3301      	adds	r3, #1
  4047d6:	429c      	cmp	r4, r3
  4047d8:	d8f6      	bhi.n	4047c8 <strstr+0xf4>
  4047da:	9b01      	ldr	r3, [sp, #4]
  4047dc:	45c8      	cmp	r8, r9
  4047de:	4619      	mov	r1, r3
  4047e0:	f240 8083 	bls.w	4048ea <strstr+0x216>
  4047e4:	18ea      	adds	r2, r5, r3
  4047e6:	9800      	ldr	r0, [sp, #0]
  4047e8:	7803      	ldrb	r3, [r0, #0]
  4047ea:	5cb8      	ldrb	r0, [r7, r2]
  4047ec:	4283      	cmp	r3, r0
  4047ee:	443a      	add	r2, r7
  4047f0:	d17b      	bne.n	4048ea <strstr+0x216>
  4047f2:	9b00      	ldr	r3, [sp, #0]
  4047f4:	eb0a 0b09 	add.w	fp, sl, r9
  4047f8:	e006      	b.n	404808 <strstr+0x134>
  4047fa:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
  4047fe:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  404802:	45f4      	cmp	ip, lr
  404804:	d104      	bne.n	404810 <strstr+0x13c>
  404806:	4601      	mov	r1, r0
  404808:	455b      	cmp	r3, fp
  40480a:	f101 30ff 	add.w	r0, r1, #4294967295
  40480e:	d1f4      	bne.n	4047fa <strstr+0x126>
  404810:	f109 0901 	add.w	r9, r9, #1
  404814:	4589      	cmp	r9, r1
  404816:	d857      	bhi.n	4048c8 <strstr+0x1f4>
  404818:	9b03      	ldr	r3, [sp, #12]
  40481a:	4630      	mov	r0, r6
  40481c:	441d      	add	r5, r3
  40481e:	ebc3 0904 	rsb	r9, r3, r4
  404822:	e7b7      	b.n	404794 <strstr+0xc0>
  404824:	f1c8 0201 	rsb	r2, r8, #1
  404828:	4415      	add	r5, r2
  40482a:	441d      	add	r5, r3
  40482c:	f04f 0900 	mov.w	r9, #0
  404830:	4630      	mov	r0, r6
  404832:	e7af      	b.n	404794 <strstr+0xc0>
  404834:	ebc8 0304 	rsb	r3, r8, r4
  404838:	4543      	cmp	r3, r8
  40483a:	bf38      	it	cc
  40483c:	4643      	movcc	r3, r8
  40483e:	3301      	adds	r3, #1
  404840:	f108 39ff 	add.w	r9, r8, #4294967295
  404844:	9303      	str	r3, [sp, #12]
  404846:	eb06 0309 	add.w	r3, r6, r9
  40484a:	4658      	mov	r0, fp
  40484c:	2500      	movs	r5, #0
  40484e:	46bb      	mov	fp, r7
  404850:	469a      	mov	sl, r3
  404852:	1967      	adds	r7, r4, r5
  404854:	1a3a      	subs	r2, r7, r0
  404856:	2100      	movs	r1, #0
  404858:	4458      	add	r0, fp
  40485a:	f004 fbb9 	bl	408fd0 <memchr>
  40485e:	2800      	cmp	r0, #0
  404860:	f47f af7d 	bne.w	40475e <strstr+0x8a>
  404864:	2f00      	cmp	r7, #0
  404866:	f43f af7a 	beq.w	40475e <strstr+0x8a>
  40486a:	4544      	cmp	r4, r8
  40486c:	d915      	bls.n	40489a <strstr+0x1c6>
  40486e:	eb08 0205 	add.w	r2, r8, r5
  404872:	f816 3008 	ldrb.w	r3, [r6, r8]
  404876:	f81b 0002 	ldrb.w	r0, [fp, r2]
  40487a:	4298      	cmp	r0, r3
  40487c:	445a      	add	r2, fp
  40487e:	eb06 0108 	add.w	r1, r6, r8
  404882:	4643      	mov	r3, r8
  404884:	d006      	beq.n	404894 <strstr+0x1c0>
  404886:	e023      	b.n	4048d0 <strstr+0x1fc>
  404888:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  40488c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  404890:	4586      	cmp	lr, r0
  404892:	d11d      	bne.n	4048d0 <strstr+0x1fc>
  404894:	3301      	adds	r3, #1
  404896:	429c      	cmp	r4, r3
  404898:	d8f6      	bhi.n	404888 <strstr+0x1b4>
  40489a:	f1b9 3fff 	cmp.w	r9, #4294967295
  40489e:	d012      	beq.n	4048c6 <strstr+0x1f2>
  4048a0:	eb05 0209 	add.w	r2, r5, r9
  4048a4:	f89a 1000 	ldrb.w	r1, [sl]
  4048a8:	f81b 3002 	ldrb.w	r3, [fp, r2]
  4048ac:	4299      	cmp	r1, r3
  4048ae:	445a      	add	r2, fp
  4048b0:	d114      	bne.n	4048dc <strstr+0x208>
  4048b2:	4653      	mov	r3, sl
  4048b4:	e005      	b.n	4048c2 <strstr+0x1ee>
  4048b6:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  4048ba:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  4048be:	4288      	cmp	r0, r1
  4048c0:	d10c      	bne.n	4048dc <strstr+0x208>
  4048c2:	42b3      	cmp	r3, r6
  4048c4:	d1f7      	bne.n	4048b6 <strstr+0x1e2>
  4048c6:	465f      	mov	r7, fp
  4048c8:	1978      	adds	r0, r7, r5
  4048ca:	b005      	add	sp, #20
  4048cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4048d0:	f1c8 0201 	rsb	r2, r8, #1
  4048d4:	4415      	add	r5, r2
  4048d6:	441d      	add	r5, r3
  4048d8:	4638      	mov	r0, r7
  4048da:	e7ba      	b.n	404852 <strstr+0x17e>
  4048dc:	9b03      	ldr	r3, [sp, #12]
  4048de:	4638      	mov	r0, r7
  4048e0:	441d      	add	r5, r3
  4048e2:	e7b6      	b.n	404852 <strstr+0x17e>
  4048e4:	780b      	ldrb	r3, [r1, #0]
  4048e6:	b913      	cbnz	r3, 4048ee <strstr+0x21a>
  4048e8:	4770      	bx	lr
  4048ea:	4641      	mov	r1, r8
  4048ec:	e790      	b.n	404810 <strstr+0x13c>
  4048ee:	2000      	movs	r0, #0
  4048f0:	4770      	bx	lr
  4048f2:	bf00      	nop

004048f4 <_strtol_r>:
  4048f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4048f8:	4c47      	ldr	r4, [pc, #284]	; (404a18 <_strtol_r+0x124>)
  4048fa:	4683      	mov	fp, r0
  4048fc:	460e      	mov	r6, r1
  4048fe:	f8d4 e000 	ldr.w	lr, [r4]
  404902:	e000      	b.n	404906 <_strtol_r+0x12>
  404904:	4626      	mov	r6, r4
  404906:	4634      	mov	r4, r6
  404908:	f814 5b01 	ldrb.w	r5, [r4], #1
  40490c:	eb0e 0005 	add.w	r0, lr, r5
  404910:	7840      	ldrb	r0, [r0, #1]
  404912:	f000 0008 	and.w	r0, r0, #8
  404916:	f000 08ff 	and.w	r8, r0, #255	; 0xff
  40491a:	2800      	cmp	r0, #0
  40491c:	d1f2      	bne.n	404904 <_strtol_r+0x10>
  40491e:	2d2d      	cmp	r5, #45	; 0x2d
  404920:	d05c      	beq.n	4049dc <_strtol_r+0xe8>
  404922:	2d2b      	cmp	r5, #43	; 0x2b
  404924:	bf04      	itt	eq
  404926:	7875      	ldrbeq	r5, [r6, #1]
  404928:	1cb4      	addeq	r4, r6, #2
  40492a:	2b00      	cmp	r3, #0
  40492c:	d03e      	beq.n	4049ac <_strtol_r+0xb8>
  40492e:	2b10      	cmp	r3, #16
  404930:	d060      	beq.n	4049f4 <_strtol_r+0x100>
  404932:	469a      	mov	sl, r3
  404934:	f1b8 0f00 	cmp.w	r8, #0
  404938:	bf0c      	ite	eq
  40493a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40493e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  404942:	2700      	movs	r7, #0
  404944:	fbb0 f9fa 	udiv	r9, r0, sl
  404948:	46bc      	mov	ip, r7
  40494a:	fb0a 0019 	mls	r0, sl, r9, r0
  40494e:	e00c      	b.n	40496a <_strtol_r+0x76>
  404950:	3d30      	subs	r5, #48	; 0x30
  404952:	42ab      	cmp	r3, r5
  404954:	dd19      	ble.n	40498a <_strtol_r+0x96>
  404956:	1c7e      	adds	r6, r7, #1
  404958:	d005      	beq.n	404966 <_strtol_r+0x72>
  40495a:	45cc      	cmp	ip, r9
  40495c:	d823      	bhi.n	4049a6 <_strtol_r+0xb2>
  40495e:	d020      	beq.n	4049a2 <_strtol_r+0xae>
  404960:	fb0a 5c0c 	mla	ip, sl, ip, r5
  404964:	2701      	movs	r7, #1
  404966:	f814 5b01 	ldrb.w	r5, [r4], #1
  40496a:	eb0e 0605 	add.w	r6, lr, r5
  40496e:	7876      	ldrb	r6, [r6, #1]
  404970:	f016 0f04 	tst.w	r6, #4
  404974:	d1ec      	bne.n	404950 <_strtol_r+0x5c>
  404976:	f016 0603 	ands.w	r6, r6, #3
  40497a:	d006      	beq.n	40498a <_strtol_r+0x96>
  40497c:	2e01      	cmp	r6, #1
  40497e:	bf14      	ite	ne
  404980:	2657      	movne	r6, #87	; 0x57
  404982:	2637      	moveq	r6, #55	; 0x37
  404984:	1bad      	subs	r5, r5, r6
  404986:	42ab      	cmp	r3, r5
  404988:	dce5      	bgt.n	404956 <_strtol_r+0x62>
  40498a:	1c7b      	adds	r3, r7, #1
  40498c:	d016      	beq.n	4049bc <_strtol_r+0xc8>
  40498e:	f1b8 0f00 	cmp.w	r8, #0
  404992:	d110      	bne.n	4049b6 <_strtol_r+0xc2>
  404994:	4660      	mov	r0, ip
  404996:	2a00      	cmp	r2, #0
  404998:	d039      	beq.n	404a0e <_strtol_r+0x11a>
  40499a:	b9df      	cbnz	r7, 4049d4 <_strtol_r+0xe0>
  40499c:	6011      	str	r1, [r2, #0]
  40499e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049a2:	4285      	cmp	r5, r0
  4049a4:	dddc      	ble.n	404960 <_strtol_r+0x6c>
  4049a6:	f04f 37ff 	mov.w	r7, #4294967295
  4049aa:	e7dc      	b.n	404966 <_strtol_r+0x72>
  4049ac:	2d30      	cmp	r5, #48	; 0x30
  4049ae:	d01a      	beq.n	4049e6 <_strtol_r+0xf2>
  4049b0:	230a      	movs	r3, #10
  4049b2:	469a      	mov	sl, r3
  4049b4:	e7be      	b.n	404934 <_strtol_r+0x40>
  4049b6:	f1cc 0c00 	rsb	ip, ip, #0
  4049ba:	e7eb      	b.n	404994 <_strtol_r+0xa0>
  4049bc:	f1b8 0f00 	cmp.w	r8, #0
  4049c0:	f04f 0322 	mov.w	r3, #34	; 0x22
  4049c4:	bf0c      	ite	eq
  4049c6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4049ca:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  4049ce:	f8cb 3000 	str.w	r3, [fp]
  4049d2:	b1f2      	cbz	r2, 404a12 <_strtol_r+0x11e>
  4049d4:	1e61      	subs	r1, r4, #1
  4049d6:	6011      	str	r1, [r2, #0]
  4049d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049dc:	1cb4      	adds	r4, r6, #2
  4049de:	7875      	ldrb	r5, [r6, #1]
  4049e0:	f04f 0801 	mov.w	r8, #1
  4049e4:	e7a1      	b.n	40492a <_strtol_r+0x36>
  4049e6:	7823      	ldrb	r3, [r4, #0]
  4049e8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  4049ec:	2b58      	cmp	r3, #88	; 0x58
  4049ee:	d008      	beq.n	404a02 <_strtol_r+0x10e>
  4049f0:	2308      	movs	r3, #8
  4049f2:	e79e      	b.n	404932 <_strtol_r+0x3e>
  4049f4:	2d30      	cmp	r5, #48	; 0x30
  4049f6:	d19c      	bne.n	404932 <_strtol_r+0x3e>
  4049f8:	7820      	ldrb	r0, [r4, #0]
  4049fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  4049fe:	2858      	cmp	r0, #88	; 0x58
  404a00:	d197      	bne.n	404932 <_strtol_r+0x3e>
  404a02:	f04f 0a10 	mov.w	sl, #16
  404a06:	7865      	ldrb	r5, [r4, #1]
  404a08:	4653      	mov	r3, sl
  404a0a:	3402      	adds	r4, #2
  404a0c:	e792      	b.n	404934 <_strtol_r+0x40>
  404a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a16:	bf00      	nop
  404a18:	2040044c 	.word	0x2040044c

00404a1c <strtol>:
  404a1c:	b410      	push	{r4}
  404a1e:	4c04      	ldr	r4, [pc, #16]	; (404a30 <strtol+0x14>)
  404a20:	4613      	mov	r3, r2
  404a22:	460a      	mov	r2, r1
  404a24:	4601      	mov	r1, r0
  404a26:	6820      	ldr	r0, [r4, #0]
  404a28:	bc10      	pop	{r4}
  404a2a:	f7ff bf63 	b.w	4048f4 <_strtol_r>
  404a2e:	bf00      	nop
  404a30:	20400448 	.word	0x20400448

00404a34 <_svfprintf_r>:
  404a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a38:	b0c1      	sub	sp, #260	; 0x104
  404a3a:	460c      	mov	r4, r1
  404a3c:	9109      	str	r1, [sp, #36]	; 0x24
  404a3e:	4615      	mov	r5, r2
  404a40:	930e      	str	r3, [sp, #56]	; 0x38
  404a42:	900a      	str	r0, [sp, #40]	; 0x28
  404a44:	f003 ff88 	bl	408958 <_localeconv_r>
  404a48:	6803      	ldr	r3, [r0, #0]
  404a4a:	9317      	str	r3, [sp, #92]	; 0x5c
  404a4c:	4618      	mov	r0, r3
  404a4e:	f7ff fc77 	bl	404340 <strlen>
  404a52:	89a3      	ldrh	r3, [r4, #12]
  404a54:	9016      	str	r0, [sp, #88]	; 0x58
  404a56:	061e      	lsls	r6, r3, #24
  404a58:	d503      	bpl.n	404a62 <_svfprintf_r+0x2e>
  404a5a:	6923      	ldr	r3, [r4, #16]
  404a5c:	2b00      	cmp	r3, #0
  404a5e:	f001 8119 	beq.w	405c94 <_svfprintf_r+0x1260>
  404a62:	2300      	movs	r3, #0
  404a64:	461a      	mov	r2, r3
  404a66:	9312      	str	r3, [sp, #72]	; 0x48
  404a68:	9325      	str	r3, [sp, #148]	; 0x94
  404a6a:	9324      	str	r3, [sp, #144]	; 0x90
  404a6c:	9319      	str	r3, [sp, #100]	; 0x64
  404a6e:	930b      	str	r3, [sp, #44]	; 0x2c
  404a70:	f8df a464 	ldr.w	sl, [pc, #1124]	; 404ed8 <_svfprintf_r+0x4a4>
  404a74:	9214      	str	r2, [sp, #80]	; 0x50
  404a76:	ab30      	add	r3, sp, #192	; 0xc0
  404a78:	9323      	str	r3, [sp, #140]	; 0x8c
  404a7a:	4699      	mov	r9, r3
  404a7c:	9215      	str	r2, [sp, #84]	; 0x54
  404a7e:	46a8      	mov	r8, r5
  404a80:	f898 3000 	ldrb.w	r3, [r8]
  404a84:	4644      	mov	r4, r8
  404a86:	b1eb      	cbz	r3, 404ac4 <_svfprintf_r+0x90>
  404a88:	2b25      	cmp	r3, #37	; 0x25
  404a8a:	d102      	bne.n	404a92 <_svfprintf_r+0x5e>
  404a8c:	e01a      	b.n	404ac4 <_svfprintf_r+0x90>
  404a8e:	2b25      	cmp	r3, #37	; 0x25
  404a90:	d003      	beq.n	404a9a <_svfprintf_r+0x66>
  404a92:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404a96:	2b00      	cmp	r3, #0
  404a98:	d1f9      	bne.n	404a8e <_svfprintf_r+0x5a>
  404a9a:	ebc8 0504 	rsb	r5, r8, r4
  404a9e:	b18d      	cbz	r5, 404ac4 <_svfprintf_r+0x90>
  404aa0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404aa2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404aa4:	f8c9 8000 	str.w	r8, [r9]
  404aa8:	3301      	adds	r3, #1
  404aaa:	442a      	add	r2, r5
  404aac:	2b07      	cmp	r3, #7
  404aae:	f8c9 5004 	str.w	r5, [r9, #4]
  404ab2:	9225      	str	r2, [sp, #148]	; 0x94
  404ab4:	9324      	str	r3, [sp, #144]	; 0x90
  404ab6:	f300 80a6 	bgt.w	404c06 <_svfprintf_r+0x1d2>
  404aba:	f109 0908 	add.w	r9, r9, #8
  404abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404ac0:	442b      	add	r3, r5
  404ac2:	930b      	str	r3, [sp, #44]	; 0x2c
  404ac4:	7823      	ldrb	r3, [r4, #0]
  404ac6:	2b00      	cmp	r3, #0
  404ac8:	f000 80a6 	beq.w	404c18 <_svfprintf_r+0x1e4>
  404acc:	2300      	movs	r3, #0
  404ace:	461a      	mov	r2, r3
  404ad0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404ad4:	4619      	mov	r1, r3
  404ad6:	930c      	str	r3, [sp, #48]	; 0x30
  404ad8:	9307      	str	r3, [sp, #28]
  404ada:	f04f 3bff 	mov.w	fp, #4294967295
  404ade:	7863      	ldrb	r3, [r4, #1]
  404ae0:	f104 0801 	add.w	r8, r4, #1
  404ae4:	465d      	mov	r5, fp
  404ae6:	f108 0801 	add.w	r8, r8, #1
  404aea:	f1a3 0020 	sub.w	r0, r3, #32
  404aee:	2858      	cmp	r0, #88	; 0x58
  404af0:	f200 8425 	bhi.w	40533e <_svfprintf_r+0x90a>
  404af4:	e8df f010 	tbh	[pc, r0, lsl #1]
  404af8:	04230388 	.word	0x04230388
  404afc:	03900423 	.word	0x03900423
  404b00:	04230423 	.word	0x04230423
  404b04:	04230423 	.word	0x04230423
  404b08:	04230423 	.word	0x04230423
  404b0c:	03a50397 	.word	0x03a50397
  404b10:	005d0423 	.word	0x005d0423
  404b14:	042300e2 	.word	0x042300e2
  404b18:	010500fe 	.word	0x010500fe
  404b1c:	01050105 	.word	0x01050105
  404b20:	01050105 	.word	0x01050105
  404b24:	01050105 	.word	0x01050105
  404b28:	01050105 	.word	0x01050105
  404b2c:	04230423 	.word	0x04230423
  404b30:	04230423 	.word	0x04230423
  404b34:	04230423 	.word	0x04230423
  404b38:	04230423 	.word	0x04230423
  404b3c:	04230423 	.word	0x04230423
  404b40:	02810115 	.word	0x02810115
  404b44:	02810423 	.word	0x02810423
  404b48:	04230423 	.word	0x04230423
  404b4c:	04230423 	.word	0x04230423
  404b50:	042302c6 	.word	0x042302c6
  404b54:	02cd0423 	.word	0x02cd0423
  404b58:	04230423 	.word	0x04230423
  404b5c:	04230423 	.word	0x04230423
  404b60:	02f70423 	.word	0x02f70423
  404b64:	04230423 	.word	0x04230423
  404b68:	04230325 	.word	0x04230325
  404b6c:	04230423 	.word	0x04230423
  404b70:	04230423 	.word	0x04230423
  404b74:	04230423 	.word	0x04230423
  404b78:	04230423 	.word	0x04230423
  404b7c:	03660423 	.word	0x03660423
  404b80:	02810379 	.word	0x02810379
  404b84:	02810281 	.word	0x02810281
  404b88:	03790381 	.word	0x03790381
  404b8c:	04230423 	.word	0x04230423
  404b90:	042303d1 	.word	0x042303d1
  404b94:	00a303db 	.word	0x00a303db
  404b98:	03ee0064 	.word	0x03ee0064
  404b9c:	03f50423 	.word	0x03f50423
  404ba0:	03aa0423 	.word	0x03aa0423
  404ba4:	04230423 	.word	0x04230423
  404ba8:	03bc      	.short	0x03bc
  404baa:	980c      	ldr	r0, [sp, #48]	; 0x30
  404bac:	930e      	str	r3, [sp, #56]	; 0x38
  404bae:	4240      	negs	r0, r0
  404bb0:	900c      	str	r0, [sp, #48]	; 0x30
  404bb2:	9b07      	ldr	r3, [sp, #28]
  404bb4:	f043 0304 	orr.w	r3, r3, #4
  404bb8:	9307      	str	r3, [sp, #28]
  404bba:	f898 3000 	ldrb.w	r3, [r8]
  404bbe:	e792      	b.n	404ae6 <_svfprintf_r+0xb2>
  404bc0:	980e      	ldr	r0, [sp, #56]	; 0x38
  404bc2:	46ab      	mov	fp, r5
  404bc4:	2100      	movs	r1, #0
  404bc6:	6804      	ldr	r4, [r0, #0]
  404bc8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404bcc:	1d07      	adds	r7, r0, #4
  404bce:	9807      	ldr	r0, [sp, #28]
  404bd0:	2330      	movs	r3, #48	; 0x30
  404bd2:	2278      	movs	r2, #120	; 0x78
  404bd4:	458b      	cmp	fp, r1
  404bd6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  404bda:	f04f 0500 	mov.w	r5, #0
  404bde:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  404be2:	f040 0302 	orr.w	r3, r0, #2
  404be6:	f2c0 83c7 	blt.w	405378 <_svfprintf_r+0x944>
  404bea:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  404bee:	f043 0302 	orr.w	r3, r3, #2
  404bf2:	9307      	str	r3, [sp, #28]
  404bf4:	ea54 0305 	orrs.w	r3, r4, r5
  404bf8:	970e      	str	r7, [sp, #56]	; 0x38
  404bfa:	f000 8393 	beq.w	405324 <_svfprintf_r+0x8f0>
  404bfe:	460f      	mov	r7, r1
  404c00:	9211      	str	r2, [sp, #68]	; 0x44
  404c02:	48b3      	ldr	r0, [pc, #716]	; (404ed0 <_svfprintf_r+0x49c>)
  404c04:	e2ce      	b.n	4051a4 <_svfprintf_r+0x770>
  404c06:	aa23      	add	r2, sp, #140	; 0x8c
  404c08:	9909      	ldr	r1, [sp, #36]	; 0x24
  404c0a:	980a      	ldr	r0, [sp, #40]	; 0x28
  404c0c:	f005 f920 	bl	409e50 <__ssprint_r>
  404c10:	b948      	cbnz	r0, 404c26 <_svfprintf_r+0x1f2>
  404c12:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404c16:	e752      	b.n	404abe <_svfprintf_r+0x8a>
  404c18:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404c1a:	b123      	cbz	r3, 404c26 <_svfprintf_r+0x1f2>
  404c1c:	980a      	ldr	r0, [sp, #40]	; 0x28
  404c1e:	9909      	ldr	r1, [sp, #36]	; 0x24
  404c20:	aa23      	add	r2, sp, #140	; 0x8c
  404c22:	f005 f915 	bl	409e50 <__ssprint_r>
  404c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404c28:	899b      	ldrh	r3, [r3, #12]
  404c2a:	f013 0f40 	tst.w	r3, #64	; 0x40
  404c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404c30:	bf18      	it	ne
  404c32:	f04f 33ff 	movne.w	r3, #4294967295
  404c36:	4618      	mov	r0, r3
  404c38:	b041      	add	sp, #260	; 0x104
  404c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c3e:	9311      	str	r3, [sp, #68]	; 0x44
  404c40:	46ab      	mov	fp, r5
  404c42:	2a00      	cmp	r2, #0
  404c44:	f041 8223 	bne.w	40608e <_svfprintf_r+0x165a>
  404c48:	9a07      	ldr	r2, [sp, #28]
  404c4a:	f012 0320 	ands.w	r3, r2, #32
  404c4e:	f000 822e 	beq.w	4050ae <_svfprintf_r+0x67a>
  404c52:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404c54:	3707      	adds	r7, #7
  404c56:	f027 0307 	bic.w	r3, r7, #7
  404c5a:	2700      	movs	r7, #0
  404c5c:	f103 0108 	add.w	r1, r3, #8
  404c60:	45bb      	cmp	fp, r7
  404c62:	910e      	str	r1, [sp, #56]	; 0x38
  404c64:	e9d3 4500 	ldrd	r4, r5, [r3]
  404c68:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404c6c:	f2c0 8752 	blt.w	405b14 <_svfprintf_r+0x10e0>
  404c70:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  404c74:	9307      	str	r3, [sp, #28]
  404c76:	ea54 0305 	orrs.w	r3, r4, r5
  404c7a:	f000 8375 	beq.w	405368 <_svfprintf_r+0x934>
  404c7e:	ae30      	add	r6, sp, #192	; 0xc0
  404c80:	08e2      	lsrs	r2, r4, #3
  404c82:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404c86:	08e9      	lsrs	r1, r5, #3
  404c88:	f004 0307 	and.w	r3, r4, #7
  404c8c:	460d      	mov	r5, r1
  404c8e:	4614      	mov	r4, r2
  404c90:	3330      	adds	r3, #48	; 0x30
  404c92:	ea54 0205 	orrs.w	r2, r4, r5
  404c96:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404c9a:	d1f1      	bne.n	404c80 <_svfprintf_r+0x24c>
  404c9c:	9a07      	ldr	r2, [sp, #28]
  404c9e:	07d1      	lsls	r1, r2, #31
  404ca0:	f140 8084 	bpl.w	404dac <_svfprintf_r+0x378>
  404ca4:	2b30      	cmp	r3, #48	; 0x30
  404ca6:	f000 8081 	beq.w	404dac <_svfprintf_r+0x378>
  404caa:	2230      	movs	r2, #48	; 0x30
  404cac:	1e73      	subs	r3, r6, #1
  404cae:	f806 2c01 	strb.w	r2, [r6, #-1]
  404cb2:	aa30      	add	r2, sp, #192	; 0xc0
  404cb4:	1ad2      	subs	r2, r2, r3
  404cb6:	920d      	str	r2, [sp, #52]	; 0x34
  404cb8:	461e      	mov	r6, r3
  404cba:	e07a      	b.n	404db2 <_svfprintf_r+0x37e>
  404cbc:	f898 3000 	ldrb.w	r3, [r8]
  404cc0:	2b2a      	cmp	r3, #42	; 0x2a
  404cc2:	f108 0401 	add.w	r4, r8, #1
  404cc6:	f001 81b1 	beq.w	40602c <_svfprintf_r+0x15f8>
  404cca:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404cce:	2809      	cmp	r0, #9
  404cd0:	bf98      	it	ls
  404cd2:	2500      	movls	r5, #0
  404cd4:	f201 8164 	bhi.w	405fa0 <_svfprintf_r+0x156c>
  404cd8:	f814 3b01 	ldrb.w	r3, [r4], #1
  404cdc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  404ce0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  404ce4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404ce8:	2809      	cmp	r0, #9
  404cea:	d9f5      	bls.n	404cd8 <_svfprintf_r+0x2a4>
  404cec:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  404cf0:	46a0      	mov	r8, r4
  404cf2:	e6fa      	b.n	404aea <_svfprintf_r+0xb6>
  404cf4:	9b07      	ldr	r3, [sp, #28]
  404cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404cfa:	9307      	str	r3, [sp, #28]
  404cfc:	f898 3000 	ldrb.w	r3, [r8]
  404d00:	e6f1      	b.n	404ae6 <_svfprintf_r+0xb2>
  404d02:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404d06:	2300      	movs	r3, #0
  404d08:	461c      	mov	r4, r3
  404d0a:	f818 3b01 	ldrb.w	r3, [r8], #1
  404d0e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404d12:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404d16:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404d1a:	2809      	cmp	r0, #9
  404d1c:	d9f5      	bls.n	404d0a <_svfprintf_r+0x2d6>
  404d1e:	940c      	str	r4, [sp, #48]	; 0x30
  404d20:	e6e3      	b.n	404aea <_svfprintf_r+0xb6>
  404d22:	9311      	str	r3, [sp, #68]	; 0x44
  404d24:	46ab      	mov	fp, r5
  404d26:	2a00      	cmp	r2, #0
  404d28:	f041 81c9 	bne.w	4060be <_svfprintf_r+0x168a>
  404d2c:	9b07      	ldr	r3, [sp, #28]
  404d2e:	f043 0310 	orr.w	r3, r3, #16
  404d32:	9307      	str	r3, [sp, #28]
  404d34:	9b07      	ldr	r3, [sp, #28]
  404d36:	0698      	lsls	r0, r3, #26
  404d38:	f140 8530 	bpl.w	40579c <_svfprintf_r+0xd68>
  404d3c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404d3e:	3707      	adds	r7, #7
  404d40:	f027 0707 	bic.w	r7, r7, #7
  404d44:	e9d7 2300 	ldrd	r2, r3, [r7]
  404d48:	f107 0108 	add.w	r1, r7, #8
  404d4c:	910e      	str	r1, [sp, #56]	; 0x38
  404d4e:	4614      	mov	r4, r2
  404d50:	461d      	mov	r5, r3
  404d52:	2a00      	cmp	r2, #0
  404d54:	f173 0300 	sbcs.w	r3, r3, #0
  404d58:	f2c0 855b 	blt.w	405812 <_svfprintf_r+0xdde>
  404d5c:	f1bb 0f00 	cmp.w	fp, #0
  404d60:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404d64:	f2c0 8538 	blt.w	4057d8 <_svfprintf_r+0xda4>
  404d68:	9b07      	ldr	r3, [sp, #28]
  404d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404d6e:	9307      	str	r3, [sp, #28]
  404d70:	ea54 0305 	orrs.w	r3, r4, r5
  404d74:	f000 81db 	beq.w	40512e <_svfprintf_r+0x6fa>
  404d78:	2d00      	cmp	r5, #0
  404d7a:	bf08      	it	eq
  404d7c:	2c0a      	cmpeq	r4, #10
  404d7e:	f0c0 81db 	bcc.w	405138 <_svfprintf_r+0x704>
  404d82:	ae30      	add	r6, sp, #192	; 0xc0
  404d84:	4620      	mov	r0, r4
  404d86:	4629      	mov	r1, r5
  404d88:	220a      	movs	r2, #10
  404d8a:	2300      	movs	r3, #0
  404d8c:	f005 ff3c 	bl	40ac08 <__aeabi_uldivmod>
  404d90:	3230      	adds	r2, #48	; 0x30
  404d92:	f806 2d01 	strb.w	r2, [r6, #-1]!
  404d96:	4620      	mov	r0, r4
  404d98:	4629      	mov	r1, r5
  404d9a:	2300      	movs	r3, #0
  404d9c:	220a      	movs	r2, #10
  404d9e:	f005 ff33 	bl	40ac08 <__aeabi_uldivmod>
  404da2:	4604      	mov	r4, r0
  404da4:	460d      	mov	r5, r1
  404da6:	ea54 0305 	orrs.w	r3, r4, r5
  404daa:	d1eb      	bne.n	404d84 <_svfprintf_r+0x350>
  404dac:	ab30      	add	r3, sp, #192	; 0xc0
  404dae:	1b9b      	subs	r3, r3, r6
  404db0:	930d      	str	r3, [sp, #52]	; 0x34
  404db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404db4:	455b      	cmp	r3, fp
  404db6:	bfb8      	it	lt
  404db8:	465b      	movlt	r3, fp
  404dba:	9308      	str	r3, [sp, #32]
  404dbc:	2300      	movs	r3, #0
  404dbe:	9313      	str	r3, [sp, #76]	; 0x4c
  404dc0:	b117      	cbz	r7, 404dc8 <_svfprintf_r+0x394>
  404dc2:	9b08      	ldr	r3, [sp, #32]
  404dc4:	3301      	adds	r3, #1
  404dc6:	9308      	str	r3, [sp, #32]
  404dc8:	9b07      	ldr	r3, [sp, #28]
  404dca:	f013 0302 	ands.w	r3, r3, #2
  404dce:	930f      	str	r3, [sp, #60]	; 0x3c
  404dd0:	d002      	beq.n	404dd8 <_svfprintf_r+0x3a4>
  404dd2:	9b08      	ldr	r3, [sp, #32]
  404dd4:	3302      	adds	r3, #2
  404dd6:	9308      	str	r3, [sp, #32]
  404dd8:	9b07      	ldr	r3, [sp, #28]
  404dda:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404dde:	9310      	str	r3, [sp, #64]	; 0x40
  404de0:	f040 82d7 	bne.w	405392 <_svfprintf_r+0x95e>
  404de4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404de6:	9a08      	ldr	r2, [sp, #32]
  404de8:	1a9d      	subs	r5, r3, r2
  404dea:	2d00      	cmp	r5, #0
  404dec:	f340 82d1 	ble.w	405392 <_svfprintf_r+0x95e>
  404df0:	2d10      	cmp	r5, #16
  404df2:	9925      	ldr	r1, [sp, #148]	; 0x94
  404df4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404df6:	4f37      	ldr	r7, [pc, #220]	; (404ed4 <_svfprintf_r+0x4a0>)
  404df8:	dd27      	ble.n	404e4a <_svfprintf_r+0x416>
  404dfa:	9618      	str	r6, [sp, #96]	; 0x60
  404dfc:	4648      	mov	r0, r9
  404dfe:	2410      	movs	r4, #16
  404e00:	46b9      	mov	r9, r7
  404e02:	9e09      	ldr	r6, [sp, #36]	; 0x24
  404e04:	462f      	mov	r7, r5
  404e06:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404e08:	e004      	b.n	404e14 <_svfprintf_r+0x3e0>
  404e0a:	3f10      	subs	r7, #16
  404e0c:	2f10      	cmp	r7, #16
  404e0e:	f100 0008 	add.w	r0, r0, #8
  404e12:	dd16      	ble.n	404e42 <_svfprintf_r+0x40e>
  404e14:	3201      	adds	r2, #1
  404e16:	4b2f      	ldr	r3, [pc, #188]	; (404ed4 <_svfprintf_r+0x4a0>)
  404e18:	9224      	str	r2, [sp, #144]	; 0x90
  404e1a:	3110      	adds	r1, #16
  404e1c:	2a07      	cmp	r2, #7
  404e1e:	9125      	str	r1, [sp, #148]	; 0x94
  404e20:	e880 0018 	stmia.w	r0, {r3, r4}
  404e24:	ddf1      	ble.n	404e0a <_svfprintf_r+0x3d6>
  404e26:	aa23      	add	r2, sp, #140	; 0x8c
  404e28:	4631      	mov	r1, r6
  404e2a:	4628      	mov	r0, r5
  404e2c:	f005 f810 	bl	409e50 <__ssprint_r>
  404e30:	2800      	cmp	r0, #0
  404e32:	f47f aef8 	bne.w	404c26 <_svfprintf_r+0x1f2>
  404e36:	3f10      	subs	r7, #16
  404e38:	2f10      	cmp	r7, #16
  404e3a:	9925      	ldr	r1, [sp, #148]	; 0x94
  404e3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404e3e:	a830      	add	r0, sp, #192	; 0xc0
  404e40:	dce8      	bgt.n	404e14 <_svfprintf_r+0x3e0>
  404e42:	9e18      	ldr	r6, [sp, #96]	; 0x60
  404e44:	463d      	mov	r5, r7
  404e46:	464f      	mov	r7, r9
  404e48:	4681      	mov	r9, r0
  404e4a:	3201      	adds	r2, #1
  404e4c:	186c      	adds	r4, r5, r1
  404e4e:	2a07      	cmp	r2, #7
  404e50:	9425      	str	r4, [sp, #148]	; 0x94
  404e52:	9224      	str	r2, [sp, #144]	; 0x90
  404e54:	f8c9 7000 	str.w	r7, [r9]
  404e58:	f8c9 5004 	str.w	r5, [r9, #4]
  404e5c:	f300 8428 	bgt.w	4056b0 <_svfprintf_r+0xc7c>
  404e60:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404e64:	f109 0908 	add.w	r9, r9, #8
  404e68:	b177      	cbz	r7, 404e88 <_svfprintf_r+0x454>
  404e6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404e6c:	3301      	adds	r3, #1
  404e6e:	3401      	adds	r4, #1
  404e70:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  404e74:	2201      	movs	r2, #1
  404e76:	2b07      	cmp	r3, #7
  404e78:	9425      	str	r4, [sp, #148]	; 0x94
  404e7a:	9324      	str	r3, [sp, #144]	; 0x90
  404e7c:	e889 0006 	stmia.w	r9, {r1, r2}
  404e80:	f300 83a0 	bgt.w	4055c4 <_svfprintf_r+0xb90>
  404e84:	f109 0908 	add.w	r9, r9, #8
  404e88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404e8a:	b16b      	cbz	r3, 404ea8 <_svfprintf_r+0x474>
  404e8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404e8e:	3301      	adds	r3, #1
  404e90:	3402      	adds	r4, #2
  404e92:	a91c      	add	r1, sp, #112	; 0x70
  404e94:	2202      	movs	r2, #2
  404e96:	2b07      	cmp	r3, #7
  404e98:	9425      	str	r4, [sp, #148]	; 0x94
  404e9a:	9324      	str	r3, [sp, #144]	; 0x90
  404e9c:	e889 0006 	stmia.w	r9, {r1, r2}
  404ea0:	f300 839c 	bgt.w	4055dc <_svfprintf_r+0xba8>
  404ea4:	f109 0908 	add.w	r9, r9, #8
  404ea8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404eaa:	2b80      	cmp	r3, #128	; 0x80
  404eac:	f000 82d5 	beq.w	40545a <_svfprintf_r+0xa26>
  404eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404eb2:	ebc3 070b 	rsb	r7, r3, fp
  404eb6:	2f00      	cmp	r7, #0
  404eb8:	dd39      	ble.n	404f2e <_svfprintf_r+0x4fa>
  404eba:	4a07      	ldr	r2, [pc, #28]	; (404ed8 <_svfprintf_r+0x4a4>)
  404ebc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404ebe:	920f      	str	r2, [sp, #60]	; 0x3c
  404ec0:	2f10      	cmp	r7, #16
  404ec2:	dd28      	ble.n	404f16 <_svfprintf_r+0x4e2>
  404ec4:	4622      	mov	r2, r4
  404ec6:	f04f 0b10 	mov.w	fp, #16
  404eca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404ecc:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404ece:	e00a      	b.n	404ee6 <_svfprintf_r+0x4b2>
  404ed0:	0040c088 	.word	0x0040c088
  404ed4:	0040c0a8 	.word	0x0040c0a8
  404ed8:	0040c054 	.word	0x0040c054
  404edc:	3f10      	subs	r7, #16
  404ede:	2f10      	cmp	r7, #16
  404ee0:	f109 0908 	add.w	r9, r9, #8
  404ee4:	dd16      	ble.n	404f14 <_svfprintf_r+0x4e0>
  404ee6:	3301      	adds	r3, #1
  404ee8:	3210      	adds	r2, #16
  404eea:	2b07      	cmp	r3, #7
  404eec:	9225      	str	r2, [sp, #148]	; 0x94
  404eee:	9324      	str	r3, [sp, #144]	; 0x90
  404ef0:	e889 0c00 	stmia.w	r9, {sl, fp}
  404ef4:	ddf2      	ble.n	404edc <_svfprintf_r+0x4a8>
  404ef6:	aa23      	add	r2, sp, #140	; 0x8c
  404ef8:	4621      	mov	r1, r4
  404efa:	4628      	mov	r0, r5
  404efc:	f004 ffa8 	bl	409e50 <__ssprint_r>
  404f00:	2800      	cmp	r0, #0
  404f02:	f47f ae90 	bne.w	404c26 <_svfprintf_r+0x1f2>
  404f06:	3f10      	subs	r7, #16
  404f08:	2f10      	cmp	r7, #16
  404f0a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404f0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f0e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404f12:	dce8      	bgt.n	404ee6 <_svfprintf_r+0x4b2>
  404f14:	4614      	mov	r4, r2
  404f16:	3301      	adds	r3, #1
  404f18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404f1a:	9324      	str	r3, [sp, #144]	; 0x90
  404f1c:	443c      	add	r4, r7
  404f1e:	2b07      	cmp	r3, #7
  404f20:	9425      	str	r4, [sp, #148]	; 0x94
  404f22:	e889 0084 	stmia.w	r9, {r2, r7}
  404f26:	f300 8341 	bgt.w	4055ac <_svfprintf_r+0xb78>
  404f2a:	f109 0908 	add.w	r9, r9, #8
  404f2e:	9b07      	ldr	r3, [sp, #28]
  404f30:	05da      	lsls	r2, r3, #23
  404f32:	f100 8230 	bmi.w	405396 <_svfprintf_r+0x962>
  404f36:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f38:	990d      	ldr	r1, [sp, #52]	; 0x34
  404f3a:	f8c9 6000 	str.w	r6, [r9]
  404f3e:	3301      	adds	r3, #1
  404f40:	440c      	add	r4, r1
  404f42:	2b07      	cmp	r3, #7
  404f44:	9425      	str	r4, [sp, #148]	; 0x94
  404f46:	f8c9 1004 	str.w	r1, [r9, #4]
  404f4a:	9324      	str	r3, [sp, #144]	; 0x90
  404f4c:	f300 8318 	bgt.w	405580 <_svfprintf_r+0xb4c>
  404f50:	f109 0908 	add.w	r9, r9, #8
  404f54:	9b07      	ldr	r3, [sp, #28]
  404f56:	0759      	lsls	r1, r3, #29
  404f58:	d53f      	bpl.n	404fda <_svfprintf_r+0x5a6>
  404f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404f5c:	9a08      	ldr	r2, [sp, #32]
  404f5e:	1a9d      	subs	r5, r3, r2
  404f60:	2d00      	cmp	r5, #0
  404f62:	dd3a      	ble.n	404fda <_svfprintf_r+0x5a6>
  404f64:	2d10      	cmp	r5, #16
  404f66:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f68:	4fbc      	ldr	r7, [pc, #752]	; (40525c <_svfprintf_r+0x828>)
  404f6a:	dd23      	ble.n	404fb4 <_svfprintf_r+0x580>
  404f6c:	4622      	mov	r2, r4
  404f6e:	2610      	movs	r6, #16
  404f70:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404f74:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404f76:	e004      	b.n	404f82 <_svfprintf_r+0x54e>
  404f78:	3d10      	subs	r5, #16
  404f7a:	2d10      	cmp	r5, #16
  404f7c:	f109 0908 	add.w	r9, r9, #8
  404f80:	dd17      	ble.n	404fb2 <_svfprintf_r+0x57e>
  404f82:	3301      	adds	r3, #1
  404f84:	49b5      	ldr	r1, [pc, #724]	; (40525c <_svfprintf_r+0x828>)
  404f86:	9324      	str	r3, [sp, #144]	; 0x90
  404f88:	3210      	adds	r2, #16
  404f8a:	2b07      	cmp	r3, #7
  404f8c:	9225      	str	r2, [sp, #148]	; 0x94
  404f8e:	e889 0042 	stmia.w	r9, {r1, r6}
  404f92:	ddf1      	ble.n	404f78 <_svfprintf_r+0x544>
  404f94:	aa23      	add	r2, sp, #140	; 0x8c
  404f96:	4621      	mov	r1, r4
  404f98:	4658      	mov	r0, fp
  404f9a:	f004 ff59 	bl	409e50 <__ssprint_r>
  404f9e:	2800      	cmp	r0, #0
  404fa0:	f47f ae41 	bne.w	404c26 <_svfprintf_r+0x1f2>
  404fa4:	3d10      	subs	r5, #16
  404fa6:	2d10      	cmp	r5, #16
  404fa8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404faa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404fac:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404fb0:	dce7      	bgt.n	404f82 <_svfprintf_r+0x54e>
  404fb2:	4614      	mov	r4, r2
  404fb4:	3301      	adds	r3, #1
  404fb6:	442c      	add	r4, r5
  404fb8:	2b07      	cmp	r3, #7
  404fba:	9425      	str	r4, [sp, #148]	; 0x94
  404fbc:	9324      	str	r3, [sp, #144]	; 0x90
  404fbe:	f8c9 7000 	str.w	r7, [r9]
  404fc2:	f8c9 5004 	str.w	r5, [r9, #4]
  404fc6:	dd08      	ble.n	404fda <_svfprintf_r+0x5a6>
  404fc8:	aa23      	add	r2, sp, #140	; 0x8c
  404fca:	9909      	ldr	r1, [sp, #36]	; 0x24
  404fcc:	980a      	ldr	r0, [sp, #40]	; 0x28
  404fce:	f004 ff3f 	bl	409e50 <__ssprint_r>
  404fd2:	2800      	cmp	r0, #0
  404fd4:	f47f ae27 	bne.w	404c26 <_svfprintf_r+0x1f2>
  404fd8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404fdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404fde:	9908      	ldr	r1, [sp, #32]
  404fe0:	428a      	cmp	r2, r1
  404fe2:	bfac      	ite	ge
  404fe4:	189b      	addge	r3, r3, r2
  404fe6:	185b      	addlt	r3, r3, r1
  404fe8:	930b      	str	r3, [sp, #44]	; 0x2c
  404fea:	2c00      	cmp	r4, #0
  404fec:	f040 82d4 	bne.w	405598 <_svfprintf_r+0xb64>
  404ff0:	2300      	movs	r3, #0
  404ff2:	9324      	str	r3, [sp, #144]	; 0x90
  404ff4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404ff8:	e542      	b.n	404a80 <_svfprintf_r+0x4c>
  404ffa:	9311      	str	r3, [sp, #68]	; 0x44
  404ffc:	46ab      	mov	fp, r5
  404ffe:	2a00      	cmp	r2, #0
  405000:	f041 8059 	bne.w	4060b6 <_svfprintf_r+0x1682>
  405004:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  405006:	3707      	adds	r7, #7
  405008:	f027 0307 	bic.w	r3, r7, #7
  40500c:	f103 0208 	add.w	r2, r3, #8
  405010:	920e      	str	r2, [sp, #56]	; 0x38
  405012:	681a      	ldr	r2, [r3, #0]
  405014:	9214      	str	r2, [sp, #80]	; 0x50
  405016:	685b      	ldr	r3, [r3, #4]
  405018:	9315      	str	r3, [sp, #84]	; 0x54
  40501a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40501c:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40501e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  405022:	4628      	mov	r0, r5
  405024:	4621      	mov	r1, r4
  405026:	f04f 32ff 	mov.w	r2, #4294967295
  40502a:	4b8d      	ldr	r3, [pc, #564]	; (405260 <_svfprintf_r+0x82c>)
  40502c:	f005 fdae 	bl	40ab8c <__aeabi_dcmpun>
  405030:	2800      	cmp	r0, #0
  405032:	f040 84c1 	bne.w	4059b8 <_svfprintf_r+0xf84>
  405036:	4628      	mov	r0, r5
  405038:	4621      	mov	r1, r4
  40503a:	f04f 32ff 	mov.w	r2, #4294967295
  40503e:	4b88      	ldr	r3, [pc, #544]	; (405260 <_svfprintf_r+0x82c>)
  405040:	f005 fd86 	bl	40ab50 <__aeabi_dcmple>
  405044:	2800      	cmp	r0, #0
  405046:	f040 84b7 	bne.w	4059b8 <_svfprintf_r+0xf84>
  40504a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40504c:	9915      	ldr	r1, [sp, #84]	; 0x54
  40504e:	2200      	movs	r2, #0
  405050:	2300      	movs	r3, #0
  405052:	f005 fd73 	bl	40ab3c <__aeabi_dcmplt>
  405056:	2800      	cmp	r0, #0
  405058:	f040 874b 	bne.w	405ef2 <_svfprintf_r+0x14be>
  40505c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  405060:	4e80      	ldr	r6, [pc, #512]	; (405264 <_svfprintf_r+0x830>)
  405062:	4b81      	ldr	r3, [pc, #516]	; (405268 <_svfprintf_r+0x834>)
  405064:	9907      	ldr	r1, [sp, #28]
  405066:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  40506a:	9107      	str	r1, [sp, #28]
  40506c:	9911      	ldr	r1, [sp, #68]	; 0x44
  40506e:	2203      	movs	r2, #3
  405070:	f04f 0b00 	mov.w	fp, #0
  405074:	9208      	str	r2, [sp, #32]
  405076:	2947      	cmp	r1, #71	; 0x47
  405078:	bfd8      	it	le
  40507a:	461e      	movle	r6, r3
  40507c:	920d      	str	r2, [sp, #52]	; 0x34
  40507e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  405082:	e69d      	b.n	404dc0 <_svfprintf_r+0x38c>
  405084:	9b07      	ldr	r3, [sp, #28]
  405086:	f043 0308 	orr.w	r3, r3, #8
  40508a:	9307      	str	r3, [sp, #28]
  40508c:	f898 3000 	ldrb.w	r3, [r8]
  405090:	e529      	b.n	404ae6 <_svfprintf_r+0xb2>
  405092:	9311      	str	r3, [sp, #68]	; 0x44
  405094:	46ab      	mov	fp, r5
  405096:	2a00      	cmp	r2, #0
  405098:	f041 8009 	bne.w	4060ae <_svfprintf_r+0x167a>
  40509c:	9b07      	ldr	r3, [sp, #28]
  40509e:	f043 0310 	orr.w	r3, r3, #16
  4050a2:	9307      	str	r3, [sp, #28]
  4050a4:	9a07      	ldr	r2, [sp, #28]
  4050a6:	f012 0320 	ands.w	r3, r2, #32
  4050aa:	f47f add2 	bne.w	404c52 <_svfprintf_r+0x21e>
  4050ae:	9907      	ldr	r1, [sp, #28]
  4050b0:	f011 0210 	ands.w	r2, r1, #16
  4050b4:	f000 8507 	beq.w	405ac6 <_svfprintf_r+0x1092>
  4050b8:	980e      	ldr	r0, [sp, #56]	; 0x38
  4050ba:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4050be:	f1bb 0f00 	cmp.w	fp, #0
  4050c2:	6804      	ldr	r4, [r0, #0]
  4050c4:	f100 0704 	add.w	r7, r0, #4
  4050c8:	f04f 0500 	mov.w	r5, #0
  4050cc:	f2c0 8521 	blt.w	405b12 <_svfprintf_r+0x10de>
  4050d0:	460a      	mov	r2, r1
  4050d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4050d6:	9207      	str	r2, [sp, #28]
  4050d8:	ea54 0205 	orrs.w	r2, r4, r5
  4050dc:	970e      	str	r7, [sp, #56]	; 0x38
  4050de:	f000 8143 	beq.w	405368 <_svfprintf_r+0x934>
  4050e2:	461f      	mov	r7, r3
  4050e4:	e5cb      	b.n	404c7e <_svfprintf_r+0x24a>
  4050e6:	9311      	str	r3, [sp, #68]	; 0x44
  4050e8:	46ab      	mov	fp, r5
  4050ea:	2a00      	cmp	r2, #0
  4050ec:	f040 87d7 	bne.w	40609e <_svfprintf_r+0x166a>
  4050f0:	9b07      	ldr	r3, [sp, #28]
  4050f2:	f043 0310 	orr.w	r3, r3, #16
  4050f6:	9307      	str	r3, [sp, #28]
  4050f8:	9a07      	ldr	r2, [sp, #28]
  4050fa:	f012 0320 	ands.w	r3, r2, #32
  4050fe:	f000 8332 	beq.w	405766 <_svfprintf_r+0xd32>
  405102:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  405104:	3707      	adds	r7, #7
  405106:	f027 0307 	bic.w	r3, r7, #7
  40510a:	2700      	movs	r7, #0
  40510c:	f103 0108 	add.w	r1, r3, #8
  405110:	45bb      	cmp	fp, r7
  405112:	910e      	str	r1, [sp, #56]	; 0x38
  405114:	e9d3 4500 	ldrd	r4, r5, [r3]
  405118:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40511c:	f2c0 835c 	blt.w	4057d8 <_svfprintf_r+0xda4>
  405120:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  405124:	9307      	str	r3, [sp, #28]
  405126:	ea54 0305 	orrs.w	r3, r4, r5
  40512a:	f47f ae25 	bne.w	404d78 <_svfprintf_r+0x344>
  40512e:	f1bb 0f00 	cmp.w	fp, #0
  405132:	f000 80fe 	beq.w	405332 <_svfprintf_r+0x8fe>
  405136:	2400      	movs	r4, #0
  405138:	ae40      	add	r6, sp, #256	; 0x100
  40513a:	3430      	adds	r4, #48	; 0x30
  40513c:	f806 4d41 	strb.w	r4, [r6, #-65]!
  405140:	e634      	b.n	404dac <_svfprintf_r+0x378>
  405142:	9311      	str	r3, [sp, #68]	; 0x44
  405144:	46ab      	mov	fp, r5
  405146:	2a00      	cmp	r2, #0
  405148:	f040 87a5 	bne.w	406096 <_svfprintf_r+0x1662>
  40514c:	9b07      	ldr	r3, [sp, #28]
  40514e:	4847      	ldr	r0, [pc, #284]	; (40526c <_svfprintf_r+0x838>)
  405150:	069d      	lsls	r5, r3, #26
  405152:	f140 8097 	bpl.w	405284 <_svfprintf_r+0x850>
  405156:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  405158:	3707      	adds	r7, #7
  40515a:	f027 0307 	bic.w	r3, r7, #7
  40515e:	e9d3 4500 	ldrd	r4, r5, [r3]
  405162:	f103 0208 	add.w	r2, r3, #8
  405166:	920e      	str	r2, [sp, #56]	; 0x38
  405168:	9a07      	ldr	r2, [sp, #28]
  40516a:	f012 0701 	ands.w	r7, r2, #1
  40516e:	f000 8241 	beq.w	4055f4 <_svfprintf_r+0xbc0>
  405172:	ea54 0305 	orrs.w	r3, r4, r5
  405176:	f000 84f5 	beq.w	405b64 <_svfprintf_r+0x1130>
  40517a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40517e:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  405182:	2700      	movs	r7, #0
  405184:	9a07      	ldr	r2, [sp, #28]
  405186:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40518a:	2330      	movs	r3, #48	; 0x30
  40518c:	45bb      	cmp	fp, r7
  40518e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  405192:	f042 0302 	orr.w	r3, r2, #2
  405196:	f2c0 86a9 	blt.w	405eec <_svfprintf_r+0x14b8>
  40519a:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40519e:	f043 0302 	orr.w	r3, r3, #2
  4051a2:	9307      	str	r3, [sp, #28]
  4051a4:	ae30      	add	r6, sp, #192	; 0xc0
  4051a6:	0923      	lsrs	r3, r4, #4
  4051a8:	f004 010f 	and.w	r1, r4, #15
  4051ac:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4051b0:	092a      	lsrs	r2, r5, #4
  4051b2:	461c      	mov	r4, r3
  4051b4:	4615      	mov	r5, r2
  4051b6:	5c43      	ldrb	r3, [r0, r1]
  4051b8:	f806 3d01 	strb.w	r3, [r6, #-1]!
  4051bc:	ea54 0305 	orrs.w	r3, r4, r5
  4051c0:	d1f1      	bne.n	4051a6 <_svfprintf_r+0x772>
  4051c2:	e5f3      	b.n	404dac <_svfprintf_r+0x378>
  4051c4:	990e      	ldr	r1, [sp, #56]	; 0x38
  4051c6:	9311      	str	r3, [sp, #68]	; 0x44
  4051c8:	680a      	ldr	r2, [r1, #0]
  4051ca:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  4051ce:	2300      	movs	r3, #0
  4051d0:	460a      	mov	r2, r1
  4051d2:	461f      	mov	r7, r3
  4051d4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4051d8:	3204      	adds	r2, #4
  4051da:	2301      	movs	r3, #1
  4051dc:	9308      	str	r3, [sp, #32]
  4051de:	46bb      	mov	fp, r7
  4051e0:	9713      	str	r7, [sp, #76]	; 0x4c
  4051e2:	920e      	str	r2, [sp, #56]	; 0x38
  4051e4:	930d      	str	r3, [sp, #52]	; 0x34
  4051e6:	ae26      	add	r6, sp, #152	; 0x98
  4051e8:	e5ee      	b.n	404dc8 <_svfprintf_r+0x394>
  4051ea:	9311      	str	r3, [sp, #68]	; 0x44
  4051ec:	46ab      	mov	fp, r5
  4051ee:	2a00      	cmp	r2, #0
  4051f0:	f43f ada0 	beq.w	404d34 <_svfprintf_r+0x300>
  4051f4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4051f8:	e59c      	b.n	404d34 <_svfprintf_r+0x300>
  4051fa:	9b07      	ldr	r3, [sp, #28]
  4051fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405200:	9307      	str	r3, [sp, #28]
  405202:	f898 3000 	ldrb.w	r3, [r8]
  405206:	e46e      	b.n	404ae6 <_svfprintf_r+0xb2>
  405208:	f898 3000 	ldrb.w	r3, [r8]
  40520c:	2900      	cmp	r1, #0
  40520e:	f47f ac6a 	bne.w	404ae6 <_svfprintf_r+0xb2>
  405212:	2201      	movs	r2, #1
  405214:	2120      	movs	r1, #32
  405216:	e466      	b.n	404ae6 <_svfprintf_r+0xb2>
  405218:	9b07      	ldr	r3, [sp, #28]
  40521a:	f043 0301 	orr.w	r3, r3, #1
  40521e:	9307      	str	r3, [sp, #28]
  405220:	f898 3000 	ldrb.w	r3, [r8]
  405224:	e45f      	b.n	404ae6 <_svfprintf_r+0xb2>
  405226:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  405228:	6823      	ldr	r3, [r4, #0]
  40522a:	930c      	str	r3, [sp, #48]	; 0x30
  40522c:	4618      	mov	r0, r3
  40522e:	2800      	cmp	r0, #0
  405230:	4623      	mov	r3, r4
  405232:	f103 0304 	add.w	r3, r3, #4
  405236:	f6ff acb8 	blt.w	404baa <_svfprintf_r+0x176>
  40523a:	930e      	str	r3, [sp, #56]	; 0x38
  40523c:	f898 3000 	ldrb.w	r3, [r8]
  405240:	e451      	b.n	404ae6 <_svfprintf_r+0xb2>
  405242:	f898 3000 	ldrb.w	r3, [r8]
  405246:	2201      	movs	r2, #1
  405248:	212b      	movs	r1, #43	; 0x2b
  40524a:	e44c      	b.n	404ae6 <_svfprintf_r+0xb2>
  40524c:	9311      	str	r3, [sp, #68]	; 0x44
  40524e:	46ab      	mov	fp, r5
  405250:	2a00      	cmp	r2, #0
  405252:	f43f af51 	beq.w	4050f8 <_svfprintf_r+0x6c4>
  405256:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40525a:	e74d      	b.n	4050f8 <_svfprintf_r+0x6c4>
  40525c:	0040c0a8 	.word	0x0040c0a8
  405260:	7fefffff 	.word	0x7fefffff
  405264:	0040c068 	.word	0x0040c068
  405268:	0040c064 	.word	0x0040c064
  40526c:	0040c074 	.word	0x0040c074
  405270:	9311      	str	r3, [sp, #68]	; 0x44
  405272:	46ab      	mov	fp, r5
  405274:	2a00      	cmp	r2, #0
  405276:	f040 8703 	bne.w	406080 <_svfprintf_r+0x164c>
  40527a:	9b07      	ldr	r3, [sp, #28]
  40527c:	4899      	ldr	r0, [pc, #612]	; (4054e4 <_svfprintf_r+0xab0>)
  40527e:	069d      	lsls	r5, r3, #26
  405280:	f53f af69 	bmi.w	405156 <_svfprintf_r+0x722>
  405284:	9b07      	ldr	r3, [sp, #28]
  405286:	06dc      	lsls	r4, r3, #27
  405288:	f140 845e 	bpl.w	405b48 <_svfprintf_r+0x1114>
  40528c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40528e:	4613      	mov	r3, r2
  405290:	3304      	adds	r3, #4
  405292:	6814      	ldr	r4, [r2, #0]
  405294:	930e      	str	r3, [sp, #56]	; 0x38
  405296:	2500      	movs	r5, #0
  405298:	e766      	b.n	405168 <_svfprintf_r+0x734>
  40529a:	f898 3000 	ldrb.w	r3, [r8]
  40529e:	2b6c      	cmp	r3, #108	; 0x6c
  4052a0:	f000 84e1 	beq.w	405c66 <_svfprintf_r+0x1232>
  4052a4:	9807      	ldr	r0, [sp, #28]
  4052a6:	f040 0010 	orr.w	r0, r0, #16
  4052aa:	9007      	str	r0, [sp, #28]
  4052ac:	e41b      	b.n	404ae6 <_svfprintf_r+0xb2>
  4052ae:	2a00      	cmp	r2, #0
  4052b0:	f040 86db 	bne.w	40606a <_svfprintf_r+0x1636>
  4052b4:	9b07      	ldr	r3, [sp, #28]
  4052b6:	069b      	lsls	r3, r3, #26
  4052b8:	f140 842f 	bpl.w	405b1a <_svfprintf_r+0x10e6>
  4052bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4052be:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4052c0:	6813      	ldr	r3, [r2, #0]
  4052c2:	17cd      	asrs	r5, r1, #31
  4052c4:	4608      	mov	r0, r1
  4052c6:	3204      	adds	r2, #4
  4052c8:	4629      	mov	r1, r5
  4052ca:	920e      	str	r2, [sp, #56]	; 0x38
  4052cc:	e9c3 0100 	strd	r0, r1, [r3]
  4052d0:	f7ff bbd6 	b.w	404a80 <_svfprintf_r+0x4c>
  4052d4:	9b07      	ldr	r3, [sp, #28]
  4052d6:	f043 0320 	orr.w	r3, r3, #32
  4052da:	9307      	str	r3, [sp, #28]
  4052dc:	f898 3000 	ldrb.w	r3, [r8]
  4052e0:	e401      	b.n	404ae6 <_svfprintf_r+0xb2>
  4052e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4052e4:	9311      	str	r3, [sp, #68]	; 0x44
  4052e6:	6816      	ldr	r6, [r2, #0]
  4052e8:	2400      	movs	r4, #0
  4052ea:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  4052ee:	1d17      	adds	r7, r2, #4
  4052f0:	2e00      	cmp	r6, #0
  4052f2:	f000 85bd 	beq.w	405e70 <_svfprintf_r+0x143c>
  4052f6:	2d00      	cmp	r5, #0
  4052f8:	f2c0 850f 	blt.w	405d1a <_svfprintf_r+0x12e6>
  4052fc:	462a      	mov	r2, r5
  4052fe:	4621      	mov	r1, r4
  405300:	4630      	mov	r0, r6
  405302:	f003 fe65 	bl	408fd0 <memchr>
  405306:	2800      	cmp	r0, #0
  405308:	f000 8604 	beq.w	405f14 <_svfprintf_r+0x14e0>
  40530c:	1b83      	subs	r3, r0, r6
  40530e:	930d      	str	r3, [sp, #52]	; 0x34
  405310:	46a3      	mov	fp, r4
  405312:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405316:	970e      	str	r7, [sp, #56]	; 0x38
  405318:	9308      	str	r3, [sp, #32]
  40531a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  40531e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  405322:	e54d      	b.n	404dc0 <_svfprintf_r+0x38c>
  405324:	486f      	ldr	r0, [pc, #444]	; (4054e4 <_svfprintf_r+0xab0>)
  405326:	9211      	str	r2, [sp, #68]	; 0x44
  405328:	f1bb 0f00 	cmp.w	fp, #0
  40532c:	f040 8173 	bne.w	405616 <_svfprintf_r+0xbe2>
  405330:	465f      	mov	r7, fp
  405332:	f04f 0b00 	mov.w	fp, #0
  405336:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40533a:	ae30      	add	r6, sp, #192	; 0xc0
  40533c:	e539      	b.n	404db2 <_svfprintf_r+0x37e>
  40533e:	9311      	str	r3, [sp, #68]	; 0x44
  405340:	2a00      	cmp	r2, #0
  405342:	f040 86b0 	bne.w	4060a6 <_svfprintf_r+0x1672>
  405346:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405348:	2a00      	cmp	r2, #0
  40534a:	f43f ac65 	beq.w	404c18 <_svfprintf_r+0x1e4>
  40534e:	2300      	movs	r3, #0
  405350:	2101      	movs	r1, #1
  405352:	461f      	mov	r7, r3
  405354:	9108      	str	r1, [sp, #32]
  405356:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  40535a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40535e:	469b      	mov	fp, r3
  405360:	9313      	str	r3, [sp, #76]	; 0x4c
  405362:	910d      	str	r1, [sp, #52]	; 0x34
  405364:	ae26      	add	r6, sp, #152	; 0x98
  405366:	e52f      	b.n	404dc8 <_svfprintf_r+0x394>
  405368:	f1bb 0f00 	cmp.w	fp, #0
  40536c:	f000 85dd 	beq.w	405f2a <_svfprintf_r+0x14f6>
  405370:	2700      	movs	r7, #0
  405372:	2400      	movs	r4, #0
  405374:	2500      	movs	r5, #0
  405376:	e482      	b.n	404c7e <_svfprintf_r+0x24a>
  405378:	485a      	ldr	r0, [pc, #360]	; (4054e4 <_svfprintf_r+0xab0>)
  40537a:	9307      	str	r3, [sp, #28]
  40537c:	9211      	str	r2, [sp, #68]	; 0x44
  40537e:	ea54 0305 	orrs.w	r3, r4, r5
  405382:	970e      	str	r7, [sp, #56]	; 0x38
  405384:	f04f 0700 	mov.w	r7, #0
  405388:	f47f af0c 	bne.w	4051a4 <_svfprintf_r+0x770>
  40538c:	2400      	movs	r4, #0
  40538e:	2500      	movs	r5, #0
  405390:	e708      	b.n	4051a4 <_svfprintf_r+0x770>
  405392:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405394:	e568      	b.n	404e68 <_svfprintf_r+0x434>
  405396:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405398:	2b65      	cmp	r3, #101	; 0x65
  40539a:	f340 80a9 	ble.w	4054f0 <_svfprintf_r+0xabc>
  40539e:	9814      	ldr	r0, [sp, #80]	; 0x50
  4053a0:	9915      	ldr	r1, [sp, #84]	; 0x54
  4053a2:	2200      	movs	r2, #0
  4053a4:	2300      	movs	r3, #0
  4053a6:	f005 fbbf 	bl	40ab28 <__aeabi_dcmpeq>
  4053aa:	2800      	cmp	r0, #0
  4053ac:	f000 8135 	beq.w	40561a <_svfprintf_r+0xbe6>
  4053b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4053b2:	4a4d      	ldr	r2, [pc, #308]	; (4054e8 <_svfprintf_r+0xab4>)
  4053b4:	f8c9 2000 	str.w	r2, [r9]
  4053b8:	3301      	adds	r3, #1
  4053ba:	3401      	adds	r4, #1
  4053bc:	2201      	movs	r2, #1
  4053be:	2b07      	cmp	r3, #7
  4053c0:	9425      	str	r4, [sp, #148]	; 0x94
  4053c2:	9324      	str	r3, [sp, #144]	; 0x90
  4053c4:	f8c9 2004 	str.w	r2, [r9, #4]
  4053c8:	f300 83e6 	bgt.w	405b98 <_svfprintf_r+0x1164>
  4053cc:	f109 0908 	add.w	r9, r9, #8
  4053d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4053d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4053d4:	4293      	cmp	r3, r2
  4053d6:	db03      	blt.n	4053e0 <_svfprintf_r+0x9ac>
  4053d8:	9b07      	ldr	r3, [sp, #28]
  4053da:	07db      	lsls	r3, r3, #31
  4053dc:	f57f adba 	bpl.w	404f54 <_svfprintf_r+0x520>
  4053e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4053e2:	9916      	ldr	r1, [sp, #88]	; 0x58
  4053e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  4053e6:	f8c9 2000 	str.w	r2, [r9]
  4053ea:	3301      	adds	r3, #1
  4053ec:	440c      	add	r4, r1
  4053ee:	2b07      	cmp	r3, #7
  4053f0:	9425      	str	r4, [sp, #148]	; 0x94
  4053f2:	f8c9 1004 	str.w	r1, [r9, #4]
  4053f6:	9324      	str	r3, [sp, #144]	; 0x90
  4053f8:	f300 843f 	bgt.w	405c7a <_svfprintf_r+0x1246>
  4053fc:	f109 0908 	add.w	r9, r9, #8
  405400:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405402:	1e5d      	subs	r5, r3, #1
  405404:	2d00      	cmp	r5, #0
  405406:	f77f ada5 	ble.w	404f54 <_svfprintf_r+0x520>
  40540a:	4a38      	ldr	r2, [pc, #224]	; (4054ec <_svfprintf_r+0xab8>)
  40540c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40540e:	920f      	str	r2, [sp, #60]	; 0x3c
  405410:	2d10      	cmp	r5, #16
  405412:	f340 81e6 	ble.w	4057e2 <_svfprintf_r+0xdae>
  405416:	2610      	movs	r6, #16
  405418:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40541a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40541e:	e005      	b.n	40542c <_svfprintf_r+0x9f8>
  405420:	f109 0908 	add.w	r9, r9, #8
  405424:	3d10      	subs	r5, #16
  405426:	2d10      	cmp	r5, #16
  405428:	f340 81db 	ble.w	4057e2 <_svfprintf_r+0xdae>
  40542c:	3301      	adds	r3, #1
  40542e:	3410      	adds	r4, #16
  405430:	2b07      	cmp	r3, #7
  405432:	9425      	str	r4, [sp, #148]	; 0x94
  405434:	9324      	str	r3, [sp, #144]	; 0x90
  405436:	f8c9 a000 	str.w	sl, [r9]
  40543a:	f8c9 6004 	str.w	r6, [r9, #4]
  40543e:	ddef      	ble.n	405420 <_svfprintf_r+0x9ec>
  405440:	aa23      	add	r2, sp, #140	; 0x8c
  405442:	4659      	mov	r1, fp
  405444:	4638      	mov	r0, r7
  405446:	f004 fd03 	bl	409e50 <__ssprint_r>
  40544a:	2800      	cmp	r0, #0
  40544c:	f47f abeb 	bne.w	404c26 <_svfprintf_r+0x1f2>
  405450:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405452:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405454:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405458:	e7e4      	b.n	405424 <_svfprintf_r+0x9f0>
  40545a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40545c:	9a08      	ldr	r2, [sp, #32]
  40545e:	1a9f      	subs	r7, r3, r2
  405460:	2f00      	cmp	r7, #0
  405462:	f77f ad25 	ble.w	404eb0 <_svfprintf_r+0x47c>
  405466:	4a21      	ldr	r2, [pc, #132]	; (4054ec <_svfprintf_r+0xab8>)
  405468:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40546a:	920f      	str	r2, [sp, #60]	; 0x3c
  40546c:	2f10      	cmp	r7, #16
  40546e:	dd2b      	ble.n	4054c8 <_svfprintf_r+0xa94>
  405470:	464a      	mov	r2, r9
  405472:	4621      	mov	r1, r4
  405474:	46b9      	mov	r9, r7
  405476:	2510      	movs	r5, #16
  405478:	4637      	mov	r7, r6
  40547a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40547c:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40547e:	e006      	b.n	40548e <_svfprintf_r+0xa5a>
  405480:	f1a9 0910 	sub.w	r9, r9, #16
  405484:	f1b9 0f10 	cmp.w	r9, #16
  405488:	f102 0208 	add.w	r2, r2, #8
  40548c:	dd18      	ble.n	4054c0 <_svfprintf_r+0xa8c>
  40548e:	3301      	adds	r3, #1
  405490:	3110      	adds	r1, #16
  405492:	2b07      	cmp	r3, #7
  405494:	9125      	str	r1, [sp, #148]	; 0x94
  405496:	9324      	str	r3, [sp, #144]	; 0x90
  405498:	f8c2 a000 	str.w	sl, [r2]
  40549c:	6055      	str	r5, [r2, #4]
  40549e:	ddef      	ble.n	405480 <_svfprintf_r+0xa4c>
  4054a0:	aa23      	add	r2, sp, #140	; 0x8c
  4054a2:	4631      	mov	r1, r6
  4054a4:	4620      	mov	r0, r4
  4054a6:	f004 fcd3 	bl	409e50 <__ssprint_r>
  4054aa:	2800      	cmp	r0, #0
  4054ac:	f47f abbb 	bne.w	404c26 <_svfprintf_r+0x1f2>
  4054b0:	f1a9 0910 	sub.w	r9, r9, #16
  4054b4:	f1b9 0f10 	cmp.w	r9, #16
  4054b8:	9925      	ldr	r1, [sp, #148]	; 0x94
  4054ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4054bc:	aa30      	add	r2, sp, #192	; 0xc0
  4054be:	dce6      	bgt.n	40548e <_svfprintf_r+0xa5a>
  4054c0:	463e      	mov	r6, r7
  4054c2:	460c      	mov	r4, r1
  4054c4:	464f      	mov	r7, r9
  4054c6:	4691      	mov	r9, r2
  4054c8:	3301      	adds	r3, #1
  4054ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4054cc:	9324      	str	r3, [sp, #144]	; 0x90
  4054ce:	443c      	add	r4, r7
  4054d0:	2b07      	cmp	r3, #7
  4054d2:	9425      	str	r4, [sp, #148]	; 0x94
  4054d4:	e889 0084 	stmia.w	r9, {r2, r7}
  4054d8:	f300 8245 	bgt.w	405966 <_svfprintf_r+0xf32>
  4054dc:	f109 0908 	add.w	r9, r9, #8
  4054e0:	e4e6      	b.n	404eb0 <_svfprintf_r+0x47c>
  4054e2:	bf00      	nop
  4054e4:	0040c088 	.word	0x0040c088
  4054e8:	0040c0a4 	.word	0x0040c0a4
  4054ec:	0040c054 	.word	0x0040c054
  4054f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4054f2:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4054f4:	2b01      	cmp	r3, #1
  4054f6:	f340 8208 	ble.w	40590a <_svfprintf_r+0xed6>
  4054fa:	3501      	adds	r5, #1
  4054fc:	3401      	adds	r4, #1
  4054fe:	2301      	movs	r3, #1
  405500:	2d07      	cmp	r5, #7
  405502:	9425      	str	r4, [sp, #148]	; 0x94
  405504:	9524      	str	r5, [sp, #144]	; 0x90
  405506:	f8c9 6000 	str.w	r6, [r9]
  40550a:	f8c9 3004 	str.w	r3, [r9, #4]
  40550e:	f300 820d 	bgt.w	40592c <_svfprintf_r+0xef8>
  405512:	f109 0908 	add.w	r9, r9, #8
  405516:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405518:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40551a:	f8c9 3000 	str.w	r3, [r9]
  40551e:	3501      	adds	r5, #1
  405520:	4414      	add	r4, r2
  405522:	2d07      	cmp	r5, #7
  405524:	9425      	str	r4, [sp, #148]	; 0x94
  405526:	9524      	str	r5, [sp, #144]	; 0x90
  405528:	f8c9 2004 	str.w	r2, [r9, #4]
  40552c:	f300 820e 	bgt.w	40594c <_svfprintf_r+0xf18>
  405530:	f109 0908 	add.w	r9, r9, #8
  405534:	2300      	movs	r3, #0
  405536:	9814      	ldr	r0, [sp, #80]	; 0x50
  405538:	9915      	ldr	r1, [sp, #84]	; 0x54
  40553a:	2200      	movs	r2, #0
  40553c:	f005 faf4 	bl	40ab28 <__aeabi_dcmpeq>
  405540:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405542:	2800      	cmp	r0, #0
  405544:	f040 80c3 	bne.w	4056ce <_svfprintf_r+0xc9a>
  405548:	3b01      	subs	r3, #1
  40554a:	3501      	adds	r5, #1
  40554c:	3601      	adds	r6, #1
  40554e:	441c      	add	r4, r3
  405550:	2d07      	cmp	r5, #7
  405552:	9524      	str	r5, [sp, #144]	; 0x90
  405554:	9425      	str	r4, [sp, #148]	; 0x94
  405556:	f8c9 6000 	str.w	r6, [r9]
  40555a:	f8c9 3004 	str.w	r3, [r9, #4]
  40555e:	f300 80f5 	bgt.w	40574c <_svfprintf_r+0xd18>
  405562:	f109 0908 	add.w	r9, r9, #8
  405566:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405568:	f8c9 2004 	str.w	r2, [r9, #4]
  40556c:	3501      	adds	r5, #1
  40556e:	4414      	add	r4, r2
  405570:	ab1f      	add	r3, sp, #124	; 0x7c
  405572:	2d07      	cmp	r5, #7
  405574:	9425      	str	r4, [sp, #148]	; 0x94
  405576:	9524      	str	r5, [sp, #144]	; 0x90
  405578:	f8c9 3000 	str.w	r3, [r9]
  40557c:	f77f ace8 	ble.w	404f50 <_svfprintf_r+0x51c>
  405580:	aa23      	add	r2, sp, #140	; 0x8c
  405582:	9909      	ldr	r1, [sp, #36]	; 0x24
  405584:	980a      	ldr	r0, [sp, #40]	; 0x28
  405586:	f004 fc63 	bl	409e50 <__ssprint_r>
  40558a:	2800      	cmp	r0, #0
  40558c:	f47f ab4b 	bne.w	404c26 <_svfprintf_r+0x1f2>
  405590:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405592:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405596:	e4dd      	b.n	404f54 <_svfprintf_r+0x520>
  405598:	aa23      	add	r2, sp, #140	; 0x8c
  40559a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40559c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40559e:	f004 fc57 	bl	409e50 <__ssprint_r>
  4055a2:	2800      	cmp	r0, #0
  4055a4:	f43f ad24 	beq.w	404ff0 <_svfprintf_r+0x5bc>
  4055a8:	f7ff bb3d 	b.w	404c26 <_svfprintf_r+0x1f2>
  4055ac:	aa23      	add	r2, sp, #140	; 0x8c
  4055ae:	9909      	ldr	r1, [sp, #36]	; 0x24
  4055b0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4055b2:	f004 fc4d 	bl	409e50 <__ssprint_r>
  4055b6:	2800      	cmp	r0, #0
  4055b8:	f47f ab35 	bne.w	404c26 <_svfprintf_r+0x1f2>
  4055bc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4055be:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4055c2:	e4b4      	b.n	404f2e <_svfprintf_r+0x4fa>
  4055c4:	aa23      	add	r2, sp, #140	; 0x8c
  4055c6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4055c8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4055ca:	f004 fc41 	bl	409e50 <__ssprint_r>
  4055ce:	2800      	cmp	r0, #0
  4055d0:	f47f ab29 	bne.w	404c26 <_svfprintf_r+0x1f2>
  4055d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4055d6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4055da:	e455      	b.n	404e88 <_svfprintf_r+0x454>
  4055dc:	aa23      	add	r2, sp, #140	; 0x8c
  4055de:	9909      	ldr	r1, [sp, #36]	; 0x24
  4055e0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4055e2:	f004 fc35 	bl	409e50 <__ssprint_r>
  4055e6:	2800      	cmp	r0, #0
  4055e8:	f47f ab1d 	bne.w	404c26 <_svfprintf_r+0x1f2>
  4055ec:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4055ee:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4055f2:	e459      	b.n	404ea8 <_svfprintf_r+0x474>
  4055f4:	f1bb 0f00 	cmp.w	fp, #0
  4055f8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4055fc:	f2c0 82d8 	blt.w	405bb0 <_svfprintf_r+0x117c>
  405600:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  405604:	9307      	str	r3, [sp, #28]
  405606:	ea54 0305 	orrs.w	r3, r4, r5
  40560a:	f47f adcb 	bne.w	4051a4 <_svfprintf_r+0x770>
  40560e:	f1bb 0f00 	cmp.w	fp, #0
  405612:	f43f ae8d 	beq.w	405330 <_svfprintf_r+0x8fc>
  405616:	2700      	movs	r7, #0
  405618:	e6b8      	b.n	40538c <_svfprintf_r+0x958>
  40561a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40561c:	2d00      	cmp	r5, #0
  40561e:	f340 82ca 	ble.w	405bb6 <_svfprintf_r+0x1182>
  405622:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405624:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405626:	4293      	cmp	r3, r2
  405628:	bfa8      	it	ge
  40562a:	4613      	movge	r3, r2
  40562c:	2b00      	cmp	r3, #0
  40562e:	461d      	mov	r5, r3
  405630:	dd0d      	ble.n	40564e <_svfprintf_r+0xc1a>
  405632:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405634:	f8c9 6000 	str.w	r6, [r9]
  405638:	3301      	adds	r3, #1
  40563a:	442c      	add	r4, r5
  40563c:	2b07      	cmp	r3, #7
  40563e:	9425      	str	r4, [sp, #148]	; 0x94
  405640:	f8c9 5004 	str.w	r5, [r9, #4]
  405644:	9324      	str	r3, [sp, #144]	; 0x90
  405646:	f300 839c 	bgt.w	405d82 <_svfprintf_r+0x134e>
  40564a:	f109 0908 	add.w	r9, r9, #8
  40564e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405650:	2d00      	cmp	r5, #0
  405652:	bfa8      	it	ge
  405654:	1b5b      	subge	r3, r3, r5
  405656:	2b00      	cmp	r3, #0
  405658:	461d      	mov	r5, r3
  40565a:	f340 80f6 	ble.w	40584a <_svfprintf_r+0xe16>
  40565e:	4aba      	ldr	r2, [pc, #744]	; (405948 <_svfprintf_r+0xf14>)
  405660:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405662:	920f      	str	r2, [sp, #60]	; 0x3c
  405664:	2d10      	cmp	r5, #16
  405666:	f340 828a 	ble.w	405b7e <_svfprintf_r+0x114a>
  40566a:	4622      	mov	r2, r4
  40566c:	2710      	movs	r7, #16
  40566e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405672:	9c09      	ldr	r4, [sp, #36]	; 0x24
  405674:	e005      	b.n	405682 <_svfprintf_r+0xc4e>
  405676:	f109 0908 	add.w	r9, r9, #8
  40567a:	3d10      	subs	r5, #16
  40567c:	2d10      	cmp	r5, #16
  40567e:	f340 827d 	ble.w	405b7c <_svfprintf_r+0x1148>
  405682:	3301      	adds	r3, #1
  405684:	3210      	adds	r2, #16
  405686:	2b07      	cmp	r3, #7
  405688:	9225      	str	r2, [sp, #148]	; 0x94
  40568a:	9324      	str	r3, [sp, #144]	; 0x90
  40568c:	f8c9 a000 	str.w	sl, [r9]
  405690:	f8c9 7004 	str.w	r7, [r9, #4]
  405694:	ddef      	ble.n	405676 <_svfprintf_r+0xc42>
  405696:	aa23      	add	r2, sp, #140	; 0x8c
  405698:	4621      	mov	r1, r4
  40569a:	4658      	mov	r0, fp
  40569c:	f004 fbd8 	bl	409e50 <__ssprint_r>
  4056a0:	2800      	cmp	r0, #0
  4056a2:	f47f aac0 	bne.w	404c26 <_svfprintf_r+0x1f2>
  4056a6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4056a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4056aa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4056ae:	e7e4      	b.n	40567a <_svfprintf_r+0xc46>
  4056b0:	aa23      	add	r2, sp, #140	; 0x8c
  4056b2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4056b4:	980a      	ldr	r0, [sp, #40]	; 0x28
  4056b6:	f004 fbcb 	bl	409e50 <__ssprint_r>
  4056ba:	2800      	cmp	r0, #0
  4056bc:	f47f aab3 	bne.w	404c26 <_svfprintf_r+0x1f2>
  4056c0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4056c4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4056c6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4056ca:	f7ff bbcd 	b.w	404e68 <_svfprintf_r+0x434>
  4056ce:	1e5e      	subs	r6, r3, #1
  4056d0:	2e00      	cmp	r6, #0
  4056d2:	f77f af48 	ble.w	405566 <_svfprintf_r+0xb32>
  4056d6:	4b9c      	ldr	r3, [pc, #624]	; (405948 <_svfprintf_r+0xf14>)
  4056d8:	930f      	str	r3, [sp, #60]	; 0x3c
  4056da:	2e10      	cmp	r6, #16
  4056dc:	dd2c      	ble.n	405738 <_svfprintf_r+0xd04>
  4056de:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  4056e2:	2710      	movs	r7, #16
  4056e4:	46b0      	mov	r8, r6
  4056e6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4056ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4056ec:	e006      	b.n	4056fc <_svfprintf_r+0xcc8>
  4056ee:	f1a8 0810 	sub.w	r8, r8, #16
  4056f2:	f1b8 0f10 	cmp.w	r8, #16
  4056f6:	f109 0908 	add.w	r9, r9, #8
  4056fa:	dd1a      	ble.n	405732 <_svfprintf_r+0xcfe>
  4056fc:	3501      	adds	r5, #1
  4056fe:	3410      	adds	r4, #16
  405700:	2d07      	cmp	r5, #7
  405702:	9425      	str	r4, [sp, #148]	; 0x94
  405704:	9524      	str	r5, [sp, #144]	; 0x90
  405706:	f8c9 a000 	str.w	sl, [r9]
  40570a:	f8c9 7004 	str.w	r7, [r9, #4]
  40570e:	ddee      	ble.n	4056ee <_svfprintf_r+0xcba>
  405710:	aa23      	add	r2, sp, #140	; 0x8c
  405712:	4631      	mov	r1, r6
  405714:	4658      	mov	r0, fp
  405716:	f004 fb9b 	bl	409e50 <__ssprint_r>
  40571a:	2800      	cmp	r0, #0
  40571c:	f47f aa83 	bne.w	404c26 <_svfprintf_r+0x1f2>
  405720:	f1a8 0810 	sub.w	r8, r8, #16
  405724:	f1b8 0f10 	cmp.w	r8, #16
  405728:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40572a:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40572c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405730:	dce4      	bgt.n	4056fc <_svfprintf_r+0xcc8>
  405732:	4646      	mov	r6, r8
  405734:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  405738:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40573a:	3501      	adds	r5, #1
  40573c:	4434      	add	r4, r6
  40573e:	2d07      	cmp	r5, #7
  405740:	9425      	str	r4, [sp, #148]	; 0x94
  405742:	9524      	str	r5, [sp, #144]	; 0x90
  405744:	e889 0048 	stmia.w	r9, {r3, r6}
  405748:	f77f af0b 	ble.w	405562 <_svfprintf_r+0xb2e>
  40574c:	aa23      	add	r2, sp, #140	; 0x8c
  40574e:	9909      	ldr	r1, [sp, #36]	; 0x24
  405750:	980a      	ldr	r0, [sp, #40]	; 0x28
  405752:	f004 fb7d 	bl	409e50 <__ssprint_r>
  405756:	2800      	cmp	r0, #0
  405758:	f47f aa65 	bne.w	404c26 <_svfprintf_r+0x1f2>
  40575c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40575e:	9d24      	ldr	r5, [sp, #144]	; 0x90
  405760:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405764:	e6ff      	b.n	405566 <_svfprintf_r+0xb32>
  405766:	9907      	ldr	r1, [sp, #28]
  405768:	f011 0210 	ands.w	r2, r1, #16
  40576c:	f000 8108 	beq.w	405980 <_svfprintf_r+0xf4c>
  405770:	980e      	ldr	r0, [sp, #56]	; 0x38
  405772:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  405776:	f1bb 0f00 	cmp.w	fp, #0
  40577a:	6804      	ldr	r4, [r0, #0]
  40577c:	f100 0704 	add.w	r7, r0, #4
  405780:	f04f 0500 	mov.w	r5, #0
  405784:	db26      	blt.n	4057d4 <_svfprintf_r+0xda0>
  405786:	460a      	mov	r2, r1
  405788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40578c:	9207      	str	r2, [sp, #28]
  40578e:	ea54 0205 	orrs.w	r2, r4, r5
  405792:	970e      	str	r7, [sp, #56]	; 0x38
  405794:	461f      	mov	r7, r3
  405796:	f47f aaef 	bne.w	404d78 <_svfprintf_r+0x344>
  40579a:	e4c8      	b.n	40512e <_svfprintf_r+0x6fa>
  40579c:	9b07      	ldr	r3, [sp, #28]
  40579e:	06d9      	lsls	r1, r3, #27
  4057a0:	d42a      	bmi.n	4057f8 <_svfprintf_r+0xdc4>
  4057a2:	9b07      	ldr	r3, [sp, #28]
  4057a4:	065a      	lsls	r2, r3, #25
  4057a6:	d527      	bpl.n	4057f8 <_svfprintf_r+0xdc4>
  4057a8:	990e      	ldr	r1, [sp, #56]	; 0x38
  4057aa:	f9b1 4000 	ldrsh.w	r4, [r1]
  4057ae:	3104      	adds	r1, #4
  4057b0:	17e5      	asrs	r5, r4, #31
  4057b2:	4622      	mov	r2, r4
  4057b4:	462b      	mov	r3, r5
  4057b6:	910e      	str	r1, [sp, #56]	; 0x38
  4057b8:	f7ff bacb 	b.w	404d52 <_svfprintf_r+0x31e>
  4057bc:	990e      	ldr	r1, [sp, #56]	; 0x38
  4057be:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4057c2:	f1bb 0f00 	cmp.w	fp, #0
  4057c6:	680c      	ldr	r4, [r1, #0]
  4057c8:	f101 0704 	add.w	r7, r1, #4
  4057cc:	f04f 0500 	mov.w	r5, #0
  4057d0:	f280 8247 	bge.w	405c62 <_svfprintf_r+0x122e>
  4057d4:	970e      	str	r7, [sp, #56]	; 0x38
  4057d6:	461f      	mov	r7, r3
  4057d8:	ea54 0305 	orrs.w	r3, r4, r5
  4057dc:	f47f aacc 	bne.w	404d78 <_svfprintf_r+0x344>
  4057e0:	e4aa      	b.n	405138 <_svfprintf_r+0x704>
  4057e2:	3301      	adds	r3, #1
  4057e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4057e6:	9324      	str	r3, [sp, #144]	; 0x90
  4057e8:	442c      	add	r4, r5
  4057ea:	2b07      	cmp	r3, #7
  4057ec:	9425      	str	r4, [sp, #148]	; 0x94
  4057ee:	e889 0024 	stmia.w	r9, {r2, r5}
  4057f2:	f77f abad 	ble.w	404f50 <_svfprintf_r+0x51c>
  4057f6:	e6c3      	b.n	405580 <_svfprintf_r+0xb4c>
  4057f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4057fa:	6814      	ldr	r4, [r2, #0]
  4057fc:	4613      	mov	r3, r2
  4057fe:	3304      	adds	r3, #4
  405800:	17e5      	asrs	r5, r4, #31
  405802:	4622      	mov	r2, r4
  405804:	930e      	str	r3, [sp, #56]	; 0x38
  405806:	2a00      	cmp	r2, #0
  405808:	462b      	mov	r3, r5
  40580a:	f173 0300 	sbcs.w	r3, r3, #0
  40580e:	f6bf aaa5 	bge.w	404d5c <_svfprintf_r+0x328>
  405812:	4264      	negs	r4, r4
  405814:	f04f 072d 	mov.w	r7, #45	; 0x2d
  405818:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40581c:	f1bb 0f00 	cmp.w	fp, #0
  405820:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  405824:	f6ff aaa8 	blt.w	404d78 <_svfprintf_r+0x344>
  405828:	9b07      	ldr	r3, [sp, #28]
  40582a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40582e:	9307      	str	r3, [sp, #28]
  405830:	f7ff baa2 	b.w	404d78 <_svfprintf_r+0x344>
  405834:	aa23      	add	r2, sp, #140	; 0x8c
  405836:	9909      	ldr	r1, [sp, #36]	; 0x24
  405838:	980a      	ldr	r0, [sp, #40]	; 0x28
  40583a:	f004 fb09 	bl	409e50 <__ssprint_r>
  40583e:	2800      	cmp	r0, #0
  405840:	f47f a9f1 	bne.w	404c26 <_svfprintf_r+0x1f2>
  405844:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405846:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40584a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40584c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40584e:	4432      	add	r2, r6
  405850:	4617      	mov	r7, r2
  405852:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405854:	4293      	cmp	r3, r2
  405856:	db47      	blt.n	4058e8 <_svfprintf_r+0xeb4>
  405858:	9a07      	ldr	r2, [sp, #28]
  40585a:	07d5      	lsls	r5, r2, #31
  40585c:	d444      	bmi.n	4058e8 <_svfprintf_r+0xeb4>
  40585e:	9912      	ldr	r1, [sp, #72]	; 0x48
  405860:	440e      	add	r6, r1
  405862:	1bf5      	subs	r5, r6, r7
  405864:	1acb      	subs	r3, r1, r3
  405866:	429d      	cmp	r5, r3
  405868:	bfa8      	it	ge
  40586a:	461d      	movge	r5, r3
  40586c:	2d00      	cmp	r5, #0
  40586e:	462e      	mov	r6, r5
  405870:	dd0d      	ble.n	40588e <_svfprintf_r+0xe5a>
  405872:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405874:	f8c9 7000 	str.w	r7, [r9]
  405878:	3201      	adds	r2, #1
  40587a:	442c      	add	r4, r5
  40587c:	2a07      	cmp	r2, #7
  40587e:	9425      	str	r4, [sp, #148]	; 0x94
  405880:	f8c9 5004 	str.w	r5, [r9, #4]
  405884:	9224      	str	r2, [sp, #144]	; 0x90
  405886:	f300 830b 	bgt.w	405ea0 <_svfprintf_r+0x146c>
  40588a:	f109 0908 	add.w	r9, r9, #8
  40588e:	2e00      	cmp	r6, #0
  405890:	bfac      	ite	ge
  405892:	1b9d      	subge	r5, r3, r6
  405894:	461d      	movlt	r5, r3
  405896:	2d00      	cmp	r5, #0
  405898:	f77f ab5c 	ble.w	404f54 <_svfprintf_r+0x520>
  40589c:	4a2a      	ldr	r2, [pc, #168]	; (405948 <_svfprintf_r+0xf14>)
  40589e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4058a0:	920f      	str	r2, [sp, #60]	; 0x3c
  4058a2:	2d10      	cmp	r5, #16
  4058a4:	dd9d      	ble.n	4057e2 <_svfprintf_r+0xdae>
  4058a6:	2610      	movs	r6, #16
  4058a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4058aa:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  4058ae:	e004      	b.n	4058ba <_svfprintf_r+0xe86>
  4058b0:	f109 0908 	add.w	r9, r9, #8
  4058b4:	3d10      	subs	r5, #16
  4058b6:	2d10      	cmp	r5, #16
  4058b8:	dd93      	ble.n	4057e2 <_svfprintf_r+0xdae>
  4058ba:	3301      	adds	r3, #1
  4058bc:	3410      	adds	r4, #16
  4058be:	2b07      	cmp	r3, #7
  4058c0:	9425      	str	r4, [sp, #148]	; 0x94
  4058c2:	9324      	str	r3, [sp, #144]	; 0x90
  4058c4:	f8c9 a000 	str.w	sl, [r9]
  4058c8:	f8c9 6004 	str.w	r6, [r9, #4]
  4058cc:	ddf0      	ble.n	4058b0 <_svfprintf_r+0xe7c>
  4058ce:	aa23      	add	r2, sp, #140	; 0x8c
  4058d0:	4659      	mov	r1, fp
  4058d2:	4638      	mov	r0, r7
  4058d4:	f004 fabc 	bl	409e50 <__ssprint_r>
  4058d8:	2800      	cmp	r0, #0
  4058da:	f47f a9a4 	bne.w	404c26 <_svfprintf_r+0x1f2>
  4058de:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4058e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4058e2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4058e6:	e7e5      	b.n	4058b4 <_svfprintf_r+0xe80>
  4058e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4058ea:	9816      	ldr	r0, [sp, #88]	; 0x58
  4058ec:	9917      	ldr	r1, [sp, #92]	; 0x5c
  4058ee:	f8c9 1000 	str.w	r1, [r9]
  4058f2:	3201      	adds	r2, #1
  4058f4:	4404      	add	r4, r0
  4058f6:	2a07      	cmp	r2, #7
  4058f8:	9425      	str	r4, [sp, #148]	; 0x94
  4058fa:	f8c9 0004 	str.w	r0, [r9, #4]
  4058fe:	9224      	str	r2, [sp, #144]	; 0x90
  405900:	f300 82a9 	bgt.w	405e56 <_svfprintf_r+0x1422>
  405904:	f109 0908 	add.w	r9, r9, #8
  405908:	e7a9      	b.n	40585e <_svfprintf_r+0xe2a>
  40590a:	9b07      	ldr	r3, [sp, #28]
  40590c:	07d8      	lsls	r0, r3, #31
  40590e:	f53f adf4 	bmi.w	4054fa <_svfprintf_r+0xac6>
  405912:	3501      	adds	r5, #1
  405914:	3401      	adds	r4, #1
  405916:	2301      	movs	r3, #1
  405918:	2d07      	cmp	r5, #7
  40591a:	9425      	str	r4, [sp, #148]	; 0x94
  40591c:	9524      	str	r5, [sp, #144]	; 0x90
  40591e:	f8c9 6000 	str.w	r6, [r9]
  405922:	f8c9 3004 	str.w	r3, [r9, #4]
  405926:	f77f ae1c 	ble.w	405562 <_svfprintf_r+0xb2e>
  40592a:	e70f      	b.n	40574c <_svfprintf_r+0xd18>
  40592c:	aa23      	add	r2, sp, #140	; 0x8c
  40592e:	9909      	ldr	r1, [sp, #36]	; 0x24
  405930:	980a      	ldr	r0, [sp, #40]	; 0x28
  405932:	f004 fa8d 	bl	409e50 <__ssprint_r>
  405936:	2800      	cmp	r0, #0
  405938:	f47f a975 	bne.w	404c26 <_svfprintf_r+0x1f2>
  40593c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40593e:	9d24      	ldr	r5, [sp, #144]	; 0x90
  405940:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405944:	e5e7      	b.n	405516 <_svfprintf_r+0xae2>
  405946:	bf00      	nop
  405948:	0040c054 	.word	0x0040c054
  40594c:	aa23      	add	r2, sp, #140	; 0x8c
  40594e:	9909      	ldr	r1, [sp, #36]	; 0x24
  405950:	980a      	ldr	r0, [sp, #40]	; 0x28
  405952:	f004 fa7d 	bl	409e50 <__ssprint_r>
  405956:	2800      	cmp	r0, #0
  405958:	f47f a965 	bne.w	404c26 <_svfprintf_r+0x1f2>
  40595c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40595e:	9d24      	ldr	r5, [sp, #144]	; 0x90
  405960:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405964:	e5e6      	b.n	405534 <_svfprintf_r+0xb00>
  405966:	aa23      	add	r2, sp, #140	; 0x8c
  405968:	9909      	ldr	r1, [sp, #36]	; 0x24
  40596a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40596c:	f004 fa70 	bl	409e50 <__ssprint_r>
  405970:	2800      	cmp	r0, #0
  405972:	f47f a958 	bne.w	404c26 <_svfprintf_r+0x1f2>
  405976:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405978:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40597c:	f7ff ba98 	b.w	404eb0 <_svfprintf_r+0x47c>
  405980:	9907      	ldr	r1, [sp, #28]
  405982:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  405986:	f43f af19 	beq.w	4057bc <_svfprintf_r+0xd88>
  40598a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40598c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  405990:	f1bb 0f00 	cmp.w	fp, #0
  405994:	8804      	ldrh	r4, [r0, #0]
  405996:	f100 0704 	add.w	r7, r0, #4
  40599a:	f04f 0500 	mov.w	r5, #0
  40599e:	f2c0 81b9 	blt.w	405d14 <_svfprintf_r+0x12e0>
  4059a2:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  4059a6:	9307      	str	r3, [sp, #28]
  4059a8:	ea54 0305 	orrs.w	r3, r4, r5
  4059ac:	970e      	str	r7, [sp, #56]	; 0x38
  4059ae:	4617      	mov	r7, r2
  4059b0:	f47f a9e2 	bne.w	404d78 <_svfprintf_r+0x344>
  4059b4:	f7ff bbbb 	b.w	40512e <_svfprintf_r+0x6fa>
  4059b8:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4059ba:	4622      	mov	r2, r4
  4059bc:	4620      	mov	r0, r4
  4059be:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4059c0:	4623      	mov	r3, r4
  4059c2:	4621      	mov	r1, r4
  4059c4:	f005 f8e2 	bl	40ab8c <__aeabi_dcmpun>
  4059c8:	2800      	cmp	r0, #0
  4059ca:	f040 8317 	bne.w	405ffc <_svfprintf_r+0x15c8>
  4059ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4059d0:	f1bb 3fff 	cmp.w	fp, #4294967295
  4059d4:	f023 0320 	bic.w	r3, r3, #32
  4059d8:	930d      	str	r3, [sp, #52]	; 0x34
  4059da:	f000 8270 	beq.w	405ebe <_svfprintf_r+0x148a>
  4059de:	2b47      	cmp	r3, #71	; 0x47
  4059e0:	f000 8192 	beq.w	405d08 <_svfprintf_r+0x12d4>
  4059e4:	9b07      	ldr	r3, [sp, #28]
  4059e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4059ea:	9310      	str	r3, [sp, #64]	; 0x40
  4059ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4059ee:	1e1f      	subs	r7, r3, #0
  4059f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4059f2:	9308      	str	r3, [sp, #32]
  4059f4:	bfbb      	ittet	lt
  4059f6:	463b      	movlt	r3, r7
  4059f8:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4059fc:	2300      	movge	r3, #0
  4059fe:	232d      	movlt	r3, #45	; 0x2d
  405a00:	930f      	str	r3, [sp, #60]	; 0x3c
  405a02:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405a04:	2b66      	cmp	r3, #102	; 0x66
  405a06:	f000 825d 	beq.w	405ec4 <_svfprintf_r+0x1490>
  405a0a:	2b46      	cmp	r3, #70	; 0x46
  405a0c:	f000 8151 	beq.w	405cb2 <_svfprintf_r+0x127e>
  405a10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405a12:	9a08      	ldr	r2, [sp, #32]
  405a14:	2b45      	cmp	r3, #69	; 0x45
  405a16:	a821      	add	r0, sp, #132	; 0x84
  405a18:	a91e      	add	r1, sp, #120	; 0x78
  405a1a:	bf0c      	ite	eq
  405a1c:	f10b 0501 	addeq.w	r5, fp, #1
  405a20:	465d      	movne	r5, fp
  405a22:	9004      	str	r0, [sp, #16]
  405a24:	9103      	str	r1, [sp, #12]
  405a26:	a81d      	add	r0, sp, #116	; 0x74
  405a28:	2102      	movs	r1, #2
  405a2a:	463b      	mov	r3, r7
  405a2c:	9002      	str	r0, [sp, #8]
  405a2e:	9501      	str	r5, [sp, #4]
  405a30:	9100      	str	r1, [sp, #0]
  405a32:	980a      	ldr	r0, [sp, #40]	; 0x28
  405a34:	f001 fbc4 	bl	4071c0 <_dtoa_r>
  405a38:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405a3a:	2b67      	cmp	r3, #103	; 0x67
  405a3c:	4606      	mov	r6, r0
  405a3e:	f040 8290 	bne.w	405f62 <_svfprintf_r+0x152e>
  405a42:	9b07      	ldr	r3, [sp, #28]
  405a44:	07da      	lsls	r2, r3, #31
  405a46:	f140 82af 	bpl.w	405fa8 <_svfprintf_r+0x1574>
  405a4a:	1974      	adds	r4, r6, r5
  405a4c:	9808      	ldr	r0, [sp, #32]
  405a4e:	4639      	mov	r1, r7
  405a50:	2200      	movs	r2, #0
  405a52:	2300      	movs	r3, #0
  405a54:	f005 f868 	bl	40ab28 <__aeabi_dcmpeq>
  405a58:	2800      	cmp	r0, #0
  405a5a:	f040 8190 	bne.w	405d7e <_svfprintf_r+0x134a>
  405a5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405a60:	429c      	cmp	r4, r3
  405a62:	d906      	bls.n	405a72 <_svfprintf_r+0x103e>
  405a64:	2130      	movs	r1, #48	; 0x30
  405a66:	1c5a      	adds	r2, r3, #1
  405a68:	9221      	str	r2, [sp, #132]	; 0x84
  405a6a:	7019      	strb	r1, [r3, #0]
  405a6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405a6e:	429c      	cmp	r4, r3
  405a70:	d8f9      	bhi.n	405a66 <_svfprintf_r+0x1032>
  405a72:	1b9b      	subs	r3, r3, r6
  405a74:	9312      	str	r3, [sp, #72]	; 0x48
  405a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405a78:	2b47      	cmp	r3, #71	; 0x47
  405a7a:	f000 8179 	beq.w	405d70 <_svfprintf_r+0x133c>
  405a7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405a80:	2b65      	cmp	r3, #101	; 0x65
  405a82:	f340 827d 	ble.w	405f80 <_svfprintf_r+0x154c>
  405a86:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405a88:	2b66      	cmp	r3, #102	; 0x66
  405a8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405a8c:	9313      	str	r3, [sp, #76]	; 0x4c
  405a8e:	f000 825b 	beq.w	405f48 <_svfprintf_r+0x1514>
  405a92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405a94:	9912      	ldr	r1, [sp, #72]	; 0x48
  405a96:	428a      	cmp	r2, r1
  405a98:	f2c0 8230 	blt.w	405efc <_svfprintf_r+0x14c8>
  405a9c:	9b07      	ldr	r3, [sp, #28]
  405a9e:	07d9      	lsls	r1, r3, #31
  405aa0:	f100 8284 	bmi.w	405fac <_svfprintf_r+0x1578>
  405aa4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405aa8:	920d      	str	r2, [sp, #52]	; 0x34
  405aaa:	2267      	movs	r2, #103	; 0x67
  405aac:	9211      	str	r2, [sp, #68]	; 0x44
  405aae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405ab0:	2a00      	cmp	r2, #0
  405ab2:	f040 8153 	bne.w	405d5c <_svfprintf_r+0x1328>
  405ab6:	9308      	str	r3, [sp, #32]
  405ab8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405aba:	9307      	str	r3, [sp, #28]
  405abc:	4693      	mov	fp, r2
  405abe:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  405ac2:	f7ff b97d 	b.w	404dc0 <_svfprintf_r+0x38c>
  405ac6:	9907      	ldr	r1, [sp, #28]
  405ac8:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  405acc:	d015      	beq.n	405afa <_svfprintf_r+0x10c6>
  405ace:	980e      	ldr	r0, [sp, #56]	; 0x38
  405ad0:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  405ad4:	f1bb 0f00 	cmp.w	fp, #0
  405ad8:	8804      	ldrh	r4, [r0, #0]
  405ada:	f100 0704 	add.w	r7, r0, #4
  405ade:	f04f 0500 	mov.w	r5, #0
  405ae2:	db16      	blt.n	405b12 <_svfprintf_r+0x10de>
  405ae4:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  405ae8:	9307      	str	r3, [sp, #28]
  405aea:	ea54 0305 	orrs.w	r3, r4, r5
  405aee:	970e      	str	r7, [sp, #56]	; 0x38
  405af0:	f43f ac3a 	beq.w	405368 <_svfprintf_r+0x934>
  405af4:	4617      	mov	r7, r2
  405af6:	f7ff b8c2 	b.w	404c7e <_svfprintf_r+0x24a>
  405afa:	990e      	ldr	r1, [sp, #56]	; 0x38
  405afc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  405b00:	f1bb 0f00 	cmp.w	fp, #0
  405b04:	680c      	ldr	r4, [r1, #0]
  405b06:	f101 0704 	add.w	r7, r1, #4
  405b0a:	f04f 0500 	mov.w	r5, #0
  405b0e:	f280 80a5 	bge.w	405c5c <_svfprintf_r+0x1228>
  405b12:	970e      	str	r7, [sp, #56]	; 0x38
  405b14:	2700      	movs	r7, #0
  405b16:	f7ff b8b2 	b.w	404c7e <_svfprintf_r+0x24a>
  405b1a:	9b07      	ldr	r3, [sp, #28]
  405b1c:	06df      	lsls	r7, r3, #27
  405b1e:	d40b      	bmi.n	405b38 <_svfprintf_r+0x1104>
  405b20:	9b07      	ldr	r3, [sp, #28]
  405b22:	065e      	lsls	r6, r3, #25
  405b24:	d508      	bpl.n	405b38 <_svfprintf_r+0x1104>
  405b26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405b28:	6813      	ldr	r3, [r2, #0]
  405b2a:	3204      	adds	r2, #4
  405b2c:	920e      	str	r2, [sp, #56]	; 0x38
  405b2e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  405b32:	801a      	strh	r2, [r3, #0]
  405b34:	f7fe bfa4 	b.w	404a80 <_svfprintf_r+0x4c>
  405b38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405b3a:	6813      	ldr	r3, [r2, #0]
  405b3c:	3204      	adds	r2, #4
  405b3e:	920e      	str	r2, [sp, #56]	; 0x38
  405b40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405b42:	601a      	str	r2, [r3, #0]
  405b44:	f7fe bf9c 	b.w	404a80 <_svfprintf_r+0x4c>
  405b48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405b4a:	9b07      	ldr	r3, [sp, #28]
  405b4c:	f013 0f40 	tst.w	r3, #64	; 0x40
  405b50:	4613      	mov	r3, r2
  405b52:	f103 0304 	add.w	r3, r3, #4
  405b56:	bf0c      	ite	eq
  405b58:	6814      	ldreq	r4, [r2, #0]
  405b5a:	8814      	ldrhne	r4, [r2, #0]
  405b5c:	930e      	str	r3, [sp, #56]	; 0x38
  405b5e:	2500      	movs	r5, #0
  405b60:	f7ff bb02 	b.w	405168 <_svfprintf_r+0x734>
  405b64:	2700      	movs	r7, #0
  405b66:	45bb      	cmp	fp, r7
  405b68:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  405b6c:	f6ff ac0e 	blt.w	40538c <_svfprintf_r+0x958>
  405b70:	9b07      	ldr	r3, [sp, #28]
  405b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405b76:	9307      	str	r3, [sp, #28]
  405b78:	f7ff bbd6 	b.w	405328 <_svfprintf_r+0x8f4>
  405b7c:	4614      	mov	r4, r2
  405b7e:	3301      	adds	r3, #1
  405b80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405b82:	9324      	str	r3, [sp, #144]	; 0x90
  405b84:	442c      	add	r4, r5
  405b86:	2b07      	cmp	r3, #7
  405b88:	9425      	str	r4, [sp, #148]	; 0x94
  405b8a:	e889 0024 	stmia.w	r9, {r2, r5}
  405b8e:	f73f ae51 	bgt.w	405834 <_svfprintf_r+0xe00>
  405b92:	f109 0908 	add.w	r9, r9, #8
  405b96:	e658      	b.n	40584a <_svfprintf_r+0xe16>
  405b98:	aa23      	add	r2, sp, #140	; 0x8c
  405b9a:	9909      	ldr	r1, [sp, #36]	; 0x24
  405b9c:	980a      	ldr	r0, [sp, #40]	; 0x28
  405b9e:	f004 f957 	bl	409e50 <__ssprint_r>
  405ba2:	2800      	cmp	r0, #0
  405ba4:	f47f a83f 	bne.w	404c26 <_svfprintf_r+0x1f2>
  405ba8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405baa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405bae:	e40f      	b.n	4053d0 <_svfprintf_r+0x99c>
  405bb0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  405bb2:	f7ff bbe4 	b.w	40537e <_svfprintf_r+0x94a>
  405bb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405bb8:	4ab5      	ldr	r2, [pc, #724]	; (405e90 <_svfprintf_r+0x145c>)
  405bba:	f8c9 2000 	str.w	r2, [r9]
  405bbe:	3301      	adds	r3, #1
  405bc0:	3401      	adds	r4, #1
  405bc2:	2201      	movs	r2, #1
  405bc4:	2b07      	cmp	r3, #7
  405bc6:	9425      	str	r4, [sp, #148]	; 0x94
  405bc8:	9324      	str	r3, [sp, #144]	; 0x90
  405bca:	f8c9 2004 	str.w	r2, [r9, #4]
  405bce:	f300 808e 	bgt.w	405cee <_svfprintf_r+0x12ba>
  405bd2:	f109 0908 	add.w	r9, r9, #8
  405bd6:	b92d      	cbnz	r5, 405be4 <_svfprintf_r+0x11b0>
  405bd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405bda:	b91b      	cbnz	r3, 405be4 <_svfprintf_r+0x11b0>
  405bdc:	9b07      	ldr	r3, [sp, #28]
  405bde:	07df      	lsls	r7, r3, #31
  405be0:	f57f a9b8 	bpl.w	404f54 <_svfprintf_r+0x520>
  405be4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405be6:	9916      	ldr	r1, [sp, #88]	; 0x58
  405be8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  405bea:	f8c9 2000 	str.w	r2, [r9]
  405bee:	3301      	adds	r3, #1
  405bf0:	440c      	add	r4, r1
  405bf2:	2b07      	cmp	r3, #7
  405bf4:	9425      	str	r4, [sp, #148]	; 0x94
  405bf6:	f8c9 1004 	str.w	r1, [r9, #4]
  405bfa:	9324      	str	r3, [sp, #144]	; 0x90
  405bfc:	f300 81c2 	bgt.w	405f84 <_svfprintf_r+0x1550>
  405c00:	f109 0908 	add.w	r9, r9, #8
  405c04:	426d      	negs	r5, r5
  405c06:	2d00      	cmp	r5, #0
  405c08:	f340 809b 	ble.w	405d42 <_svfprintf_r+0x130e>
  405c0c:	4aa1      	ldr	r2, [pc, #644]	; (405e94 <_svfprintf_r+0x1460>)
  405c0e:	920f      	str	r2, [sp, #60]	; 0x3c
  405c10:	2d10      	cmp	r5, #16
  405c12:	f340 80c3 	ble.w	405d9c <_svfprintf_r+0x1368>
  405c16:	4622      	mov	r2, r4
  405c18:	2710      	movs	r7, #16
  405c1a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405c1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  405c20:	e005      	b.n	405c2e <_svfprintf_r+0x11fa>
  405c22:	f109 0908 	add.w	r9, r9, #8
  405c26:	3d10      	subs	r5, #16
  405c28:	2d10      	cmp	r5, #16
  405c2a:	f340 80b6 	ble.w	405d9a <_svfprintf_r+0x1366>
  405c2e:	3301      	adds	r3, #1
  405c30:	3210      	adds	r2, #16
  405c32:	2b07      	cmp	r3, #7
  405c34:	9225      	str	r2, [sp, #148]	; 0x94
  405c36:	9324      	str	r3, [sp, #144]	; 0x90
  405c38:	f8c9 a000 	str.w	sl, [r9]
  405c3c:	f8c9 7004 	str.w	r7, [r9, #4]
  405c40:	ddef      	ble.n	405c22 <_svfprintf_r+0x11ee>
  405c42:	aa23      	add	r2, sp, #140	; 0x8c
  405c44:	4621      	mov	r1, r4
  405c46:	4658      	mov	r0, fp
  405c48:	f004 f902 	bl	409e50 <__ssprint_r>
  405c4c:	2800      	cmp	r0, #0
  405c4e:	f47e afea 	bne.w	404c26 <_svfprintf_r+0x1f2>
  405c52:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405c54:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c56:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405c5a:	e7e4      	b.n	405c26 <_svfprintf_r+0x11f2>
  405c5c:	9a07      	ldr	r2, [sp, #28]
  405c5e:	f7ff ba38 	b.w	4050d2 <_svfprintf_r+0x69e>
  405c62:	9a07      	ldr	r2, [sp, #28]
  405c64:	e590      	b.n	405788 <_svfprintf_r+0xd54>
  405c66:	9b07      	ldr	r3, [sp, #28]
  405c68:	f043 0320 	orr.w	r3, r3, #32
  405c6c:	9307      	str	r3, [sp, #28]
  405c6e:	f108 0801 	add.w	r8, r8, #1
  405c72:	f898 3000 	ldrb.w	r3, [r8]
  405c76:	f7fe bf36 	b.w	404ae6 <_svfprintf_r+0xb2>
  405c7a:	aa23      	add	r2, sp, #140	; 0x8c
  405c7c:	9909      	ldr	r1, [sp, #36]	; 0x24
  405c7e:	980a      	ldr	r0, [sp, #40]	; 0x28
  405c80:	f004 f8e6 	bl	409e50 <__ssprint_r>
  405c84:	2800      	cmp	r0, #0
  405c86:	f47e afce 	bne.w	404c26 <_svfprintf_r+0x1f2>
  405c8a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405c8c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405c90:	f7ff bbb6 	b.w	405400 <_svfprintf_r+0x9cc>
  405c94:	2140      	movs	r1, #64	; 0x40
  405c96:	980a      	ldr	r0, [sp, #40]	; 0x28
  405c98:	f002 fede 	bl	408a58 <_malloc_r>
  405c9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405c9e:	6010      	str	r0, [r2, #0]
  405ca0:	6110      	str	r0, [r2, #16]
  405ca2:	2800      	cmp	r0, #0
  405ca4:	f000 81e5 	beq.w	406072 <_svfprintf_r+0x163e>
  405ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405caa:	2340      	movs	r3, #64	; 0x40
  405cac:	6153      	str	r3, [r2, #20]
  405cae:	f7fe bed8 	b.w	404a62 <_svfprintf_r+0x2e>
  405cb2:	a821      	add	r0, sp, #132	; 0x84
  405cb4:	a91e      	add	r1, sp, #120	; 0x78
  405cb6:	9004      	str	r0, [sp, #16]
  405cb8:	9103      	str	r1, [sp, #12]
  405cba:	a81d      	add	r0, sp, #116	; 0x74
  405cbc:	2103      	movs	r1, #3
  405cbe:	9002      	str	r0, [sp, #8]
  405cc0:	9a08      	ldr	r2, [sp, #32]
  405cc2:	f8cd b004 	str.w	fp, [sp, #4]
  405cc6:	463b      	mov	r3, r7
  405cc8:	9100      	str	r1, [sp, #0]
  405cca:	980a      	ldr	r0, [sp, #40]	; 0x28
  405ccc:	f001 fa78 	bl	4071c0 <_dtoa_r>
  405cd0:	465d      	mov	r5, fp
  405cd2:	4606      	mov	r6, r0
  405cd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405cd6:	2b46      	cmp	r3, #70	; 0x46
  405cd8:	eb06 0405 	add.w	r4, r6, r5
  405cdc:	f47f aeb6 	bne.w	405a4c <_svfprintf_r+0x1018>
  405ce0:	7833      	ldrb	r3, [r6, #0]
  405ce2:	2b30      	cmp	r3, #48	; 0x30
  405ce4:	f000 817c 	beq.w	405fe0 <_svfprintf_r+0x15ac>
  405ce8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  405cea:	442c      	add	r4, r5
  405cec:	e6ae      	b.n	405a4c <_svfprintf_r+0x1018>
  405cee:	aa23      	add	r2, sp, #140	; 0x8c
  405cf0:	9909      	ldr	r1, [sp, #36]	; 0x24
  405cf2:	980a      	ldr	r0, [sp, #40]	; 0x28
  405cf4:	f004 f8ac 	bl	409e50 <__ssprint_r>
  405cf8:	2800      	cmp	r0, #0
  405cfa:	f47e af94 	bne.w	404c26 <_svfprintf_r+0x1f2>
  405cfe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  405d00:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405d02:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405d06:	e766      	b.n	405bd6 <_svfprintf_r+0x11a2>
  405d08:	f1bb 0f00 	cmp.w	fp, #0
  405d0c:	bf08      	it	eq
  405d0e:	f04f 0b01 	moveq.w	fp, #1
  405d12:	e667      	b.n	4059e4 <_svfprintf_r+0xfb0>
  405d14:	970e      	str	r7, [sp, #56]	; 0x38
  405d16:	4617      	mov	r7, r2
  405d18:	e55e      	b.n	4057d8 <_svfprintf_r+0xda4>
  405d1a:	4630      	mov	r0, r6
  405d1c:	f7fe fb10 	bl	404340 <strlen>
  405d20:	46a3      	mov	fp, r4
  405d22:	4603      	mov	r3, r0
  405d24:	900d      	str	r0, [sp, #52]	; 0x34
  405d26:	f7ff baf4 	b.w	405312 <_svfprintf_r+0x8de>
  405d2a:	aa23      	add	r2, sp, #140	; 0x8c
  405d2c:	9909      	ldr	r1, [sp, #36]	; 0x24
  405d2e:	980a      	ldr	r0, [sp, #40]	; 0x28
  405d30:	f004 f88e 	bl	409e50 <__ssprint_r>
  405d34:	2800      	cmp	r0, #0
  405d36:	f47e af76 	bne.w	404c26 <_svfprintf_r+0x1f2>
  405d3a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405d3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405d3e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405d42:	9912      	ldr	r1, [sp, #72]	; 0x48
  405d44:	f8c9 6000 	str.w	r6, [r9]
  405d48:	3301      	adds	r3, #1
  405d4a:	440c      	add	r4, r1
  405d4c:	2b07      	cmp	r3, #7
  405d4e:	9425      	str	r4, [sp, #148]	; 0x94
  405d50:	9324      	str	r3, [sp, #144]	; 0x90
  405d52:	f8c9 1004 	str.w	r1, [r9, #4]
  405d56:	f77f a8fb 	ble.w	404f50 <_svfprintf_r+0x51c>
  405d5a:	e411      	b.n	405580 <_svfprintf_r+0xb4c>
  405d5c:	272d      	movs	r7, #45	; 0x2d
  405d5e:	9308      	str	r3, [sp, #32]
  405d60:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405d62:	9307      	str	r3, [sp, #28]
  405d64:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  405d68:	f04f 0b00 	mov.w	fp, #0
  405d6c:	f7ff b829 	b.w	404dc2 <_svfprintf_r+0x38e>
  405d70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405d72:	1cdd      	adds	r5, r3, #3
  405d74:	db1e      	blt.n	405db4 <_svfprintf_r+0x1380>
  405d76:	459b      	cmp	fp, r3
  405d78:	db1c      	blt.n	405db4 <_svfprintf_r+0x1380>
  405d7a:	9313      	str	r3, [sp, #76]	; 0x4c
  405d7c:	e689      	b.n	405a92 <_svfprintf_r+0x105e>
  405d7e:	4623      	mov	r3, r4
  405d80:	e677      	b.n	405a72 <_svfprintf_r+0x103e>
  405d82:	aa23      	add	r2, sp, #140	; 0x8c
  405d84:	9909      	ldr	r1, [sp, #36]	; 0x24
  405d86:	980a      	ldr	r0, [sp, #40]	; 0x28
  405d88:	f004 f862 	bl	409e50 <__ssprint_r>
  405d8c:	2800      	cmp	r0, #0
  405d8e:	f47e af4a 	bne.w	404c26 <_svfprintf_r+0x1f2>
  405d92:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405d94:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405d98:	e459      	b.n	40564e <_svfprintf_r+0xc1a>
  405d9a:	4614      	mov	r4, r2
  405d9c:	3301      	adds	r3, #1
  405d9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405da0:	9324      	str	r3, [sp, #144]	; 0x90
  405da2:	442c      	add	r4, r5
  405da4:	2b07      	cmp	r3, #7
  405da6:	9425      	str	r4, [sp, #148]	; 0x94
  405da8:	e889 0024 	stmia.w	r9, {r2, r5}
  405dac:	dcbd      	bgt.n	405d2a <_svfprintf_r+0x12f6>
  405dae:	f109 0908 	add.w	r9, r9, #8
  405db2:	e7c6      	b.n	405d42 <_svfprintf_r+0x130e>
  405db4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405db6:	3a02      	subs	r2, #2
  405db8:	9211      	str	r2, [sp, #68]	; 0x44
  405dba:	3b01      	subs	r3, #1
  405dbc:	2b00      	cmp	r3, #0
  405dbe:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  405dc2:	931d      	str	r3, [sp, #116]	; 0x74
  405dc4:	bfb8      	it	lt
  405dc6:	425b      	neglt	r3, r3
  405dc8:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  405dcc:	bfb4      	ite	lt
  405dce:	222d      	movlt	r2, #45	; 0x2d
  405dd0:	222b      	movge	r2, #43	; 0x2b
  405dd2:	2b09      	cmp	r3, #9
  405dd4:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  405dd8:	f340 80f1 	ble.w	405fbe <_svfprintf_r+0x158a>
  405ddc:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  405de0:	4604      	mov	r4, r0
  405de2:	4a2d      	ldr	r2, [pc, #180]	; (405e98 <_svfprintf_r+0x1464>)
  405de4:	fb82 2103 	smull	r2, r1, r2, r3
  405de8:	17da      	asrs	r2, r3, #31
  405dea:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  405dee:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  405df2:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  405df6:	f103 0130 	add.w	r1, r3, #48	; 0x30
  405dfa:	2a09      	cmp	r2, #9
  405dfc:	4613      	mov	r3, r2
  405dfe:	f804 1d01 	strb.w	r1, [r4, #-1]!
  405e02:	dcee      	bgt.n	405de2 <_svfprintf_r+0x13ae>
  405e04:	4621      	mov	r1, r4
  405e06:	3330      	adds	r3, #48	; 0x30
  405e08:	b2da      	uxtb	r2, r3
  405e0a:	f801 2d01 	strb.w	r2, [r1, #-1]!
  405e0e:	4288      	cmp	r0, r1
  405e10:	f240 813a 	bls.w	406088 <_svfprintf_r+0x1654>
  405e14:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  405e18:	4623      	mov	r3, r4
  405e1a:	e001      	b.n	405e20 <_svfprintf_r+0x13ec>
  405e1c:	f813 2b01 	ldrb.w	r2, [r3], #1
  405e20:	f801 2b01 	strb.w	r2, [r1], #1
  405e24:	4298      	cmp	r0, r3
  405e26:	d1f9      	bne.n	405e1c <_svfprintf_r+0x13e8>
  405e28:	1c43      	adds	r3, r0, #1
  405e2a:	1b1b      	subs	r3, r3, r4
  405e2c:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  405e30:	4413      	add	r3, r2
  405e32:	aa1f      	add	r2, sp, #124	; 0x7c
  405e34:	1a9b      	subs	r3, r3, r2
  405e36:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405e38:	9319      	str	r3, [sp, #100]	; 0x64
  405e3a:	2a01      	cmp	r2, #1
  405e3c:	4413      	add	r3, r2
  405e3e:	930d      	str	r3, [sp, #52]	; 0x34
  405e40:	f340 80ea 	ble.w	406018 <_svfprintf_r+0x15e4>
  405e44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405e46:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405e48:	4413      	add	r3, r2
  405e4a:	2200      	movs	r2, #0
  405e4c:	930d      	str	r3, [sp, #52]	; 0x34
  405e4e:	9213      	str	r2, [sp, #76]	; 0x4c
  405e50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405e54:	e62b      	b.n	405aae <_svfprintf_r+0x107a>
  405e56:	aa23      	add	r2, sp, #140	; 0x8c
  405e58:	9909      	ldr	r1, [sp, #36]	; 0x24
  405e5a:	980a      	ldr	r0, [sp, #40]	; 0x28
  405e5c:	f003 fff8 	bl	409e50 <__ssprint_r>
  405e60:	2800      	cmp	r0, #0
  405e62:	f47e aee0 	bne.w	404c26 <_svfprintf_r+0x1f2>
  405e66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405e68:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405e6a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405e6e:	e4f6      	b.n	40585e <_svfprintf_r+0xe2a>
  405e70:	2d06      	cmp	r5, #6
  405e72:	462b      	mov	r3, r5
  405e74:	bf28      	it	cs
  405e76:	2306      	movcs	r3, #6
  405e78:	930d      	str	r3, [sp, #52]	; 0x34
  405e7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405e7e:	46b3      	mov	fp, r6
  405e80:	970e      	str	r7, [sp, #56]	; 0x38
  405e82:	9613      	str	r6, [sp, #76]	; 0x4c
  405e84:	4637      	mov	r7, r6
  405e86:	9308      	str	r3, [sp, #32]
  405e88:	4e04      	ldr	r6, [pc, #16]	; (405e9c <_svfprintf_r+0x1468>)
  405e8a:	f7fe bf99 	b.w	404dc0 <_svfprintf_r+0x38c>
  405e8e:	bf00      	nop
  405e90:	0040c0a4 	.word	0x0040c0a4
  405e94:	0040c054 	.word	0x0040c054
  405e98:	66666667 	.word	0x66666667
  405e9c:	0040c09c 	.word	0x0040c09c
  405ea0:	aa23      	add	r2, sp, #140	; 0x8c
  405ea2:	9909      	ldr	r1, [sp, #36]	; 0x24
  405ea4:	980a      	ldr	r0, [sp, #40]	; 0x28
  405ea6:	f003 ffd3 	bl	409e50 <__ssprint_r>
  405eaa:	2800      	cmp	r0, #0
  405eac:	f47e aebb 	bne.w	404c26 <_svfprintf_r+0x1f2>
  405eb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405eb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405eb4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405eb6:	1ad3      	subs	r3, r2, r3
  405eb8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405ebc:	e4e7      	b.n	40588e <_svfprintf_r+0xe5a>
  405ebe:	f04f 0b06 	mov.w	fp, #6
  405ec2:	e58f      	b.n	4059e4 <_svfprintf_r+0xfb0>
  405ec4:	a821      	add	r0, sp, #132	; 0x84
  405ec6:	a91e      	add	r1, sp, #120	; 0x78
  405ec8:	9004      	str	r0, [sp, #16]
  405eca:	9103      	str	r1, [sp, #12]
  405ecc:	a81d      	add	r0, sp, #116	; 0x74
  405ece:	2103      	movs	r1, #3
  405ed0:	9002      	str	r0, [sp, #8]
  405ed2:	9a08      	ldr	r2, [sp, #32]
  405ed4:	f8cd b004 	str.w	fp, [sp, #4]
  405ed8:	463b      	mov	r3, r7
  405eda:	9100      	str	r1, [sp, #0]
  405edc:	980a      	ldr	r0, [sp, #40]	; 0x28
  405ede:	f001 f96f 	bl	4071c0 <_dtoa_r>
  405ee2:	465d      	mov	r5, fp
  405ee4:	4606      	mov	r6, r0
  405ee6:	eb00 040b 	add.w	r4, r0, fp
  405eea:	e6f9      	b.n	405ce0 <_svfprintf_r+0x12ac>
  405eec:	9307      	str	r3, [sp, #28]
  405eee:	f7ff b959 	b.w	4051a4 <_svfprintf_r+0x770>
  405ef2:	272d      	movs	r7, #45	; 0x2d
  405ef4:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  405ef8:	f7ff b8b2 	b.w	405060 <_svfprintf_r+0x62c>
  405efc:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405efe:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405f00:	4413      	add	r3, r2
  405f02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405f04:	930d      	str	r3, [sp, #52]	; 0x34
  405f06:	2a00      	cmp	r2, #0
  405f08:	dd7e      	ble.n	406008 <_svfprintf_r+0x15d4>
  405f0a:	2267      	movs	r2, #103	; 0x67
  405f0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405f10:	9211      	str	r2, [sp, #68]	; 0x44
  405f12:	e5cc      	b.n	405aae <_svfprintf_r+0x107a>
  405f14:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  405f18:	970e      	str	r7, [sp, #56]	; 0x38
  405f1a:	9308      	str	r3, [sp, #32]
  405f1c:	950d      	str	r5, [sp, #52]	; 0x34
  405f1e:	4683      	mov	fp, r0
  405f20:	9013      	str	r0, [sp, #76]	; 0x4c
  405f22:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  405f26:	f7fe bf4b 	b.w	404dc0 <_svfprintf_r+0x38c>
  405f2a:	9b07      	ldr	r3, [sp, #28]
  405f2c:	07db      	lsls	r3, r3, #31
  405f2e:	465f      	mov	r7, fp
  405f30:	d505      	bpl.n	405f3e <_svfprintf_r+0x150a>
  405f32:	ae40      	add	r6, sp, #256	; 0x100
  405f34:	2330      	movs	r3, #48	; 0x30
  405f36:	f806 3d41 	strb.w	r3, [r6, #-65]!
  405f3a:	f7fe bf37 	b.w	404dac <_svfprintf_r+0x378>
  405f3e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  405f42:	ae30      	add	r6, sp, #192	; 0xc0
  405f44:	f7fe bf35 	b.w	404db2 <_svfprintf_r+0x37e>
  405f48:	2b00      	cmp	r3, #0
  405f4a:	dd7d      	ble.n	406048 <_svfprintf_r+0x1614>
  405f4c:	f1bb 0f00 	cmp.w	fp, #0
  405f50:	d13d      	bne.n	405fce <_svfprintf_r+0x159a>
  405f52:	9a07      	ldr	r2, [sp, #28]
  405f54:	07d4      	lsls	r4, r2, #31
  405f56:	d43a      	bmi.n	405fce <_svfprintf_r+0x159a>
  405f58:	461a      	mov	r2, r3
  405f5a:	920d      	str	r2, [sp, #52]	; 0x34
  405f5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405f60:	e5a5      	b.n	405aae <_svfprintf_r+0x107a>
  405f62:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405f64:	2b47      	cmp	r3, #71	; 0x47
  405f66:	f47f ad70 	bne.w	405a4a <_svfprintf_r+0x1016>
  405f6a:	9b07      	ldr	r3, [sp, #28]
  405f6c:	07db      	lsls	r3, r3, #31
  405f6e:	f53f aeb1 	bmi.w	405cd4 <_svfprintf_r+0x12a0>
  405f72:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405f74:	1b9b      	subs	r3, r3, r6
  405f76:	9312      	str	r3, [sp, #72]	; 0x48
  405f78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405f7a:	2b47      	cmp	r3, #71	; 0x47
  405f7c:	f43f aef8 	beq.w	405d70 <_svfprintf_r+0x133c>
  405f80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405f82:	e71a      	b.n	405dba <_svfprintf_r+0x1386>
  405f84:	aa23      	add	r2, sp, #140	; 0x8c
  405f86:	9909      	ldr	r1, [sp, #36]	; 0x24
  405f88:	980a      	ldr	r0, [sp, #40]	; 0x28
  405f8a:	f003 ff61 	bl	409e50 <__ssprint_r>
  405f8e:	2800      	cmp	r0, #0
  405f90:	f47e ae49 	bne.w	404c26 <_svfprintf_r+0x1f2>
  405f94:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  405f96:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405f98:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f9a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405f9e:	e631      	b.n	405c04 <_svfprintf_r+0x11d0>
  405fa0:	46a0      	mov	r8, r4
  405fa2:	2500      	movs	r5, #0
  405fa4:	f7fe bda1 	b.w	404aea <_svfprintf_r+0xb6>
  405fa8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405faa:	e562      	b.n	405a72 <_svfprintf_r+0x103e>
  405fac:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405fae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405fb0:	4413      	add	r3, r2
  405fb2:	2267      	movs	r2, #103	; 0x67
  405fb4:	930d      	str	r3, [sp, #52]	; 0x34
  405fb6:	9211      	str	r2, [sp, #68]	; 0x44
  405fb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405fbc:	e577      	b.n	405aae <_svfprintf_r+0x107a>
  405fbe:	3330      	adds	r3, #48	; 0x30
  405fc0:	2230      	movs	r2, #48	; 0x30
  405fc2:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  405fc6:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  405fca:	ab20      	add	r3, sp, #128	; 0x80
  405fcc:	e731      	b.n	405e32 <_svfprintf_r+0x13fe>
  405fce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405fd0:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405fd2:	189d      	adds	r5, r3, r2
  405fd4:	eb05 030b 	add.w	r3, r5, fp
  405fd8:	930d      	str	r3, [sp, #52]	; 0x34
  405fda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405fde:	e566      	b.n	405aae <_svfprintf_r+0x107a>
  405fe0:	9808      	ldr	r0, [sp, #32]
  405fe2:	4639      	mov	r1, r7
  405fe4:	2200      	movs	r2, #0
  405fe6:	2300      	movs	r3, #0
  405fe8:	f004 fd9e 	bl	40ab28 <__aeabi_dcmpeq>
  405fec:	2800      	cmp	r0, #0
  405fee:	f47f ae7b 	bne.w	405ce8 <_svfprintf_r+0x12b4>
  405ff2:	f1c5 0501 	rsb	r5, r5, #1
  405ff6:	951d      	str	r5, [sp, #116]	; 0x74
  405ff8:	442c      	add	r4, r5
  405ffa:	e527      	b.n	405a4c <_svfprintf_r+0x1018>
  405ffc:	4e32      	ldr	r6, [pc, #200]	; (4060c8 <_svfprintf_r+0x1694>)
  405ffe:	4b33      	ldr	r3, [pc, #204]	; (4060cc <_svfprintf_r+0x1698>)
  406000:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  406004:	f7ff b82e 	b.w	405064 <_svfprintf_r+0x630>
  406008:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40600a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40600c:	f1c3 0301 	rsb	r3, r3, #1
  406010:	441a      	add	r2, r3
  406012:	4613      	mov	r3, r2
  406014:	920d      	str	r2, [sp, #52]	; 0x34
  406016:	e778      	b.n	405f0a <_svfprintf_r+0x14d6>
  406018:	9b07      	ldr	r3, [sp, #28]
  40601a:	f013 0301 	ands.w	r3, r3, #1
  40601e:	f47f af11 	bne.w	405e44 <_svfprintf_r+0x1410>
  406022:	9313      	str	r3, [sp, #76]	; 0x4c
  406024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406026:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40602a:	e540      	b.n	405aae <_svfprintf_r+0x107a>
  40602c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40602e:	f898 3001 	ldrb.w	r3, [r8, #1]
  406032:	6805      	ldr	r5, [r0, #0]
  406034:	3004      	adds	r0, #4
  406036:	2d00      	cmp	r5, #0
  406038:	900e      	str	r0, [sp, #56]	; 0x38
  40603a:	46a0      	mov	r8, r4
  40603c:	f6be ad53 	bge.w	404ae6 <_svfprintf_r+0xb2>
  406040:	f04f 35ff 	mov.w	r5, #4294967295
  406044:	f7fe bd4f 	b.w	404ae6 <_svfprintf_r+0xb2>
  406048:	f1bb 0f00 	cmp.w	fp, #0
  40604c:	d102      	bne.n	406054 <_svfprintf_r+0x1620>
  40604e:	9b07      	ldr	r3, [sp, #28]
  406050:	07d8      	lsls	r0, r3, #31
  406052:	d507      	bpl.n	406064 <_svfprintf_r+0x1630>
  406054:	9b16      	ldr	r3, [sp, #88]	; 0x58
  406056:	1c5d      	adds	r5, r3, #1
  406058:	eb05 030b 	add.w	r3, r5, fp
  40605c:	930d      	str	r3, [sp, #52]	; 0x34
  40605e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406062:	e524      	b.n	405aae <_svfprintf_r+0x107a>
  406064:	2301      	movs	r3, #1
  406066:	930d      	str	r3, [sp, #52]	; 0x34
  406068:	e521      	b.n	405aae <_svfprintf_r+0x107a>
  40606a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40606e:	f7ff b921 	b.w	4052b4 <_svfprintf_r+0x880>
  406072:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406074:	230c      	movs	r3, #12
  406076:	6013      	str	r3, [r2, #0]
  406078:	f04f 30ff 	mov.w	r0, #4294967295
  40607c:	f7fe bddc 	b.w	404c38 <_svfprintf_r+0x204>
  406080:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406084:	f7ff b8f9 	b.w	40527a <_svfprintf_r+0x846>
  406088:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  40608c:	e6d1      	b.n	405e32 <_svfprintf_r+0x13fe>
  40608e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406092:	f7fe bdd9 	b.w	404c48 <_svfprintf_r+0x214>
  406096:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40609a:	f7ff b857 	b.w	40514c <_svfprintf_r+0x718>
  40609e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4060a2:	f7ff b825 	b.w	4050f0 <_svfprintf_r+0x6bc>
  4060a6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4060aa:	f7ff b94c 	b.w	405346 <_svfprintf_r+0x912>
  4060ae:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4060b2:	f7fe bff3 	b.w	40509c <_svfprintf_r+0x668>
  4060b6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4060ba:	f7fe bfa3 	b.w	405004 <_svfprintf_r+0x5d0>
  4060be:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4060c2:	f7fe be33 	b.w	404d2c <_svfprintf_r+0x2f8>
  4060c6:	bf00      	nop
  4060c8:	0040c070 	.word	0x0040c070
  4060cc:	0040c06c 	.word	0x0040c06c

004060d0 <__sprint_r.part.0>:
  4060d0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4060d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4060d6:	049c      	lsls	r4, r3, #18
  4060d8:	4692      	mov	sl, r2
  4060da:	d52c      	bpl.n	406136 <__sprint_r.part.0+0x66>
  4060dc:	6893      	ldr	r3, [r2, #8]
  4060de:	6812      	ldr	r2, [r2, #0]
  4060e0:	b33b      	cbz	r3, 406132 <__sprint_r.part.0+0x62>
  4060e2:	460f      	mov	r7, r1
  4060e4:	4680      	mov	r8, r0
  4060e6:	f102 0908 	add.w	r9, r2, #8
  4060ea:	e919 0060 	ldmdb	r9, {r5, r6}
  4060ee:	08b6      	lsrs	r6, r6, #2
  4060f0:	d017      	beq.n	406122 <__sprint_r.part.0+0x52>
  4060f2:	3d04      	subs	r5, #4
  4060f4:	2400      	movs	r4, #0
  4060f6:	e001      	b.n	4060fc <__sprint_r.part.0+0x2c>
  4060f8:	42a6      	cmp	r6, r4
  4060fa:	d010      	beq.n	40611e <__sprint_r.part.0+0x4e>
  4060fc:	463a      	mov	r2, r7
  4060fe:	f855 1f04 	ldr.w	r1, [r5, #4]!
  406102:	4640      	mov	r0, r8
  406104:	f002 f92a 	bl	40835c <_fputwc_r>
  406108:	1c43      	adds	r3, r0, #1
  40610a:	f104 0401 	add.w	r4, r4, #1
  40610e:	d1f3      	bne.n	4060f8 <__sprint_r.part.0+0x28>
  406110:	2300      	movs	r3, #0
  406112:	f8ca 3008 	str.w	r3, [sl, #8]
  406116:	f8ca 3004 	str.w	r3, [sl, #4]
  40611a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40611e:	f8da 3008 	ldr.w	r3, [sl, #8]
  406122:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  406126:	f8ca 3008 	str.w	r3, [sl, #8]
  40612a:	f109 0908 	add.w	r9, r9, #8
  40612e:	2b00      	cmp	r3, #0
  406130:	d1db      	bne.n	4060ea <__sprint_r.part.0+0x1a>
  406132:	2000      	movs	r0, #0
  406134:	e7ec      	b.n	406110 <__sprint_r.part.0+0x40>
  406136:	f002 fa59 	bl	4085ec <__sfvwrite_r>
  40613a:	2300      	movs	r3, #0
  40613c:	f8ca 3008 	str.w	r3, [sl, #8]
  406140:	f8ca 3004 	str.w	r3, [sl, #4]
  406144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00406148 <_vfiprintf_r>:
  406148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40614c:	b0ab      	sub	sp, #172	; 0xac
  40614e:	461c      	mov	r4, r3
  406150:	9100      	str	r1, [sp, #0]
  406152:	4690      	mov	r8, r2
  406154:	9304      	str	r3, [sp, #16]
  406156:	9005      	str	r0, [sp, #20]
  406158:	b118      	cbz	r0, 406162 <_vfiprintf_r+0x1a>
  40615a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40615c:	2b00      	cmp	r3, #0
  40615e:	f000 80de 	beq.w	40631e <_vfiprintf_r+0x1d6>
  406162:	9800      	ldr	r0, [sp, #0]
  406164:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  406168:	b28a      	uxth	r2, r1
  40616a:	0495      	lsls	r5, r2, #18
  40616c:	d407      	bmi.n	40617e <_vfiprintf_r+0x36>
  40616e:	6e43      	ldr	r3, [r0, #100]	; 0x64
  406170:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  406174:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  406178:	8182      	strh	r2, [r0, #12]
  40617a:	6643      	str	r3, [r0, #100]	; 0x64
  40617c:	b292      	uxth	r2, r2
  40617e:	0711      	lsls	r1, r2, #28
  406180:	f140 80b1 	bpl.w	4062e6 <_vfiprintf_r+0x19e>
  406184:	9b00      	ldr	r3, [sp, #0]
  406186:	691b      	ldr	r3, [r3, #16]
  406188:	2b00      	cmp	r3, #0
  40618a:	f000 80ac 	beq.w	4062e6 <_vfiprintf_r+0x19e>
  40618e:	f002 021a 	and.w	r2, r2, #26
  406192:	2a0a      	cmp	r2, #10
  406194:	f000 80b5 	beq.w	406302 <_vfiprintf_r+0x1ba>
  406198:	2300      	movs	r3, #0
  40619a:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  40619e:	9302      	str	r3, [sp, #8]
  4061a0:	930f      	str	r3, [sp, #60]	; 0x3c
  4061a2:	930e      	str	r3, [sp, #56]	; 0x38
  4061a4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  4061a8:	46da      	mov	sl, fp
  4061aa:	f898 3000 	ldrb.w	r3, [r8]
  4061ae:	4644      	mov	r4, r8
  4061b0:	b1fb      	cbz	r3, 4061f2 <_vfiprintf_r+0xaa>
  4061b2:	2b25      	cmp	r3, #37	; 0x25
  4061b4:	d102      	bne.n	4061bc <_vfiprintf_r+0x74>
  4061b6:	e01c      	b.n	4061f2 <_vfiprintf_r+0xaa>
  4061b8:	2b25      	cmp	r3, #37	; 0x25
  4061ba:	d003      	beq.n	4061c4 <_vfiprintf_r+0x7c>
  4061bc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4061c0:	2b00      	cmp	r3, #0
  4061c2:	d1f9      	bne.n	4061b8 <_vfiprintf_r+0x70>
  4061c4:	ebc8 0504 	rsb	r5, r8, r4
  4061c8:	b19d      	cbz	r5, 4061f2 <_vfiprintf_r+0xaa>
  4061ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4061cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4061ce:	f8ca 8000 	str.w	r8, [sl]
  4061d2:	3301      	adds	r3, #1
  4061d4:	442a      	add	r2, r5
  4061d6:	2b07      	cmp	r3, #7
  4061d8:	f8ca 5004 	str.w	r5, [sl, #4]
  4061dc:	920f      	str	r2, [sp, #60]	; 0x3c
  4061de:	930e      	str	r3, [sp, #56]	; 0x38
  4061e0:	dd7b      	ble.n	4062da <_vfiprintf_r+0x192>
  4061e2:	2a00      	cmp	r2, #0
  4061e4:	f040 8528 	bne.w	406c38 <_vfiprintf_r+0xaf0>
  4061e8:	9b02      	ldr	r3, [sp, #8]
  4061ea:	920e      	str	r2, [sp, #56]	; 0x38
  4061ec:	442b      	add	r3, r5
  4061ee:	46da      	mov	sl, fp
  4061f0:	9302      	str	r3, [sp, #8]
  4061f2:	7823      	ldrb	r3, [r4, #0]
  4061f4:	2b00      	cmp	r3, #0
  4061f6:	f000 843e 	beq.w	406a76 <_vfiprintf_r+0x92e>
  4061fa:	2100      	movs	r1, #0
  4061fc:	f04f 0300 	mov.w	r3, #0
  406200:	f04f 32ff 	mov.w	r2, #4294967295
  406204:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  406208:	f104 0801 	add.w	r8, r4, #1
  40620c:	7863      	ldrb	r3, [r4, #1]
  40620e:	9201      	str	r2, [sp, #4]
  406210:	4608      	mov	r0, r1
  406212:	460e      	mov	r6, r1
  406214:	460c      	mov	r4, r1
  406216:	f108 0801 	add.w	r8, r8, #1
  40621a:	f1a3 0220 	sub.w	r2, r3, #32
  40621e:	2a58      	cmp	r2, #88	; 0x58
  406220:	f200 8393 	bhi.w	40694a <_vfiprintf_r+0x802>
  406224:	e8df f012 	tbh	[pc, r2, lsl #1]
  406228:	03910346 	.word	0x03910346
  40622c:	034e0391 	.word	0x034e0391
  406230:	03910391 	.word	0x03910391
  406234:	03910391 	.word	0x03910391
  406238:	03910391 	.word	0x03910391
  40623c:	02670289 	.word	0x02670289
  406240:	00800391 	.word	0x00800391
  406244:	0391026c 	.word	0x0391026c
  406248:	025901c6 	.word	0x025901c6
  40624c:	02590259 	.word	0x02590259
  406250:	02590259 	.word	0x02590259
  406254:	02590259 	.word	0x02590259
  406258:	02590259 	.word	0x02590259
  40625c:	03910391 	.word	0x03910391
  406260:	03910391 	.word	0x03910391
  406264:	03910391 	.word	0x03910391
  406268:	03910391 	.word	0x03910391
  40626c:	03910391 	.word	0x03910391
  406270:	039101cb 	.word	0x039101cb
  406274:	03910391 	.word	0x03910391
  406278:	03910391 	.word	0x03910391
  40627c:	03910391 	.word	0x03910391
  406280:	03910391 	.word	0x03910391
  406284:	02140391 	.word	0x02140391
  406288:	03910391 	.word	0x03910391
  40628c:	03910391 	.word	0x03910391
  406290:	02ee0391 	.word	0x02ee0391
  406294:	03910391 	.word	0x03910391
  406298:	03910311 	.word	0x03910311
  40629c:	03910391 	.word	0x03910391
  4062a0:	03910391 	.word	0x03910391
  4062a4:	03910391 	.word	0x03910391
  4062a8:	03910391 	.word	0x03910391
  4062ac:	03340391 	.word	0x03340391
  4062b0:	0391038a 	.word	0x0391038a
  4062b4:	03910391 	.word	0x03910391
  4062b8:	038a0367 	.word	0x038a0367
  4062bc:	03910391 	.word	0x03910391
  4062c0:	0391036c 	.word	0x0391036c
  4062c4:	02950379 	.word	0x02950379
  4062c8:	02e90085 	.word	0x02e90085
  4062cc:	029b0391 	.word	0x029b0391
  4062d0:	02ba0391 	.word	0x02ba0391
  4062d4:	03910391 	.word	0x03910391
  4062d8:	0353      	.short	0x0353
  4062da:	f10a 0a08 	add.w	sl, sl, #8
  4062de:	9b02      	ldr	r3, [sp, #8]
  4062e0:	442b      	add	r3, r5
  4062e2:	9302      	str	r3, [sp, #8]
  4062e4:	e785      	b.n	4061f2 <_vfiprintf_r+0xaa>
  4062e6:	9900      	ldr	r1, [sp, #0]
  4062e8:	9805      	ldr	r0, [sp, #20]
  4062ea:	f000 fe61 	bl	406fb0 <__swsetup_r>
  4062ee:	2800      	cmp	r0, #0
  4062f0:	f040 8558 	bne.w	406da4 <_vfiprintf_r+0xc5c>
  4062f4:	9b00      	ldr	r3, [sp, #0]
  4062f6:	899a      	ldrh	r2, [r3, #12]
  4062f8:	f002 021a 	and.w	r2, r2, #26
  4062fc:	2a0a      	cmp	r2, #10
  4062fe:	f47f af4b 	bne.w	406198 <_vfiprintf_r+0x50>
  406302:	9900      	ldr	r1, [sp, #0]
  406304:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  406308:	2b00      	cmp	r3, #0
  40630a:	f6ff af45 	blt.w	406198 <_vfiprintf_r+0x50>
  40630e:	4623      	mov	r3, r4
  406310:	4642      	mov	r2, r8
  406312:	9805      	ldr	r0, [sp, #20]
  406314:	f000 fe16 	bl	406f44 <__sbprintf>
  406318:	b02b      	add	sp, #172	; 0xac
  40631a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40631e:	f001 ffb3 	bl	408288 <__sinit>
  406322:	e71e      	b.n	406162 <_vfiprintf_r+0x1a>
  406324:	4264      	negs	r4, r4
  406326:	9304      	str	r3, [sp, #16]
  406328:	f046 0604 	orr.w	r6, r6, #4
  40632c:	f898 3000 	ldrb.w	r3, [r8]
  406330:	e771      	b.n	406216 <_vfiprintf_r+0xce>
  406332:	2130      	movs	r1, #48	; 0x30
  406334:	9804      	ldr	r0, [sp, #16]
  406336:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  40633a:	9901      	ldr	r1, [sp, #4]
  40633c:	9406      	str	r4, [sp, #24]
  40633e:	f04f 0300 	mov.w	r3, #0
  406342:	2278      	movs	r2, #120	; 0x78
  406344:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  406348:	2900      	cmp	r1, #0
  40634a:	4603      	mov	r3, r0
  40634c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  406350:	6804      	ldr	r4, [r0, #0]
  406352:	f103 0304 	add.w	r3, r3, #4
  406356:	f04f 0500 	mov.w	r5, #0
  40635a:	f046 0202 	orr.w	r2, r6, #2
  40635e:	f2c0 8525 	blt.w	406dac <_vfiprintf_r+0xc64>
  406362:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406366:	ea54 0205 	orrs.w	r2, r4, r5
  40636a:	f046 0602 	orr.w	r6, r6, #2
  40636e:	9304      	str	r3, [sp, #16]
  406370:	f040 84bf 	bne.w	406cf2 <_vfiprintf_r+0xbaa>
  406374:	48b3      	ldr	r0, [pc, #716]	; (406644 <_vfiprintf_r+0x4fc>)
  406376:	9b01      	ldr	r3, [sp, #4]
  406378:	2b00      	cmp	r3, #0
  40637a:	f040 841c 	bne.w	406bb6 <_vfiprintf_r+0xa6e>
  40637e:	4699      	mov	r9, r3
  406380:	2300      	movs	r3, #0
  406382:	9301      	str	r3, [sp, #4]
  406384:	9303      	str	r3, [sp, #12]
  406386:	465f      	mov	r7, fp
  406388:	9b01      	ldr	r3, [sp, #4]
  40638a:	9a03      	ldr	r2, [sp, #12]
  40638c:	4293      	cmp	r3, r2
  40638e:	bfb8      	it	lt
  406390:	4613      	movlt	r3, r2
  406392:	461d      	mov	r5, r3
  406394:	f1b9 0f00 	cmp.w	r9, #0
  406398:	d000      	beq.n	40639c <_vfiprintf_r+0x254>
  40639a:	3501      	adds	r5, #1
  40639c:	f016 0302 	ands.w	r3, r6, #2
  4063a0:	9307      	str	r3, [sp, #28]
  4063a2:	bf18      	it	ne
  4063a4:	3502      	addne	r5, #2
  4063a6:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  4063aa:	9308      	str	r3, [sp, #32]
  4063ac:	f040 82f1 	bne.w	406992 <_vfiprintf_r+0x84a>
  4063b0:	9b06      	ldr	r3, [sp, #24]
  4063b2:	1b5c      	subs	r4, r3, r5
  4063b4:	2c00      	cmp	r4, #0
  4063b6:	f340 82ec 	ble.w	406992 <_vfiprintf_r+0x84a>
  4063ba:	2c10      	cmp	r4, #16
  4063bc:	f340 8556 	ble.w	406e6c <_vfiprintf_r+0xd24>
  4063c0:	f8df 9284 	ldr.w	r9, [pc, #644]	; 406648 <_vfiprintf_r+0x500>
  4063c4:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  4063c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4063ca:	46d4      	mov	ip, sl
  4063cc:	2310      	movs	r3, #16
  4063ce:	46c2      	mov	sl, r8
  4063d0:	4670      	mov	r0, lr
  4063d2:	46a8      	mov	r8, r5
  4063d4:	464d      	mov	r5, r9
  4063d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4063da:	e007      	b.n	4063ec <_vfiprintf_r+0x2a4>
  4063dc:	f100 0e02 	add.w	lr, r0, #2
  4063e0:	f10c 0c08 	add.w	ip, ip, #8
  4063e4:	4608      	mov	r0, r1
  4063e6:	3c10      	subs	r4, #16
  4063e8:	2c10      	cmp	r4, #16
  4063ea:	dd13      	ble.n	406414 <_vfiprintf_r+0x2cc>
  4063ec:	1c41      	adds	r1, r0, #1
  4063ee:	3210      	adds	r2, #16
  4063f0:	2907      	cmp	r1, #7
  4063f2:	920f      	str	r2, [sp, #60]	; 0x3c
  4063f4:	f8cc 5000 	str.w	r5, [ip]
  4063f8:	f8cc 3004 	str.w	r3, [ip, #4]
  4063fc:	910e      	str	r1, [sp, #56]	; 0x38
  4063fe:	dded      	ble.n	4063dc <_vfiprintf_r+0x294>
  406400:	2a00      	cmp	r2, #0
  406402:	f040 82b7 	bne.w	406974 <_vfiprintf_r+0x82c>
  406406:	3c10      	subs	r4, #16
  406408:	2c10      	cmp	r4, #16
  40640a:	4610      	mov	r0, r2
  40640c:	f04f 0e01 	mov.w	lr, #1
  406410:	46dc      	mov	ip, fp
  406412:	dceb      	bgt.n	4063ec <_vfiprintf_r+0x2a4>
  406414:	46a9      	mov	r9, r5
  406416:	4670      	mov	r0, lr
  406418:	4645      	mov	r5, r8
  40641a:	46d0      	mov	r8, sl
  40641c:	46e2      	mov	sl, ip
  40641e:	4422      	add	r2, r4
  406420:	2807      	cmp	r0, #7
  406422:	920f      	str	r2, [sp, #60]	; 0x3c
  406424:	f8ca 9000 	str.w	r9, [sl]
  406428:	f8ca 4004 	str.w	r4, [sl, #4]
  40642c:	900e      	str	r0, [sp, #56]	; 0x38
  40642e:	f300 8375 	bgt.w	406b1c <_vfiprintf_r+0x9d4>
  406432:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  406436:	f10a 0a08 	add.w	sl, sl, #8
  40643a:	f100 0e01 	add.w	lr, r0, #1
  40643e:	2b00      	cmp	r3, #0
  406440:	f040 82b0 	bne.w	4069a4 <_vfiprintf_r+0x85c>
  406444:	9b07      	ldr	r3, [sp, #28]
  406446:	2b00      	cmp	r3, #0
  406448:	f000 82c3 	beq.w	4069d2 <_vfiprintf_r+0x88a>
  40644c:	3202      	adds	r2, #2
  40644e:	a90c      	add	r1, sp, #48	; 0x30
  406450:	2302      	movs	r3, #2
  406452:	f1be 0f07 	cmp.w	lr, #7
  406456:	920f      	str	r2, [sp, #60]	; 0x3c
  406458:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40645c:	e88a 000a 	stmia.w	sl, {r1, r3}
  406460:	f340 8378 	ble.w	406b54 <_vfiprintf_r+0xa0c>
  406464:	2a00      	cmp	r2, #0
  406466:	f040 840a 	bne.w	406c7e <_vfiprintf_r+0xb36>
  40646a:	9b08      	ldr	r3, [sp, #32]
  40646c:	2b80      	cmp	r3, #128	; 0x80
  40646e:	f04f 0e01 	mov.w	lr, #1
  406472:	4610      	mov	r0, r2
  406474:	46da      	mov	sl, fp
  406476:	f040 82b0 	bne.w	4069da <_vfiprintf_r+0x892>
  40647a:	9b06      	ldr	r3, [sp, #24]
  40647c:	1b5c      	subs	r4, r3, r5
  40647e:	2c00      	cmp	r4, #0
  406480:	f340 82ab 	ble.w	4069da <_vfiprintf_r+0x892>
  406484:	2c10      	cmp	r4, #16
  406486:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 40664c <_vfiprintf_r+0x504>
  40648a:	f340 850b 	ble.w	406ea4 <_vfiprintf_r+0xd5c>
  40648e:	46d6      	mov	lr, sl
  406490:	2310      	movs	r3, #16
  406492:	46c2      	mov	sl, r8
  406494:	46a8      	mov	r8, r5
  406496:	464d      	mov	r5, r9
  406498:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40649c:	e007      	b.n	4064ae <_vfiprintf_r+0x366>
  40649e:	f100 0c02 	add.w	ip, r0, #2
  4064a2:	f10e 0e08 	add.w	lr, lr, #8
  4064a6:	4608      	mov	r0, r1
  4064a8:	3c10      	subs	r4, #16
  4064aa:	2c10      	cmp	r4, #16
  4064ac:	dd13      	ble.n	4064d6 <_vfiprintf_r+0x38e>
  4064ae:	1c41      	adds	r1, r0, #1
  4064b0:	3210      	adds	r2, #16
  4064b2:	2907      	cmp	r1, #7
  4064b4:	920f      	str	r2, [sp, #60]	; 0x3c
  4064b6:	f8ce 5000 	str.w	r5, [lr]
  4064ba:	f8ce 3004 	str.w	r3, [lr, #4]
  4064be:	910e      	str	r1, [sp, #56]	; 0x38
  4064c0:	dded      	ble.n	40649e <_vfiprintf_r+0x356>
  4064c2:	2a00      	cmp	r2, #0
  4064c4:	f040 8315 	bne.w	406af2 <_vfiprintf_r+0x9aa>
  4064c8:	3c10      	subs	r4, #16
  4064ca:	2c10      	cmp	r4, #16
  4064cc:	f04f 0c01 	mov.w	ip, #1
  4064d0:	4610      	mov	r0, r2
  4064d2:	46de      	mov	lr, fp
  4064d4:	dceb      	bgt.n	4064ae <_vfiprintf_r+0x366>
  4064d6:	46a9      	mov	r9, r5
  4064d8:	4645      	mov	r5, r8
  4064da:	46d0      	mov	r8, sl
  4064dc:	46f2      	mov	sl, lr
  4064de:	4422      	add	r2, r4
  4064e0:	f1bc 0f07 	cmp.w	ip, #7
  4064e4:	920f      	str	r2, [sp, #60]	; 0x3c
  4064e6:	f8ca 9000 	str.w	r9, [sl]
  4064ea:	f8ca 4004 	str.w	r4, [sl, #4]
  4064ee:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  4064f2:	f300 83d2 	bgt.w	406c9a <_vfiprintf_r+0xb52>
  4064f6:	9b01      	ldr	r3, [sp, #4]
  4064f8:	9903      	ldr	r1, [sp, #12]
  4064fa:	1a5c      	subs	r4, r3, r1
  4064fc:	2c00      	cmp	r4, #0
  4064fe:	f10a 0a08 	add.w	sl, sl, #8
  406502:	f10c 0e01 	add.w	lr, ip, #1
  406506:	4660      	mov	r0, ip
  406508:	f300 826d 	bgt.w	4069e6 <_vfiprintf_r+0x89e>
  40650c:	9903      	ldr	r1, [sp, #12]
  40650e:	f8ca 7000 	str.w	r7, [sl]
  406512:	440a      	add	r2, r1
  406514:	f1be 0f07 	cmp.w	lr, #7
  406518:	920f      	str	r2, [sp, #60]	; 0x3c
  40651a:	f8ca 1004 	str.w	r1, [sl, #4]
  40651e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  406522:	f340 82ce 	ble.w	406ac2 <_vfiprintf_r+0x97a>
  406526:	2a00      	cmp	r2, #0
  406528:	f040 833a 	bne.w	406ba0 <_vfiprintf_r+0xa58>
  40652c:	0770      	lsls	r0, r6, #29
  40652e:	920e      	str	r2, [sp, #56]	; 0x38
  406530:	d538      	bpl.n	4065a4 <_vfiprintf_r+0x45c>
  406532:	9b06      	ldr	r3, [sp, #24]
  406534:	1b5c      	subs	r4, r3, r5
  406536:	2c00      	cmp	r4, #0
  406538:	dd34      	ble.n	4065a4 <_vfiprintf_r+0x45c>
  40653a:	46da      	mov	sl, fp
  40653c:	2c10      	cmp	r4, #16
  40653e:	f340 84ab 	ble.w	406e98 <_vfiprintf_r+0xd50>
  406542:	f8df 9104 	ldr.w	r9, [pc, #260]	; 406648 <_vfiprintf_r+0x500>
  406546:	990e      	ldr	r1, [sp, #56]	; 0x38
  406548:	464f      	mov	r7, r9
  40654a:	2610      	movs	r6, #16
  40654c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  406550:	e006      	b.n	406560 <_vfiprintf_r+0x418>
  406552:	1c88      	adds	r0, r1, #2
  406554:	f10a 0a08 	add.w	sl, sl, #8
  406558:	4619      	mov	r1, r3
  40655a:	3c10      	subs	r4, #16
  40655c:	2c10      	cmp	r4, #16
  40655e:	dd13      	ble.n	406588 <_vfiprintf_r+0x440>
  406560:	1c4b      	adds	r3, r1, #1
  406562:	3210      	adds	r2, #16
  406564:	2b07      	cmp	r3, #7
  406566:	920f      	str	r2, [sp, #60]	; 0x3c
  406568:	f8ca 7000 	str.w	r7, [sl]
  40656c:	f8ca 6004 	str.w	r6, [sl, #4]
  406570:	930e      	str	r3, [sp, #56]	; 0x38
  406572:	ddee      	ble.n	406552 <_vfiprintf_r+0x40a>
  406574:	2a00      	cmp	r2, #0
  406576:	f040 828e 	bne.w	406a96 <_vfiprintf_r+0x94e>
  40657a:	3c10      	subs	r4, #16
  40657c:	2c10      	cmp	r4, #16
  40657e:	f04f 0001 	mov.w	r0, #1
  406582:	4611      	mov	r1, r2
  406584:	46da      	mov	sl, fp
  406586:	dceb      	bgt.n	406560 <_vfiprintf_r+0x418>
  406588:	46b9      	mov	r9, r7
  40658a:	4422      	add	r2, r4
  40658c:	2807      	cmp	r0, #7
  40658e:	920f      	str	r2, [sp, #60]	; 0x3c
  406590:	f8ca 9000 	str.w	r9, [sl]
  406594:	f8ca 4004 	str.w	r4, [sl, #4]
  406598:	900e      	str	r0, [sp, #56]	; 0x38
  40659a:	f340 829b 	ble.w	406ad4 <_vfiprintf_r+0x98c>
  40659e:	2a00      	cmp	r2, #0
  4065a0:	f040 8425 	bne.w	406dee <_vfiprintf_r+0xca6>
  4065a4:	9b02      	ldr	r3, [sp, #8]
  4065a6:	9a06      	ldr	r2, [sp, #24]
  4065a8:	42aa      	cmp	r2, r5
  4065aa:	bfac      	ite	ge
  4065ac:	189b      	addge	r3, r3, r2
  4065ae:	195b      	addlt	r3, r3, r5
  4065b0:	9302      	str	r3, [sp, #8]
  4065b2:	e299      	b.n	406ae8 <_vfiprintf_r+0x9a0>
  4065b4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4065b8:	f898 3000 	ldrb.w	r3, [r8]
  4065bc:	e62b      	b.n	406216 <_vfiprintf_r+0xce>
  4065be:	9406      	str	r4, [sp, #24]
  4065c0:	2900      	cmp	r1, #0
  4065c2:	f040 84af 	bne.w	406f24 <_vfiprintf_r+0xddc>
  4065c6:	f046 0610 	orr.w	r6, r6, #16
  4065ca:	06b3      	lsls	r3, r6, #26
  4065cc:	f140 8312 	bpl.w	406bf4 <_vfiprintf_r+0xaac>
  4065d0:	9904      	ldr	r1, [sp, #16]
  4065d2:	3107      	adds	r1, #7
  4065d4:	f021 0107 	bic.w	r1, r1, #7
  4065d8:	e9d1 2300 	ldrd	r2, r3, [r1]
  4065dc:	3108      	adds	r1, #8
  4065de:	9104      	str	r1, [sp, #16]
  4065e0:	4614      	mov	r4, r2
  4065e2:	461d      	mov	r5, r3
  4065e4:	2a00      	cmp	r2, #0
  4065e6:	f173 0300 	sbcs.w	r3, r3, #0
  4065ea:	f2c0 8386 	blt.w	406cfa <_vfiprintf_r+0xbb2>
  4065ee:	9b01      	ldr	r3, [sp, #4]
  4065f0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4065f4:	2b00      	cmp	r3, #0
  4065f6:	f2c0 831a 	blt.w	406c2e <_vfiprintf_r+0xae6>
  4065fa:	ea54 0305 	orrs.w	r3, r4, r5
  4065fe:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406602:	f000 80ed 	beq.w	4067e0 <_vfiprintf_r+0x698>
  406606:	2d00      	cmp	r5, #0
  406608:	bf08      	it	eq
  40660a:	2c0a      	cmpeq	r4, #10
  40660c:	f0c0 80ed 	bcc.w	4067ea <_vfiprintf_r+0x6a2>
  406610:	465f      	mov	r7, fp
  406612:	4620      	mov	r0, r4
  406614:	4629      	mov	r1, r5
  406616:	220a      	movs	r2, #10
  406618:	2300      	movs	r3, #0
  40661a:	f004 faf5 	bl	40ac08 <__aeabi_uldivmod>
  40661e:	3230      	adds	r2, #48	; 0x30
  406620:	f807 2d01 	strb.w	r2, [r7, #-1]!
  406624:	4620      	mov	r0, r4
  406626:	4629      	mov	r1, r5
  406628:	2300      	movs	r3, #0
  40662a:	220a      	movs	r2, #10
  40662c:	f004 faec 	bl	40ac08 <__aeabi_uldivmod>
  406630:	4604      	mov	r4, r0
  406632:	460d      	mov	r5, r1
  406634:	ea54 0305 	orrs.w	r3, r4, r5
  406638:	d1eb      	bne.n	406612 <_vfiprintf_r+0x4ca>
  40663a:	ebc7 030b 	rsb	r3, r7, fp
  40663e:	9303      	str	r3, [sp, #12]
  406640:	e6a2      	b.n	406388 <_vfiprintf_r+0x240>
  406642:	bf00      	nop
  406644:	0040c088 	.word	0x0040c088
  406648:	0040c0c8 	.word	0x0040c0c8
  40664c:	0040c0b8 	.word	0x0040c0b8
  406650:	9406      	str	r4, [sp, #24]
  406652:	2900      	cmp	r1, #0
  406654:	f040 8462 	bne.w	406f1c <_vfiprintf_r+0xdd4>
  406658:	f046 0610 	orr.w	r6, r6, #16
  40665c:	f016 0320 	ands.w	r3, r6, #32
  406660:	f000 82ae 	beq.w	406bc0 <_vfiprintf_r+0xa78>
  406664:	9b04      	ldr	r3, [sp, #16]
  406666:	3307      	adds	r3, #7
  406668:	f023 0307 	bic.w	r3, r3, #7
  40666c:	f04f 0200 	mov.w	r2, #0
  406670:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  406674:	e9d3 4500 	ldrd	r4, r5, [r3]
  406678:	f103 0208 	add.w	r2, r3, #8
  40667c:	9b01      	ldr	r3, [sp, #4]
  40667e:	9204      	str	r2, [sp, #16]
  406680:	2b00      	cmp	r3, #0
  406682:	f2c0 8174 	blt.w	40696e <_vfiprintf_r+0x826>
  406686:	ea54 0305 	orrs.w	r3, r4, r5
  40668a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40668e:	f040 816e 	bne.w	40696e <_vfiprintf_r+0x826>
  406692:	9b01      	ldr	r3, [sp, #4]
  406694:	2b00      	cmp	r3, #0
  406696:	f000 8430 	beq.w	406efa <_vfiprintf_r+0xdb2>
  40669a:	f04f 0900 	mov.w	r9, #0
  40669e:	2400      	movs	r4, #0
  4066a0:	2500      	movs	r5, #0
  4066a2:	465f      	mov	r7, fp
  4066a4:	08e2      	lsrs	r2, r4, #3
  4066a6:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4066aa:	08e9      	lsrs	r1, r5, #3
  4066ac:	f004 0307 	and.w	r3, r4, #7
  4066b0:	460d      	mov	r5, r1
  4066b2:	4614      	mov	r4, r2
  4066b4:	3330      	adds	r3, #48	; 0x30
  4066b6:	ea54 0205 	orrs.w	r2, r4, r5
  4066ba:	f807 3d01 	strb.w	r3, [r7, #-1]!
  4066be:	d1f1      	bne.n	4066a4 <_vfiprintf_r+0x55c>
  4066c0:	07f4      	lsls	r4, r6, #31
  4066c2:	d5ba      	bpl.n	40663a <_vfiprintf_r+0x4f2>
  4066c4:	2b30      	cmp	r3, #48	; 0x30
  4066c6:	d0b8      	beq.n	40663a <_vfiprintf_r+0x4f2>
  4066c8:	2230      	movs	r2, #48	; 0x30
  4066ca:	1e7b      	subs	r3, r7, #1
  4066cc:	f807 2c01 	strb.w	r2, [r7, #-1]
  4066d0:	ebc3 020b 	rsb	r2, r3, fp
  4066d4:	9203      	str	r2, [sp, #12]
  4066d6:	461f      	mov	r7, r3
  4066d8:	e656      	b.n	406388 <_vfiprintf_r+0x240>
  4066da:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4066de:	2400      	movs	r4, #0
  4066e0:	f818 3b01 	ldrb.w	r3, [r8], #1
  4066e4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4066e8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  4066ec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4066f0:	2a09      	cmp	r2, #9
  4066f2:	d9f5      	bls.n	4066e0 <_vfiprintf_r+0x598>
  4066f4:	e591      	b.n	40621a <_vfiprintf_r+0xd2>
  4066f6:	f898 3000 	ldrb.w	r3, [r8]
  4066fa:	2101      	movs	r1, #1
  4066fc:	202b      	movs	r0, #43	; 0x2b
  4066fe:	e58a      	b.n	406216 <_vfiprintf_r+0xce>
  406700:	f898 3000 	ldrb.w	r3, [r8]
  406704:	2b2a      	cmp	r3, #42	; 0x2a
  406706:	f108 0501 	add.w	r5, r8, #1
  40670a:	f000 83dd 	beq.w	406ec8 <_vfiprintf_r+0xd80>
  40670e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  406712:	2a09      	cmp	r2, #9
  406714:	46a8      	mov	r8, r5
  406716:	bf98      	it	ls
  406718:	2500      	movls	r5, #0
  40671a:	f200 83ce 	bhi.w	406eba <_vfiprintf_r+0xd72>
  40671e:	f818 3b01 	ldrb.w	r3, [r8], #1
  406722:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  406726:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  40672a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40672e:	2a09      	cmp	r2, #9
  406730:	d9f5      	bls.n	40671e <_vfiprintf_r+0x5d6>
  406732:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  406736:	9201      	str	r2, [sp, #4]
  406738:	e56f      	b.n	40621a <_vfiprintf_r+0xd2>
  40673a:	9a04      	ldr	r2, [sp, #16]
  40673c:	6814      	ldr	r4, [r2, #0]
  40673e:	4613      	mov	r3, r2
  406740:	2c00      	cmp	r4, #0
  406742:	f103 0304 	add.w	r3, r3, #4
  406746:	f6ff aded 	blt.w	406324 <_vfiprintf_r+0x1dc>
  40674a:	9304      	str	r3, [sp, #16]
  40674c:	f898 3000 	ldrb.w	r3, [r8]
  406750:	e561      	b.n	406216 <_vfiprintf_r+0xce>
  406752:	9406      	str	r4, [sp, #24]
  406754:	2900      	cmp	r1, #0
  406756:	d081      	beq.n	40665c <_vfiprintf_r+0x514>
  406758:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40675c:	e77e      	b.n	40665c <_vfiprintf_r+0x514>
  40675e:	9a04      	ldr	r2, [sp, #16]
  406760:	9406      	str	r4, [sp, #24]
  406762:	6817      	ldr	r7, [r2, #0]
  406764:	f04f 0300 	mov.w	r3, #0
  406768:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40676c:	1d14      	adds	r4, r2, #4
  40676e:	9b01      	ldr	r3, [sp, #4]
  406770:	2f00      	cmp	r7, #0
  406772:	f000 8386 	beq.w	406e82 <_vfiprintf_r+0xd3a>
  406776:	2b00      	cmp	r3, #0
  406778:	f2c0 835f 	blt.w	406e3a <_vfiprintf_r+0xcf2>
  40677c:	461a      	mov	r2, r3
  40677e:	2100      	movs	r1, #0
  406780:	4638      	mov	r0, r7
  406782:	f002 fc25 	bl	408fd0 <memchr>
  406786:	2800      	cmp	r0, #0
  406788:	f000 838f 	beq.w	406eaa <_vfiprintf_r+0xd62>
  40678c:	1bc3      	subs	r3, r0, r7
  40678e:	9303      	str	r3, [sp, #12]
  406790:	2300      	movs	r3, #0
  406792:	9404      	str	r4, [sp, #16]
  406794:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  406798:	9301      	str	r3, [sp, #4]
  40679a:	e5f5      	b.n	406388 <_vfiprintf_r+0x240>
  40679c:	9406      	str	r4, [sp, #24]
  40679e:	2900      	cmp	r1, #0
  4067a0:	f040 83b9 	bne.w	406f16 <_vfiprintf_r+0xdce>
  4067a4:	f016 0920 	ands.w	r9, r6, #32
  4067a8:	d135      	bne.n	406816 <_vfiprintf_r+0x6ce>
  4067aa:	f016 0310 	ands.w	r3, r6, #16
  4067ae:	d103      	bne.n	4067b8 <_vfiprintf_r+0x670>
  4067b0:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  4067b4:	f040 832a 	bne.w	406e0c <_vfiprintf_r+0xcc4>
  4067b8:	9a04      	ldr	r2, [sp, #16]
  4067ba:	4613      	mov	r3, r2
  4067bc:	6814      	ldr	r4, [r2, #0]
  4067be:	9a01      	ldr	r2, [sp, #4]
  4067c0:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4067c4:	2a00      	cmp	r2, #0
  4067c6:	f103 0304 	add.w	r3, r3, #4
  4067ca:	f04f 0500 	mov.w	r5, #0
  4067ce:	f2c0 8332 	blt.w	406e36 <_vfiprintf_r+0xcee>
  4067d2:	ea54 0205 	orrs.w	r2, r4, r5
  4067d6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4067da:	9304      	str	r3, [sp, #16]
  4067dc:	f47f af13 	bne.w	406606 <_vfiprintf_r+0x4be>
  4067e0:	9b01      	ldr	r3, [sp, #4]
  4067e2:	2b00      	cmp	r3, #0
  4067e4:	f43f adcc 	beq.w	406380 <_vfiprintf_r+0x238>
  4067e8:	2400      	movs	r4, #0
  4067ea:	af2a      	add	r7, sp, #168	; 0xa8
  4067ec:	3430      	adds	r4, #48	; 0x30
  4067ee:	f807 4d41 	strb.w	r4, [r7, #-65]!
  4067f2:	ebc7 030b 	rsb	r3, r7, fp
  4067f6:	9303      	str	r3, [sp, #12]
  4067f8:	e5c6      	b.n	406388 <_vfiprintf_r+0x240>
  4067fa:	f046 0620 	orr.w	r6, r6, #32
  4067fe:	f898 3000 	ldrb.w	r3, [r8]
  406802:	e508      	b.n	406216 <_vfiprintf_r+0xce>
  406804:	9406      	str	r4, [sp, #24]
  406806:	2900      	cmp	r1, #0
  406808:	f040 836e 	bne.w	406ee8 <_vfiprintf_r+0xda0>
  40680c:	f046 0610 	orr.w	r6, r6, #16
  406810:	f016 0920 	ands.w	r9, r6, #32
  406814:	d0c9      	beq.n	4067aa <_vfiprintf_r+0x662>
  406816:	9b04      	ldr	r3, [sp, #16]
  406818:	3307      	adds	r3, #7
  40681a:	f023 0307 	bic.w	r3, r3, #7
  40681e:	f04f 0200 	mov.w	r2, #0
  406822:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  406826:	e9d3 4500 	ldrd	r4, r5, [r3]
  40682a:	f103 0208 	add.w	r2, r3, #8
  40682e:	9b01      	ldr	r3, [sp, #4]
  406830:	9204      	str	r2, [sp, #16]
  406832:	2b00      	cmp	r3, #0
  406834:	f2c0 81f9 	blt.w	406c2a <_vfiprintf_r+0xae2>
  406838:	ea54 0305 	orrs.w	r3, r4, r5
  40683c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406840:	f04f 0900 	mov.w	r9, #0
  406844:	f47f aedf 	bne.w	406606 <_vfiprintf_r+0x4be>
  406848:	e7ca      	b.n	4067e0 <_vfiprintf_r+0x698>
  40684a:	9406      	str	r4, [sp, #24]
  40684c:	2900      	cmp	r1, #0
  40684e:	f040 8351 	bne.w	406ef4 <_vfiprintf_r+0xdac>
  406852:	06b2      	lsls	r2, r6, #26
  406854:	48ae      	ldr	r0, [pc, #696]	; (406b10 <_vfiprintf_r+0x9c8>)
  406856:	d541      	bpl.n	4068dc <_vfiprintf_r+0x794>
  406858:	9a04      	ldr	r2, [sp, #16]
  40685a:	3207      	adds	r2, #7
  40685c:	f022 0207 	bic.w	r2, r2, #7
  406860:	e9d2 4500 	ldrd	r4, r5, [r2]
  406864:	f102 0108 	add.w	r1, r2, #8
  406868:	9104      	str	r1, [sp, #16]
  40686a:	f016 0901 	ands.w	r9, r6, #1
  40686e:	f000 8177 	beq.w	406b60 <_vfiprintf_r+0xa18>
  406872:	ea54 0205 	orrs.w	r2, r4, r5
  406876:	f040 8226 	bne.w	406cc6 <_vfiprintf_r+0xb7e>
  40687a:	f04f 0300 	mov.w	r3, #0
  40687e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  406882:	9b01      	ldr	r3, [sp, #4]
  406884:	2b00      	cmp	r3, #0
  406886:	f2c0 8196 	blt.w	406bb6 <_vfiprintf_r+0xa6e>
  40688a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40688e:	e572      	b.n	406376 <_vfiprintf_r+0x22e>
  406890:	9a04      	ldr	r2, [sp, #16]
  406892:	9406      	str	r4, [sp, #24]
  406894:	6813      	ldr	r3, [r2, #0]
  406896:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40689a:	4613      	mov	r3, r2
  40689c:	f04f 0100 	mov.w	r1, #0
  4068a0:	2501      	movs	r5, #1
  4068a2:	3304      	adds	r3, #4
  4068a4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4068a8:	9304      	str	r3, [sp, #16]
  4068aa:	9503      	str	r5, [sp, #12]
  4068ac:	af10      	add	r7, sp, #64	; 0x40
  4068ae:	2300      	movs	r3, #0
  4068b0:	9301      	str	r3, [sp, #4]
  4068b2:	e573      	b.n	40639c <_vfiprintf_r+0x254>
  4068b4:	f898 3000 	ldrb.w	r3, [r8]
  4068b8:	2800      	cmp	r0, #0
  4068ba:	f47f acac 	bne.w	406216 <_vfiprintf_r+0xce>
  4068be:	2101      	movs	r1, #1
  4068c0:	2020      	movs	r0, #32
  4068c2:	e4a8      	b.n	406216 <_vfiprintf_r+0xce>
  4068c4:	f046 0601 	orr.w	r6, r6, #1
  4068c8:	f898 3000 	ldrb.w	r3, [r8]
  4068cc:	e4a3      	b.n	406216 <_vfiprintf_r+0xce>
  4068ce:	9406      	str	r4, [sp, #24]
  4068d0:	2900      	cmp	r1, #0
  4068d2:	f040 830c 	bne.w	406eee <_vfiprintf_r+0xda6>
  4068d6:	06b2      	lsls	r2, r6, #26
  4068d8:	488e      	ldr	r0, [pc, #568]	; (406b14 <_vfiprintf_r+0x9cc>)
  4068da:	d4bd      	bmi.n	406858 <_vfiprintf_r+0x710>
  4068dc:	9904      	ldr	r1, [sp, #16]
  4068de:	06f7      	lsls	r7, r6, #27
  4068e0:	460a      	mov	r2, r1
  4068e2:	f100 819d 	bmi.w	406c20 <_vfiprintf_r+0xad8>
  4068e6:	0675      	lsls	r5, r6, #25
  4068e8:	f140 819a 	bpl.w	406c20 <_vfiprintf_r+0xad8>
  4068ec:	3204      	adds	r2, #4
  4068ee:	880c      	ldrh	r4, [r1, #0]
  4068f0:	9204      	str	r2, [sp, #16]
  4068f2:	2500      	movs	r5, #0
  4068f4:	e7b9      	b.n	40686a <_vfiprintf_r+0x722>
  4068f6:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4068fa:	f898 3000 	ldrb.w	r3, [r8]
  4068fe:	e48a      	b.n	406216 <_vfiprintf_r+0xce>
  406900:	f898 3000 	ldrb.w	r3, [r8]
  406904:	2b6c      	cmp	r3, #108	; 0x6c
  406906:	bf03      	ittte	eq
  406908:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  40690c:	f046 0620 	orreq.w	r6, r6, #32
  406910:	f108 0801 	addeq.w	r8, r8, #1
  406914:	f046 0610 	orrne.w	r6, r6, #16
  406918:	e47d      	b.n	406216 <_vfiprintf_r+0xce>
  40691a:	2900      	cmp	r1, #0
  40691c:	f040 8309 	bne.w	406f32 <_vfiprintf_r+0xdea>
  406920:	06b4      	lsls	r4, r6, #26
  406922:	f140 821c 	bpl.w	406d5e <_vfiprintf_r+0xc16>
  406926:	9a04      	ldr	r2, [sp, #16]
  406928:	9902      	ldr	r1, [sp, #8]
  40692a:	6813      	ldr	r3, [r2, #0]
  40692c:	17cd      	asrs	r5, r1, #31
  40692e:	4608      	mov	r0, r1
  406930:	3204      	adds	r2, #4
  406932:	4629      	mov	r1, r5
  406934:	9204      	str	r2, [sp, #16]
  406936:	e9c3 0100 	strd	r0, r1, [r3]
  40693a:	e436      	b.n	4061aa <_vfiprintf_r+0x62>
  40693c:	9406      	str	r4, [sp, #24]
  40693e:	2900      	cmp	r1, #0
  406940:	f43f ae43 	beq.w	4065ca <_vfiprintf_r+0x482>
  406944:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406948:	e63f      	b.n	4065ca <_vfiprintf_r+0x482>
  40694a:	9406      	str	r4, [sp, #24]
  40694c:	2900      	cmp	r1, #0
  40694e:	f040 82ed 	bne.w	406f2c <_vfiprintf_r+0xde4>
  406952:	2b00      	cmp	r3, #0
  406954:	f000 808f 	beq.w	406a76 <_vfiprintf_r+0x92e>
  406958:	2501      	movs	r5, #1
  40695a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40695e:	f04f 0300 	mov.w	r3, #0
  406962:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  406966:	9503      	str	r5, [sp, #12]
  406968:	af10      	add	r7, sp, #64	; 0x40
  40696a:	e7a0      	b.n	4068ae <_vfiprintf_r+0x766>
  40696c:	9304      	str	r3, [sp, #16]
  40696e:	f04f 0900 	mov.w	r9, #0
  406972:	e696      	b.n	4066a2 <_vfiprintf_r+0x55a>
  406974:	aa0d      	add	r2, sp, #52	; 0x34
  406976:	9900      	ldr	r1, [sp, #0]
  406978:	9309      	str	r3, [sp, #36]	; 0x24
  40697a:	4648      	mov	r0, r9
  40697c:	f7ff fba8 	bl	4060d0 <__sprint_r.part.0>
  406980:	2800      	cmp	r0, #0
  406982:	d17f      	bne.n	406a84 <_vfiprintf_r+0x93c>
  406984:	980e      	ldr	r0, [sp, #56]	; 0x38
  406986:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406988:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40698a:	f100 0e01 	add.w	lr, r0, #1
  40698e:	46dc      	mov	ip, fp
  406990:	e529      	b.n	4063e6 <_vfiprintf_r+0x29e>
  406992:	980e      	ldr	r0, [sp, #56]	; 0x38
  406994:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406996:	f100 0e01 	add.w	lr, r0, #1
  40699a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40699e:	2b00      	cmp	r3, #0
  4069a0:	f43f ad50 	beq.w	406444 <_vfiprintf_r+0x2fc>
  4069a4:	3201      	adds	r2, #1
  4069a6:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  4069aa:	2301      	movs	r3, #1
  4069ac:	f1be 0f07 	cmp.w	lr, #7
  4069b0:	920f      	str	r2, [sp, #60]	; 0x3c
  4069b2:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4069b6:	e88a 000a 	stmia.w	sl, {r1, r3}
  4069ba:	f340 80bf 	ble.w	406b3c <_vfiprintf_r+0x9f4>
  4069be:	2a00      	cmp	r2, #0
  4069c0:	f040 814e 	bne.w	406c60 <_vfiprintf_r+0xb18>
  4069c4:	9907      	ldr	r1, [sp, #28]
  4069c6:	2900      	cmp	r1, #0
  4069c8:	f040 80be 	bne.w	406b48 <_vfiprintf_r+0xa00>
  4069cc:	469e      	mov	lr, r3
  4069ce:	4610      	mov	r0, r2
  4069d0:	46da      	mov	sl, fp
  4069d2:	9b08      	ldr	r3, [sp, #32]
  4069d4:	2b80      	cmp	r3, #128	; 0x80
  4069d6:	f43f ad50 	beq.w	40647a <_vfiprintf_r+0x332>
  4069da:	9b01      	ldr	r3, [sp, #4]
  4069dc:	9903      	ldr	r1, [sp, #12]
  4069de:	1a5c      	subs	r4, r3, r1
  4069e0:	2c00      	cmp	r4, #0
  4069e2:	f77f ad93 	ble.w	40650c <_vfiprintf_r+0x3c4>
  4069e6:	2c10      	cmp	r4, #16
  4069e8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 406b18 <_vfiprintf_r+0x9d0>
  4069ec:	dd25      	ble.n	406a3a <_vfiprintf_r+0x8f2>
  4069ee:	46d4      	mov	ip, sl
  4069f0:	2310      	movs	r3, #16
  4069f2:	46c2      	mov	sl, r8
  4069f4:	46a8      	mov	r8, r5
  4069f6:	464d      	mov	r5, r9
  4069f8:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4069fc:	e007      	b.n	406a0e <_vfiprintf_r+0x8c6>
  4069fe:	f100 0e02 	add.w	lr, r0, #2
  406a02:	f10c 0c08 	add.w	ip, ip, #8
  406a06:	4608      	mov	r0, r1
  406a08:	3c10      	subs	r4, #16
  406a0a:	2c10      	cmp	r4, #16
  406a0c:	dd11      	ble.n	406a32 <_vfiprintf_r+0x8ea>
  406a0e:	1c41      	adds	r1, r0, #1
  406a10:	3210      	adds	r2, #16
  406a12:	2907      	cmp	r1, #7
  406a14:	920f      	str	r2, [sp, #60]	; 0x3c
  406a16:	f8cc 5000 	str.w	r5, [ip]
  406a1a:	f8cc 3004 	str.w	r3, [ip, #4]
  406a1e:	910e      	str	r1, [sp, #56]	; 0x38
  406a20:	dded      	ble.n	4069fe <_vfiprintf_r+0x8b6>
  406a22:	b9d2      	cbnz	r2, 406a5a <_vfiprintf_r+0x912>
  406a24:	3c10      	subs	r4, #16
  406a26:	2c10      	cmp	r4, #16
  406a28:	f04f 0e01 	mov.w	lr, #1
  406a2c:	4610      	mov	r0, r2
  406a2e:	46dc      	mov	ip, fp
  406a30:	dced      	bgt.n	406a0e <_vfiprintf_r+0x8c6>
  406a32:	46a9      	mov	r9, r5
  406a34:	4645      	mov	r5, r8
  406a36:	46d0      	mov	r8, sl
  406a38:	46e2      	mov	sl, ip
  406a3a:	4422      	add	r2, r4
  406a3c:	f1be 0f07 	cmp.w	lr, #7
  406a40:	920f      	str	r2, [sp, #60]	; 0x3c
  406a42:	f8ca 9000 	str.w	r9, [sl]
  406a46:	f8ca 4004 	str.w	r4, [sl, #4]
  406a4a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  406a4e:	dc2e      	bgt.n	406aae <_vfiprintf_r+0x966>
  406a50:	f10a 0a08 	add.w	sl, sl, #8
  406a54:	f10e 0e01 	add.w	lr, lr, #1
  406a58:	e558      	b.n	40650c <_vfiprintf_r+0x3c4>
  406a5a:	aa0d      	add	r2, sp, #52	; 0x34
  406a5c:	9900      	ldr	r1, [sp, #0]
  406a5e:	9301      	str	r3, [sp, #4]
  406a60:	4648      	mov	r0, r9
  406a62:	f7ff fb35 	bl	4060d0 <__sprint_r.part.0>
  406a66:	b968      	cbnz	r0, 406a84 <_vfiprintf_r+0x93c>
  406a68:	980e      	ldr	r0, [sp, #56]	; 0x38
  406a6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406a6c:	9b01      	ldr	r3, [sp, #4]
  406a6e:	f100 0e01 	add.w	lr, r0, #1
  406a72:	46dc      	mov	ip, fp
  406a74:	e7c8      	b.n	406a08 <_vfiprintf_r+0x8c0>
  406a76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406a78:	b123      	cbz	r3, 406a84 <_vfiprintf_r+0x93c>
  406a7a:	9805      	ldr	r0, [sp, #20]
  406a7c:	9900      	ldr	r1, [sp, #0]
  406a7e:	aa0d      	add	r2, sp, #52	; 0x34
  406a80:	f7ff fb26 	bl	4060d0 <__sprint_r.part.0>
  406a84:	9b00      	ldr	r3, [sp, #0]
  406a86:	899b      	ldrh	r3, [r3, #12]
  406a88:	065a      	lsls	r2, r3, #25
  406a8a:	f100 818b 	bmi.w	406da4 <_vfiprintf_r+0xc5c>
  406a8e:	9802      	ldr	r0, [sp, #8]
  406a90:	b02b      	add	sp, #172	; 0xac
  406a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a96:	aa0d      	add	r2, sp, #52	; 0x34
  406a98:	9900      	ldr	r1, [sp, #0]
  406a9a:	4648      	mov	r0, r9
  406a9c:	f7ff fb18 	bl	4060d0 <__sprint_r.part.0>
  406aa0:	2800      	cmp	r0, #0
  406aa2:	d1ef      	bne.n	406a84 <_vfiprintf_r+0x93c>
  406aa4:	990e      	ldr	r1, [sp, #56]	; 0x38
  406aa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406aa8:	1c48      	adds	r0, r1, #1
  406aaa:	46da      	mov	sl, fp
  406aac:	e555      	b.n	40655a <_vfiprintf_r+0x412>
  406aae:	2a00      	cmp	r2, #0
  406ab0:	f040 80fb 	bne.w	406caa <_vfiprintf_r+0xb62>
  406ab4:	9a03      	ldr	r2, [sp, #12]
  406ab6:	921b      	str	r2, [sp, #108]	; 0x6c
  406ab8:	2301      	movs	r3, #1
  406aba:	920f      	str	r2, [sp, #60]	; 0x3c
  406abc:	971a      	str	r7, [sp, #104]	; 0x68
  406abe:	930e      	str	r3, [sp, #56]	; 0x38
  406ac0:	46da      	mov	sl, fp
  406ac2:	f10a 0a08 	add.w	sl, sl, #8
  406ac6:	0771      	lsls	r1, r6, #29
  406ac8:	d504      	bpl.n	406ad4 <_vfiprintf_r+0x98c>
  406aca:	9b06      	ldr	r3, [sp, #24]
  406acc:	1b5c      	subs	r4, r3, r5
  406ace:	2c00      	cmp	r4, #0
  406ad0:	f73f ad34 	bgt.w	40653c <_vfiprintf_r+0x3f4>
  406ad4:	9b02      	ldr	r3, [sp, #8]
  406ad6:	9906      	ldr	r1, [sp, #24]
  406ad8:	42a9      	cmp	r1, r5
  406ada:	bfac      	ite	ge
  406adc:	185b      	addge	r3, r3, r1
  406ade:	195b      	addlt	r3, r3, r5
  406ae0:	9302      	str	r3, [sp, #8]
  406ae2:	2a00      	cmp	r2, #0
  406ae4:	f040 80b3 	bne.w	406c4e <_vfiprintf_r+0xb06>
  406ae8:	2300      	movs	r3, #0
  406aea:	930e      	str	r3, [sp, #56]	; 0x38
  406aec:	46da      	mov	sl, fp
  406aee:	f7ff bb5c 	b.w	4061aa <_vfiprintf_r+0x62>
  406af2:	aa0d      	add	r2, sp, #52	; 0x34
  406af4:	9900      	ldr	r1, [sp, #0]
  406af6:	9307      	str	r3, [sp, #28]
  406af8:	4648      	mov	r0, r9
  406afa:	f7ff fae9 	bl	4060d0 <__sprint_r.part.0>
  406afe:	2800      	cmp	r0, #0
  406b00:	d1c0      	bne.n	406a84 <_vfiprintf_r+0x93c>
  406b02:	980e      	ldr	r0, [sp, #56]	; 0x38
  406b04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406b06:	9b07      	ldr	r3, [sp, #28]
  406b08:	f100 0c01 	add.w	ip, r0, #1
  406b0c:	46de      	mov	lr, fp
  406b0e:	e4cb      	b.n	4064a8 <_vfiprintf_r+0x360>
  406b10:	0040c074 	.word	0x0040c074
  406b14:	0040c088 	.word	0x0040c088
  406b18:	0040c0b8 	.word	0x0040c0b8
  406b1c:	2a00      	cmp	r2, #0
  406b1e:	f040 8133 	bne.w	406d88 <_vfiprintf_r+0xc40>
  406b22:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  406b26:	2b00      	cmp	r3, #0
  406b28:	f000 80f5 	beq.w	406d16 <_vfiprintf_r+0xbce>
  406b2c:	2301      	movs	r3, #1
  406b2e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  406b32:	461a      	mov	r2, r3
  406b34:	931b      	str	r3, [sp, #108]	; 0x6c
  406b36:	469e      	mov	lr, r3
  406b38:	911a      	str	r1, [sp, #104]	; 0x68
  406b3a:	46da      	mov	sl, fp
  406b3c:	4670      	mov	r0, lr
  406b3e:	f10a 0a08 	add.w	sl, sl, #8
  406b42:	f10e 0e01 	add.w	lr, lr, #1
  406b46:	e47d      	b.n	406444 <_vfiprintf_r+0x2fc>
  406b48:	a90c      	add	r1, sp, #48	; 0x30
  406b4a:	2202      	movs	r2, #2
  406b4c:	469e      	mov	lr, r3
  406b4e:	911a      	str	r1, [sp, #104]	; 0x68
  406b50:	921b      	str	r2, [sp, #108]	; 0x6c
  406b52:	46da      	mov	sl, fp
  406b54:	4670      	mov	r0, lr
  406b56:	f10a 0a08 	add.w	sl, sl, #8
  406b5a:	f10e 0e01 	add.w	lr, lr, #1
  406b5e:	e738      	b.n	4069d2 <_vfiprintf_r+0x88a>
  406b60:	9b01      	ldr	r3, [sp, #4]
  406b62:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  406b66:	2b00      	cmp	r3, #0
  406b68:	f2c0 812a 	blt.w	406dc0 <_vfiprintf_r+0xc78>
  406b6c:	ea54 0305 	orrs.w	r3, r4, r5
  406b70:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406b74:	f43f abff 	beq.w	406376 <_vfiprintf_r+0x22e>
  406b78:	465f      	mov	r7, fp
  406b7a:	0923      	lsrs	r3, r4, #4
  406b7c:	f004 010f 	and.w	r1, r4, #15
  406b80:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  406b84:	092a      	lsrs	r2, r5, #4
  406b86:	461c      	mov	r4, r3
  406b88:	4615      	mov	r5, r2
  406b8a:	5c43      	ldrb	r3, [r0, r1]
  406b8c:	f807 3d01 	strb.w	r3, [r7, #-1]!
  406b90:	ea54 0305 	orrs.w	r3, r4, r5
  406b94:	d1f1      	bne.n	406b7a <_vfiprintf_r+0xa32>
  406b96:	ebc7 030b 	rsb	r3, r7, fp
  406b9a:	9303      	str	r3, [sp, #12]
  406b9c:	f7ff bbf4 	b.w	406388 <_vfiprintf_r+0x240>
  406ba0:	aa0d      	add	r2, sp, #52	; 0x34
  406ba2:	9900      	ldr	r1, [sp, #0]
  406ba4:	9805      	ldr	r0, [sp, #20]
  406ba6:	f7ff fa93 	bl	4060d0 <__sprint_r.part.0>
  406baa:	2800      	cmp	r0, #0
  406bac:	f47f af6a 	bne.w	406a84 <_vfiprintf_r+0x93c>
  406bb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406bb2:	46da      	mov	sl, fp
  406bb4:	e787      	b.n	406ac6 <_vfiprintf_r+0x97e>
  406bb6:	f04f 0900 	mov.w	r9, #0
  406bba:	2400      	movs	r4, #0
  406bbc:	2500      	movs	r5, #0
  406bbe:	e7db      	b.n	406b78 <_vfiprintf_r+0xa30>
  406bc0:	f016 0210 	ands.w	r2, r6, #16
  406bc4:	f000 80b2 	beq.w	406d2c <_vfiprintf_r+0xbe4>
  406bc8:	9904      	ldr	r1, [sp, #16]
  406bca:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  406bce:	460a      	mov	r2, r1
  406bd0:	680c      	ldr	r4, [r1, #0]
  406bd2:	9901      	ldr	r1, [sp, #4]
  406bd4:	2900      	cmp	r1, #0
  406bd6:	f102 0204 	add.w	r2, r2, #4
  406bda:	f04f 0500 	mov.w	r5, #0
  406bde:	f2c0 8159 	blt.w	406e94 <_vfiprintf_r+0xd4c>
  406be2:	ea54 0105 	orrs.w	r1, r4, r5
  406be6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406bea:	9204      	str	r2, [sp, #16]
  406bec:	f43f ad51 	beq.w	406692 <_vfiprintf_r+0x54a>
  406bf0:	4699      	mov	r9, r3
  406bf2:	e556      	b.n	4066a2 <_vfiprintf_r+0x55a>
  406bf4:	06f7      	lsls	r7, r6, #27
  406bf6:	d40a      	bmi.n	406c0e <_vfiprintf_r+0xac6>
  406bf8:	0675      	lsls	r5, r6, #25
  406bfa:	d508      	bpl.n	406c0e <_vfiprintf_r+0xac6>
  406bfc:	9904      	ldr	r1, [sp, #16]
  406bfe:	f9b1 4000 	ldrsh.w	r4, [r1]
  406c02:	3104      	adds	r1, #4
  406c04:	17e5      	asrs	r5, r4, #31
  406c06:	4622      	mov	r2, r4
  406c08:	462b      	mov	r3, r5
  406c0a:	9104      	str	r1, [sp, #16]
  406c0c:	e4ea      	b.n	4065e4 <_vfiprintf_r+0x49c>
  406c0e:	9a04      	ldr	r2, [sp, #16]
  406c10:	6814      	ldr	r4, [r2, #0]
  406c12:	4613      	mov	r3, r2
  406c14:	3304      	adds	r3, #4
  406c16:	17e5      	asrs	r5, r4, #31
  406c18:	9304      	str	r3, [sp, #16]
  406c1a:	4622      	mov	r2, r4
  406c1c:	462b      	mov	r3, r5
  406c1e:	e4e1      	b.n	4065e4 <_vfiprintf_r+0x49c>
  406c20:	6814      	ldr	r4, [r2, #0]
  406c22:	3204      	adds	r2, #4
  406c24:	9204      	str	r2, [sp, #16]
  406c26:	2500      	movs	r5, #0
  406c28:	e61f      	b.n	40686a <_vfiprintf_r+0x722>
  406c2a:	f04f 0900 	mov.w	r9, #0
  406c2e:	ea54 0305 	orrs.w	r3, r4, r5
  406c32:	f47f ace8 	bne.w	406606 <_vfiprintf_r+0x4be>
  406c36:	e5d8      	b.n	4067ea <_vfiprintf_r+0x6a2>
  406c38:	aa0d      	add	r2, sp, #52	; 0x34
  406c3a:	9900      	ldr	r1, [sp, #0]
  406c3c:	9805      	ldr	r0, [sp, #20]
  406c3e:	f7ff fa47 	bl	4060d0 <__sprint_r.part.0>
  406c42:	2800      	cmp	r0, #0
  406c44:	f47f af1e 	bne.w	406a84 <_vfiprintf_r+0x93c>
  406c48:	46da      	mov	sl, fp
  406c4a:	f7ff bb48 	b.w	4062de <_vfiprintf_r+0x196>
  406c4e:	aa0d      	add	r2, sp, #52	; 0x34
  406c50:	9900      	ldr	r1, [sp, #0]
  406c52:	9805      	ldr	r0, [sp, #20]
  406c54:	f7ff fa3c 	bl	4060d0 <__sprint_r.part.0>
  406c58:	2800      	cmp	r0, #0
  406c5a:	f43f af45 	beq.w	406ae8 <_vfiprintf_r+0x9a0>
  406c5e:	e711      	b.n	406a84 <_vfiprintf_r+0x93c>
  406c60:	aa0d      	add	r2, sp, #52	; 0x34
  406c62:	9900      	ldr	r1, [sp, #0]
  406c64:	9805      	ldr	r0, [sp, #20]
  406c66:	f7ff fa33 	bl	4060d0 <__sprint_r.part.0>
  406c6a:	2800      	cmp	r0, #0
  406c6c:	f47f af0a 	bne.w	406a84 <_vfiprintf_r+0x93c>
  406c70:	980e      	ldr	r0, [sp, #56]	; 0x38
  406c72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406c74:	f100 0e01 	add.w	lr, r0, #1
  406c78:	46da      	mov	sl, fp
  406c7a:	f7ff bbe3 	b.w	406444 <_vfiprintf_r+0x2fc>
  406c7e:	aa0d      	add	r2, sp, #52	; 0x34
  406c80:	9900      	ldr	r1, [sp, #0]
  406c82:	9805      	ldr	r0, [sp, #20]
  406c84:	f7ff fa24 	bl	4060d0 <__sprint_r.part.0>
  406c88:	2800      	cmp	r0, #0
  406c8a:	f47f aefb 	bne.w	406a84 <_vfiprintf_r+0x93c>
  406c8e:	980e      	ldr	r0, [sp, #56]	; 0x38
  406c90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406c92:	f100 0e01 	add.w	lr, r0, #1
  406c96:	46da      	mov	sl, fp
  406c98:	e69b      	b.n	4069d2 <_vfiprintf_r+0x88a>
  406c9a:	2a00      	cmp	r2, #0
  406c9c:	f040 80d8 	bne.w	406e50 <_vfiprintf_r+0xd08>
  406ca0:	f04f 0e01 	mov.w	lr, #1
  406ca4:	4610      	mov	r0, r2
  406ca6:	46da      	mov	sl, fp
  406ca8:	e697      	b.n	4069da <_vfiprintf_r+0x892>
  406caa:	aa0d      	add	r2, sp, #52	; 0x34
  406cac:	9900      	ldr	r1, [sp, #0]
  406cae:	9805      	ldr	r0, [sp, #20]
  406cb0:	f7ff fa0e 	bl	4060d0 <__sprint_r.part.0>
  406cb4:	2800      	cmp	r0, #0
  406cb6:	f47f aee5 	bne.w	406a84 <_vfiprintf_r+0x93c>
  406cba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406cbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406cbe:	f103 0e01 	add.w	lr, r3, #1
  406cc2:	46da      	mov	sl, fp
  406cc4:	e422      	b.n	40650c <_vfiprintf_r+0x3c4>
  406cc6:	2230      	movs	r2, #48	; 0x30
  406cc8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  406ccc:	9a01      	ldr	r2, [sp, #4]
  406cce:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  406cd2:	2a00      	cmp	r2, #0
  406cd4:	f04f 0300 	mov.w	r3, #0
  406cd8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  406cdc:	f046 0302 	orr.w	r3, r6, #2
  406ce0:	f2c0 80cb 	blt.w	406e7a <_vfiprintf_r+0xd32>
  406ce4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406ce8:	f046 0602 	orr.w	r6, r6, #2
  406cec:	f04f 0900 	mov.w	r9, #0
  406cf0:	e742      	b.n	406b78 <_vfiprintf_r+0xa30>
  406cf2:	f04f 0900 	mov.w	r9, #0
  406cf6:	4890      	ldr	r0, [pc, #576]	; (406f38 <_vfiprintf_r+0xdf0>)
  406cf8:	e73e      	b.n	406b78 <_vfiprintf_r+0xa30>
  406cfa:	9b01      	ldr	r3, [sp, #4]
  406cfc:	4264      	negs	r4, r4
  406cfe:	f04f 092d 	mov.w	r9, #45	; 0x2d
  406d02:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  406d06:	2b00      	cmp	r3, #0
  406d08:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  406d0c:	f6ff ac7b 	blt.w	406606 <_vfiprintf_r+0x4be>
  406d10:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406d14:	e477      	b.n	406606 <_vfiprintf_r+0x4be>
  406d16:	9b07      	ldr	r3, [sp, #28]
  406d18:	2b00      	cmp	r3, #0
  406d1a:	d072      	beq.n	406e02 <_vfiprintf_r+0xcba>
  406d1c:	ab0c      	add	r3, sp, #48	; 0x30
  406d1e:	2202      	movs	r2, #2
  406d20:	931a      	str	r3, [sp, #104]	; 0x68
  406d22:	921b      	str	r2, [sp, #108]	; 0x6c
  406d24:	f04f 0e01 	mov.w	lr, #1
  406d28:	46da      	mov	sl, fp
  406d2a:	e713      	b.n	406b54 <_vfiprintf_r+0xa0c>
  406d2c:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  406d30:	d048      	beq.n	406dc4 <_vfiprintf_r+0xc7c>
  406d32:	9904      	ldr	r1, [sp, #16]
  406d34:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  406d38:	460b      	mov	r3, r1
  406d3a:	880c      	ldrh	r4, [r1, #0]
  406d3c:	9901      	ldr	r1, [sp, #4]
  406d3e:	2900      	cmp	r1, #0
  406d40:	f103 0304 	add.w	r3, r3, #4
  406d44:	f04f 0500 	mov.w	r5, #0
  406d48:	f6ff ae10 	blt.w	40696c <_vfiprintf_r+0x824>
  406d4c:	ea54 0105 	orrs.w	r1, r4, r5
  406d50:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406d54:	9304      	str	r3, [sp, #16]
  406d56:	f43f ac9c 	beq.w	406692 <_vfiprintf_r+0x54a>
  406d5a:	4691      	mov	r9, r2
  406d5c:	e4a1      	b.n	4066a2 <_vfiprintf_r+0x55a>
  406d5e:	06f0      	lsls	r0, r6, #27
  406d60:	d40a      	bmi.n	406d78 <_vfiprintf_r+0xc30>
  406d62:	0671      	lsls	r1, r6, #25
  406d64:	d508      	bpl.n	406d78 <_vfiprintf_r+0xc30>
  406d66:	9a04      	ldr	r2, [sp, #16]
  406d68:	6813      	ldr	r3, [r2, #0]
  406d6a:	3204      	adds	r2, #4
  406d6c:	9204      	str	r2, [sp, #16]
  406d6e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  406d72:	801a      	strh	r2, [r3, #0]
  406d74:	f7ff ba19 	b.w	4061aa <_vfiprintf_r+0x62>
  406d78:	9a04      	ldr	r2, [sp, #16]
  406d7a:	6813      	ldr	r3, [r2, #0]
  406d7c:	3204      	adds	r2, #4
  406d7e:	9204      	str	r2, [sp, #16]
  406d80:	9a02      	ldr	r2, [sp, #8]
  406d82:	601a      	str	r2, [r3, #0]
  406d84:	f7ff ba11 	b.w	4061aa <_vfiprintf_r+0x62>
  406d88:	aa0d      	add	r2, sp, #52	; 0x34
  406d8a:	9900      	ldr	r1, [sp, #0]
  406d8c:	9805      	ldr	r0, [sp, #20]
  406d8e:	f7ff f99f 	bl	4060d0 <__sprint_r.part.0>
  406d92:	2800      	cmp	r0, #0
  406d94:	f47f ae76 	bne.w	406a84 <_vfiprintf_r+0x93c>
  406d98:	980e      	ldr	r0, [sp, #56]	; 0x38
  406d9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406d9c:	f100 0e01 	add.w	lr, r0, #1
  406da0:	46da      	mov	sl, fp
  406da2:	e5fa      	b.n	40699a <_vfiprintf_r+0x852>
  406da4:	f04f 30ff 	mov.w	r0, #4294967295
  406da8:	f7ff bab6 	b.w	406318 <_vfiprintf_r+0x1d0>
  406dac:	4862      	ldr	r0, [pc, #392]	; (406f38 <_vfiprintf_r+0xdf0>)
  406dae:	4616      	mov	r6, r2
  406db0:	ea54 0205 	orrs.w	r2, r4, r5
  406db4:	9304      	str	r3, [sp, #16]
  406db6:	f04f 0900 	mov.w	r9, #0
  406dba:	f47f aedd 	bne.w	406b78 <_vfiprintf_r+0xa30>
  406dbe:	e6fc      	b.n	406bba <_vfiprintf_r+0xa72>
  406dc0:	9b04      	ldr	r3, [sp, #16]
  406dc2:	e7f5      	b.n	406db0 <_vfiprintf_r+0xc68>
  406dc4:	9a04      	ldr	r2, [sp, #16]
  406dc6:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  406dca:	4613      	mov	r3, r2
  406dcc:	6814      	ldr	r4, [r2, #0]
  406dce:	9a01      	ldr	r2, [sp, #4]
  406dd0:	2a00      	cmp	r2, #0
  406dd2:	f103 0304 	add.w	r3, r3, #4
  406dd6:	f04f 0500 	mov.w	r5, #0
  406dda:	f6ff adc7 	blt.w	40696c <_vfiprintf_r+0x824>
  406dde:	ea54 0205 	orrs.w	r2, r4, r5
  406de2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406de6:	9304      	str	r3, [sp, #16]
  406de8:	f47f ac5b 	bne.w	4066a2 <_vfiprintf_r+0x55a>
  406dec:	e451      	b.n	406692 <_vfiprintf_r+0x54a>
  406dee:	aa0d      	add	r2, sp, #52	; 0x34
  406df0:	9900      	ldr	r1, [sp, #0]
  406df2:	9805      	ldr	r0, [sp, #20]
  406df4:	f7ff f96c 	bl	4060d0 <__sprint_r.part.0>
  406df8:	2800      	cmp	r0, #0
  406dfa:	f47f ae43 	bne.w	406a84 <_vfiprintf_r+0x93c>
  406dfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406e00:	e668      	b.n	406ad4 <_vfiprintf_r+0x98c>
  406e02:	4610      	mov	r0, r2
  406e04:	f04f 0e01 	mov.w	lr, #1
  406e08:	46da      	mov	sl, fp
  406e0a:	e5e6      	b.n	4069da <_vfiprintf_r+0x892>
  406e0c:	9904      	ldr	r1, [sp, #16]
  406e0e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  406e12:	460a      	mov	r2, r1
  406e14:	880c      	ldrh	r4, [r1, #0]
  406e16:	9901      	ldr	r1, [sp, #4]
  406e18:	2900      	cmp	r1, #0
  406e1a:	f102 0204 	add.w	r2, r2, #4
  406e1e:	f04f 0500 	mov.w	r5, #0
  406e22:	db4e      	blt.n	406ec2 <_vfiprintf_r+0xd7a>
  406e24:	ea54 0105 	orrs.w	r1, r4, r5
  406e28:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406e2c:	9204      	str	r2, [sp, #16]
  406e2e:	4699      	mov	r9, r3
  406e30:	f47f abe9 	bne.w	406606 <_vfiprintf_r+0x4be>
  406e34:	e4d4      	b.n	4067e0 <_vfiprintf_r+0x698>
  406e36:	9304      	str	r3, [sp, #16]
  406e38:	e6f9      	b.n	406c2e <_vfiprintf_r+0xae6>
  406e3a:	4638      	mov	r0, r7
  406e3c:	9404      	str	r4, [sp, #16]
  406e3e:	f7fd fa7f 	bl	404340 <strlen>
  406e42:	2300      	movs	r3, #0
  406e44:	9003      	str	r0, [sp, #12]
  406e46:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  406e4a:	9301      	str	r3, [sp, #4]
  406e4c:	f7ff ba9c 	b.w	406388 <_vfiprintf_r+0x240>
  406e50:	aa0d      	add	r2, sp, #52	; 0x34
  406e52:	9900      	ldr	r1, [sp, #0]
  406e54:	9805      	ldr	r0, [sp, #20]
  406e56:	f7ff f93b 	bl	4060d0 <__sprint_r.part.0>
  406e5a:	2800      	cmp	r0, #0
  406e5c:	f47f ae12 	bne.w	406a84 <_vfiprintf_r+0x93c>
  406e60:	980e      	ldr	r0, [sp, #56]	; 0x38
  406e62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406e64:	f100 0e01 	add.w	lr, r0, #1
  406e68:	46da      	mov	sl, fp
  406e6a:	e5b6      	b.n	4069da <_vfiprintf_r+0x892>
  406e6c:	980e      	ldr	r0, [sp, #56]	; 0x38
  406e6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406e70:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 406f40 <_vfiprintf_r+0xdf8>
  406e74:	3001      	adds	r0, #1
  406e76:	f7ff bad2 	b.w	40641e <_vfiprintf_r+0x2d6>
  406e7a:	461e      	mov	r6, r3
  406e7c:	f04f 0900 	mov.w	r9, #0
  406e80:	e67a      	b.n	406b78 <_vfiprintf_r+0xa30>
  406e82:	2b06      	cmp	r3, #6
  406e84:	bf28      	it	cs
  406e86:	2306      	movcs	r3, #6
  406e88:	9303      	str	r3, [sp, #12]
  406e8a:	9404      	str	r4, [sp, #16]
  406e8c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  406e90:	4f2a      	ldr	r7, [pc, #168]	; (406f3c <_vfiprintf_r+0xdf4>)
  406e92:	e50c      	b.n	4068ae <_vfiprintf_r+0x766>
  406e94:	9204      	str	r2, [sp, #16]
  406e96:	e56a      	b.n	40696e <_vfiprintf_r+0x826>
  406e98:	980e      	ldr	r0, [sp, #56]	; 0x38
  406e9a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 406f40 <_vfiprintf_r+0xdf8>
  406e9e:	3001      	adds	r0, #1
  406ea0:	f7ff bb73 	b.w	40658a <_vfiprintf_r+0x442>
  406ea4:	46f4      	mov	ip, lr
  406ea6:	f7ff bb1a 	b.w	4064de <_vfiprintf_r+0x396>
  406eaa:	9b01      	ldr	r3, [sp, #4]
  406eac:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  406eb0:	9303      	str	r3, [sp, #12]
  406eb2:	9404      	str	r4, [sp, #16]
  406eb4:	9001      	str	r0, [sp, #4]
  406eb6:	f7ff ba67 	b.w	406388 <_vfiprintf_r+0x240>
  406eba:	2200      	movs	r2, #0
  406ebc:	9201      	str	r2, [sp, #4]
  406ebe:	f7ff b9ac 	b.w	40621a <_vfiprintf_r+0xd2>
  406ec2:	9204      	str	r2, [sp, #16]
  406ec4:	4699      	mov	r9, r3
  406ec6:	e6b2      	b.n	406c2e <_vfiprintf_r+0xae6>
  406ec8:	9a04      	ldr	r2, [sp, #16]
  406eca:	6813      	ldr	r3, [r2, #0]
  406ecc:	9301      	str	r3, [sp, #4]
  406ece:	3204      	adds	r2, #4
  406ed0:	2b00      	cmp	r3, #0
  406ed2:	9204      	str	r2, [sp, #16]
  406ed4:	f898 3001 	ldrb.w	r3, [r8, #1]
  406ed8:	46a8      	mov	r8, r5
  406eda:	f6bf a99c 	bge.w	406216 <_vfiprintf_r+0xce>
  406ede:	f04f 32ff 	mov.w	r2, #4294967295
  406ee2:	9201      	str	r2, [sp, #4]
  406ee4:	f7ff b997 	b.w	406216 <_vfiprintf_r+0xce>
  406ee8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406eec:	e48e      	b.n	40680c <_vfiprintf_r+0x6c4>
  406eee:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406ef2:	e4f0      	b.n	4068d6 <_vfiprintf_r+0x78e>
  406ef4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406ef8:	e4ab      	b.n	406852 <_vfiprintf_r+0x70a>
  406efa:	4699      	mov	r9, r3
  406efc:	07f3      	lsls	r3, r6, #31
  406efe:	d505      	bpl.n	406f0c <_vfiprintf_r+0xdc4>
  406f00:	af2a      	add	r7, sp, #168	; 0xa8
  406f02:	2330      	movs	r3, #48	; 0x30
  406f04:	f807 3d41 	strb.w	r3, [r7, #-65]!
  406f08:	f7ff bb97 	b.w	40663a <_vfiprintf_r+0x4f2>
  406f0c:	9b01      	ldr	r3, [sp, #4]
  406f0e:	9303      	str	r3, [sp, #12]
  406f10:	465f      	mov	r7, fp
  406f12:	f7ff ba39 	b.w	406388 <_vfiprintf_r+0x240>
  406f16:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406f1a:	e443      	b.n	4067a4 <_vfiprintf_r+0x65c>
  406f1c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406f20:	f7ff bb9a 	b.w	406658 <_vfiprintf_r+0x510>
  406f24:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406f28:	f7ff bb4d 	b.w	4065c6 <_vfiprintf_r+0x47e>
  406f2c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406f30:	e50f      	b.n	406952 <_vfiprintf_r+0x80a>
  406f32:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406f36:	e4f3      	b.n	406920 <_vfiprintf_r+0x7d8>
  406f38:	0040c088 	.word	0x0040c088
  406f3c:	0040c09c 	.word	0x0040c09c
  406f40:	0040c0c8 	.word	0x0040c0c8

00406f44 <__sbprintf>:
  406f44:	b5f0      	push	{r4, r5, r6, r7, lr}
  406f46:	460c      	mov	r4, r1
  406f48:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  406f4c:	8989      	ldrh	r1, [r1, #12]
  406f4e:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406f50:	89e5      	ldrh	r5, [r4, #14]
  406f52:	9619      	str	r6, [sp, #100]	; 0x64
  406f54:	f021 0102 	bic.w	r1, r1, #2
  406f58:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406f5a:	f8ad 500e 	strh.w	r5, [sp, #14]
  406f5e:	2500      	movs	r5, #0
  406f60:	69e7      	ldr	r7, [r4, #28]
  406f62:	f8ad 100c 	strh.w	r1, [sp, #12]
  406f66:	9609      	str	r6, [sp, #36]	; 0x24
  406f68:	9506      	str	r5, [sp, #24]
  406f6a:	ae1a      	add	r6, sp, #104	; 0x68
  406f6c:	f44f 6580 	mov.w	r5, #1024	; 0x400
  406f70:	4669      	mov	r1, sp
  406f72:	9600      	str	r6, [sp, #0]
  406f74:	9604      	str	r6, [sp, #16]
  406f76:	9502      	str	r5, [sp, #8]
  406f78:	9505      	str	r5, [sp, #20]
  406f7a:	9707      	str	r7, [sp, #28]
  406f7c:	4606      	mov	r6, r0
  406f7e:	f7ff f8e3 	bl	406148 <_vfiprintf_r>
  406f82:	1e05      	subs	r5, r0, #0
  406f84:	db07      	blt.n	406f96 <__sbprintf+0x52>
  406f86:	4630      	mov	r0, r6
  406f88:	4669      	mov	r1, sp
  406f8a:	f001 f8e9 	bl	408160 <_fflush_r>
  406f8e:	2800      	cmp	r0, #0
  406f90:	bf18      	it	ne
  406f92:	f04f 35ff 	movne.w	r5, #4294967295
  406f96:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  406f9a:	065b      	lsls	r3, r3, #25
  406f9c:	d503      	bpl.n	406fa6 <__sbprintf+0x62>
  406f9e:	89a3      	ldrh	r3, [r4, #12]
  406fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406fa4:	81a3      	strh	r3, [r4, #12]
  406fa6:	4628      	mov	r0, r5
  406fa8:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  406fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406fae:	bf00      	nop

00406fb0 <__swsetup_r>:
  406fb0:	b538      	push	{r3, r4, r5, lr}
  406fb2:	4b30      	ldr	r3, [pc, #192]	; (407074 <__swsetup_r+0xc4>)
  406fb4:	681b      	ldr	r3, [r3, #0]
  406fb6:	4605      	mov	r5, r0
  406fb8:	460c      	mov	r4, r1
  406fba:	b113      	cbz	r3, 406fc2 <__swsetup_r+0x12>
  406fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406fbe:	2a00      	cmp	r2, #0
  406fc0:	d038      	beq.n	407034 <__swsetup_r+0x84>
  406fc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406fc6:	b293      	uxth	r3, r2
  406fc8:	0718      	lsls	r0, r3, #28
  406fca:	d50c      	bpl.n	406fe6 <__swsetup_r+0x36>
  406fcc:	6920      	ldr	r0, [r4, #16]
  406fce:	b1a8      	cbz	r0, 406ffc <__swsetup_r+0x4c>
  406fd0:	f013 0201 	ands.w	r2, r3, #1
  406fd4:	d01e      	beq.n	407014 <__swsetup_r+0x64>
  406fd6:	6963      	ldr	r3, [r4, #20]
  406fd8:	2200      	movs	r2, #0
  406fda:	425b      	negs	r3, r3
  406fdc:	61a3      	str	r3, [r4, #24]
  406fde:	60a2      	str	r2, [r4, #8]
  406fe0:	b1f0      	cbz	r0, 407020 <__swsetup_r+0x70>
  406fe2:	2000      	movs	r0, #0
  406fe4:	bd38      	pop	{r3, r4, r5, pc}
  406fe6:	06d9      	lsls	r1, r3, #27
  406fe8:	d53c      	bpl.n	407064 <__swsetup_r+0xb4>
  406fea:	0758      	lsls	r0, r3, #29
  406fec:	d426      	bmi.n	40703c <__swsetup_r+0x8c>
  406fee:	6920      	ldr	r0, [r4, #16]
  406ff0:	f042 0308 	orr.w	r3, r2, #8
  406ff4:	81a3      	strh	r3, [r4, #12]
  406ff6:	b29b      	uxth	r3, r3
  406ff8:	2800      	cmp	r0, #0
  406ffa:	d1e9      	bne.n	406fd0 <__swsetup_r+0x20>
  406ffc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  407000:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  407004:	d0e4      	beq.n	406fd0 <__swsetup_r+0x20>
  407006:	4628      	mov	r0, r5
  407008:	4621      	mov	r1, r4
  40700a:	f001 fcd9 	bl	4089c0 <__smakebuf_r>
  40700e:	89a3      	ldrh	r3, [r4, #12]
  407010:	6920      	ldr	r0, [r4, #16]
  407012:	e7dd      	b.n	406fd0 <__swsetup_r+0x20>
  407014:	0799      	lsls	r1, r3, #30
  407016:	bf58      	it	pl
  407018:	6962      	ldrpl	r2, [r4, #20]
  40701a:	60a2      	str	r2, [r4, #8]
  40701c:	2800      	cmp	r0, #0
  40701e:	d1e0      	bne.n	406fe2 <__swsetup_r+0x32>
  407020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407024:	061a      	lsls	r2, r3, #24
  407026:	d5dd      	bpl.n	406fe4 <__swsetup_r+0x34>
  407028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40702c:	81a3      	strh	r3, [r4, #12]
  40702e:	f04f 30ff 	mov.w	r0, #4294967295
  407032:	bd38      	pop	{r3, r4, r5, pc}
  407034:	4618      	mov	r0, r3
  407036:	f001 f927 	bl	408288 <__sinit>
  40703a:	e7c2      	b.n	406fc2 <__swsetup_r+0x12>
  40703c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40703e:	b151      	cbz	r1, 407056 <__swsetup_r+0xa6>
  407040:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407044:	4299      	cmp	r1, r3
  407046:	d004      	beq.n	407052 <__swsetup_r+0xa2>
  407048:	4628      	mov	r0, r5
  40704a:	f001 f9e7 	bl	40841c <_free_r>
  40704e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407052:	2300      	movs	r3, #0
  407054:	6323      	str	r3, [r4, #48]	; 0x30
  407056:	2300      	movs	r3, #0
  407058:	6920      	ldr	r0, [r4, #16]
  40705a:	6063      	str	r3, [r4, #4]
  40705c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  407060:	6020      	str	r0, [r4, #0]
  407062:	e7c5      	b.n	406ff0 <__swsetup_r+0x40>
  407064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  407068:	2309      	movs	r3, #9
  40706a:	602b      	str	r3, [r5, #0]
  40706c:	f04f 30ff 	mov.w	r0, #4294967295
  407070:	81a2      	strh	r2, [r4, #12]
  407072:	bd38      	pop	{r3, r4, r5, pc}
  407074:	20400448 	.word	0x20400448

00407078 <register_fini>:
  407078:	4b02      	ldr	r3, [pc, #8]	; (407084 <register_fini+0xc>)
  40707a:	b113      	cbz	r3, 407082 <register_fini+0xa>
  40707c:	4802      	ldr	r0, [pc, #8]	; (407088 <register_fini+0x10>)
  40707e:	f000 b805 	b.w	40708c <atexit>
  407082:	4770      	bx	lr
  407084:	00000000 	.word	0x00000000
  407088:	0040829d 	.word	0x0040829d

0040708c <atexit>:
  40708c:	2300      	movs	r3, #0
  40708e:	4601      	mov	r1, r0
  407090:	461a      	mov	r2, r3
  407092:	4618      	mov	r0, r3
  407094:	f003 b800 	b.w	40a098 <__register_exitproc>

00407098 <quorem>:
  407098:	6902      	ldr	r2, [r0, #16]
  40709a:	690b      	ldr	r3, [r1, #16]
  40709c:	4293      	cmp	r3, r2
  40709e:	f300 808d 	bgt.w	4071bc <quorem+0x124>
  4070a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4070a6:	f103 38ff 	add.w	r8, r3, #4294967295
  4070aa:	f101 0714 	add.w	r7, r1, #20
  4070ae:	f100 0b14 	add.w	fp, r0, #20
  4070b2:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4070b6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4070ba:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4070be:	b083      	sub	sp, #12
  4070c0:	3201      	adds	r2, #1
  4070c2:	fbb3 f9f2 	udiv	r9, r3, r2
  4070c6:	eb0b 0304 	add.w	r3, fp, r4
  4070ca:	9400      	str	r4, [sp, #0]
  4070cc:	eb07 0a04 	add.w	sl, r7, r4
  4070d0:	9301      	str	r3, [sp, #4]
  4070d2:	f1b9 0f00 	cmp.w	r9, #0
  4070d6:	d039      	beq.n	40714c <quorem+0xb4>
  4070d8:	2500      	movs	r5, #0
  4070da:	46bc      	mov	ip, r7
  4070dc:	46de      	mov	lr, fp
  4070de:	462b      	mov	r3, r5
  4070e0:	f85c 6b04 	ldr.w	r6, [ip], #4
  4070e4:	f8de 2000 	ldr.w	r2, [lr]
  4070e8:	b2b4      	uxth	r4, r6
  4070ea:	fb09 5504 	mla	r5, r9, r4, r5
  4070ee:	0c36      	lsrs	r6, r6, #16
  4070f0:	0c2c      	lsrs	r4, r5, #16
  4070f2:	fb09 4406 	mla	r4, r9, r6, r4
  4070f6:	b2ad      	uxth	r5, r5
  4070f8:	1b5b      	subs	r3, r3, r5
  4070fa:	b2a6      	uxth	r6, r4
  4070fc:	fa13 f382 	uxtah	r3, r3, r2
  407100:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  407104:	eb06 4623 	add.w	r6, r6, r3, asr #16
  407108:	b29b      	uxth	r3, r3
  40710a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40710e:	45e2      	cmp	sl, ip
  407110:	f84e 3b04 	str.w	r3, [lr], #4
  407114:	ea4f 4514 	mov.w	r5, r4, lsr #16
  407118:	ea4f 4326 	mov.w	r3, r6, asr #16
  40711c:	d2e0      	bcs.n	4070e0 <quorem+0x48>
  40711e:	9b00      	ldr	r3, [sp, #0]
  407120:	f85b 3003 	ldr.w	r3, [fp, r3]
  407124:	b993      	cbnz	r3, 40714c <quorem+0xb4>
  407126:	9c01      	ldr	r4, [sp, #4]
  407128:	1f23      	subs	r3, r4, #4
  40712a:	459b      	cmp	fp, r3
  40712c:	d20c      	bcs.n	407148 <quorem+0xb0>
  40712e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  407132:	b94b      	cbnz	r3, 407148 <quorem+0xb0>
  407134:	f1a4 0308 	sub.w	r3, r4, #8
  407138:	e002      	b.n	407140 <quorem+0xa8>
  40713a:	681a      	ldr	r2, [r3, #0]
  40713c:	3b04      	subs	r3, #4
  40713e:	b91a      	cbnz	r2, 407148 <quorem+0xb0>
  407140:	459b      	cmp	fp, r3
  407142:	f108 38ff 	add.w	r8, r8, #4294967295
  407146:	d3f8      	bcc.n	40713a <quorem+0xa2>
  407148:	f8c0 8010 	str.w	r8, [r0, #16]
  40714c:	4604      	mov	r4, r0
  40714e:	f002 facb 	bl	4096e8 <__mcmp>
  407152:	2800      	cmp	r0, #0
  407154:	db2e      	blt.n	4071b4 <quorem+0x11c>
  407156:	f109 0901 	add.w	r9, r9, #1
  40715a:	465d      	mov	r5, fp
  40715c:	2300      	movs	r3, #0
  40715e:	f857 1b04 	ldr.w	r1, [r7], #4
  407162:	6828      	ldr	r0, [r5, #0]
  407164:	b28a      	uxth	r2, r1
  407166:	1a9a      	subs	r2, r3, r2
  407168:	0c09      	lsrs	r1, r1, #16
  40716a:	fa12 f280 	uxtah	r2, r2, r0
  40716e:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  407172:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407176:	b291      	uxth	r1, r2
  407178:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40717c:	45ba      	cmp	sl, r7
  40717e:	f845 1b04 	str.w	r1, [r5], #4
  407182:	ea4f 4323 	mov.w	r3, r3, asr #16
  407186:	d2ea      	bcs.n	40715e <quorem+0xc6>
  407188:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40718c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  407190:	b982      	cbnz	r2, 4071b4 <quorem+0x11c>
  407192:	1f1a      	subs	r2, r3, #4
  407194:	4593      	cmp	fp, r2
  407196:	d20b      	bcs.n	4071b0 <quorem+0x118>
  407198:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40719c:	b942      	cbnz	r2, 4071b0 <quorem+0x118>
  40719e:	3b08      	subs	r3, #8
  4071a0:	e002      	b.n	4071a8 <quorem+0x110>
  4071a2:	681a      	ldr	r2, [r3, #0]
  4071a4:	3b04      	subs	r3, #4
  4071a6:	b91a      	cbnz	r2, 4071b0 <quorem+0x118>
  4071a8:	459b      	cmp	fp, r3
  4071aa:	f108 38ff 	add.w	r8, r8, #4294967295
  4071ae:	d3f8      	bcc.n	4071a2 <quorem+0x10a>
  4071b0:	f8c4 8010 	str.w	r8, [r4, #16]
  4071b4:	4648      	mov	r0, r9
  4071b6:	b003      	add	sp, #12
  4071b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4071bc:	2000      	movs	r0, #0
  4071be:	4770      	bx	lr

004071c0 <_dtoa_r>:
  4071c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4071c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4071c6:	b097      	sub	sp, #92	; 0x5c
  4071c8:	4681      	mov	r9, r0
  4071ca:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  4071cc:	4692      	mov	sl, r2
  4071ce:	469b      	mov	fp, r3
  4071d0:	b149      	cbz	r1, 4071e6 <_dtoa_r+0x26>
  4071d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4071d4:	604a      	str	r2, [r1, #4]
  4071d6:	2301      	movs	r3, #1
  4071d8:	4093      	lsls	r3, r2
  4071da:	608b      	str	r3, [r1, #8]
  4071dc:	f002 f8a2 	bl	409324 <_Bfree>
  4071e0:	2300      	movs	r3, #0
  4071e2:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  4071e6:	f1bb 0f00 	cmp.w	fp, #0
  4071ea:	46d8      	mov	r8, fp
  4071ec:	db33      	blt.n	407256 <_dtoa_r+0x96>
  4071ee:	2300      	movs	r3, #0
  4071f0:	6023      	str	r3, [r4, #0]
  4071f2:	4ba5      	ldr	r3, [pc, #660]	; (407488 <_dtoa_r+0x2c8>)
  4071f4:	461a      	mov	r2, r3
  4071f6:	ea08 0303 	and.w	r3, r8, r3
  4071fa:	4293      	cmp	r3, r2
  4071fc:	d014      	beq.n	407228 <_dtoa_r+0x68>
  4071fe:	4650      	mov	r0, sl
  407200:	4659      	mov	r1, fp
  407202:	2200      	movs	r2, #0
  407204:	2300      	movs	r3, #0
  407206:	f003 fc8f 	bl	40ab28 <__aeabi_dcmpeq>
  40720a:	4605      	mov	r5, r0
  40720c:	b348      	cbz	r0, 407262 <_dtoa_r+0xa2>
  40720e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  407210:	2301      	movs	r3, #1
  407212:	6013      	str	r3, [r2, #0]
  407214:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407216:	2b00      	cmp	r3, #0
  407218:	f000 80c5 	beq.w	4073a6 <_dtoa_r+0x1e6>
  40721c:	489b      	ldr	r0, [pc, #620]	; (40748c <_dtoa_r+0x2cc>)
  40721e:	6018      	str	r0, [r3, #0]
  407220:	3801      	subs	r0, #1
  407222:	b017      	add	sp, #92	; 0x5c
  407224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407228:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40722a:	f242 730f 	movw	r3, #9999	; 0x270f
  40722e:	6013      	str	r3, [r2, #0]
  407230:	f1ba 0f00 	cmp.w	sl, #0
  407234:	f000 80a2 	beq.w	40737c <_dtoa_r+0x1bc>
  407238:	4895      	ldr	r0, [pc, #596]	; (407490 <_dtoa_r+0x2d0>)
  40723a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40723c:	2b00      	cmp	r3, #0
  40723e:	d0f0      	beq.n	407222 <_dtoa_r+0x62>
  407240:	78c3      	ldrb	r3, [r0, #3]
  407242:	2b00      	cmp	r3, #0
  407244:	f000 80b1 	beq.w	4073aa <_dtoa_r+0x1ea>
  407248:	f100 0308 	add.w	r3, r0, #8
  40724c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40724e:	6013      	str	r3, [r2, #0]
  407250:	b017      	add	sp, #92	; 0x5c
  407252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407256:	2301      	movs	r3, #1
  407258:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  40725c:	6023      	str	r3, [r4, #0]
  40725e:	46c3      	mov	fp, r8
  407260:	e7c7      	b.n	4071f2 <_dtoa_r+0x32>
  407262:	aa14      	add	r2, sp, #80	; 0x50
  407264:	ab15      	add	r3, sp, #84	; 0x54
  407266:	9201      	str	r2, [sp, #4]
  407268:	9300      	str	r3, [sp, #0]
  40726a:	4652      	mov	r2, sl
  40726c:	465b      	mov	r3, fp
  40726e:	4648      	mov	r0, r9
  407270:	f002 fae4 	bl	40983c <__d2b>
  407274:	ea5f 5418 	movs.w	r4, r8, lsr #20
  407278:	9008      	str	r0, [sp, #32]
  40727a:	f040 8088 	bne.w	40738e <_dtoa_r+0x1ce>
  40727e:	9d14      	ldr	r5, [sp, #80]	; 0x50
  407280:	9c15      	ldr	r4, [sp, #84]	; 0x54
  407282:	442c      	add	r4, r5
  407284:	f204 4332 	addw	r3, r4, #1074	; 0x432
  407288:	2b20      	cmp	r3, #32
  40728a:	f340 8291 	ble.w	4077b0 <_dtoa_r+0x5f0>
  40728e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  407292:	f204 4012 	addw	r0, r4, #1042	; 0x412
  407296:	fa08 f803 	lsl.w	r8, r8, r3
  40729a:	fa2a f000 	lsr.w	r0, sl, r0
  40729e:	ea40 0008 	orr.w	r0, r0, r8
  4072a2:	f003 f963 	bl	40a56c <__aeabi_ui2d>
  4072a6:	2301      	movs	r3, #1
  4072a8:	3c01      	subs	r4, #1
  4072aa:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4072ae:	9310      	str	r3, [sp, #64]	; 0x40
  4072b0:	2200      	movs	r2, #0
  4072b2:	4b78      	ldr	r3, [pc, #480]	; (407494 <_dtoa_r+0x2d4>)
  4072b4:	f003 f81c 	bl	40a2f0 <__aeabi_dsub>
  4072b8:	a36d      	add	r3, pc, #436	; (adr r3, 407470 <_dtoa_r+0x2b0>)
  4072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4072be:	f003 f9cb 	bl	40a658 <__aeabi_dmul>
  4072c2:	a36d      	add	r3, pc, #436	; (adr r3, 407478 <_dtoa_r+0x2b8>)
  4072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4072c8:	f003 f814 	bl	40a2f4 <__adddf3>
  4072cc:	4606      	mov	r6, r0
  4072ce:	4620      	mov	r0, r4
  4072d0:	460f      	mov	r7, r1
  4072d2:	f003 f95b 	bl	40a58c <__aeabi_i2d>
  4072d6:	a36a      	add	r3, pc, #424	; (adr r3, 407480 <_dtoa_r+0x2c0>)
  4072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4072dc:	f003 f9bc 	bl	40a658 <__aeabi_dmul>
  4072e0:	4602      	mov	r2, r0
  4072e2:	460b      	mov	r3, r1
  4072e4:	4630      	mov	r0, r6
  4072e6:	4639      	mov	r1, r7
  4072e8:	f003 f804 	bl	40a2f4 <__adddf3>
  4072ec:	4606      	mov	r6, r0
  4072ee:	460f      	mov	r7, r1
  4072f0:	f003 fc62 	bl	40abb8 <__aeabi_d2iz>
  4072f4:	2200      	movs	r2, #0
  4072f6:	9004      	str	r0, [sp, #16]
  4072f8:	2300      	movs	r3, #0
  4072fa:	4630      	mov	r0, r6
  4072fc:	4639      	mov	r1, r7
  4072fe:	f003 fc1d 	bl	40ab3c <__aeabi_dcmplt>
  407302:	2800      	cmp	r0, #0
  407304:	f040 8230 	bne.w	407768 <_dtoa_r+0x5a8>
  407308:	9e04      	ldr	r6, [sp, #16]
  40730a:	2e16      	cmp	r6, #22
  40730c:	f200 8229 	bhi.w	407762 <_dtoa_r+0x5a2>
  407310:	4b61      	ldr	r3, [pc, #388]	; (407498 <_dtoa_r+0x2d8>)
  407312:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  407316:	e9d3 0100 	ldrd	r0, r1, [r3]
  40731a:	4652      	mov	r2, sl
  40731c:	465b      	mov	r3, fp
  40731e:	f003 fc2b 	bl	40ab78 <__aeabi_dcmpgt>
  407322:	2800      	cmp	r0, #0
  407324:	f000 8249 	beq.w	4077ba <_dtoa_r+0x5fa>
  407328:	1e73      	subs	r3, r6, #1
  40732a:	9304      	str	r3, [sp, #16]
  40732c:	2300      	movs	r3, #0
  40732e:	930c      	str	r3, [sp, #48]	; 0x30
  407330:	1b2c      	subs	r4, r5, r4
  407332:	1e63      	subs	r3, r4, #1
  407334:	9302      	str	r3, [sp, #8]
  407336:	f100 8232 	bmi.w	40779e <_dtoa_r+0x5de>
  40733a:	2300      	movs	r3, #0
  40733c:	9305      	str	r3, [sp, #20]
  40733e:	9b04      	ldr	r3, [sp, #16]
  407340:	2b00      	cmp	r3, #0
  407342:	f2c0 8223 	blt.w	40778c <_dtoa_r+0x5cc>
  407346:	9a02      	ldr	r2, [sp, #8]
  407348:	930b      	str	r3, [sp, #44]	; 0x2c
  40734a:	4611      	mov	r1, r2
  40734c:	4419      	add	r1, r3
  40734e:	2300      	movs	r3, #0
  407350:	9102      	str	r1, [sp, #8]
  407352:	930a      	str	r3, [sp, #40]	; 0x28
  407354:	9b20      	ldr	r3, [sp, #128]	; 0x80
  407356:	2b09      	cmp	r3, #9
  407358:	d829      	bhi.n	4073ae <_dtoa_r+0x1ee>
  40735a:	2b05      	cmp	r3, #5
  40735c:	f340 8658 	ble.w	408010 <_dtoa_r+0xe50>
  407360:	3b04      	subs	r3, #4
  407362:	9320      	str	r3, [sp, #128]	; 0x80
  407364:	2500      	movs	r5, #0
  407366:	9b20      	ldr	r3, [sp, #128]	; 0x80
  407368:	3b02      	subs	r3, #2
  40736a:	2b03      	cmp	r3, #3
  40736c:	f200 8635 	bhi.w	407fda <_dtoa_r+0xe1a>
  407370:	e8df f013 	tbh	[pc, r3, lsl #1]
  407374:	0228032c 	.word	0x0228032c
  407378:	04590337 	.word	0x04590337
  40737c:	4b44      	ldr	r3, [pc, #272]	; (407490 <_dtoa_r+0x2d0>)
  40737e:	4a47      	ldr	r2, [pc, #284]	; (40749c <_dtoa_r+0x2dc>)
  407380:	f3c8 0013 	ubfx	r0, r8, #0, #20
  407384:	2800      	cmp	r0, #0
  407386:	bf14      	ite	ne
  407388:	4618      	movne	r0, r3
  40738a:	4610      	moveq	r0, r2
  40738c:	e755      	b.n	40723a <_dtoa_r+0x7a>
  40738e:	f3cb 0313 	ubfx	r3, fp, #0, #20
  407392:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  407396:	9510      	str	r5, [sp, #64]	; 0x40
  407398:	4650      	mov	r0, sl
  40739a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  40739e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4073a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4073a4:	e784      	b.n	4072b0 <_dtoa_r+0xf0>
  4073a6:	483e      	ldr	r0, [pc, #248]	; (4074a0 <_dtoa_r+0x2e0>)
  4073a8:	e73b      	b.n	407222 <_dtoa_r+0x62>
  4073aa:	1cc3      	adds	r3, r0, #3
  4073ac:	e74e      	b.n	40724c <_dtoa_r+0x8c>
  4073ae:	2100      	movs	r1, #0
  4073b0:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4073b4:	4648      	mov	r0, r9
  4073b6:	9120      	str	r1, [sp, #128]	; 0x80
  4073b8:	f001 ff8e 	bl	4092d8 <_Balloc>
  4073bc:	f04f 33ff 	mov.w	r3, #4294967295
  4073c0:	9306      	str	r3, [sp, #24]
  4073c2:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4073c4:	930d      	str	r3, [sp, #52]	; 0x34
  4073c6:	2301      	movs	r3, #1
  4073c8:	9007      	str	r0, [sp, #28]
  4073ca:	9221      	str	r2, [sp, #132]	; 0x84
  4073cc:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  4073d0:	9309      	str	r3, [sp, #36]	; 0x24
  4073d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4073d4:	2b00      	cmp	r3, #0
  4073d6:	f2c0 80d1 	blt.w	40757c <_dtoa_r+0x3bc>
  4073da:	9a04      	ldr	r2, [sp, #16]
  4073dc:	2a0e      	cmp	r2, #14
  4073de:	f300 80cd 	bgt.w	40757c <_dtoa_r+0x3bc>
  4073e2:	4b2d      	ldr	r3, [pc, #180]	; (407498 <_dtoa_r+0x2d8>)
  4073e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4073e8:	e9d3 3400 	ldrd	r3, r4, [r3]
  4073ec:	e9cd 3402 	strd	r3, r4, [sp, #8]
  4073f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4073f2:	2b00      	cmp	r3, #0
  4073f4:	f2c0 8300 	blt.w	4079f8 <_dtoa_r+0x838>
  4073f8:	4656      	mov	r6, sl
  4073fa:	465f      	mov	r7, fp
  4073fc:	4650      	mov	r0, sl
  4073fe:	4659      	mov	r1, fp
  407400:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  407404:	4652      	mov	r2, sl
  407406:	465b      	mov	r3, fp
  407408:	f003 fa50 	bl	40a8ac <__aeabi_ddiv>
  40740c:	f003 fbd4 	bl	40abb8 <__aeabi_d2iz>
  407410:	4604      	mov	r4, r0
  407412:	f003 f8bb 	bl	40a58c <__aeabi_i2d>
  407416:	4652      	mov	r2, sl
  407418:	465b      	mov	r3, fp
  40741a:	f003 f91d 	bl	40a658 <__aeabi_dmul>
  40741e:	460b      	mov	r3, r1
  407420:	4602      	mov	r2, r0
  407422:	4639      	mov	r1, r7
  407424:	4630      	mov	r0, r6
  407426:	f002 ff63 	bl	40a2f0 <__aeabi_dsub>
  40742a:	9d07      	ldr	r5, [sp, #28]
  40742c:	f104 0330 	add.w	r3, r4, #48	; 0x30
  407430:	702b      	strb	r3, [r5, #0]
  407432:	9b06      	ldr	r3, [sp, #24]
  407434:	2b01      	cmp	r3, #1
  407436:	4606      	mov	r6, r0
  407438:	460f      	mov	r7, r1
  40743a:	f105 0501 	add.w	r5, r5, #1
  40743e:	d062      	beq.n	407506 <_dtoa_r+0x346>
  407440:	2200      	movs	r2, #0
  407442:	4b18      	ldr	r3, [pc, #96]	; (4074a4 <_dtoa_r+0x2e4>)
  407444:	f003 f908 	bl	40a658 <__aeabi_dmul>
  407448:	2200      	movs	r2, #0
  40744a:	2300      	movs	r3, #0
  40744c:	4606      	mov	r6, r0
  40744e:	460f      	mov	r7, r1
  407450:	f003 fb6a 	bl	40ab28 <__aeabi_dcmpeq>
  407454:	2800      	cmp	r0, #0
  407456:	d17e      	bne.n	407556 <_dtoa_r+0x396>
  407458:	f8cd 9014 	str.w	r9, [sp, #20]
  40745c:	f8dd a018 	ldr.w	sl, [sp, #24]
  407460:	f8dd b01c 	ldr.w	fp, [sp, #28]
  407464:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  407468:	e029      	b.n	4074be <_dtoa_r+0x2fe>
  40746a:	bf00      	nop
  40746c:	f3af 8000 	nop.w
  407470:	636f4361 	.word	0x636f4361
  407474:	3fd287a7 	.word	0x3fd287a7
  407478:	8b60c8b3 	.word	0x8b60c8b3
  40747c:	3fc68a28 	.word	0x3fc68a28
  407480:	509f79fb 	.word	0x509f79fb
  407484:	3fd34413 	.word	0x3fd34413
  407488:	7ff00000 	.word	0x7ff00000
  40748c:	0040c0a5 	.word	0x0040c0a5
  407490:	0040c1e8 	.word	0x0040c1e8
  407494:	3ff80000 	.word	0x3ff80000
  407498:	0040c1f8 	.word	0x0040c1f8
  40749c:	0040c1dc 	.word	0x0040c1dc
  4074a0:	0040c0a4 	.word	0x0040c0a4
  4074a4:	40240000 	.word	0x40240000
  4074a8:	f003 f8d6 	bl	40a658 <__aeabi_dmul>
  4074ac:	2200      	movs	r2, #0
  4074ae:	2300      	movs	r3, #0
  4074b0:	4606      	mov	r6, r0
  4074b2:	460f      	mov	r7, r1
  4074b4:	f003 fb38 	bl	40ab28 <__aeabi_dcmpeq>
  4074b8:	2800      	cmp	r0, #0
  4074ba:	f040 83b7 	bne.w	407c2c <_dtoa_r+0xa6c>
  4074be:	4642      	mov	r2, r8
  4074c0:	464b      	mov	r3, r9
  4074c2:	4630      	mov	r0, r6
  4074c4:	4639      	mov	r1, r7
  4074c6:	f003 f9f1 	bl	40a8ac <__aeabi_ddiv>
  4074ca:	f003 fb75 	bl	40abb8 <__aeabi_d2iz>
  4074ce:	4604      	mov	r4, r0
  4074d0:	f003 f85c 	bl	40a58c <__aeabi_i2d>
  4074d4:	4642      	mov	r2, r8
  4074d6:	464b      	mov	r3, r9
  4074d8:	f003 f8be 	bl	40a658 <__aeabi_dmul>
  4074dc:	4602      	mov	r2, r0
  4074de:	460b      	mov	r3, r1
  4074e0:	4630      	mov	r0, r6
  4074e2:	4639      	mov	r1, r7
  4074e4:	f002 ff04 	bl	40a2f0 <__aeabi_dsub>
  4074e8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4074ec:	f805 eb01 	strb.w	lr, [r5], #1
  4074f0:	ebcb 0e05 	rsb	lr, fp, r5
  4074f4:	45d6      	cmp	lr, sl
  4074f6:	4606      	mov	r6, r0
  4074f8:	460f      	mov	r7, r1
  4074fa:	f04f 0200 	mov.w	r2, #0
  4074fe:	4bb0      	ldr	r3, [pc, #704]	; (4077c0 <_dtoa_r+0x600>)
  407500:	d1d2      	bne.n	4074a8 <_dtoa_r+0x2e8>
  407502:	f8dd 9014 	ldr.w	r9, [sp, #20]
  407506:	4632      	mov	r2, r6
  407508:	463b      	mov	r3, r7
  40750a:	4630      	mov	r0, r6
  40750c:	4639      	mov	r1, r7
  40750e:	f002 fef1 	bl	40a2f4 <__adddf3>
  407512:	4606      	mov	r6, r0
  407514:	460f      	mov	r7, r1
  407516:	4602      	mov	r2, r0
  407518:	460b      	mov	r3, r1
  40751a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40751e:	f003 fb0d 	bl	40ab3c <__aeabi_dcmplt>
  407522:	b940      	cbnz	r0, 407536 <_dtoa_r+0x376>
  407524:	4632      	mov	r2, r6
  407526:	463b      	mov	r3, r7
  407528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40752c:	f003 fafc 	bl	40ab28 <__aeabi_dcmpeq>
  407530:	b188      	cbz	r0, 407556 <_dtoa_r+0x396>
  407532:	07e3      	lsls	r3, r4, #31
  407534:	d50f      	bpl.n	407556 <_dtoa_r+0x396>
  407536:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40753a:	9a07      	ldr	r2, [sp, #28]
  40753c:	1e6b      	subs	r3, r5, #1
  40753e:	e004      	b.n	40754a <_dtoa_r+0x38a>
  407540:	429a      	cmp	r2, r3
  407542:	f000 842c 	beq.w	407d9e <_dtoa_r+0xbde>
  407546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40754a:	2c39      	cmp	r4, #57	; 0x39
  40754c:	f103 0501 	add.w	r5, r3, #1
  407550:	d0f6      	beq.n	407540 <_dtoa_r+0x380>
  407552:	3401      	adds	r4, #1
  407554:	701c      	strb	r4, [r3, #0]
  407556:	9908      	ldr	r1, [sp, #32]
  407558:	4648      	mov	r0, r9
  40755a:	f001 fee3 	bl	409324 <_Bfree>
  40755e:	2200      	movs	r2, #0
  407560:	9b04      	ldr	r3, [sp, #16]
  407562:	702a      	strb	r2, [r5, #0]
  407564:	9a22      	ldr	r2, [sp, #136]	; 0x88
  407566:	3301      	adds	r3, #1
  407568:	6013      	str	r3, [r2, #0]
  40756a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40756c:	2b00      	cmp	r3, #0
  40756e:	f000 83a7 	beq.w	407cc0 <_dtoa_r+0xb00>
  407572:	9807      	ldr	r0, [sp, #28]
  407574:	601d      	str	r5, [r3, #0]
  407576:	b017      	add	sp, #92	; 0x5c
  407578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40757c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40757e:	2a00      	cmp	r2, #0
  407580:	f000 8112 	beq.w	4077a8 <_dtoa_r+0x5e8>
  407584:	9a20      	ldr	r2, [sp, #128]	; 0x80
  407586:	2a01      	cmp	r2, #1
  407588:	f340 8258 	ble.w	407a3c <_dtoa_r+0x87c>
  40758c:	9b06      	ldr	r3, [sp, #24]
  40758e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407590:	1e5f      	subs	r7, r3, #1
  407592:	42ba      	cmp	r2, r7
  407594:	f2c0 8397 	blt.w	407cc6 <_dtoa_r+0xb06>
  407598:	1bd7      	subs	r7, r2, r7
  40759a:	9b06      	ldr	r3, [sp, #24]
  40759c:	2b00      	cmp	r3, #0
  40759e:	f2c0 848a 	blt.w	407eb6 <_dtoa_r+0xcf6>
  4075a2:	9d05      	ldr	r5, [sp, #20]
  4075a4:	9b06      	ldr	r3, [sp, #24]
  4075a6:	9a05      	ldr	r2, [sp, #20]
  4075a8:	441a      	add	r2, r3
  4075aa:	9205      	str	r2, [sp, #20]
  4075ac:	9a02      	ldr	r2, [sp, #8]
  4075ae:	2101      	movs	r1, #1
  4075b0:	441a      	add	r2, r3
  4075b2:	4648      	mov	r0, r9
  4075b4:	9202      	str	r2, [sp, #8]
  4075b6:	f001 ff4d 	bl	409454 <__i2b>
  4075ba:	4606      	mov	r6, r0
  4075bc:	b165      	cbz	r5, 4075d8 <_dtoa_r+0x418>
  4075be:	9902      	ldr	r1, [sp, #8]
  4075c0:	2900      	cmp	r1, #0
  4075c2:	460b      	mov	r3, r1
  4075c4:	dd08      	ble.n	4075d8 <_dtoa_r+0x418>
  4075c6:	42a9      	cmp	r1, r5
  4075c8:	9a05      	ldr	r2, [sp, #20]
  4075ca:	bfa8      	it	ge
  4075cc:	462b      	movge	r3, r5
  4075ce:	1ad2      	subs	r2, r2, r3
  4075d0:	1aed      	subs	r5, r5, r3
  4075d2:	1acb      	subs	r3, r1, r3
  4075d4:	9205      	str	r2, [sp, #20]
  4075d6:	9302      	str	r3, [sp, #8]
  4075d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4075da:	2b00      	cmp	r3, #0
  4075dc:	f340 82fc 	ble.w	407bd8 <_dtoa_r+0xa18>
  4075e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4075e2:	2a00      	cmp	r2, #0
  4075e4:	f000 8201 	beq.w	4079ea <_dtoa_r+0x82a>
  4075e8:	2f00      	cmp	r7, #0
  4075ea:	f000 81fe 	beq.w	4079ea <_dtoa_r+0x82a>
  4075ee:	4631      	mov	r1, r6
  4075f0:	463a      	mov	r2, r7
  4075f2:	4648      	mov	r0, r9
  4075f4:	f001 ffd0 	bl	409598 <__pow5mult>
  4075f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4075fc:	4601      	mov	r1, r0
  4075fe:	4642      	mov	r2, r8
  407600:	4606      	mov	r6, r0
  407602:	4648      	mov	r0, r9
  407604:	f001 ff30 	bl	409468 <__multiply>
  407608:	4641      	mov	r1, r8
  40760a:	4604      	mov	r4, r0
  40760c:	4648      	mov	r0, r9
  40760e:	f001 fe89 	bl	409324 <_Bfree>
  407612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407614:	1bdb      	subs	r3, r3, r7
  407616:	930a      	str	r3, [sp, #40]	; 0x28
  407618:	f040 81e6 	bne.w	4079e8 <_dtoa_r+0x828>
  40761c:	2101      	movs	r1, #1
  40761e:	4648      	mov	r0, r9
  407620:	f001 ff18 	bl	409454 <__i2b>
  407624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407626:	4680      	mov	r8, r0
  407628:	2b00      	cmp	r3, #0
  40762a:	f000 8219 	beq.w	407a60 <_dtoa_r+0x8a0>
  40762e:	4601      	mov	r1, r0
  407630:	461a      	mov	r2, r3
  407632:	4648      	mov	r0, r9
  407634:	f001 ffb0 	bl	409598 <__pow5mult>
  407638:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40763a:	2b01      	cmp	r3, #1
  40763c:	4680      	mov	r8, r0
  40763e:	f340 82f8 	ble.w	407c32 <_dtoa_r+0xa72>
  407642:	2700      	movs	r7, #0
  407644:	f8d8 3010 	ldr.w	r3, [r8, #16]
  407648:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40764c:	6918      	ldr	r0, [r3, #16]
  40764e:	f001 feb3 	bl	4093b8 <__hi0bits>
  407652:	f1c0 0020 	rsb	r0, r0, #32
  407656:	9a02      	ldr	r2, [sp, #8]
  407658:	4410      	add	r0, r2
  40765a:	f010 001f 	ands.w	r0, r0, #31
  40765e:	f000 81f6 	beq.w	407a4e <_dtoa_r+0x88e>
  407662:	f1c0 0320 	rsb	r3, r0, #32
  407666:	2b04      	cmp	r3, #4
  407668:	f340 84ca 	ble.w	408000 <_dtoa_r+0xe40>
  40766c:	9b05      	ldr	r3, [sp, #20]
  40766e:	f1c0 001c 	rsb	r0, r0, #28
  407672:	4403      	add	r3, r0
  407674:	9305      	str	r3, [sp, #20]
  407676:	4613      	mov	r3, r2
  407678:	4403      	add	r3, r0
  40767a:	4405      	add	r5, r0
  40767c:	9302      	str	r3, [sp, #8]
  40767e:	9b05      	ldr	r3, [sp, #20]
  407680:	2b00      	cmp	r3, #0
  407682:	dd05      	ble.n	407690 <_dtoa_r+0x4d0>
  407684:	4621      	mov	r1, r4
  407686:	461a      	mov	r2, r3
  407688:	4648      	mov	r0, r9
  40768a:	f001 ffd5 	bl	409638 <__lshift>
  40768e:	4604      	mov	r4, r0
  407690:	9b02      	ldr	r3, [sp, #8]
  407692:	2b00      	cmp	r3, #0
  407694:	dd05      	ble.n	4076a2 <_dtoa_r+0x4e2>
  407696:	4641      	mov	r1, r8
  407698:	461a      	mov	r2, r3
  40769a:	4648      	mov	r0, r9
  40769c:	f001 ffcc 	bl	409638 <__lshift>
  4076a0:	4680      	mov	r8, r0
  4076a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4076a4:	2b00      	cmp	r3, #0
  4076a6:	f040 827c 	bne.w	407ba2 <_dtoa_r+0x9e2>
  4076aa:	9b06      	ldr	r3, [sp, #24]
  4076ac:	2b00      	cmp	r3, #0
  4076ae:	f340 8295 	ble.w	407bdc <_dtoa_r+0xa1c>
  4076b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4076b4:	2b00      	cmp	r3, #0
  4076b6:	f040 81f5 	bne.w	407aa4 <_dtoa_r+0x8e4>
  4076ba:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4076be:	9f06      	ldr	r7, [sp, #24]
  4076c0:	465d      	mov	r5, fp
  4076c2:	e002      	b.n	4076ca <_dtoa_r+0x50a>
  4076c4:	f001 fe38 	bl	409338 <__multadd>
  4076c8:	4604      	mov	r4, r0
  4076ca:	4641      	mov	r1, r8
  4076cc:	4620      	mov	r0, r4
  4076ce:	f7ff fce3 	bl	407098 <quorem>
  4076d2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4076d6:	f805 ab01 	strb.w	sl, [r5], #1
  4076da:	ebcb 0305 	rsb	r3, fp, r5
  4076de:	42bb      	cmp	r3, r7
  4076e0:	f04f 020a 	mov.w	r2, #10
  4076e4:	f04f 0300 	mov.w	r3, #0
  4076e8:	4621      	mov	r1, r4
  4076ea:	4648      	mov	r0, r9
  4076ec:	dbea      	blt.n	4076c4 <_dtoa_r+0x504>
  4076ee:	9b07      	ldr	r3, [sp, #28]
  4076f0:	9a06      	ldr	r2, [sp, #24]
  4076f2:	2a01      	cmp	r2, #1
  4076f4:	bfac      	ite	ge
  4076f6:	189b      	addge	r3, r3, r2
  4076f8:	3301      	addlt	r3, #1
  4076fa:	461d      	mov	r5, r3
  4076fc:	f04f 0b00 	mov.w	fp, #0
  407700:	4621      	mov	r1, r4
  407702:	2201      	movs	r2, #1
  407704:	4648      	mov	r0, r9
  407706:	f001 ff97 	bl	409638 <__lshift>
  40770a:	4641      	mov	r1, r8
  40770c:	9008      	str	r0, [sp, #32]
  40770e:	f001 ffeb 	bl	4096e8 <__mcmp>
  407712:	2800      	cmp	r0, #0
  407714:	f340 830d 	ble.w	407d32 <_dtoa_r+0xb72>
  407718:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40771c:	9907      	ldr	r1, [sp, #28]
  40771e:	1e6b      	subs	r3, r5, #1
  407720:	e004      	b.n	40772c <_dtoa_r+0x56c>
  407722:	428b      	cmp	r3, r1
  407724:	f000 8278 	beq.w	407c18 <_dtoa_r+0xa58>
  407728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40772c:	2a39      	cmp	r2, #57	; 0x39
  40772e:	f103 0501 	add.w	r5, r3, #1
  407732:	d0f6      	beq.n	407722 <_dtoa_r+0x562>
  407734:	3201      	adds	r2, #1
  407736:	701a      	strb	r2, [r3, #0]
  407738:	4641      	mov	r1, r8
  40773a:	4648      	mov	r0, r9
  40773c:	f001 fdf2 	bl	409324 <_Bfree>
  407740:	2e00      	cmp	r6, #0
  407742:	f43f af08 	beq.w	407556 <_dtoa_r+0x396>
  407746:	f1bb 0f00 	cmp.w	fp, #0
  40774a:	d005      	beq.n	407758 <_dtoa_r+0x598>
  40774c:	45b3      	cmp	fp, r6
  40774e:	d003      	beq.n	407758 <_dtoa_r+0x598>
  407750:	4659      	mov	r1, fp
  407752:	4648      	mov	r0, r9
  407754:	f001 fde6 	bl	409324 <_Bfree>
  407758:	4631      	mov	r1, r6
  40775a:	4648      	mov	r0, r9
  40775c:	f001 fde2 	bl	409324 <_Bfree>
  407760:	e6f9      	b.n	407556 <_dtoa_r+0x396>
  407762:	2301      	movs	r3, #1
  407764:	930c      	str	r3, [sp, #48]	; 0x30
  407766:	e5e3      	b.n	407330 <_dtoa_r+0x170>
  407768:	f8dd 8010 	ldr.w	r8, [sp, #16]
  40776c:	4640      	mov	r0, r8
  40776e:	f002 ff0d 	bl	40a58c <__aeabi_i2d>
  407772:	4602      	mov	r2, r0
  407774:	460b      	mov	r3, r1
  407776:	4630      	mov	r0, r6
  407778:	4639      	mov	r1, r7
  40777a:	f003 f9d5 	bl	40ab28 <__aeabi_dcmpeq>
  40777e:	2800      	cmp	r0, #0
  407780:	f47f adc2 	bne.w	407308 <_dtoa_r+0x148>
  407784:	f108 33ff 	add.w	r3, r8, #4294967295
  407788:	9304      	str	r3, [sp, #16]
  40778a:	e5bd      	b.n	407308 <_dtoa_r+0x148>
  40778c:	9a05      	ldr	r2, [sp, #20]
  40778e:	9b04      	ldr	r3, [sp, #16]
  407790:	1ad2      	subs	r2, r2, r3
  407792:	425b      	negs	r3, r3
  407794:	930a      	str	r3, [sp, #40]	; 0x28
  407796:	2300      	movs	r3, #0
  407798:	9205      	str	r2, [sp, #20]
  40779a:	930b      	str	r3, [sp, #44]	; 0x2c
  40779c:	e5da      	b.n	407354 <_dtoa_r+0x194>
  40779e:	425b      	negs	r3, r3
  4077a0:	9305      	str	r3, [sp, #20]
  4077a2:	2300      	movs	r3, #0
  4077a4:	9302      	str	r3, [sp, #8]
  4077a6:	e5ca      	b.n	40733e <_dtoa_r+0x17e>
  4077a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4077aa:	9d05      	ldr	r5, [sp, #20]
  4077ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4077ae:	e705      	b.n	4075bc <_dtoa_r+0x3fc>
  4077b0:	f1c3 0820 	rsb	r8, r3, #32
  4077b4:	fa0a f008 	lsl.w	r0, sl, r8
  4077b8:	e573      	b.n	4072a2 <_dtoa_r+0xe2>
  4077ba:	900c      	str	r0, [sp, #48]	; 0x30
  4077bc:	e5b8      	b.n	407330 <_dtoa_r+0x170>
  4077be:	bf00      	nop
  4077c0:	40240000 	.word	0x40240000
  4077c4:	2300      	movs	r3, #0
  4077c6:	9309      	str	r3, [sp, #36]	; 0x24
  4077c8:	9b04      	ldr	r3, [sp, #16]
  4077ca:	9a21      	ldr	r2, [sp, #132]	; 0x84
  4077cc:	4413      	add	r3, r2
  4077ce:	930d      	str	r3, [sp, #52]	; 0x34
  4077d0:	3301      	adds	r3, #1
  4077d2:	2b00      	cmp	r3, #0
  4077d4:	9306      	str	r3, [sp, #24]
  4077d6:	f340 8283 	ble.w	407ce0 <_dtoa_r+0xb20>
  4077da:	9c06      	ldr	r4, [sp, #24]
  4077dc:	4626      	mov	r6, r4
  4077de:	2100      	movs	r1, #0
  4077e0:	2e17      	cmp	r6, #23
  4077e2:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4077e6:	d90b      	bls.n	407800 <_dtoa_r+0x640>
  4077e8:	2201      	movs	r2, #1
  4077ea:	2304      	movs	r3, #4
  4077ec:	005b      	lsls	r3, r3, #1
  4077ee:	f103 0014 	add.w	r0, r3, #20
  4077f2:	42b0      	cmp	r0, r6
  4077f4:	4611      	mov	r1, r2
  4077f6:	f102 0201 	add.w	r2, r2, #1
  4077fa:	d9f7      	bls.n	4077ec <_dtoa_r+0x62c>
  4077fc:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  407800:	4648      	mov	r0, r9
  407802:	f001 fd69 	bl	4092d8 <_Balloc>
  407806:	2c0e      	cmp	r4, #14
  407808:	9007      	str	r0, [sp, #28]
  40780a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40780e:	f63f ade0 	bhi.w	4073d2 <_dtoa_r+0x212>
  407812:	2d00      	cmp	r5, #0
  407814:	f43f addd 	beq.w	4073d2 <_dtoa_r+0x212>
  407818:	9904      	ldr	r1, [sp, #16]
  40781a:	4657      	mov	r7, sl
  40781c:	46d8      	mov	r8, fp
  40781e:	2900      	cmp	r1, #0
  407820:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  407824:	f340 8292 	ble.w	407d4c <_dtoa_r+0xb8c>
  407828:	4b91      	ldr	r3, [pc, #580]	; (407a70 <_dtoa_r+0x8b0>)
  40782a:	f001 020f 	and.w	r2, r1, #15
  40782e:	110e      	asrs	r6, r1, #4
  407830:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407834:	06f0      	lsls	r0, r6, #27
  407836:	e9d3 4500 	ldrd	r4, r5, [r3]
  40783a:	f140 824c 	bpl.w	407cd6 <_dtoa_r+0xb16>
  40783e:	4b8d      	ldr	r3, [pc, #564]	; (407a74 <_dtoa_r+0x8b4>)
  407840:	4650      	mov	r0, sl
  407842:	4659      	mov	r1, fp
  407844:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  407848:	f003 f830 	bl	40a8ac <__aeabi_ddiv>
  40784c:	f006 060f 	and.w	r6, r6, #15
  407850:	4682      	mov	sl, r0
  407852:	468b      	mov	fp, r1
  407854:	f04f 0803 	mov.w	r8, #3
  407858:	b186      	cbz	r6, 40787c <_dtoa_r+0x6bc>
  40785a:	4f86      	ldr	r7, [pc, #536]	; (407a74 <_dtoa_r+0x8b4>)
  40785c:	07f1      	lsls	r1, r6, #31
  40785e:	d509      	bpl.n	407874 <_dtoa_r+0x6b4>
  407860:	4620      	mov	r0, r4
  407862:	4629      	mov	r1, r5
  407864:	e9d7 2300 	ldrd	r2, r3, [r7]
  407868:	f002 fef6 	bl	40a658 <__aeabi_dmul>
  40786c:	f108 0801 	add.w	r8, r8, #1
  407870:	4604      	mov	r4, r0
  407872:	460d      	mov	r5, r1
  407874:	1076      	asrs	r6, r6, #1
  407876:	f107 0708 	add.w	r7, r7, #8
  40787a:	d1ef      	bne.n	40785c <_dtoa_r+0x69c>
  40787c:	4622      	mov	r2, r4
  40787e:	462b      	mov	r3, r5
  407880:	4650      	mov	r0, sl
  407882:	4659      	mov	r1, fp
  407884:	f003 f812 	bl	40a8ac <__aeabi_ddiv>
  407888:	4606      	mov	r6, r0
  40788a:	460f      	mov	r7, r1
  40788c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40788e:	b143      	cbz	r3, 4078a2 <_dtoa_r+0x6e2>
  407890:	2200      	movs	r2, #0
  407892:	4b79      	ldr	r3, [pc, #484]	; (407a78 <_dtoa_r+0x8b8>)
  407894:	4630      	mov	r0, r6
  407896:	4639      	mov	r1, r7
  407898:	f003 f950 	bl	40ab3c <__aeabi_dcmplt>
  40789c:	2800      	cmp	r0, #0
  40789e:	f040 8320 	bne.w	407ee2 <_dtoa_r+0xd22>
  4078a2:	4640      	mov	r0, r8
  4078a4:	f002 fe72 	bl	40a58c <__aeabi_i2d>
  4078a8:	4632      	mov	r2, r6
  4078aa:	463b      	mov	r3, r7
  4078ac:	f002 fed4 	bl	40a658 <__aeabi_dmul>
  4078b0:	4b72      	ldr	r3, [pc, #456]	; (407a7c <_dtoa_r+0x8bc>)
  4078b2:	2200      	movs	r2, #0
  4078b4:	f002 fd1e 	bl	40a2f4 <__adddf3>
  4078b8:	9b06      	ldr	r3, [sp, #24]
  4078ba:	4604      	mov	r4, r0
  4078bc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  4078c0:	2b00      	cmp	r3, #0
  4078c2:	f000 81df 	beq.w	407c84 <_dtoa_r+0xac4>
  4078c6:	9b04      	ldr	r3, [sp, #16]
  4078c8:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4078cc:	9311      	str	r3, [sp, #68]	; 0x44
  4078ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4078d0:	2b00      	cmp	r3, #0
  4078d2:	f000 8297 	beq.w	407e04 <_dtoa_r+0xc44>
  4078d6:	4b66      	ldr	r3, [pc, #408]	; (407a70 <_dtoa_r+0x8b0>)
  4078d8:	4969      	ldr	r1, [pc, #420]	; (407a80 <_dtoa_r+0x8c0>)
  4078da:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  4078de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4078e2:	2000      	movs	r0, #0
  4078e4:	f002 ffe2 	bl	40a8ac <__aeabi_ddiv>
  4078e8:	4622      	mov	r2, r4
  4078ea:	462b      	mov	r3, r5
  4078ec:	f002 fd00 	bl	40a2f0 <__aeabi_dsub>
  4078f0:	4682      	mov	sl, r0
  4078f2:	468b      	mov	fp, r1
  4078f4:	4630      	mov	r0, r6
  4078f6:	4639      	mov	r1, r7
  4078f8:	f003 f95e 	bl	40abb8 <__aeabi_d2iz>
  4078fc:	4604      	mov	r4, r0
  4078fe:	f002 fe45 	bl	40a58c <__aeabi_i2d>
  407902:	4602      	mov	r2, r0
  407904:	460b      	mov	r3, r1
  407906:	4630      	mov	r0, r6
  407908:	4639      	mov	r1, r7
  40790a:	f002 fcf1 	bl	40a2f0 <__aeabi_dsub>
  40790e:	3430      	adds	r4, #48	; 0x30
  407910:	9d07      	ldr	r5, [sp, #28]
  407912:	b2e4      	uxtb	r4, r4
  407914:	4606      	mov	r6, r0
  407916:	460f      	mov	r7, r1
  407918:	702c      	strb	r4, [r5, #0]
  40791a:	4602      	mov	r2, r0
  40791c:	460b      	mov	r3, r1
  40791e:	4650      	mov	r0, sl
  407920:	4659      	mov	r1, fp
  407922:	3501      	adds	r5, #1
  407924:	f003 f928 	bl	40ab78 <__aeabi_dcmpgt>
  407928:	2800      	cmp	r0, #0
  40792a:	d14c      	bne.n	4079c6 <_dtoa_r+0x806>
  40792c:	4632      	mov	r2, r6
  40792e:	463b      	mov	r3, r7
  407930:	2000      	movs	r0, #0
  407932:	4951      	ldr	r1, [pc, #324]	; (407a78 <_dtoa_r+0x8b8>)
  407934:	f002 fcdc 	bl	40a2f0 <__aeabi_dsub>
  407938:	4602      	mov	r2, r0
  40793a:	460b      	mov	r3, r1
  40793c:	4650      	mov	r0, sl
  40793e:	4659      	mov	r1, fp
  407940:	f003 f91a 	bl	40ab78 <__aeabi_dcmpgt>
  407944:	2800      	cmp	r0, #0
  407946:	f040 830d 	bne.w	407f64 <_dtoa_r+0xda4>
  40794a:	f1b8 0f01 	cmp.w	r8, #1
  40794e:	f340 81b3 	ble.w	407cb8 <_dtoa_r+0xaf8>
  407952:	9b07      	ldr	r3, [sp, #28]
  407954:	4498      	add	r8, r3
  407956:	e00d      	b.n	407974 <_dtoa_r+0x7b4>
  407958:	2000      	movs	r0, #0
  40795a:	4947      	ldr	r1, [pc, #284]	; (407a78 <_dtoa_r+0x8b8>)
  40795c:	f002 fcc8 	bl	40a2f0 <__aeabi_dsub>
  407960:	4652      	mov	r2, sl
  407962:	465b      	mov	r3, fp
  407964:	f003 f8ea 	bl	40ab3c <__aeabi_dcmplt>
  407968:	2800      	cmp	r0, #0
  40796a:	f040 82fb 	bne.w	407f64 <_dtoa_r+0xda4>
  40796e:	4545      	cmp	r5, r8
  407970:	f000 81a2 	beq.w	407cb8 <_dtoa_r+0xaf8>
  407974:	4650      	mov	r0, sl
  407976:	4659      	mov	r1, fp
  407978:	2200      	movs	r2, #0
  40797a:	4b42      	ldr	r3, [pc, #264]	; (407a84 <_dtoa_r+0x8c4>)
  40797c:	f002 fe6c 	bl	40a658 <__aeabi_dmul>
  407980:	2200      	movs	r2, #0
  407982:	4b40      	ldr	r3, [pc, #256]	; (407a84 <_dtoa_r+0x8c4>)
  407984:	4682      	mov	sl, r0
  407986:	468b      	mov	fp, r1
  407988:	4630      	mov	r0, r6
  40798a:	4639      	mov	r1, r7
  40798c:	f002 fe64 	bl	40a658 <__aeabi_dmul>
  407990:	460f      	mov	r7, r1
  407992:	4606      	mov	r6, r0
  407994:	f003 f910 	bl	40abb8 <__aeabi_d2iz>
  407998:	4604      	mov	r4, r0
  40799a:	f002 fdf7 	bl	40a58c <__aeabi_i2d>
  40799e:	4602      	mov	r2, r0
  4079a0:	460b      	mov	r3, r1
  4079a2:	4630      	mov	r0, r6
  4079a4:	4639      	mov	r1, r7
  4079a6:	f002 fca3 	bl	40a2f0 <__aeabi_dsub>
  4079aa:	3430      	adds	r4, #48	; 0x30
  4079ac:	b2e4      	uxtb	r4, r4
  4079ae:	4652      	mov	r2, sl
  4079b0:	465b      	mov	r3, fp
  4079b2:	f805 4b01 	strb.w	r4, [r5], #1
  4079b6:	4606      	mov	r6, r0
  4079b8:	460f      	mov	r7, r1
  4079ba:	f003 f8bf 	bl	40ab3c <__aeabi_dcmplt>
  4079be:	4632      	mov	r2, r6
  4079c0:	463b      	mov	r3, r7
  4079c2:	2800      	cmp	r0, #0
  4079c4:	d0c8      	beq.n	407958 <_dtoa_r+0x798>
  4079c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4079c8:	9304      	str	r3, [sp, #16]
  4079ca:	e5c4      	b.n	407556 <_dtoa_r+0x396>
  4079cc:	2300      	movs	r3, #0
  4079ce:	9309      	str	r3, [sp, #36]	; 0x24
  4079d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4079d2:	2b00      	cmp	r3, #0
  4079d4:	f340 8189 	ble.w	407cea <_dtoa_r+0xb2a>
  4079d8:	461e      	mov	r6, r3
  4079da:	461c      	mov	r4, r3
  4079dc:	930d      	str	r3, [sp, #52]	; 0x34
  4079de:	9306      	str	r3, [sp, #24]
  4079e0:	e6fd      	b.n	4077de <_dtoa_r+0x61e>
  4079e2:	2301      	movs	r3, #1
  4079e4:	9309      	str	r3, [sp, #36]	; 0x24
  4079e6:	e7f3      	b.n	4079d0 <_dtoa_r+0x810>
  4079e8:	9408      	str	r4, [sp, #32]
  4079ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4079ec:	9908      	ldr	r1, [sp, #32]
  4079ee:	4648      	mov	r0, r9
  4079f0:	f001 fdd2 	bl	409598 <__pow5mult>
  4079f4:	4604      	mov	r4, r0
  4079f6:	e611      	b.n	40761c <_dtoa_r+0x45c>
  4079f8:	9b06      	ldr	r3, [sp, #24]
  4079fa:	2b00      	cmp	r3, #0
  4079fc:	f73f acfc 	bgt.w	4073f8 <_dtoa_r+0x238>
  407a00:	f040 82da 	bne.w	407fb8 <_dtoa_r+0xdf8>
  407a04:	2200      	movs	r2, #0
  407a06:	4b20      	ldr	r3, [pc, #128]	; (407a88 <_dtoa_r+0x8c8>)
  407a08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407a0c:	f002 fe24 	bl	40a658 <__aeabi_dmul>
  407a10:	4652      	mov	r2, sl
  407a12:	465b      	mov	r3, fp
  407a14:	f003 f8a6 	bl	40ab64 <__aeabi_dcmpge>
  407a18:	f8dd 8018 	ldr.w	r8, [sp, #24]
  407a1c:	4646      	mov	r6, r8
  407a1e:	2800      	cmp	r0, #0
  407a20:	f000 80f2 	beq.w	407c08 <_dtoa_r+0xa48>
  407a24:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407a26:	9d07      	ldr	r5, [sp, #28]
  407a28:	43db      	mvns	r3, r3
  407a2a:	9304      	str	r3, [sp, #16]
  407a2c:	4641      	mov	r1, r8
  407a2e:	4648      	mov	r0, r9
  407a30:	f001 fc78 	bl	409324 <_Bfree>
  407a34:	2e00      	cmp	r6, #0
  407a36:	f43f ad8e 	beq.w	407556 <_dtoa_r+0x396>
  407a3a:	e68d      	b.n	407758 <_dtoa_r+0x598>
  407a3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  407a3e:	2a00      	cmp	r2, #0
  407a40:	f000 8241 	beq.w	407ec6 <_dtoa_r+0xd06>
  407a44:	f203 4333 	addw	r3, r3, #1075	; 0x433
  407a48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407a4a:	9d05      	ldr	r5, [sp, #20]
  407a4c:	e5ab      	b.n	4075a6 <_dtoa_r+0x3e6>
  407a4e:	201c      	movs	r0, #28
  407a50:	9b05      	ldr	r3, [sp, #20]
  407a52:	4403      	add	r3, r0
  407a54:	9305      	str	r3, [sp, #20]
  407a56:	9b02      	ldr	r3, [sp, #8]
  407a58:	4403      	add	r3, r0
  407a5a:	4405      	add	r5, r0
  407a5c:	9302      	str	r3, [sp, #8]
  407a5e:	e60e      	b.n	40767e <_dtoa_r+0x4be>
  407a60:	9b20      	ldr	r3, [sp, #128]	; 0x80
  407a62:	2b01      	cmp	r3, #1
  407a64:	f340 8282 	ble.w	407f6c <_dtoa_r+0xdac>
  407a68:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  407a6a:	2001      	movs	r0, #1
  407a6c:	e5f3      	b.n	407656 <_dtoa_r+0x496>
  407a6e:	bf00      	nop
  407a70:	0040c1f8 	.word	0x0040c1f8
  407a74:	0040c2c0 	.word	0x0040c2c0
  407a78:	3ff00000 	.word	0x3ff00000
  407a7c:	401c0000 	.word	0x401c0000
  407a80:	3fe00000 	.word	0x3fe00000
  407a84:	40240000 	.word	0x40240000
  407a88:	40140000 	.word	0x40140000
  407a8c:	4631      	mov	r1, r6
  407a8e:	2300      	movs	r3, #0
  407a90:	220a      	movs	r2, #10
  407a92:	4648      	mov	r0, r9
  407a94:	f001 fc50 	bl	409338 <__multadd>
  407a98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407a9a:	2b00      	cmp	r3, #0
  407a9c:	4606      	mov	r6, r0
  407a9e:	f340 8297 	ble.w	407fd0 <_dtoa_r+0xe10>
  407aa2:	9306      	str	r3, [sp, #24]
  407aa4:	2d00      	cmp	r5, #0
  407aa6:	dd05      	ble.n	407ab4 <_dtoa_r+0x8f4>
  407aa8:	4631      	mov	r1, r6
  407aaa:	462a      	mov	r2, r5
  407aac:	4648      	mov	r0, r9
  407aae:	f001 fdc3 	bl	409638 <__lshift>
  407ab2:	4606      	mov	r6, r0
  407ab4:	2f00      	cmp	r7, #0
  407ab6:	f040 817c 	bne.w	407db2 <_dtoa_r+0xbf2>
  407aba:	9605      	str	r6, [sp, #20]
  407abc:	9b06      	ldr	r3, [sp, #24]
  407abe:	9a07      	ldr	r2, [sp, #28]
  407ac0:	f8dd b014 	ldr.w	fp, [sp, #20]
  407ac4:	3b01      	subs	r3, #1
  407ac6:	18d3      	adds	r3, r2, r3
  407ac8:	9308      	str	r3, [sp, #32]
  407aca:	f00a 0301 	and.w	r3, sl, #1
  407ace:	9309      	str	r3, [sp, #36]	; 0x24
  407ad0:	4617      	mov	r7, r2
  407ad2:	46c2      	mov	sl, r8
  407ad4:	4651      	mov	r1, sl
  407ad6:	4620      	mov	r0, r4
  407ad8:	f7ff fade 	bl	407098 <quorem>
  407adc:	4631      	mov	r1, r6
  407ade:	4605      	mov	r5, r0
  407ae0:	4620      	mov	r0, r4
  407ae2:	f001 fe01 	bl	4096e8 <__mcmp>
  407ae6:	465a      	mov	r2, fp
  407ae8:	9002      	str	r0, [sp, #8]
  407aea:	4651      	mov	r1, sl
  407aec:	4648      	mov	r0, r9
  407aee:	f001 fe1b 	bl	409728 <__mdiff>
  407af2:	68c2      	ldr	r2, [r0, #12]
  407af4:	4680      	mov	r8, r0
  407af6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  407afa:	2a00      	cmp	r2, #0
  407afc:	d149      	bne.n	407b92 <_dtoa_r+0x9d2>
  407afe:	4601      	mov	r1, r0
  407b00:	4620      	mov	r0, r4
  407b02:	9306      	str	r3, [sp, #24]
  407b04:	f001 fdf0 	bl	4096e8 <__mcmp>
  407b08:	4641      	mov	r1, r8
  407b0a:	9005      	str	r0, [sp, #20]
  407b0c:	4648      	mov	r0, r9
  407b0e:	f001 fc09 	bl	409324 <_Bfree>
  407b12:	9a05      	ldr	r2, [sp, #20]
  407b14:	9b06      	ldr	r3, [sp, #24]
  407b16:	b92a      	cbnz	r2, 407b24 <_dtoa_r+0x964>
  407b18:	9920      	ldr	r1, [sp, #128]	; 0x80
  407b1a:	b919      	cbnz	r1, 407b24 <_dtoa_r+0x964>
  407b1c:	9909      	ldr	r1, [sp, #36]	; 0x24
  407b1e:	2900      	cmp	r1, #0
  407b20:	f000 8236 	beq.w	407f90 <_dtoa_r+0xdd0>
  407b24:	9902      	ldr	r1, [sp, #8]
  407b26:	2900      	cmp	r1, #0
  407b28:	f2c0 80e4 	blt.w	407cf4 <_dtoa_r+0xb34>
  407b2c:	d105      	bne.n	407b3a <_dtoa_r+0x97a>
  407b2e:	9920      	ldr	r1, [sp, #128]	; 0x80
  407b30:	b919      	cbnz	r1, 407b3a <_dtoa_r+0x97a>
  407b32:	9909      	ldr	r1, [sp, #36]	; 0x24
  407b34:	2900      	cmp	r1, #0
  407b36:	f000 80dd 	beq.w	407cf4 <_dtoa_r+0xb34>
  407b3a:	2a00      	cmp	r2, #0
  407b3c:	f300 814d 	bgt.w	407dda <_dtoa_r+0xc1a>
  407b40:	9a08      	ldr	r2, [sp, #32]
  407b42:	703b      	strb	r3, [r7, #0]
  407b44:	f107 0801 	add.w	r8, r7, #1
  407b48:	4297      	cmp	r7, r2
  407b4a:	4645      	mov	r5, r8
  407b4c:	f000 8154 	beq.w	407df8 <_dtoa_r+0xc38>
  407b50:	4621      	mov	r1, r4
  407b52:	2300      	movs	r3, #0
  407b54:	220a      	movs	r2, #10
  407b56:	4648      	mov	r0, r9
  407b58:	f001 fbee 	bl	409338 <__multadd>
  407b5c:	455e      	cmp	r6, fp
  407b5e:	4604      	mov	r4, r0
  407b60:	4631      	mov	r1, r6
  407b62:	f04f 0300 	mov.w	r3, #0
  407b66:	f04f 020a 	mov.w	r2, #10
  407b6a:	4648      	mov	r0, r9
  407b6c:	d00b      	beq.n	407b86 <_dtoa_r+0x9c6>
  407b6e:	f001 fbe3 	bl	409338 <__multadd>
  407b72:	4659      	mov	r1, fp
  407b74:	4606      	mov	r6, r0
  407b76:	2300      	movs	r3, #0
  407b78:	220a      	movs	r2, #10
  407b7a:	4648      	mov	r0, r9
  407b7c:	f001 fbdc 	bl	409338 <__multadd>
  407b80:	4647      	mov	r7, r8
  407b82:	4683      	mov	fp, r0
  407b84:	e7a6      	b.n	407ad4 <_dtoa_r+0x914>
  407b86:	f001 fbd7 	bl	409338 <__multadd>
  407b8a:	4647      	mov	r7, r8
  407b8c:	4606      	mov	r6, r0
  407b8e:	4683      	mov	fp, r0
  407b90:	e7a0      	b.n	407ad4 <_dtoa_r+0x914>
  407b92:	4601      	mov	r1, r0
  407b94:	4648      	mov	r0, r9
  407b96:	9305      	str	r3, [sp, #20]
  407b98:	f001 fbc4 	bl	409324 <_Bfree>
  407b9c:	2201      	movs	r2, #1
  407b9e:	9b05      	ldr	r3, [sp, #20]
  407ba0:	e7c0      	b.n	407b24 <_dtoa_r+0x964>
  407ba2:	4641      	mov	r1, r8
  407ba4:	4620      	mov	r0, r4
  407ba6:	f001 fd9f 	bl	4096e8 <__mcmp>
  407baa:	2800      	cmp	r0, #0
  407bac:	f6bf ad7d 	bge.w	4076aa <_dtoa_r+0x4ea>
  407bb0:	4621      	mov	r1, r4
  407bb2:	9c04      	ldr	r4, [sp, #16]
  407bb4:	2300      	movs	r3, #0
  407bb6:	3c01      	subs	r4, #1
  407bb8:	220a      	movs	r2, #10
  407bba:	4648      	mov	r0, r9
  407bbc:	9404      	str	r4, [sp, #16]
  407bbe:	f001 fbbb 	bl	409338 <__multadd>
  407bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407bc4:	4604      	mov	r4, r0
  407bc6:	2b00      	cmp	r3, #0
  407bc8:	f47f af60 	bne.w	407a8c <_dtoa_r+0x8cc>
  407bcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407bce:	2b00      	cmp	r3, #0
  407bd0:	f340 81f6 	ble.w	407fc0 <_dtoa_r+0xe00>
  407bd4:	9306      	str	r3, [sp, #24]
  407bd6:	e570      	b.n	4076ba <_dtoa_r+0x4fa>
  407bd8:	9c08      	ldr	r4, [sp, #32]
  407bda:	e51f      	b.n	40761c <_dtoa_r+0x45c>
  407bdc:	9b20      	ldr	r3, [sp, #128]	; 0x80
  407bde:	2b02      	cmp	r3, #2
  407be0:	f77f ad67 	ble.w	4076b2 <_dtoa_r+0x4f2>
  407be4:	9b06      	ldr	r3, [sp, #24]
  407be6:	2b00      	cmp	r3, #0
  407be8:	f040 8179 	bne.w	407ede <_dtoa_r+0xd1e>
  407bec:	4641      	mov	r1, r8
  407bee:	2205      	movs	r2, #5
  407bf0:	4648      	mov	r0, r9
  407bf2:	f001 fba1 	bl	409338 <__multadd>
  407bf6:	4601      	mov	r1, r0
  407bf8:	4680      	mov	r8, r0
  407bfa:	4620      	mov	r0, r4
  407bfc:	f001 fd74 	bl	4096e8 <__mcmp>
  407c00:	2800      	cmp	r0, #0
  407c02:	9408      	str	r4, [sp, #32]
  407c04:	f77f af0e 	ble.w	407a24 <_dtoa_r+0x864>
  407c08:	9a04      	ldr	r2, [sp, #16]
  407c0a:	9907      	ldr	r1, [sp, #28]
  407c0c:	2331      	movs	r3, #49	; 0x31
  407c0e:	3201      	adds	r2, #1
  407c10:	9204      	str	r2, [sp, #16]
  407c12:	700b      	strb	r3, [r1, #0]
  407c14:	1c4d      	adds	r5, r1, #1
  407c16:	e709      	b.n	407a2c <_dtoa_r+0x86c>
  407c18:	9a04      	ldr	r2, [sp, #16]
  407c1a:	3201      	adds	r2, #1
  407c1c:	9204      	str	r2, [sp, #16]
  407c1e:	9a07      	ldr	r2, [sp, #28]
  407c20:	2331      	movs	r3, #49	; 0x31
  407c22:	7013      	strb	r3, [r2, #0]
  407c24:	e588      	b.n	407738 <_dtoa_r+0x578>
  407c26:	2301      	movs	r3, #1
  407c28:	9309      	str	r3, [sp, #36]	; 0x24
  407c2a:	e5cd      	b.n	4077c8 <_dtoa_r+0x608>
  407c2c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  407c30:	e491      	b.n	407556 <_dtoa_r+0x396>
  407c32:	f1ba 0f00 	cmp.w	sl, #0
  407c36:	f47f ad04 	bne.w	407642 <_dtoa_r+0x482>
  407c3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
  407c3e:	2b00      	cmp	r3, #0
  407c40:	f040 813f 	bne.w	407ec2 <_dtoa_r+0xd02>
  407c44:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  407c48:	0d3f      	lsrs	r7, r7, #20
  407c4a:	053f      	lsls	r7, r7, #20
  407c4c:	b137      	cbz	r7, 407c5c <_dtoa_r+0xa9c>
  407c4e:	9b05      	ldr	r3, [sp, #20]
  407c50:	3301      	adds	r3, #1
  407c52:	9305      	str	r3, [sp, #20]
  407c54:	9b02      	ldr	r3, [sp, #8]
  407c56:	3301      	adds	r3, #1
  407c58:	9302      	str	r3, [sp, #8]
  407c5a:	2701      	movs	r7, #1
  407c5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407c5e:	2001      	movs	r0, #1
  407c60:	2b00      	cmp	r3, #0
  407c62:	f43f acf8 	beq.w	407656 <_dtoa_r+0x496>
  407c66:	e4ed      	b.n	407644 <_dtoa_r+0x484>
  407c68:	4640      	mov	r0, r8
  407c6a:	f002 fc8f 	bl	40a58c <__aeabi_i2d>
  407c6e:	4632      	mov	r2, r6
  407c70:	463b      	mov	r3, r7
  407c72:	f002 fcf1 	bl	40a658 <__aeabi_dmul>
  407c76:	2200      	movs	r2, #0
  407c78:	4bbf      	ldr	r3, [pc, #764]	; (407f78 <_dtoa_r+0xdb8>)
  407c7a:	f002 fb3b 	bl	40a2f4 <__adddf3>
  407c7e:	4604      	mov	r4, r0
  407c80:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  407c84:	4630      	mov	r0, r6
  407c86:	4639      	mov	r1, r7
  407c88:	2200      	movs	r2, #0
  407c8a:	4bbc      	ldr	r3, [pc, #752]	; (407f7c <_dtoa_r+0xdbc>)
  407c8c:	f002 fb30 	bl	40a2f0 <__aeabi_dsub>
  407c90:	4622      	mov	r2, r4
  407c92:	462b      	mov	r3, r5
  407c94:	4606      	mov	r6, r0
  407c96:	460f      	mov	r7, r1
  407c98:	f002 ff6e 	bl	40ab78 <__aeabi_dcmpgt>
  407c9c:	4680      	mov	r8, r0
  407c9e:	2800      	cmp	r0, #0
  407ca0:	f040 8105 	bne.w	407eae <_dtoa_r+0xcee>
  407ca4:	4622      	mov	r2, r4
  407ca6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  407caa:	4630      	mov	r0, r6
  407cac:	4639      	mov	r1, r7
  407cae:	f002 ff45 	bl	40ab3c <__aeabi_dcmplt>
  407cb2:	b108      	cbz	r0, 407cb8 <_dtoa_r+0xaf8>
  407cb4:	4646      	mov	r6, r8
  407cb6:	e6b5      	b.n	407a24 <_dtoa_r+0x864>
  407cb8:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  407cbc:	f7ff bb89 	b.w	4073d2 <_dtoa_r+0x212>
  407cc0:	9807      	ldr	r0, [sp, #28]
  407cc2:	f7ff baae 	b.w	407222 <_dtoa_r+0x62>
  407cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407cc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407cca:	970a      	str	r7, [sp, #40]	; 0x28
  407ccc:	1afb      	subs	r3, r7, r3
  407cce:	441a      	add	r2, r3
  407cd0:	920b      	str	r2, [sp, #44]	; 0x2c
  407cd2:	2700      	movs	r7, #0
  407cd4:	e461      	b.n	40759a <_dtoa_r+0x3da>
  407cd6:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  407cda:	f04f 0802 	mov.w	r8, #2
  407cde:	e5bb      	b.n	407858 <_dtoa_r+0x698>
  407ce0:	461c      	mov	r4, r3
  407ce2:	2100      	movs	r1, #0
  407ce4:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  407ce8:	e58a      	b.n	407800 <_dtoa_r+0x640>
  407cea:	2401      	movs	r4, #1
  407cec:	9421      	str	r4, [sp, #132]	; 0x84
  407cee:	940d      	str	r4, [sp, #52]	; 0x34
  407cf0:	9406      	str	r4, [sp, #24]
  407cf2:	e7f6      	b.n	407ce2 <_dtoa_r+0xb22>
  407cf4:	2a00      	cmp	r2, #0
  407cf6:	46d0      	mov	r8, sl
  407cf8:	f8cd b014 	str.w	fp, [sp, #20]
  407cfc:	469a      	mov	sl, r3
  407cfe:	dd11      	ble.n	407d24 <_dtoa_r+0xb64>
  407d00:	4621      	mov	r1, r4
  407d02:	2201      	movs	r2, #1
  407d04:	4648      	mov	r0, r9
  407d06:	f001 fc97 	bl	409638 <__lshift>
  407d0a:	4641      	mov	r1, r8
  407d0c:	4604      	mov	r4, r0
  407d0e:	f001 fceb 	bl	4096e8 <__mcmp>
  407d12:	2800      	cmp	r0, #0
  407d14:	f340 8149 	ble.w	407faa <_dtoa_r+0xdea>
  407d18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  407d1c:	f000 8106 	beq.w	407f2c <_dtoa_r+0xd6c>
  407d20:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  407d24:	46b3      	mov	fp, r6
  407d26:	f887 a000 	strb.w	sl, [r7]
  407d2a:	1c7d      	adds	r5, r7, #1
  407d2c:	9e05      	ldr	r6, [sp, #20]
  407d2e:	9408      	str	r4, [sp, #32]
  407d30:	e502      	b.n	407738 <_dtoa_r+0x578>
  407d32:	d104      	bne.n	407d3e <_dtoa_r+0xb7e>
  407d34:	f01a 0f01 	tst.w	sl, #1
  407d38:	d001      	beq.n	407d3e <_dtoa_r+0xb7e>
  407d3a:	e4ed      	b.n	407718 <_dtoa_r+0x558>
  407d3c:	4615      	mov	r5, r2
  407d3e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407d42:	2b30      	cmp	r3, #48	; 0x30
  407d44:	f105 32ff 	add.w	r2, r5, #4294967295
  407d48:	d0f8      	beq.n	407d3c <_dtoa_r+0xb7c>
  407d4a:	e4f5      	b.n	407738 <_dtoa_r+0x578>
  407d4c:	9b04      	ldr	r3, [sp, #16]
  407d4e:	425c      	negs	r4, r3
  407d50:	2c00      	cmp	r4, #0
  407d52:	f000 80bf 	beq.w	407ed4 <_dtoa_r+0xd14>
  407d56:	4b8a      	ldr	r3, [pc, #552]	; (407f80 <_dtoa_r+0xdc0>)
  407d58:	f004 020f 	and.w	r2, r4, #15
  407d5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407d60:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  407d68:	f002 fc76 	bl	40a658 <__aeabi_dmul>
  407d6c:	1124      	asrs	r4, r4, #4
  407d6e:	4606      	mov	r6, r0
  407d70:	460f      	mov	r7, r1
  407d72:	f000 812a 	beq.w	407fca <_dtoa_r+0xe0a>
  407d76:	4d83      	ldr	r5, [pc, #524]	; (407f84 <_dtoa_r+0xdc4>)
  407d78:	f04f 0802 	mov.w	r8, #2
  407d7c:	07e2      	lsls	r2, r4, #31
  407d7e:	d509      	bpl.n	407d94 <_dtoa_r+0xbd4>
  407d80:	4630      	mov	r0, r6
  407d82:	4639      	mov	r1, r7
  407d84:	e9d5 2300 	ldrd	r2, r3, [r5]
  407d88:	f002 fc66 	bl	40a658 <__aeabi_dmul>
  407d8c:	f108 0801 	add.w	r8, r8, #1
  407d90:	4606      	mov	r6, r0
  407d92:	460f      	mov	r7, r1
  407d94:	1064      	asrs	r4, r4, #1
  407d96:	f105 0508 	add.w	r5, r5, #8
  407d9a:	d1ef      	bne.n	407d7c <_dtoa_r+0xbbc>
  407d9c:	e576      	b.n	40788c <_dtoa_r+0x6cc>
  407d9e:	9907      	ldr	r1, [sp, #28]
  407da0:	2230      	movs	r2, #48	; 0x30
  407da2:	700a      	strb	r2, [r1, #0]
  407da4:	9a04      	ldr	r2, [sp, #16]
  407da6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  407daa:	3201      	adds	r2, #1
  407dac:	9204      	str	r2, [sp, #16]
  407dae:	f7ff bbd0 	b.w	407552 <_dtoa_r+0x392>
  407db2:	6871      	ldr	r1, [r6, #4]
  407db4:	4648      	mov	r0, r9
  407db6:	f001 fa8f 	bl	4092d8 <_Balloc>
  407dba:	6933      	ldr	r3, [r6, #16]
  407dbc:	1c9a      	adds	r2, r3, #2
  407dbe:	4605      	mov	r5, r0
  407dc0:	0092      	lsls	r2, r2, #2
  407dc2:	f106 010c 	add.w	r1, r6, #12
  407dc6:	300c      	adds	r0, #12
  407dc8:	f001 f984 	bl	4090d4 <memcpy>
  407dcc:	4629      	mov	r1, r5
  407dce:	2201      	movs	r2, #1
  407dd0:	4648      	mov	r0, r9
  407dd2:	f001 fc31 	bl	409638 <__lshift>
  407dd6:	9005      	str	r0, [sp, #20]
  407dd8:	e670      	b.n	407abc <_dtoa_r+0x8fc>
  407dda:	2b39      	cmp	r3, #57	; 0x39
  407ddc:	f8cd b014 	str.w	fp, [sp, #20]
  407de0:	46d0      	mov	r8, sl
  407de2:	f000 80a3 	beq.w	407f2c <_dtoa_r+0xd6c>
  407de6:	f103 0a01 	add.w	sl, r3, #1
  407dea:	46b3      	mov	fp, r6
  407dec:	f887 a000 	strb.w	sl, [r7]
  407df0:	1c7d      	adds	r5, r7, #1
  407df2:	9e05      	ldr	r6, [sp, #20]
  407df4:	9408      	str	r4, [sp, #32]
  407df6:	e49f      	b.n	407738 <_dtoa_r+0x578>
  407df8:	465a      	mov	r2, fp
  407dfa:	46d0      	mov	r8, sl
  407dfc:	46b3      	mov	fp, r6
  407dfe:	469a      	mov	sl, r3
  407e00:	4616      	mov	r6, r2
  407e02:	e47d      	b.n	407700 <_dtoa_r+0x540>
  407e04:	495e      	ldr	r1, [pc, #376]	; (407f80 <_dtoa_r+0xdc0>)
  407e06:	f108 3aff 	add.w	sl, r8, #4294967295
  407e0a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  407e0e:	4622      	mov	r2, r4
  407e10:	462b      	mov	r3, r5
  407e12:	e9d1 0100 	ldrd	r0, r1, [r1]
  407e16:	f002 fc1f 	bl	40a658 <__aeabi_dmul>
  407e1a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  407e1e:	4639      	mov	r1, r7
  407e20:	4630      	mov	r0, r6
  407e22:	f002 fec9 	bl	40abb8 <__aeabi_d2iz>
  407e26:	4604      	mov	r4, r0
  407e28:	f002 fbb0 	bl	40a58c <__aeabi_i2d>
  407e2c:	4602      	mov	r2, r0
  407e2e:	460b      	mov	r3, r1
  407e30:	4630      	mov	r0, r6
  407e32:	4639      	mov	r1, r7
  407e34:	f002 fa5c 	bl	40a2f0 <__aeabi_dsub>
  407e38:	9a07      	ldr	r2, [sp, #28]
  407e3a:	3430      	adds	r4, #48	; 0x30
  407e3c:	f1b8 0f01 	cmp.w	r8, #1
  407e40:	4606      	mov	r6, r0
  407e42:	460f      	mov	r7, r1
  407e44:	7014      	strb	r4, [r2, #0]
  407e46:	f102 0501 	add.w	r5, r2, #1
  407e4a:	d01e      	beq.n	407e8a <_dtoa_r+0xcca>
  407e4c:	9b07      	ldr	r3, [sp, #28]
  407e4e:	eb03 0b08 	add.w	fp, r3, r8
  407e52:	46a8      	mov	r8, r5
  407e54:	2200      	movs	r2, #0
  407e56:	4b4c      	ldr	r3, [pc, #304]	; (407f88 <_dtoa_r+0xdc8>)
  407e58:	4630      	mov	r0, r6
  407e5a:	4639      	mov	r1, r7
  407e5c:	f002 fbfc 	bl	40a658 <__aeabi_dmul>
  407e60:	460f      	mov	r7, r1
  407e62:	4606      	mov	r6, r0
  407e64:	f002 fea8 	bl	40abb8 <__aeabi_d2iz>
  407e68:	4604      	mov	r4, r0
  407e6a:	f002 fb8f 	bl	40a58c <__aeabi_i2d>
  407e6e:	3430      	adds	r4, #48	; 0x30
  407e70:	4602      	mov	r2, r0
  407e72:	460b      	mov	r3, r1
  407e74:	4630      	mov	r0, r6
  407e76:	4639      	mov	r1, r7
  407e78:	f002 fa3a 	bl	40a2f0 <__aeabi_dsub>
  407e7c:	f808 4b01 	strb.w	r4, [r8], #1
  407e80:	45c3      	cmp	fp, r8
  407e82:	4606      	mov	r6, r0
  407e84:	460f      	mov	r7, r1
  407e86:	d1e5      	bne.n	407e54 <_dtoa_r+0xc94>
  407e88:	4455      	add	r5, sl
  407e8a:	2200      	movs	r2, #0
  407e8c:	4b3f      	ldr	r3, [pc, #252]	; (407f8c <_dtoa_r+0xdcc>)
  407e8e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  407e92:	f002 fa2f 	bl	40a2f4 <__adddf3>
  407e96:	4632      	mov	r2, r6
  407e98:	463b      	mov	r3, r7
  407e9a:	f002 fe4f 	bl	40ab3c <__aeabi_dcmplt>
  407e9e:	2800      	cmp	r0, #0
  407ea0:	d04c      	beq.n	407f3c <_dtoa_r+0xd7c>
  407ea2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407ea4:	9304      	str	r3, [sp, #16]
  407ea6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  407eaa:	f7ff bb46 	b.w	40753a <_dtoa_r+0x37a>
  407eae:	f04f 0800 	mov.w	r8, #0
  407eb2:	4646      	mov	r6, r8
  407eb4:	e6a8      	b.n	407c08 <_dtoa_r+0xa48>
  407eb6:	9b05      	ldr	r3, [sp, #20]
  407eb8:	9a06      	ldr	r2, [sp, #24]
  407eba:	1a9d      	subs	r5, r3, r2
  407ebc:	2300      	movs	r3, #0
  407ebe:	f7ff bb72 	b.w	4075a6 <_dtoa_r+0x3e6>
  407ec2:	2700      	movs	r7, #0
  407ec4:	e6ca      	b.n	407c5c <_dtoa_r+0xa9c>
  407ec6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407ec8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407eca:	9d05      	ldr	r5, [sp, #20]
  407ecc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  407ed0:	f7ff bb69 	b.w	4075a6 <_dtoa_r+0x3e6>
  407ed4:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  407ed8:	f04f 0802 	mov.w	r8, #2
  407edc:	e4d6      	b.n	40788c <_dtoa_r+0x6cc>
  407ede:	9408      	str	r4, [sp, #32]
  407ee0:	e5a0      	b.n	407a24 <_dtoa_r+0x864>
  407ee2:	9b06      	ldr	r3, [sp, #24]
  407ee4:	2b00      	cmp	r3, #0
  407ee6:	f43f aebf 	beq.w	407c68 <_dtoa_r+0xaa8>
  407eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407eec:	2b00      	cmp	r3, #0
  407eee:	f77f aee3 	ble.w	407cb8 <_dtoa_r+0xaf8>
  407ef2:	2200      	movs	r2, #0
  407ef4:	4b24      	ldr	r3, [pc, #144]	; (407f88 <_dtoa_r+0xdc8>)
  407ef6:	4630      	mov	r0, r6
  407ef8:	4639      	mov	r1, r7
  407efa:	f002 fbad 	bl	40a658 <__aeabi_dmul>
  407efe:	4606      	mov	r6, r0
  407f00:	460f      	mov	r7, r1
  407f02:	f108 0001 	add.w	r0, r8, #1
  407f06:	f002 fb41 	bl	40a58c <__aeabi_i2d>
  407f0a:	4632      	mov	r2, r6
  407f0c:	463b      	mov	r3, r7
  407f0e:	f002 fba3 	bl	40a658 <__aeabi_dmul>
  407f12:	2200      	movs	r2, #0
  407f14:	4b18      	ldr	r3, [pc, #96]	; (407f78 <_dtoa_r+0xdb8>)
  407f16:	f002 f9ed 	bl	40a2f4 <__adddf3>
  407f1a:	9a04      	ldr	r2, [sp, #16]
  407f1c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  407f20:	3a01      	subs	r2, #1
  407f22:	4604      	mov	r4, r0
  407f24:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  407f28:	9211      	str	r2, [sp, #68]	; 0x44
  407f2a:	e4d0      	b.n	4078ce <_dtoa_r+0x70e>
  407f2c:	2239      	movs	r2, #57	; 0x39
  407f2e:	46b3      	mov	fp, r6
  407f30:	9408      	str	r4, [sp, #32]
  407f32:	9e05      	ldr	r6, [sp, #20]
  407f34:	703a      	strb	r2, [r7, #0]
  407f36:	1c7d      	adds	r5, r7, #1
  407f38:	f7ff bbf0 	b.w	40771c <_dtoa_r+0x55c>
  407f3c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  407f40:	2000      	movs	r0, #0
  407f42:	4912      	ldr	r1, [pc, #72]	; (407f8c <_dtoa_r+0xdcc>)
  407f44:	f002 f9d4 	bl	40a2f0 <__aeabi_dsub>
  407f48:	4632      	mov	r2, r6
  407f4a:	463b      	mov	r3, r7
  407f4c:	f002 fe14 	bl	40ab78 <__aeabi_dcmpgt>
  407f50:	b908      	cbnz	r0, 407f56 <_dtoa_r+0xd96>
  407f52:	e6b1      	b.n	407cb8 <_dtoa_r+0xaf8>
  407f54:	4615      	mov	r5, r2
  407f56:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407f5a:	2b30      	cmp	r3, #48	; 0x30
  407f5c:	f105 32ff 	add.w	r2, r5, #4294967295
  407f60:	d0f8      	beq.n	407f54 <_dtoa_r+0xd94>
  407f62:	e530      	b.n	4079c6 <_dtoa_r+0x806>
  407f64:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407f66:	9304      	str	r3, [sp, #16]
  407f68:	f7ff bae7 	b.w	40753a <_dtoa_r+0x37a>
  407f6c:	f1ba 0f00 	cmp.w	sl, #0
  407f70:	f47f ad7a 	bne.w	407a68 <_dtoa_r+0x8a8>
  407f74:	e661      	b.n	407c3a <_dtoa_r+0xa7a>
  407f76:	bf00      	nop
  407f78:	401c0000 	.word	0x401c0000
  407f7c:	40140000 	.word	0x40140000
  407f80:	0040c1f8 	.word	0x0040c1f8
  407f84:	0040c2c0 	.word	0x0040c2c0
  407f88:	40240000 	.word	0x40240000
  407f8c:	3fe00000 	.word	0x3fe00000
  407f90:	2b39      	cmp	r3, #57	; 0x39
  407f92:	f8cd b014 	str.w	fp, [sp, #20]
  407f96:	46d0      	mov	r8, sl
  407f98:	f8dd b008 	ldr.w	fp, [sp, #8]
  407f9c:	469a      	mov	sl, r3
  407f9e:	d0c5      	beq.n	407f2c <_dtoa_r+0xd6c>
  407fa0:	f1bb 0f00 	cmp.w	fp, #0
  407fa4:	f73f aebc 	bgt.w	407d20 <_dtoa_r+0xb60>
  407fa8:	e6bc      	b.n	407d24 <_dtoa_r+0xb64>
  407faa:	f47f aebb 	bne.w	407d24 <_dtoa_r+0xb64>
  407fae:	f01a 0f01 	tst.w	sl, #1
  407fb2:	f43f aeb7 	beq.w	407d24 <_dtoa_r+0xb64>
  407fb6:	e6af      	b.n	407d18 <_dtoa_r+0xb58>
  407fb8:	f04f 0800 	mov.w	r8, #0
  407fbc:	4646      	mov	r6, r8
  407fbe:	e531      	b.n	407a24 <_dtoa_r+0x864>
  407fc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
  407fc2:	2b02      	cmp	r3, #2
  407fc4:	dc21      	bgt.n	40800a <_dtoa_r+0xe4a>
  407fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407fc8:	e604      	b.n	407bd4 <_dtoa_r+0xa14>
  407fca:	f04f 0802 	mov.w	r8, #2
  407fce:	e45d      	b.n	40788c <_dtoa_r+0x6cc>
  407fd0:	9b20      	ldr	r3, [sp, #128]	; 0x80
  407fd2:	2b02      	cmp	r3, #2
  407fd4:	dc19      	bgt.n	40800a <_dtoa_r+0xe4a>
  407fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407fd8:	e563      	b.n	407aa2 <_dtoa_r+0x8e2>
  407fda:	2400      	movs	r4, #0
  407fdc:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  407fe0:	4621      	mov	r1, r4
  407fe2:	4648      	mov	r0, r9
  407fe4:	f001 f978 	bl	4092d8 <_Balloc>
  407fe8:	f04f 33ff 	mov.w	r3, #4294967295
  407fec:	9306      	str	r3, [sp, #24]
  407fee:	930d      	str	r3, [sp, #52]	; 0x34
  407ff0:	2301      	movs	r3, #1
  407ff2:	9007      	str	r0, [sp, #28]
  407ff4:	9421      	str	r4, [sp, #132]	; 0x84
  407ff6:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  407ffa:	9309      	str	r3, [sp, #36]	; 0x24
  407ffc:	f7ff b9e9 	b.w	4073d2 <_dtoa_r+0x212>
  408000:	f43f ab3d 	beq.w	40767e <_dtoa_r+0x4be>
  408004:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  408008:	e522      	b.n	407a50 <_dtoa_r+0x890>
  40800a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40800c:	9306      	str	r3, [sp, #24]
  40800e:	e5e9      	b.n	407be4 <_dtoa_r+0xa24>
  408010:	2501      	movs	r5, #1
  408012:	f7ff b9a8 	b.w	407366 <_dtoa_r+0x1a6>
  408016:	bf00      	nop

00408018 <__sflush_r>:
  408018:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40801c:	b29a      	uxth	r2, r3
  40801e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408022:	460d      	mov	r5, r1
  408024:	0711      	lsls	r1, r2, #28
  408026:	4680      	mov	r8, r0
  408028:	d43c      	bmi.n	4080a4 <__sflush_r+0x8c>
  40802a:	686a      	ldr	r2, [r5, #4]
  40802c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  408030:	2a00      	cmp	r2, #0
  408032:	81ab      	strh	r3, [r5, #12]
  408034:	dd73      	ble.n	40811e <__sflush_r+0x106>
  408036:	6aac      	ldr	r4, [r5, #40]	; 0x28
  408038:	2c00      	cmp	r4, #0
  40803a:	d04b      	beq.n	4080d4 <__sflush_r+0xbc>
  40803c:	b29b      	uxth	r3, r3
  40803e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  408042:	2100      	movs	r1, #0
  408044:	b292      	uxth	r2, r2
  408046:	f8d8 6000 	ldr.w	r6, [r8]
  40804a:	f8c8 1000 	str.w	r1, [r8]
  40804e:	2a00      	cmp	r2, #0
  408050:	d069      	beq.n	408126 <__sflush_r+0x10e>
  408052:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  408054:	075f      	lsls	r7, r3, #29
  408056:	d505      	bpl.n	408064 <__sflush_r+0x4c>
  408058:	6869      	ldr	r1, [r5, #4]
  40805a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40805c:	1a52      	subs	r2, r2, r1
  40805e:	b10b      	cbz	r3, 408064 <__sflush_r+0x4c>
  408060:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  408062:	1ad2      	subs	r2, r2, r3
  408064:	2300      	movs	r3, #0
  408066:	69e9      	ldr	r1, [r5, #28]
  408068:	4640      	mov	r0, r8
  40806a:	47a0      	blx	r4
  40806c:	1c44      	adds	r4, r0, #1
  40806e:	d03c      	beq.n	4080ea <__sflush_r+0xd2>
  408070:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  408074:	692a      	ldr	r2, [r5, #16]
  408076:	602a      	str	r2, [r5, #0]
  408078:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40807c:	2200      	movs	r2, #0
  40807e:	81ab      	strh	r3, [r5, #12]
  408080:	04db      	lsls	r3, r3, #19
  408082:	606a      	str	r2, [r5, #4]
  408084:	d449      	bmi.n	40811a <__sflush_r+0x102>
  408086:	6b29      	ldr	r1, [r5, #48]	; 0x30
  408088:	f8c8 6000 	str.w	r6, [r8]
  40808c:	b311      	cbz	r1, 4080d4 <__sflush_r+0xbc>
  40808e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  408092:	4299      	cmp	r1, r3
  408094:	d002      	beq.n	40809c <__sflush_r+0x84>
  408096:	4640      	mov	r0, r8
  408098:	f000 f9c0 	bl	40841c <_free_r>
  40809c:	2000      	movs	r0, #0
  40809e:	6328      	str	r0, [r5, #48]	; 0x30
  4080a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4080a4:	692e      	ldr	r6, [r5, #16]
  4080a6:	b1ae      	cbz	r6, 4080d4 <__sflush_r+0xbc>
  4080a8:	682c      	ldr	r4, [r5, #0]
  4080aa:	602e      	str	r6, [r5, #0]
  4080ac:	0790      	lsls	r0, r2, #30
  4080ae:	bf0c      	ite	eq
  4080b0:	696b      	ldreq	r3, [r5, #20]
  4080b2:	2300      	movne	r3, #0
  4080b4:	1ba4      	subs	r4, r4, r6
  4080b6:	60ab      	str	r3, [r5, #8]
  4080b8:	e00a      	b.n	4080d0 <__sflush_r+0xb8>
  4080ba:	4623      	mov	r3, r4
  4080bc:	4632      	mov	r2, r6
  4080be:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4080c0:	69e9      	ldr	r1, [r5, #28]
  4080c2:	4640      	mov	r0, r8
  4080c4:	47b8      	blx	r7
  4080c6:	2800      	cmp	r0, #0
  4080c8:	eba4 0400 	sub.w	r4, r4, r0
  4080cc:	4406      	add	r6, r0
  4080ce:	dd04      	ble.n	4080da <__sflush_r+0xc2>
  4080d0:	2c00      	cmp	r4, #0
  4080d2:	dcf2      	bgt.n	4080ba <__sflush_r+0xa2>
  4080d4:	2000      	movs	r0, #0
  4080d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4080da:	89ab      	ldrh	r3, [r5, #12]
  4080dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4080e0:	81ab      	strh	r3, [r5, #12]
  4080e2:	f04f 30ff 	mov.w	r0, #4294967295
  4080e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4080ea:	f8d8 2000 	ldr.w	r2, [r8]
  4080ee:	2a1d      	cmp	r2, #29
  4080f0:	d8f3      	bhi.n	4080da <__sflush_r+0xc2>
  4080f2:	4b1a      	ldr	r3, [pc, #104]	; (40815c <__sflush_r+0x144>)
  4080f4:	40d3      	lsrs	r3, r2
  4080f6:	f003 0301 	and.w	r3, r3, #1
  4080fa:	f083 0401 	eor.w	r4, r3, #1
  4080fe:	2b00      	cmp	r3, #0
  408100:	d0eb      	beq.n	4080da <__sflush_r+0xc2>
  408102:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  408106:	6929      	ldr	r1, [r5, #16]
  408108:	6029      	str	r1, [r5, #0]
  40810a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40810e:	04d9      	lsls	r1, r3, #19
  408110:	606c      	str	r4, [r5, #4]
  408112:	81ab      	strh	r3, [r5, #12]
  408114:	d5b7      	bpl.n	408086 <__sflush_r+0x6e>
  408116:	2a00      	cmp	r2, #0
  408118:	d1b5      	bne.n	408086 <__sflush_r+0x6e>
  40811a:	6528      	str	r0, [r5, #80]	; 0x50
  40811c:	e7b3      	b.n	408086 <__sflush_r+0x6e>
  40811e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  408120:	2a00      	cmp	r2, #0
  408122:	dc88      	bgt.n	408036 <__sflush_r+0x1e>
  408124:	e7d6      	b.n	4080d4 <__sflush_r+0xbc>
  408126:	2301      	movs	r3, #1
  408128:	69e9      	ldr	r1, [r5, #28]
  40812a:	4640      	mov	r0, r8
  40812c:	47a0      	blx	r4
  40812e:	1c43      	adds	r3, r0, #1
  408130:	4602      	mov	r2, r0
  408132:	d002      	beq.n	40813a <__sflush_r+0x122>
  408134:	89ab      	ldrh	r3, [r5, #12]
  408136:	6aac      	ldr	r4, [r5, #40]	; 0x28
  408138:	e78c      	b.n	408054 <__sflush_r+0x3c>
  40813a:	f8d8 3000 	ldr.w	r3, [r8]
  40813e:	2b00      	cmp	r3, #0
  408140:	d0f8      	beq.n	408134 <__sflush_r+0x11c>
  408142:	2b1d      	cmp	r3, #29
  408144:	d001      	beq.n	40814a <__sflush_r+0x132>
  408146:	2b16      	cmp	r3, #22
  408148:	d102      	bne.n	408150 <__sflush_r+0x138>
  40814a:	f8c8 6000 	str.w	r6, [r8]
  40814e:	e7c1      	b.n	4080d4 <__sflush_r+0xbc>
  408150:	89ab      	ldrh	r3, [r5, #12]
  408152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408156:	81ab      	strh	r3, [r5, #12]
  408158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40815c:	20400001 	.word	0x20400001

00408160 <_fflush_r>:
  408160:	b510      	push	{r4, lr}
  408162:	4604      	mov	r4, r0
  408164:	b082      	sub	sp, #8
  408166:	b108      	cbz	r0, 40816c <_fflush_r+0xc>
  408168:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40816a:	b153      	cbz	r3, 408182 <_fflush_r+0x22>
  40816c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  408170:	b908      	cbnz	r0, 408176 <_fflush_r+0x16>
  408172:	b002      	add	sp, #8
  408174:	bd10      	pop	{r4, pc}
  408176:	4620      	mov	r0, r4
  408178:	b002      	add	sp, #8
  40817a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40817e:	f7ff bf4b 	b.w	408018 <__sflush_r>
  408182:	9101      	str	r1, [sp, #4]
  408184:	f000 f880 	bl	408288 <__sinit>
  408188:	9901      	ldr	r1, [sp, #4]
  40818a:	e7ef      	b.n	40816c <_fflush_r+0xc>

0040818c <_cleanup_r>:
  40818c:	4901      	ldr	r1, [pc, #4]	; (408194 <_cleanup_r+0x8>)
  40818e:	f000 bbaf 	b.w	4088f0 <_fwalk_reent>
  408192:	bf00      	nop
  408194:	0040a1c1 	.word	0x0040a1c1

00408198 <__sinit.part.1>:
  408198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40819c:	4b35      	ldr	r3, [pc, #212]	; (408274 <__sinit.part.1+0xdc>)
  40819e:	6845      	ldr	r5, [r0, #4]
  4081a0:	63c3      	str	r3, [r0, #60]	; 0x3c
  4081a2:	2400      	movs	r4, #0
  4081a4:	4607      	mov	r7, r0
  4081a6:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4081aa:	2304      	movs	r3, #4
  4081ac:	2103      	movs	r1, #3
  4081ae:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4081b2:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  4081b6:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  4081ba:	b083      	sub	sp, #12
  4081bc:	602c      	str	r4, [r5, #0]
  4081be:	606c      	str	r4, [r5, #4]
  4081c0:	60ac      	str	r4, [r5, #8]
  4081c2:	666c      	str	r4, [r5, #100]	; 0x64
  4081c4:	81ec      	strh	r4, [r5, #14]
  4081c6:	612c      	str	r4, [r5, #16]
  4081c8:	616c      	str	r4, [r5, #20]
  4081ca:	61ac      	str	r4, [r5, #24]
  4081cc:	81ab      	strh	r3, [r5, #12]
  4081ce:	4621      	mov	r1, r4
  4081d0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4081d4:	2208      	movs	r2, #8
  4081d6:	f7fb ff7d 	bl	4040d4 <memset>
  4081da:	68be      	ldr	r6, [r7, #8]
  4081dc:	f8df b098 	ldr.w	fp, [pc, #152]	; 408278 <__sinit.part.1+0xe0>
  4081e0:	f8df a098 	ldr.w	sl, [pc, #152]	; 40827c <__sinit.part.1+0xe4>
  4081e4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 408280 <__sinit.part.1+0xe8>
  4081e8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 408284 <__sinit.part.1+0xec>
  4081ec:	f8c5 b020 	str.w	fp, [r5, #32]
  4081f0:	2301      	movs	r3, #1
  4081f2:	2209      	movs	r2, #9
  4081f4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4081f8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4081fc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  408200:	61ed      	str	r5, [r5, #28]
  408202:	4621      	mov	r1, r4
  408204:	81f3      	strh	r3, [r6, #14]
  408206:	81b2      	strh	r2, [r6, #12]
  408208:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40820c:	6034      	str	r4, [r6, #0]
  40820e:	6074      	str	r4, [r6, #4]
  408210:	60b4      	str	r4, [r6, #8]
  408212:	6674      	str	r4, [r6, #100]	; 0x64
  408214:	6134      	str	r4, [r6, #16]
  408216:	6174      	str	r4, [r6, #20]
  408218:	61b4      	str	r4, [r6, #24]
  40821a:	2208      	movs	r2, #8
  40821c:	9301      	str	r3, [sp, #4]
  40821e:	f7fb ff59 	bl	4040d4 <memset>
  408222:	68fd      	ldr	r5, [r7, #12]
  408224:	61f6      	str	r6, [r6, #28]
  408226:	2012      	movs	r0, #18
  408228:	2202      	movs	r2, #2
  40822a:	f8c6 b020 	str.w	fp, [r6, #32]
  40822e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  408232:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  408236:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40823a:	4621      	mov	r1, r4
  40823c:	81a8      	strh	r0, [r5, #12]
  40823e:	81ea      	strh	r2, [r5, #14]
  408240:	602c      	str	r4, [r5, #0]
  408242:	606c      	str	r4, [r5, #4]
  408244:	60ac      	str	r4, [r5, #8]
  408246:	666c      	str	r4, [r5, #100]	; 0x64
  408248:	612c      	str	r4, [r5, #16]
  40824a:	616c      	str	r4, [r5, #20]
  40824c:	61ac      	str	r4, [r5, #24]
  40824e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  408252:	2208      	movs	r2, #8
  408254:	f7fb ff3e 	bl	4040d4 <memset>
  408258:	9b01      	ldr	r3, [sp, #4]
  40825a:	61ed      	str	r5, [r5, #28]
  40825c:	f8c5 b020 	str.w	fp, [r5, #32]
  408260:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  408264:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  408268:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40826c:	63bb      	str	r3, [r7, #56]	; 0x38
  40826e:	b003      	add	sp, #12
  408270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408274:	0040818d 	.word	0x0040818d
  408278:	00409cf9 	.word	0x00409cf9
  40827c:	00409d1d 	.word	0x00409d1d
  408280:	00409d59 	.word	0x00409d59
  408284:	00409d79 	.word	0x00409d79

00408288 <__sinit>:
  408288:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40828a:	b103      	cbz	r3, 40828e <__sinit+0x6>
  40828c:	4770      	bx	lr
  40828e:	f7ff bf83 	b.w	408198 <__sinit.part.1>
  408292:	bf00      	nop

00408294 <__sfp_lock_acquire>:
  408294:	4770      	bx	lr
  408296:	bf00      	nop

00408298 <__sfp_lock_release>:
  408298:	4770      	bx	lr
  40829a:	bf00      	nop

0040829c <__libc_fini_array>:
  40829c:	b538      	push	{r3, r4, r5, lr}
  40829e:	4d07      	ldr	r5, [pc, #28]	; (4082bc <__libc_fini_array+0x20>)
  4082a0:	4c07      	ldr	r4, [pc, #28]	; (4082c0 <__libc_fini_array+0x24>)
  4082a2:	1b2c      	subs	r4, r5, r4
  4082a4:	10a4      	asrs	r4, r4, #2
  4082a6:	d005      	beq.n	4082b4 <__libc_fini_array+0x18>
  4082a8:	3c01      	subs	r4, #1
  4082aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4082ae:	4798      	blx	r3
  4082b0:	2c00      	cmp	r4, #0
  4082b2:	d1f9      	bne.n	4082a8 <__libc_fini_array+0xc>
  4082b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4082b8:	f004 b826 	b.w	40c308 <_fini>
  4082bc:	0040c318 	.word	0x0040c318
  4082c0:	0040c314 	.word	0x0040c314

004082c4 <__fputwc>:
  4082c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4082c8:	b082      	sub	sp, #8
  4082ca:	4680      	mov	r8, r0
  4082cc:	4689      	mov	r9, r1
  4082ce:	4614      	mov	r4, r2
  4082d0:	f000 fb3c 	bl	40894c <__locale_mb_cur_max>
  4082d4:	2801      	cmp	r0, #1
  4082d6:	d033      	beq.n	408340 <__fputwc+0x7c>
  4082d8:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4082dc:	464a      	mov	r2, r9
  4082de:	a901      	add	r1, sp, #4
  4082e0:	4640      	mov	r0, r8
  4082e2:	f001 fe8b 	bl	409ffc <_wcrtomb_r>
  4082e6:	f1b0 3fff 	cmp.w	r0, #4294967295
  4082ea:	4682      	mov	sl, r0
  4082ec:	d021      	beq.n	408332 <__fputwc+0x6e>
  4082ee:	b388      	cbz	r0, 408354 <__fputwc+0x90>
  4082f0:	f89d 6004 	ldrb.w	r6, [sp, #4]
  4082f4:	2500      	movs	r5, #0
  4082f6:	e008      	b.n	40830a <__fputwc+0x46>
  4082f8:	6823      	ldr	r3, [r4, #0]
  4082fa:	1c5a      	adds	r2, r3, #1
  4082fc:	6022      	str	r2, [r4, #0]
  4082fe:	701e      	strb	r6, [r3, #0]
  408300:	3501      	adds	r5, #1
  408302:	4555      	cmp	r5, sl
  408304:	d226      	bcs.n	408354 <__fputwc+0x90>
  408306:	ab01      	add	r3, sp, #4
  408308:	5d5e      	ldrb	r6, [r3, r5]
  40830a:	68a3      	ldr	r3, [r4, #8]
  40830c:	3b01      	subs	r3, #1
  40830e:	2b00      	cmp	r3, #0
  408310:	60a3      	str	r3, [r4, #8]
  408312:	daf1      	bge.n	4082f8 <__fputwc+0x34>
  408314:	69a7      	ldr	r7, [r4, #24]
  408316:	42bb      	cmp	r3, r7
  408318:	4631      	mov	r1, r6
  40831a:	4622      	mov	r2, r4
  40831c:	4640      	mov	r0, r8
  40831e:	db01      	blt.n	408324 <__fputwc+0x60>
  408320:	2e0a      	cmp	r6, #10
  408322:	d1e9      	bne.n	4082f8 <__fputwc+0x34>
  408324:	f001 fe14 	bl	409f50 <__swbuf_r>
  408328:	1c43      	adds	r3, r0, #1
  40832a:	d1e9      	bne.n	408300 <__fputwc+0x3c>
  40832c:	b002      	add	sp, #8
  40832e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408332:	89a3      	ldrh	r3, [r4, #12]
  408334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408338:	81a3      	strh	r3, [r4, #12]
  40833a:	b002      	add	sp, #8
  40833c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408340:	f109 33ff 	add.w	r3, r9, #4294967295
  408344:	2bfe      	cmp	r3, #254	; 0xfe
  408346:	d8c7      	bhi.n	4082d8 <__fputwc+0x14>
  408348:	fa5f f689 	uxtb.w	r6, r9
  40834c:	4682      	mov	sl, r0
  40834e:	f88d 6004 	strb.w	r6, [sp, #4]
  408352:	e7cf      	b.n	4082f4 <__fputwc+0x30>
  408354:	4648      	mov	r0, r9
  408356:	b002      	add	sp, #8
  408358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040835c <_fputwc_r>:
  40835c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  408360:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  408364:	d10a      	bne.n	40837c <_fputwc_r+0x20>
  408366:	b410      	push	{r4}
  408368:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40836a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40836e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  408372:	6654      	str	r4, [r2, #100]	; 0x64
  408374:	8193      	strh	r3, [r2, #12]
  408376:	bc10      	pop	{r4}
  408378:	f7ff bfa4 	b.w	4082c4 <__fputwc>
  40837c:	f7ff bfa2 	b.w	4082c4 <__fputwc>

00408380 <_malloc_trim_r>:
  408380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408382:	4f23      	ldr	r7, [pc, #140]	; (408410 <_malloc_trim_r+0x90>)
  408384:	460c      	mov	r4, r1
  408386:	4606      	mov	r6, r0
  408388:	f000 ffa2 	bl	4092d0 <__malloc_lock>
  40838c:	68bb      	ldr	r3, [r7, #8]
  40838e:	685d      	ldr	r5, [r3, #4]
  408390:	f025 0503 	bic.w	r5, r5, #3
  408394:	1b29      	subs	r1, r5, r4
  408396:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40839a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40839e:	f021 010f 	bic.w	r1, r1, #15
  4083a2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4083a6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4083aa:	db07      	blt.n	4083bc <_malloc_trim_r+0x3c>
  4083ac:	2100      	movs	r1, #0
  4083ae:	4630      	mov	r0, r6
  4083b0:	f001 fc90 	bl	409cd4 <_sbrk_r>
  4083b4:	68bb      	ldr	r3, [r7, #8]
  4083b6:	442b      	add	r3, r5
  4083b8:	4298      	cmp	r0, r3
  4083ba:	d004      	beq.n	4083c6 <_malloc_trim_r+0x46>
  4083bc:	4630      	mov	r0, r6
  4083be:	f000 ff89 	bl	4092d4 <__malloc_unlock>
  4083c2:	2000      	movs	r0, #0
  4083c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4083c6:	4261      	negs	r1, r4
  4083c8:	4630      	mov	r0, r6
  4083ca:	f001 fc83 	bl	409cd4 <_sbrk_r>
  4083ce:	3001      	adds	r0, #1
  4083d0:	d00d      	beq.n	4083ee <_malloc_trim_r+0x6e>
  4083d2:	4b10      	ldr	r3, [pc, #64]	; (408414 <_malloc_trim_r+0x94>)
  4083d4:	68ba      	ldr	r2, [r7, #8]
  4083d6:	6819      	ldr	r1, [r3, #0]
  4083d8:	1b2d      	subs	r5, r5, r4
  4083da:	f045 0501 	orr.w	r5, r5, #1
  4083de:	4630      	mov	r0, r6
  4083e0:	1b09      	subs	r1, r1, r4
  4083e2:	6055      	str	r5, [r2, #4]
  4083e4:	6019      	str	r1, [r3, #0]
  4083e6:	f000 ff75 	bl	4092d4 <__malloc_unlock>
  4083ea:	2001      	movs	r0, #1
  4083ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4083ee:	2100      	movs	r1, #0
  4083f0:	4630      	mov	r0, r6
  4083f2:	f001 fc6f 	bl	409cd4 <_sbrk_r>
  4083f6:	68ba      	ldr	r2, [r7, #8]
  4083f8:	1a83      	subs	r3, r0, r2
  4083fa:	2b0f      	cmp	r3, #15
  4083fc:	ddde      	ble.n	4083bc <_malloc_trim_r+0x3c>
  4083fe:	4c06      	ldr	r4, [pc, #24]	; (408418 <_malloc_trim_r+0x98>)
  408400:	4904      	ldr	r1, [pc, #16]	; (408414 <_malloc_trim_r+0x94>)
  408402:	6824      	ldr	r4, [r4, #0]
  408404:	f043 0301 	orr.w	r3, r3, #1
  408408:	1b00      	subs	r0, r0, r4
  40840a:	6053      	str	r3, [r2, #4]
  40840c:	6008      	str	r0, [r1, #0]
  40840e:	e7d5      	b.n	4083bc <_malloc_trim_r+0x3c>
  408410:	204004ac 	.word	0x204004ac
  408414:	20400f28 	.word	0x20400f28
  408418:	204008b8 	.word	0x204008b8

0040841c <_free_r>:
  40841c:	2900      	cmp	r1, #0
  40841e:	d045      	beq.n	4084ac <_free_r+0x90>
  408420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408424:	460d      	mov	r5, r1
  408426:	4680      	mov	r8, r0
  408428:	f000 ff52 	bl	4092d0 <__malloc_lock>
  40842c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  408430:	496a      	ldr	r1, [pc, #424]	; (4085dc <_free_r+0x1c0>)
  408432:	f027 0301 	bic.w	r3, r7, #1
  408436:	f1a5 0408 	sub.w	r4, r5, #8
  40843a:	18e2      	adds	r2, r4, r3
  40843c:	688e      	ldr	r6, [r1, #8]
  40843e:	6850      	ldr	r0, [r2, #4]
  408440:	42b2      	cmp	r2, r6
  408442:	f020 0003 	bic.w	r0, r0, #3
  408446:	d062      	beq.n	40850e <_free_r+0xf2>
  408448:	07fe      	lsls	r6, r7, #31
  40844a:	6050      	str	r0, [r2, #4]
  40844c:	d40b      	bmi.n	408466 <_free_r+0x4a>
  40844e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  408452:	1be4      	subs	r4, r4, r7
  408454:	f101 0e08 	add.w	lr, r1, #8
  408458:	68a5      	ldr	r5, [r4, #8]
  40845a:	4575      	cmp	r5, lr
  40845c:	443b      	add	r3, r7
  40845e:	d06f      	beq.n	408540 <_free_r+0x124>
  408460:	68e7      	ldr	r7, [r4, #12]
  408462:	60ef      	str	r7, [r5, #12]
  408464:	60bd      	str	r5, [r7, #8]
  408466:	1815      	adds	r5, r2, r0
  408468:	686d      	ldr	r5, [r5, #4]
  40846a:	07ed      	lsls	r5, r5, #31
  40846c:	d542      	bpl.n	4084f4 <_free_r+0xd8>
  40846e:	f043 0201 	orr.w	r2, r3, #1
  408472:	6062      	str	r2, [r4, #4]
  408474:	50e3      	str	r3, [r4, r3]
  408476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40847a:	d218      	bcs.n	4084ae <_free_r+0x92>
  40847c:	08db      	lsrs	r3, r3, #3
  40847e:	1c5a      	adds	r2, r3, #1
  408480:	684d      	ldr	r5, [r1, #4]
  408482:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  408486:	60a7      	str	r7, [r4, #8]
  408488:	2001      	movs	r0, #1
  40848a:	109b      	asrs	r3, r3, #2
  40848c:	fa00 f303 	lsl.w	r3, r0, r3
  408490:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  408494:	431d      	orrs	r5, r3
  408496:	3808      	subs	r0, #8
  408498:	60e0      	str	r0, [r4, #12]
  40849a:	604d      	str	r5, [r1, #4]
  40849c:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  4084a0:	60fc      	str	r4, [r7, #12]
  4084a2:	4640      	mov	r0, r8
  4084a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4084a8:	f000 bf14 	b.w	4092d4 <__malloc_unlock>
  4084ac:	4770      	bx	lr
  4084ae:	0a5a      	lsrs	r2, r3, #9
  4084b0:	2a04      	cmp	r2, #4
  4084b2:	d853      	bhi.n	40855c <_free_r+0x140>
  4084b4:	099a      	lsrs	r2, r3, #6
  4084b6:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4084ba:	007f      	lsls	r7, r7, #1
  4084bc:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4084c0:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  4084c4:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  4084c8:	4944      	ldr	r1, [pc, #272]	; (4085dc <_free_r+0x1c0>)
  4084ca:	3808      	subs	r0, #8
  4084cc:	4290      	cmp	r0, r2
  4084ce:	d04d      	beq.n	40856c <_free_r+0x150>
  4084d0:	6851      	ldr	r1, [r2, #4]
  4084d2:	f021 0103 	bic.w	r1, r1, #3
  4084d6:	428b      	cmp	r3, r1
  4084d8:	d202      	bcs.n	4084e0 <_free_r+0xc4>
  4084da:	6892      	ldr	r2, [r2, #8]
  4084dc:	4290      	cmp	r0, r2
  4084de:	d1f7      	bne.n	4084d0 <_free_r+0xb4>
  4084e0:	68d0      	ldr	r0, [r2, #12]
  4084e2:	60e0      	str	r0, [r4, #12]
  4084e4:	60a2      	str	r2, [r4, #8]
  4084e6:	6084      	str	r4, [r0, #8]
  4084e8:	60d4      	str	r4, [r2, #12]
  4084ea:	4640      	mov	r0, r8
  4084ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4084f0:	f000 bef0 	b.w	4092d4 <__malloc_unlock>
  4084f4:	6895      	ldr	r5, [r2, #8]
  4084f6:	4f3a      	ldr	r7, [pc, #232]	; (4085e0 <_free_r+0x1c4>)
  4084f8:	42bd      	cmp	r5, r7
  4084fa:	4403      	add	r3, r0
  4084fc:	d03f      	beq.n	40857e <_free_r+0x162>
  4084fe:	68d0      	ldr	r0, [r2, #12]
  408500:	60e8      	str	r0, [r5, #12]
  408502:	f043 0201 	orr.w	r2, r3, #1
  408506:	6085      	str	r5, [r0, #8]
  408508:	6062      	str	r2, [r4, #4]
  40850a:	50e3      	str	r3, [r4, r3]
  40850c:	e7b3      	b.n	408476 <_free_r+0x5a>
  40850e:	07ff      	lsls	r7, r7, #31
  408510:	4403      	add	r3, r0
  408512:	d407      	bmi.n	408524 <_free_r+0x108>
  408514:	f855 2c08 	ldr.w	r2, [r5, #-8]
  408518:	1aa4      	subs	r4, r4, r2
  40851a:	4413      	add	r3, r2
  40851c:	68a0      	ldr	r0, [r4, #8]
  40851e:	68e2      	ldr	r2, [r4, #12]
  408520:	60c2      	str	r2, [r0, #12]
  408522:	6090      	str	r0, [r2, #8]
  408524:	4a2f      	ldr	r2, [pc, #188]	; (4085e4 <_free_r+0x1c8>)
  408526:	6812      	ldr	r2, [r2, #0]
  408528:	f043 0001 	orr.w	r0, r3, #1
  40852c:	4293      	cmp	r3, r2
  40852e:	6060      	str	r0, [r4, #4]
  408530:	608c      	str	r4, [r1, #8]
  408532:	d3b6      	bcc.n	4084a2 <_free_r+0x86>
  408534:	4b2c      	ldr	r3, [pc, #176]	; (4085e8 <_free_r+0x1cc>)
  408536:	4640      	mov	r0, r8
  408538:	6819      	ldr	r1, [r3, #0]
  40853a:	f7ff ff21 	bl	408380 <_malloc_trim_r>
  40853e:	e7b0      	b.n	4084a2 <_free_r+0x86>
  408540:	1811      	adds	r1, r2, r0
  408542:	6849      	ldr	r1, [r1, #4]
  408544:	07c9      	lsls	r1, r1, #31
  408546:	d444      	bmi.n	4085d2 <_free_r+0x1b6>
  408548:	6891      	ldr	r1, [r2, #8]
  40854a:	68d2      	ldr	r2, [r2, #12]
  40854c:	60ca      	str	r2, [r1, #12]
  40854e:	4403      	add	r3, r0
  408550:	f043 0001 	orr.w	r0, r3, #1
  408554:	6091      	str	r1, [r2, #8]
  408556:	6060      	str	r0, [r4, #4]
  408558:	50e3      	str	r3, [r4, r3]
  40855a:	e7a2      	b.n	4084a2 <_free_r+0x86>
  40855c:	2a14      	cmp	r2, #20
  40855e:	d817      	bhi.n	408590 <_free_r+0x174>
  408560:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  408564:	007f      	lsls	r7, r7, #1
  408566:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40856a:	e7a9      	b.n	4084c0 <_free_r+0xa4>
  40856c:	10aa      	asrs	r2, r5, #2
  40856e:	684b      	ldr	r3, [r1, #4]
  408570:	2501      	movs	r5, #1
  408572:	fa05 f202 	lsl.w	r2, r5, r2
  408576:	4313      	orrs	r3, r2
  408578:	604b      	str	r3, [r1, #4]
  40857a:	4602      	mov	r2, r0
  40857c:	e7b1      	b.n	4084e2 <_free_r+0xc6>
  40857e:	f043 0201 	orr.w	r2, r3, #1
  408582:	614c      	str	r4, [r1, #20]
  408584:	610c      	str	r4, [r1, #16]
  408586:	60e5      	str	r5, [r4, #12]
  408588:	60a5      	str	r5, [r4, #8]
  40858a:	6062      	str	r2, [r4, #4]
  40858c:	50e3      	str	r3, [r4, r3]
  40858e:	e788      	b.n	4084a2 <_free_r+0x86>
  408590:	2a54      	cmp	r2, #84	; 0x54
  408592:	d806      	bhi.n	4085a2 <_free_r+0x186>
  408594:	0b1a      	lsrs	r2, r3, #12
  408596:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40859a:	007f      	lsls	r7, r7, #1
  40859c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4085a0:	e78e      	b.n	4084c0 <_free_r+0xa4>
  4085a2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4085a6:	d806      	bhi.n	4085b6 <_free_r+0x19a>
  4085a8:	0bda      	lsrs	r2, r3, #15
  4085aa:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4085ae:	007f      	lsls	r7, r7, #1
  4085b0:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4085b4:	e784      	b.n	4084c0 <_free_r+0xa4>
  4085b6:	f240 5054 	movw	r0, #1364	; 0x554
  4085ba:	4282      	cmp	r2, r0
  4085bc:	d806      	bhi.n	4085cc <_free_r+0x1b0>
  4085be:	0c9a      	lsrs	r2, r3, #18
  4085c0:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4085c4:	007f      	lsls	r7, r7, #1
  4085c6:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4085ca:	e779      	b.n	4084c0 <_free_r+0xa4>
  4085cc:	27fe      	movs	r7, #254	; 0xfe
  4085ce:	257e      	movs	r5, #126	; 0x7e
  4085d0:	e776      	b.n	4084c0 <_free_r+0xa4>
  4085d2:	f043 0201 	orr.w	r2, r3, #1
  4085d6:	6062      	str	r2, [r4, #4]
  4085d8:	50e3      	str	r3, [r4, r3]
  4085da:	e762      	b.n	4084a2 <_free_r+0x86>
  4085dc:	204004ac 	.word	0x204004ac
  4085e0:	204004b4 	.word	0x204004b4
  4085e4:	204008b4 	.word	0x204008b4
  4085e8:	20400f24 	.word	0x20400f24

004085ec <__sfvwrite_r>:
  4085ec:	6893      	ldr	r3, [r2, #8]
  4085ee:	2b00      	cmp	r3, #0
  4085f0:	d076      	beq.n	4086e0 <__sfvwrite_r+0xf4>
  4085f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4085f6:	898b      	ldrh	r3, [r1, #12]
  4085f8:	b085      	sub	sp, #20
  4085fa:	460c      	mov	r4, r1
  4085fc:	0719      	lsls	r1, r3, #28
  4085fe:	9001      	str	r0, [sp, #4]
  408600:	4616      	mov	r6, r2
  408602:	d529      	bpl.n	408658 <__sfvwrite_r+0x6c>
  408604:	6922      	ldr	r2, [r4, #16]
  408606:	b33a      	cbz	r2, 408658 <__sfvwrite_r+0x6c>
  408608:	f003 0802 	and.w	r8, r3, #2
  40860c:	fa1f f088 	uxth.w	r0, r8
  408610:	6835      	ldr	r5, [r6, #0]
  408612:	2800      	cmp	r0, #0
  408614:	d02f      	beq.n	408676 <__sfvwrite_r+0x8a>
  408616:	f04f 0900 	mov.w	r9, #0
  40861a:	4fb4      	ldr	r7, [pc, #720]	; (4088ec <__sfvwrite_r+0x300>)
  40861c:	46c8      	mov	r8, r9
  40861e:	46b2      	mov	sl, r6
  408620:	45b8      	cmp	r8, r7
  408622:	4643      	mov	r3, r8
  408624:	464a      	mov	r2, r9
  408626:	bf28      	it	cs
  408628:	463b      	movcs	r3, r7
  40862a:	9801      	ldr	r0, [sp, #4]
  40862c:	f1b8 0f00 	cmp.w	r8, #0
  408630:	d050      	beq.n	4086d4 <__sfvwrite_r+0xe8>
  408632:	69e1      	ldr	r1, [r4, #28]
  408634:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408636:	47b0      	blx	r6
  408638:	2800      	cmp	r0, #0
  40863a:	dd71      	ble.n	408720 <__sfvwrite_r+0x134>
  40863c:	f8da 3008 	ldr.w	r3, [sl, #8]
  408640:	1a1b      	subs	r3, r3, r0
  408642:	4481      	add	r9, r0
  408644:	ebc0 0808 	rsb	r8, r0, r8
  408648:	f8ca 3008 	str.w	r3, [sl, #8]
  40864c:	2b00      	cmp	r3, #0
  40864e:	d1e7      	bne.n	408620 <__sfvwrite_r+0x34>
  408650:	2000      	movs	r0, #0
  408652:	b005      	add	sp, #20
  408654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408658:	4621      	mov	r1, r4
  40865a:	9801      	ldr	r0, [sp, #4]
  40865c:	f7fe fca8 	bl	406fb0 <__swsetup_r>
  408660:	2800      	cmp	r0, #0
  408662:	f040 813a 	bne.w	4088da <__sfvwrite_r+0x2ee>
  408666:	89a3      	ldrh	r3, [r4, #12]
  408668:	6835      	ldr	r5, [r6, #0]
  40866a:	f003 0802 	and.w	r8, r3, #2
  40866e:	fa1f f088 	uxth.w	r0, r8
  408672:	2800      	cmp	r0, #0
  408674:	d1cf      	bne.n	408616 <__sfvwrite_r+0x2a>
  408676:	f013 0901 	ands.w	r9, r3, #1
  40867a:	d15b      	bne.n	408734 <__sfvwrite_r+0x148>
  40867c:	464f      	mov	r7, r9
  40867e:	9602      	str	r6, [sp, #8]
  408680:	b31f      	cbz	r7, 4086ca <__sfvwrite_r+0xde>
  408682:	059a      	lsls	r2, r3, #22
  408684:	f8d4 8008 	ldr.w	r8, [r4, #8]
  408688:	d52c      	bpl.n	4086e4 <__sfvwrite_r+0xf8>
  40868a:	4547      	cmp	r7, r8
  40868c:	46c2      	mov	sl, r8
  40868e:	f0c0 80a4 	bcc.w	4087da <__sfvwrite_r+0x1ee>
  408692:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408696:	f040 80b1 	bne.w	4087fc <__sfvwrite_r+0x210>
  40869a:	6820      	ldr	r0, [r4, #0]
  40869c:	4652      	mov	r2, sl
  40869e:	4649      	mov	r1, r9
  4086a0:	f000 fdb2 	bl	409208 <memmove>
  4086a4:	68a0      	ldr	r0, [r4, #8]
  4086a6:	6823      	ldr	r3, [r4, #0]
  4086a8:	ebc8 0000 	rsb	r0, r8, r0
  4086ac:	4453      	add	r3, sl
  4086ae:	60a0      	str	r0, [r4, #8]
  4086b0:	6023      	str	r3, [r4, #0]
  4086b2:	4638      	mov	r0, r7
  4086b4:	9a02      	ldr	r2, [sp, #8]
  4086b6:	6893      	ldr	r3, [r2, #8]
  4086b8:	1a1b      	subs	r3, r3, r0
  4086ba:	4481      	add	r9, r0
  4086bc:	1a3f      	subs	r7, r7, r0
  4086be:	6093      	str	r3, [r2, #8]
  4086c0:	2b00      	cmp	r3, #0
  4086c2:	d0c5      	beq.n	408650 <__sfvwrite_r+0x64>
  4086c4:	89a3      	ldrh	r3, [r4, #12]
  4086c6:	2f00      	cmp	r7, #0
  4086c8:	d1db      	bne.n	408682 <__sfvwrite_r+0x96>
  4086ca:	f8d5 9000 	ldr.w	r9, [r5]
  4086ce:	686f      	ldr	r7, [r5, #4]
  4086d0:	3508      	adds	r5, #8
  4086d2:	e7d5      	b.n	408680 <__sfvwrite_r+0x94>
  4086d4:	f8d5 9000 	ldr.w	r9, [r5]
  4086d8:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4086dc:	3508      	adds	r5, #8
  4086de:	e79f      	b.n	408620 <__sfvwrite_r+0x34>
  4086e0:	2000      	movs	r0, #0
  4086e2:	4770      	bx	lr
  4086e4:	6820      	ldr	r0, [r4, #0]
  4086e6:	6923      	ldr	r3, [r4, #16]
  4086e8:	4298      	cmp	r0, r3
  4086ea:	d803      	bhi.n	4086f4 <__sfvwrite_r+0x108>
  4086ec:	6961      	ldr	r1, [r4, #20]
  4086ee:	428f      	cmp	r7, r1
  4086f0:	f080 80b7 	bcs.w	408862 <__sfvwrite_r+0x276>
  4086f4:	45b8      	cmp	r8, r7
  4086f6:	bf28      	it	cs
  4086f8:	46b8      	movcs	r8, r7
  4086fa:	4642      	mov	r2, r8
  4086fc:	4649      	mov	r1, r9
  4086fe:	f000 fd83 	bl	409208 <memmove>
  408702:	68a3      	ldr	r3, [r4, #8]
  408704:	6822      	ldr	r2, [r4, #0]
  408706:	ebc8 0303 	rsb	r3, r8, r3
  40870a:	4442      	add	r2, r8
  40870c:	60a3      	str	r3, [r4, #8]
  40870e:	6022      	str	r2, [r4, #0]
  408710:	2b00      	cmp	r3, #0
  408712:	d149      	bne.n	4087a8 <__sfvwrite_r+0x1bc>
  408714:	4621      	mov	r1, r4
  408716:	9801      	ldr	r0, [sp, #4]
  408718:	f7ff fd22 	bl	408160 <_fflush_r>
  40871c:	2800      	cmp	r0, #0
  40871e:	d043      	beq.n	4087a8 <__sfvwrite_r+0x1bc>
  408720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408728:	f04f 30ff 	mov.w	r0, #4294967295
  40872c:	81a3      	strh	r3, [r4, #12]
  40872e:	b005      	add	sp, #20
  408730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408734:	4680      	mov	r8, r0
  408736:	9002      	str	r0, [sp, #8]
  408738:	4682      	mov	sl, r0
  40873a:	4681      	mov	r9, r0
  40873c:	f1b9 0f00 	cmp.w	r9, #0
  408740:	d02a      	beq.n	408798 <__sfvwrite_r+0x1ac>
  408742:	9b02      	ldr	r3, [sp, #8]
  408744:	2b00      	cmp	r3, #0
  408746:	d04c      	beq.n	4087e2 <__sfvwrite_r+0x1f6>
  408748:	6820      	ldr	r0, [r4, #0]
  40874a:	6923      	ldr	r3, [r4, #16]
  40874c:	6962      	ldr	r2, [r4, #20]
  40874e:	45c8      	cmp	r8, r9
  408750:	46c3      	mov	fp, r8
  408752:	bf28      	it	cs
  408754:	46cb      	movcs	fp, r9
  408756:	4298      	cmp	r0, r3
  408758:	465f      	mov	r7, fp
  40875a:	d904      	bls.n	408766 <__sfvwrite_r+0x17a>
  40875c:	68a3      	ldr	r3, [r4, #8]
  40875e:	4413      	add	r3, r2
  408760:	459b      	cmp	fp, r3
  408762:	f300 8090 	bgt.w	408886 <__sfvwrite_r+0x29a>
  408766:	4593      	cmp	fp, r2
  408768:	db20      	blt.n	4087ac <__sfvwrite_r+0x1c0>
  40876a:	4613      	mov	r3, r2
  40876c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40876e:	69e1      	ldr	r1, [r4, #28]
  408770:	9801      	ldr	r0, [sp, #4]
  408772:	4652      	mov	r2, sl
  408774:	47b8      	blx	r7
  408776:	1e07      	subs	r7, r0, #0
  408778:	ddd2      	ble.n	408720 <__sfvwrite_r+0x134>
  40877a:	ebb8 0807 	subs.w	r8, r8, r7
  40877e:	d023      	beq.n	4087c8 <__sfvwrite_r+0x1dc>
  408780:	68b3      	ldr	r3, [r6, #8]
  408782:	1bdb      	subs	r3, r3, r7
  408784:	44ba      	add	sl, r7
  408786:	ebc7 0909 	rsb	r9, r7, r9
  40878a:	60b3      	str	r3, [r6, #8]
  40878c:	2b00      	cmp	r3, #0
  40878e:	f43f af5f 	beq.w	408650 <__sfvwrite_r+0x64>
  408792:	f1b9 0f00 	cmp.w	r9, #0
  408796:	d1d4      	bne.n	408742 <__sfvwrite_r+0x156>
  408798:	2300      	movs	r3, #0
  40879a:	f8d5 a000 	ldr.w	sl, [r5]
  40879e:	f8d5 9004 	ldr.w	r9, [r5, #4]
  4087a2:	9302      	str	r3, [sp, #8]
  4087a4:	3508      	adds	r5, #8
  4087a6:	e7c9      	b.n	40873c <__sfvwrite_r+0x150>
  4087a8:	4640      	mov	r0, r8
  4087aa:	e783      	b.n	4086b4 <__sfvwrite_r+0xc8>
  4087ac:	465a      	mov	r2, fp
  4087ae:	4651      	mov	r1, sl
  4087b0:	f000 fd2a 	bl	409208 <memmove>
  4087b4:	68a2      	ldr	r2, [r4, #8]
  4087b6:	6823      	ldr	r3, [r4, #0]
  4087b8:	ebcb 0202 	rsb	r2, fp, r2
  4087bc:	445b      	add	r3, fp
  4087be:	ebb8 0807 	subs.w	r8, r8, r7
  4087c2:	60a2      	str	r2, [r4, #8]
  4087c4:	6023      	str	r3, [r4, #0]
  4087c6:	d1db      	bne.n	408780 <__sfvwrite_r+0x194>
  4087c8:	4621      	mov	r1, r4
  4087ca:	9801      	ldr	r0, [sp, #4]
  4087cc:	f7ff fcc8 	bl	408160 <_fflush_r>
  4087d0:	2800      	cmp	r0, #0
  4087d2:	d1a5      	bne.n	408720 <__sfvwrite_r+0x134>
  4087d4:	f8cd 8008 	str.w	r8, [sp, #8]
  4087d8:	e7d2      	b.n	408780 <__sfvwrite_r+0x194>
  4087da:	6820      	ldr	r0, [r4, #0]
  4087dc:	46b8      	mov	r8, r7
  4087de:	46ba      	mov	sl, r7
  4087e0:	e75c      	b.n	40869c <__sfvwrite_r+0xb0>
  4087e2:	464a      	mov	r2, r9
  4087e4:	210a      	movs	r1, #10
  4087e6:	4650      	mov	r0, sl
  4087e8:	f000 fbf2 	bl	408fd0 <memchr>
  4087ec:	2800      	cmp	r0, #0
  4087ee:	d06f      	beq.n	4088d0 <__sfvwrite_r+0x2e4>
  4087f0:	3001      	adds	r0, #1
  4087f2:	2301      	movs	r3, #1
  4087f4:	ebca 0800 	rsb	r8, sl, r0
  4087f8:	9302      	str	r3, [sp, #8]
  4087fa:	e7a5      	b.n	408748 <__sfvwrite_r+0x15c>
  4087fc:	6962      	ldr	r2, [r4, #20]
  4087fe:	6820      	ldr	r0, [r4, #0]
  408800:	6921      	ldr	r1, [r4, #16]
  408802:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  408806:	ebc1 0a00 	rsb	sl, r1, r0
  40880a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40880e:	f10a 0001 	add.w	r0, sl, #1
  408812:	ea4f 0868 	mov.w	r8, r8, asr #1
  408816:	4438      	add	r0, r7
  408818:	4540      	cmp	r0, r8
  40881a:	4642      	mov	r2, r8
  40881c:	bf84      	itt	hi
  40881e:	4680      	movhi	r8, r0
  408820:	4642      	movhi	r2, r8
  408822:	055b      	lsls	r3, r3, #21
  408824:	d542      	bpl.n	4088ac <__sfvwrite_r+0x2c0>
  408826:	4611      	mov	r1, r2
  408828:	9801      	ldr	r0, [sp, #4]
  40882a:	f000 f915 	bl	408a58 <_malloc_r>
  40882e:	4683      	mov	fp, r0
  408830:	2800      	cmp	r0, #0
  408832:	d055      	beq.n	4088e0 <__sfvwrite_r+0x2f4>
  408834:	4652      	mov	r2, sl
  408836:	6921      	ldr	r1, [r4, #16]
  408838:	f000 fc4c 	bl	4090d4 <memcpy>
  40883c:	89a3      	ldrh	r3, [r4, #12]
  40883e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  408842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408846:	81a3      	strh	r3, [r4, #12]
  408848:	ebca 0308 	rsb	r3, sl, r8
  40884c:	eb0b 000a 	add.w	r0, fp, sl
  408850:	f8c4 8014 	str.w	r8, [r4, #20]
  408854:	f8c4 b010 	str.w	fp, [r4, #16]
  408858:	6020      	str	r0, [r4, #0]
  40885a:	60a3      	str	r3, [r4, #8]
  40885c:	46b8      	mov	r8, r7
  40885e:	46ba      	mov	sl, r7
  408860:	e71c      	b.n	40869c <__sfvwrite_r+0xb0>
  408862:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  408866:	42bb      	cmp	r3, r7
  408868:	bf28      	it	cs
  40886a:	463b      	movcs	r3, r7
  40886c:	464a      	mov	r2, r9
  40886e:	fb93 f3f1 	sdiv	r3, r3, r1
  408872:	9801      	ldr	r0, [sp, #4]
  408874:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408876:	fb01 f303 	mul.w	r3, r1, r3
  40887a:	69e1      	ldr	r1, [r4, #28]
  40887c:	47b0      	blx	r6
  40887e:	2800      	cmp	r0, #0
  408880:	f73f af18 	bgt.w	4086b4 <__sfvwrite_r+0xc8>
  408884:	e74c      	b.n	408720 <__sfvwrite_r+0x134>
  408886:	461a      	mov	r2, r3
  408888:	4651      	mov	r1, sl
  40888a:	9303      	str	r3, [sp, #12]
  40888c:	f000 fcbc 	bl	409208 <memmove>
  408890:	6822      	ldr	r2, [r4, #0]
  408892:	9b03      	ldr	r3, [sp, #12]
  408894:	9801      	ldr	r0, [sp, #4]
  408896:	441a      	add	r2, r3
  408898:	6022      	str	r2, [r4, #0]
  40889a:	4621      	mov	r1, r4
  40889c:	f7ff fc60 	bl	408160 <_fflush_r>
  4088a0:	9b03      	ldr	r3, [sp, #12]
  4088a2:	2800      	cmp	r0, #0
  4088a4:	f47f af3c 	bne.w	408720 <__sfvwrite_r+0x134>
  4088a8:	461f      	mov	r7, r3
  4088aa:	e766      	b.n	40877a <__sfvwrite_r+0x18e>
  4088ac:	9801      	ldr	r0, [sp, #4]
  4088ae:	f001 f821 	bl	4098f4 <_realloc_r>
  4088b2:	4683      	mov	fp, r0
  4088b4:	2800      	cmp	r0, #0
  4088b6:	d1c7      	bne.n	408848 <__sfvwrite_r+0x25c>
  4088b8:	9d01      	ldr	r5, [sp, #4]
  4088ba:	6921      	ldr	r1, [r4, #16]
  4088bc:	4628      	mov	r0, r5
  4088be:	f7ff fdad 	bl	40841c <_free_r>
  4088c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4088c6:	220c      	movs	r2, #12
  4088c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4088cc:	602a      	str	r2, [r5, #0]
  4088ce:	e729      	b.n	408724 <__sfvwrite_r+0x138>
  4088d0:	2301      	movs	r3, #1
  4088d2:	f109 0801 	add.w	r8, r9, #1
  4088d6:	9302      	str	r3, [sp, #8]
  4088d8:	e736      	b.n	408748 <__sfvwrite_r+0x15c>
  4088da:	f04f 30ff 	mov.w	r0, #4294967295
  4088de:	e6b8      	b.n	408652 <__sfvwrite_r+0x66>
  4088e0:	9a01      	ldr	r2, [sp, #4]
  4088e2:	230c      	movs	r3, #12
  4088e4:	6013      	str	r3, [r2, #0]
  4088e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4088ea:	e71b      	b.n	408724 <__sfvwrite_r+0x138>
  4088ec:	7ffffc00 	.word	0x7ffffc00

004088f0 <_fwalk_reent>:
  4088f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4088f4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4088f8:	d01f      	beq.n	40893a <_fwalk_reent+0x4a>
  4088fa:	4688      	mov	r8, r1
  4088fc:	4606      	mov	r6, r0
  4088fe:	f04f 0900 	mov.w	r9, #0
  408902:	687d      	ldr	r5, [r7, #4]
  408904:	68bc      	ldr	r4, [r7, #8]
  408906:	3d01      	subs	r5, #1
  408908:	d411      	bmi.n	40892e <_fwalk_reent+0x3e>
  40890a:	89a3      	ldrh	r3, [r4, #12]
  40890c:	2b01      	cmp	r3, #1
  40890e:	f105 35ff 	add.w	r5, r5, #4294967295
  408912:	d908      	bls.n	408926 <_fwalk_reent+0x36>
  408914:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  408918:	3301      	adds	r3, #1
  40891a:	4621      	mov	r1, r4
  40891c:	4630      	mov	r0, r6
  40891e:	d002      	beq.n	408926 <_fwalk_reent+0x36>
  408920:	47c0      	blx	r8
  408922:	ea49 0900 	orr.w	r9, r9, r0
  408926:	1c6b      	adds	r3, r5, #1
  408928:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40892c:	d1ed      	bne.n	40890a <_fwalk_reent+0x1a>
  40892e:	683f      	ldr	r7, [r7, #0]
  408930:	2f00      	cmp	r7, #0
  408932:	d1e6      	bne.n	408902 <_fwalk_reent+0x12>
  408934:	4648      	mov	r0, r9
  408936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40893a:	46b9      	mov	r9, r7
  40893c:	4648      	mov	r0, r9
  40893e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408942:	bf00      	nop

00408944 <__locale_charset>:
  408944:	4800      	ldr	r0, [pc, #0]	; (408948 <__locale_charset+0x4>)
  408946:	4770      	bx	lr
  408948:	20400488 	.word	0x20400488

0040894c <__locale_mb_cur_max>:
  40894c:	4b01      	ldr	r3, [pc, #4]	; (408954 <__locale_mb_cur_max+0x8>)
  40894e:	6818      	ldr	r0, [r3, #0]
  408950:	4770      	bx	lr
  408952:	bf00      	nop
  408954:	204004a8 	.word	0x204004a8

00408958 <_localeconv_r>:
  408958:	4800      	ldr	r0, [pc, #0]	; (40895c <_localeconv_r+0x4>)
  40895a:	4770      	bx	lr
  40895c:	20400450 	.word	0x20400450

00408960 <__swhatbuf_r>:
  408960:	b570      	push	{r4, r5, r6, lr}
  408962:	460d      	mov	r5, r1
  408964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408968:	2900      	cmp	r1, #0
  40896a:	b090      	sub	sp, #64	; 0x40
  40896c:	4614      	mov	r4, r2
  40896e:	461e      	mov	r6, r3
  408970:	db14      	blt.n	40899c <__swhatbuf_r+0x3c>
  408972:	aa01      	add	r2, sp, #4
  408974:	f001 fc66 	bl	40a244 <_fstat_r>
  408978:	2800      	cmp	r0, #0
  40897a:	db0f      	blt.n	40899c <__swhatbuf_r+0x3c>
  40897c:	9a02      	ldr	r2, [sp, #8]
  40897e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  408982:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  408986:	fab2 f282 	clz	r2, r2
  40898a:	0952      	lsrs	r2, r2, #5
  40898c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408990:	f44f 6000 	mov.w	r0, #2048	; 0x800
  408994:	6032      	str	r2, [r6, #0]
  408996:	6023      	str	r3, [r4, #0]
  408998:	b010      	add	sp, #64	; 0x40
  40899a:	bd70      	pop	{r4, r5, r6, pc}
  40899c:	89a8      	ldrh	r0, [r5, #12]
  40899e:	f000 0080 	and.w	r0, r0, #128	; 0x80
  4089a2:	b282      	uxth	r2, r0
  4089a4:	2000      	movs	r0, #0
  4089a6:	6030      	str	r0, [r6, #0]
  4089a8:	b11a      	cbz	r2, 4089b2 <__swhatbuf_r+0x52>
  4089aa:	2340      	movs	r3, #64	; 0x40
  4089ac:	6023      	str	r3, [r4, #0]
  4089ae:	b010      	add	sp, #64	; 0x40
  4089b0:	bd70      	pop	{r4, r5, r6, pc}
  4089b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4089b6:	4610      	mov	r0, r2
  4089b8:	6023      	str	r3, [r4, #0]
  4089ba:	b010      	add	sp, #64	; 0x40
  4089bc:	bd70      	pop	{r4, r5, r6, pc}
  4089be:	bf00      	nop

004089c0 <__smakebuf_r>:
  4089c0:	898a      	ldrh	r2, [r1, #12]
  4089c2:	0792      	lsls	r2, r2, #30
  4089c4:	460b      	mov	r3, r1
  4089c6:	d506      	bpl.n	4089d6 <__smakebuf_r+0x16>
  4089c8:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4089cc:	2101      	movs	r1, #1
  4089ce:	601a      	str	r2, [r3, #0]
  4089d0:	611a      	str	r2, [r3, #16]
  4089d2:	6159      	str	r1, [r3, #20]
  4089d4:	4770      	bx	lr
  4089d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4089d8:	b083      	sub	sp, #12
  4089da:	ab01      	add	r3, sp, #4
  4089dc:	466a      	mov	r2, sp
  4089de:	460c      	mov	r4, r1
  4089e0:	4605      	mov	r5, r0
  4089e2:	f7ff ffbd 	bl	408960 <__swhatbuf_r>
  4089e6:	9900      	ldr	r1, [sp, #0]
  4089e8:	4606      	mov	r6, r0
  4089ea:	4628      	mov	r0, r5
  4089ec:	f000 f834 	bl	408a58 <_malloc_r>
  4089f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4089f4:	b1d0      	cbz	r0, 408a2c <__smakebuf_r+0x6c>
  4089f6:	9a01      	ldr	r2, [sp, #4]
  4089f8:	4f12      	ldr	r7, [pc, #72]	; (408a44 <__smakebuf_r+0x84>)
  4089fa:	9900      	ldr	r1, [sp, #0]
  4089fc:	63ef      	str	r7, [r5, #60]	; 0x3c
  4089fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408a02:	81a3      	strh	r3, [r4, #12]
  408a04:	6020      	str	r0, [r4, #0]
  408a06:	6120      	str	r0, [r4, #16]
  408a08:	6161      	str	r1, [r4, #20]
  408a0a:	b91a      	cbnz	r2, 408a14 <__smakebuf_r+0x54>
  408a0c:	4333      	orrs	r3, r6
  408a0e:	81a3      	strh	r3, [r4, #12]
  408a10:	b003      	add	sp, #12
  408a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408a14:	4628      	mov	r0, r5
  408a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408a1a:	f001 fc27 	bl	40a26c <_isatty_r>
  408a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408a22:	2800      	cmp	r0, #0
  408a24:	d0f2      	beq.n	408a0c <__smakebuf_r+0x4c>
  408a26:	f043 0301 	orr.w	r3, r3, #1
  408a2a:	e7ef      	b.n	408a0c <__smakebuf_r+0x4c>
  408a2c:	059a      	lsls	r2, r3, #22
  408a2e:	d4ef      	bmi.n	408a10 <__smakebuf_r+0x50>
  408a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
  408a34:	f043 0302 	orr.w	r3, r3, #2
  408a38:	2101      	movs	r1, #1
  408a3a:	81a3      	strh	r3, [r4, #12]
  408a3c:	6022      	str	r2, [r4, #0]
  408a3e:	6122      	str	r2, [r4, #16]
  408a40:	6161      	str	r1, [r4, #20]
  408a42:	e7e5      	b.n	408a10 <__smakebuf_r+0x50>
  408a44:	0040818d 	.word	0x0040818d

00408a48 <malloc>:
  408a48:	4b02      	ldr	r3, [pc, #8]	; (408a54 <malloc+0xc>)
  408a4a:	4601      	mov	r1, r0
  408a4c:	6818      	ldr	r0, [r3, #0]
  408a4e:	f000 b803 	b.w	408a58 <_malloc_r>
  408a52:	bf00      	nop
  408a54:	20400448 	.word	0x20400448

00408a58 <_malloc_r>:
  408a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408a5c:	f101 050b 	add.w	r5, r1, #11
  408a60:	2d16      	cmp	r5, #22
  408a62:	b083      	sub	sp, #12
  408a64:	4606      	mov	r6, r0
  408a66:	f240 809f 	bls.w	408ba8 <_malloc_r+0x150>
  408a6a:	f035 0507 	bics.w	r5, r5, #7
  408a6e:	f100 80bf 	bmi.w	408bf0 <_malloc_r+0x198>
  408a72:	42a9      	cmp	r1, r5
  408a74:	f200 80bc 	bhi.w	408bf0 <_malloc_r+0x198>
  408a78:	f000 fc2a 	bl	4092d0 <__malloc_lock>
  408a7c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  408a80:	f0c0 829c 	bcc.w	408fbc <_malloc_r+0x564>
  408a84:	0a6b      	lsrs	r3, r5, #9
  408a86:	f000 80ba 	beq.w	408bfe <_malloc_r+0x1a6>
  408a8a:	2b04      	cmp	r3, #4
  408a8c:	f200 8183 	bhi.w	408d96 <_malloc_r+0x33e>
  408a90:	09a8      	lsrs	r0, r5, #6
  408a92:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  408a96:	ea4f 034e 	mov.w	r3, lr, lsl #1
  408a9a:	3038      	adds	r0, #56	; 0x38
  408a9c:	4fc4      	ldr	r7, [pc, #784]	; (408db0 <_malloc_r+0x358>)
  408a9e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  408aa2:	f1a3 0108 	sub.w	r1, r3, #8
  408aa6:	685c      	ldr	r4, [r3, #4]
  408aa8:	42a1      	cmp	r1, r4
  408aaa:	d107      	bne.n	408abc <_malloc_r+0x64>
  408aac:	e0ac      	b.n	408c08 <_malloc_r+0x1b0>
  408aae:	2a00      	cmp	r2, #0
  408ab0:	f280 80ac 	bge.w	408c0c <_malloc_r+0x1b4>
  408ab4:	68e4      	ldr	r4, [r4, #12]
  408ab6:	42a1      	cmp	r1, r4
  408ab8:	f000 80a6 	beq.w	408c08 <_malloc_r+0x1b0>
  408abc:	6863      	ldr	r3, [r4, #4]
  408abe:	f023 0303 	bic.w	r3, r3, #3
  408ac2:	1b5a      	subs	r2, r3, r5
  408ac4:	2a0f      	cmp	r2, #15
  408ac6:	ddf2      	ble.n	408aae <_malloc_r+0x56>
  408ac8:	49b9      	ldr	r1, [pc, #740]	; (408db0 <_malloc_r+0x358>)
  408aca:	693c      	ldr	r4, [r7, #16]
  408acc:	f101 0e08 	add.w	lr, r1, #8
  408ad0:	4574      	cmp	r4, lr
  408ad2:	f000 81b3 	beq.w	408e3c <_malloc_r+0x3e4>
  408ad6:	6863      	ldr	r3, [r4, #4]
  408ad8:	f023 0303 	bic.w	r3, r3, #3
  408adc:	1b5a      	subs	r2, r3, r5
  408ade:	2a0f      	cmp	r2, #15
  408ae0:	f300 8199 	bgt.w	408e16 <_malloc_r+0x3be>
  408ae4:	2a00      	cmp	r2, #0
  408ae6:	f8c1 e014 	str.w	lr, [r1, #20]
  408aea:	f8c1 e010 	str.w	lr, [r1, #16]
  408aee:	f280 809e 	bge.w	408c2e <_malloc_r+0x1d6>
  408af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408af6:	f080 8167 	bcs.w	408dc8 <_malloc_r+0x370>
  408afa:	08db      	lsrs	r3, r3, #3
  408afc:	f103 0c01 	add.w	ip, r3, #1
  408b00:	2201      	movs	r2, #1
  408b02:	109b      	asrs	r3, r3, #2
  408b04:	fa02 f303 	lsl.w	r3, r2, r3
  408b08:	684a      	ldr	r2, [r1, #4]
  408b0a:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  408b0e:	f8c4 8008 	str.w	r8, [r4, #8]
  408b12:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  408b16:	431a      	orrs	r2, r3
  408b18:	f1a9 0308 	sub.w	r3, r9, #8
  408b1c:	60e3      	str	r3, [r4, #12]
  408b1e:	604a      	str	r2, [r1, #4]
  408b20:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  408b24:	f8c8 400c 	str.w	r4, [r8, #12]
  408b28:	1083      	asrs	r3, r0, #2
  408b2a:	2401      	movs	r4, #1
  408b2c:	409c      	lsls	r4, r3
  408b2e:	4294      	cmp	r4, r2
  408b30:	f200 808a 	bhi.w	408c48 <_malloc_r+0x1f0>
  408b34:	4214      	tst	r4, r2
  408b36:	d106      	bne.n	408b46 <_malloc_r+0xee>
  408b38:	f020 0003 	bic.w	r0, r0, #3
  408b3c:	0064      	lsls	r4, r4, #1
  408b3e:	4214      	tst	r4, r2
  408b40:	f100 0004 	add.w	r0, r0, #4
  408b44:	d0fa      	beq.n	408b3c <_malloc_r+0xe4>
  408b46:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  408b4a:	46cc      	mov	ip, r9
  408b4c:	4680      	mov	r8, r0
  408b4e:	f8dc 100c 	ldr.w	r1, [ip, #12]
  408b52:	458c      	cmp	ip, r1
  408b54:	d107      	bne.n	408b66 <_malloc_r+0x10e>
  408b56:	e173      	b.n	408e40 <_malloc_r+0x3e8>
  408b58:	2a00      	cmp	r2, #0
  408b5a:	f280 8181 	bge.w	408e60 <_malloc_r+0x408>
  408b5e:	68c9      	ldr	r1, [r1, #12]
  408b60:	458c      	cmp	ip, r1
  408b62:	f000 816d 	beq.w	408e40 <_malloc_r+0x3e8>
  408b66:	684b      	ldr	r3, [r1, #4]
  408b68:	f023 0303 	bic.w	r3, r3, #3
  408b6c:	1b5a      	subs	r2, r3, r5
  408b6e:	2a0f      	cmp	r2, #15
  408b70:	ddf2      	ble.n	408b58 <_malloc_r+0x100>
  408b72:	460c      	mov	r4, r1
  408b74:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  408b78:	f854 8f08 	ldr.w	r8, [r4, #8]!
  408b7c:	194b      	adds	r3, r1, r5
  408b7e:	f045 0501 	orr.w	r5, r5, #1
  408b82:	604d      	str	r5, [r1, #4]
  408b84:	f042 0101 	orr.w	r1, r2, #1
  408b88:	f8c8 c00c 	str.w	ip, [r8, #12]
  408b8c:	4630      	mov	r0, r6
  408b8e:	f8cc 8008 	str.w	r8, [ip, #8]
  408b92:	617b      	str	r3, [r7, #20]
  408b94:	613b      	str	r3, [r7, #16]
  408b96:	f8c3 e00c 	str.w	lr, [r3, #12]
  408b9a:	f8c3 e008 	str.w	lr, [r3, #8]
  408b9e:	6059      	str	r1, [r3, #4]
  408ba0:	509a      	str	r2, [r3, r2]
  408ba2:	f000 fb97 	bl	4092d4 <__malloc_unlock>
  408ba6:	e01f      	b.n	408be8 <_malloc_r+0x190>
  408ba8:	2910      	cmp	r1, #16
  408baa:	d821      	bhi.n	408bf0 <_malloc_r+0x198>
  408bac:	f000 fb90 	bl	4092d0 <__malloc_lock>
  408bb0:	2510      	movs	r5, #16
  408bb2:	2306      	movs	r3, #6
  408bb4:	2002      	movs	r0, #2
  408bb6:	4f7e      	ldr	r7, [pc, #504]	; (408db0 <_malloc_r+0x358>)
  408bb8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  408bbc:	f1a3 0208 	sub.w	r2, r3, #8
  408bc0:	685c      	ldr	r4, [r3, #4]
  408bc2:	4294      	cmp	r4, r2
  408bc4:	f000 8145 	beq.w	408e52 <_malloc_r+0x3fa>
  408bc8:	6863      	ldr	r3, [r4, #4]
  408bca:	68e1      	ldr	r1, [r4, #12]
  408bcc:	68a5      	ldr	r5, [r4, #8]
  408bce:	f023 0303 	bic.w	r3, r3, #3
  408bd2:	4423      	add	r3, r4
  408bd4:	4630      	mov	r0, r6
  408bd6:	685a      	ldr	r2, [r3, #4]
  408bd8:	60e9      	str	r1, [r5, #12]
  408bda:	f042 0201 	orr.w	r2, r2, #1
  408bde:	608d      	str	r5, [r1, #8]
  408be0:	605a      	str	r2, [r3, #4]
  408be2:	f000 fb77 	bl	4092d4 <__malloc_unlock>
  408be6:	3408      	adds	r4, #8
  408be8:	4620      	mov	r0, r4
  408bea:	b003      	add	sp, #12
  408bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408bf0:	2400      	movs	r4, #0
  408bf2:	230c      	movs	r3, #12
  408bf4:	4620      	mov	r0, r4
  408bf6:	6033      	str	r3, [r6, #0]
  408bf8:	b003      	add	sp, #12
  408bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408bfe:	2380      	movs	r3, #128	; 0x80
  408c00:	f04f 0e40 	mov.w	lr, #64	; 0x40
  408c04:	203f      	movs	r0, #63	; 0x3f
  408c06:	e749      	b.n	408a9c <_malloc_r+0x44>
  408c08:	4670      	mov	r0, lr
  408c0a:	e75d      	b.n	408ac8 <_malloc_r+0x70>
  408c0c:	4423      	add	r3, r4
  408c0e:	68e1      	ldr	r1, [r4, #12]
  408c10:	685a      	ldr	r2, [r3, #4]
  408c12:	68a5      	ldr	r5, [r4, #8]
  408c14:	f042 0201 	orr.w	r2, r2, #1
  408c18:	60e9      	str	r1, [r5, #12]
  408c1a:	4630      	mov	r0, r6
  408c1c:	608d      	str	r5, [r1, #8]
  408c1e:	605a      	str	r2, [r3, #4]
  408c20:	f000 fb58 	bl	4092d4 <__malloc_unlock>
  408c24:	3408      	adds	r4, #8
  408c26:	4620      	mov	r0, r4
  408c28:	b003      	add	sp, #12
  408c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408c2e:	4423      	add	r3, r4
  408c30:	4630      	mov	r0, r6
  408c32:	685a      	ldr	r2, [r3, #4]
  408c34:	f042 0201 	orr.w	r2, r2, #1
  408c38:	605a      	str	r2, [r3, #4]
  408c3a:	f000 fb4b 	bl	4092d4 <__malloc_unlock>
  408c3e:	3408      	adds	r4, #8
  408c40:	4620      	mov	r0, r4
  408c42:	b003      	add	sp, #12
  408c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408c48:	68bc      	ldr	r4, [r7, #8]
  408c4a:	6863      	ldr	r3, [r4, #4]
  408c4c:	f023 0803 	bic.w	r8, r3, #3
  408c50:	45a8      	cmp	r8, r5
  408c52:	d304      	bcc.n	408c5e <_malloc_r+0x206>
  408c54:	ebc5 0308 	rsb	r3, r5, r8
  408c58:	2b0f      	cmp	r3, #15
  408c5a:	f300 808c 	bgt.w	408d76 <_malloc_r+0x31e>
  408c5e:	4b55      	ldr	r3, [pc, #340]	; (408db4 <_malloc_r+0x35c>)
  408c60:	f8df 9160 	ldr.w	r9, [pc, #352]	; 408dc4 <_malloc_r+0x36c>
  408c64:	681a      	ldr	r2, [r3, #0]
  408c66:	f8d9 3000 	ldr.w	r3, [r9]
  408c6a:	3301      	adds	r3, #1
  408c6c:	442a      	add	r2, r5
  408c6e:	eb04 0a08 	add.w	sl, r4, r8
  408c72:	f000 8160 	beq.w	408f36 <_malloc_r+0x4de>
  408c76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  408c7a:	320f      	adds	r2, #15
  408c7c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  408c80:	f022 020f 	bic.w	r2, r2, #15
  408c84:	4611      	mov	r1, r2
  408c86:	4630      	mov	r0, r6
  408c88:	9201      	str	r2, [sp, #4]
  408c8a:	f001 f823 	bl	409cd4 <_sbrk_r>
  408c8e:	f1b0 3fff 	cmp.w	r0, #4294967295
  408c92:	4683      	mov	fp, r0
  408c94:	9a01      	ldr	r2, [sp, #4]
  408c96:	f000 8158 	beq.w	408f4a <_malloc_r+0x4f2>
  408c9a:	4582      	cmp	sl, r0
  408c9c:	f200 80fc 	bhi.w	408e98 <_malloc_r+0x440>
  408ca0:	4b45      	ldr	r3, [pc, #276]	; (408db8 <_malloc_r+0x360>)
  408ca2:	6819      	ldr	r1, [r3, #0]
  408ca4:	45da      	cmp	sl, fp
  408ca6:	4411      	add	r1, r2
  408ca8:	6019      	str	r1, [r3, #0]
  408caa:	f000 8153 	beq.w	408f54 <_malloc_r+0x4fc>
  408cae:	f8d9 0000 	ldr.w	r0, [r9]
  408cb2:	f8df e110 	ldr.w	lr, [pc, #272]	; 408dc4 <_malloc_r+0x36c>
  408cb6:	3001      	adds	r0, #1
  408cb8:	bf1b      	ittet	ne
  408cba:	ebca 0a0b 	rsbne	sl, sl, fp
  408cbe:	4451      	addne	r1, sl
  408cc0:	f8ce b000 	streq.w	fp, [lr]
  408cc4:	6019      	strne	r1, [r3, #0]
  408cc6:	f01b 0107 	ands.w	r1, fp, #7
  408cca:	f000 8117 	beq.w	408efc <_malloc_r+0x4a4>
  408cce:	f1c1 0008 	rsb	r0, r1, #8
  408cd2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  408cd6:	4483      	add	fp, r0
  408cd8:	3108      	adds	r1, #8
  408cda:	445a      	add	r2, fp
  408cdc:	f3c2 020b 	ubfx	r2, r2, #0, #12
  408ce0:	ebc2 0901 	rsb	r9, r2, r1
  408ce4:	4649      	mov	r1, r9
  408ce6:	4630      	mov	r0, r6
  408ce8:	9301      	str	r3, [sp, #4]
  408cea:	f000 fff3 	bl	409cd4 <_sbrk_r>
  408cee:	1c43      	adds	r3, r0, #1
  408cf0:	9b01      	ldr	r3, [sp, #4]
  408cf2:	f000 813f 	beq.w	408f74 <_malloc_r+0x51c>
  408cf6:	ebcb 0200 	rsb	r2, fp, r0
  408cfa:	444a      	add	r2, r9
  408cfc:	f042 0201 	orr.w	r2, r2, #1
  408d00:	6819      	ldr	r1, [r3, #0]
  408d02:	f8c7 b008 	str.w	fp, [r7, #8]
  408d06:	4449      	add	r1, r9
  408d08:	42bc      	cmp	r4, r7
  408d0a:	f8cb 2004 	str.w	r2, [fp, #4]
  408d0e:	6019      	str	r1, [r3, #0]
  408d10:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 408db8 <_malloc_r+0x360>
  408d14:	d016      	beq.n	408d44 <_malloc_r+0x2ec>
  408d16:	f1b8 0f0f 	cmp.w	r8, #15
  408d1a:	f240 80fd 	bls.w	408f18 <_malloc_r+0x4c0>
  408d1e:	6862      	ldr	r2, [r4, #4]
  408d20:	f1a8 030c 	sub.w	r3, r8, #12
  408d24:	f023 0307 	bic.w	r3, r3, #7
  408d28:	18e0      	adds	r0, r4, r3
  408d2a:	f002 0201 	and.w	r2, r2, #1
  408d2e:	f04f 0e05 	mov.w	lr, #5
  408d32:	431a      	orrs	r2, r3
  408d34:	2b0f      	cmp	r3, #15
  408d36:	6062      	str	r2, [r4, #4]
  408d38:	f8c0 e004 	str.w	lr, [r0, #4]
  408d3c:	f8c0 e008 	str.w	lr, [r0, #8]
  408d40:	f200 811c 	bhi.w	408f7c <_malloc_r+0x524>
  408d44:	4b1d      	ldr	r3, [pc, #116]	; (408dbc <_malloc_r+0x364>)
  408d46:	68bc      	ldr	r4, [r7, #8]
  408d48:	681a      	ldr	r2, [r3, #0]
  408d4a:	4291      	cmp	r1, r2
  408d4c:	bf88      	it	hi
  408d4e:	6019      	strhi	r1, [r3, #0]
  408d50:	4b1b      	ldr	r3, [pc, #108]	; (408dc0 <_malloc_r+0x368>)
  408d52:	681a      	ldr	r2, [r3, #0]
  408d54:	4291      	cmp	r1, r2
  408d56:	6862      	ldr	r2, [r4, #4]
  408d58:	bf88      	it	hi
  408d5a:	6019      	strhi	r1, [r3, #0]
  408d5c:	f022 0203 	bic.w	r2, r2, #3
  408d60:	4295      	cmp	r5, r2
  408d62:	eba2 0305 	sub.w	r3, r2, r5
  408d66:	d801      	bhi.n	408d6c <_malloc_r+0x314>
  408d68:	2b0f      	cmp	r3, #15
  408d6a:	dc04      	bgt.n	408d76 <_malloc_r+0x31e>
  408d6c:	4630      	mov	r0, r6
  408d6e:	f000 fab1 	bl	4092d4 <__malloc_unlock>
  408d72:	2400      	movs	r4, #0
  408d74:	e738      	b.n	408be8 <_malloc_r+0x190>
  408d76:	1962      	adds	r2, r4, r5
  408d78:	f043 0301 	orr.w	r3, r3, #1
  408d7c:	f045 0501 	orr.w	r5, r5, #1
  408d80:	6065      	str	r5, [r4, #4]
  408d82:	4630      	mov	r0, r6
  408d84:	60ba      	str	r2, [r7, #8]
  408d86:	6053      	str	r3, [r2, #4]
  408d88:	f000 faa4 	bl	4092d4 <__malloc_unlock>
  408d8c:	3408      	adds	r4, #8
  408d8e:	4620      	mov	r0, r4
  408d90:	b003      	add	sp, #12
  408d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408d96:	2b14      	cmp	r3, #20
  408d98:	d971      	bls.n	408e7e <_malloc_r+0x426>
  408d9a:	2b54      	cmp	r3, #84	; 0x54
  408d9c:	f200 80a4 	bhi.w	408ee8 <_malloc_r+0x490>
  408da0:	0b28      	lsrs	r0, r5, #12
  408da2:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  408da6:	ea4f 034e 	mov.w	r3, lr, lsl #1
  408daa:	306e      	adds	r0, #110	; 0x6e
  408dac:	e676      	b.n	408a9c <_malloc_r+0x44>
  408dae:	bf00      	nop
  408db0:	204004ac 	.word	0x204004ac
  408db4:	20400f24 	.word	0x20400f24
  408db8:	20400f28 	.word	0x20400f28
  408dbc:	20400f20 	.word	0x20400f20
  408dc0:	20400f1c 	.word	0x20400f1c
  408dc4:	204008b8 	.word	0x204008b8
  408dc8:	0a5a      	lsrs	r2, r3, #9
  408dca:	2a04      	cmp	r2, #4
  408dcc:	d95e      	bls.n	408e8c <_malloc_r+0x434>
  408dce:	2a14      	cmp	r2, #20
  408dd0:	f200 80b3 	bhi.w	408f3a <_malloc_r+0x4e2>
  408dd4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  408dd8:	0049      	lsls	r1, r1, #1
  408dda:	325b      	adds	r2, #91	; 0x5b
  408ddc:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  408de0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  408de4:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 408fc4 <_malloc_r+0x56c>
  408de8:	f1ac 0c08 	sub.w	ip, ip, #8
  408dec:	458c      	cmp	ip, r1
  408dee:	f000 8088 	beq.w	408f02 <_malloc_r+0x4aa>
  408df2:	684a      	ldr	r2, [r1, #4]
  408df4:	f022 0203 	bic.w	r2, r2, #3
  408df8:	4293      	cmp	r3, r2
  408dfa:	d202      	bcs.n	408e02 <_malloc_r+0x3aa>
  408dfc:	6889      	ldr	r1, [r1, #8]
  408dfe:	458c      	cmp	ip, r1
  408e00:	d1f7      	bne.n	408df2 <_malloc_r+0x39a>
  408e02:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  408e06:	687a      	ldr	r2, [r7, #4]
  408e08:	f8c4 c00c 	str.w	ip, [r4, #12]
  408e0c:	60a1      	str	r1, [r4, #8]
  408e0e:	f8cc 4008 	str.w	r4, [ip, #8]
  408e12:	60cc      	str	r4, [r1, #12]
  408e14:	e688      	b.n	408b28 <_malloc_r+0xd0>
  408e16:	1963      	adds	r3, r4, r5
  408e18:	f042 0701 	orr.w	r7, r2, #1
  408e1c:	f045 0501 	orr.w	r5, r5, #1
  408e20:	6065      	str	r5, [r4, #4]
  408e22:	4630      	mov	r0, r6
  408e24:	614b      	str	r3, [r1, #20]
  408e26:	610b      	str	r3, [r1, #16]
  408e28:	f8c3 e00c 	str.w	lr, [r3, #12]
  408e2c:	f8c3 e008 	str.w	lr, [r3, #8]
  408e30:	605f      	str	r7, [r3, #4]
  408e32:	509a      	str	r2, [r3, r2]
  408e34:	3408      	adds	r4, #8
  408e36:	f000 fa4d 	bl	4092d4 <__malloc_unlock>
  408e3a:	e6d5      	b.n	408be8 <_malloc_r+0x190>
  408e3c:	684a      	ldr	r2, [r1, #4]
  408e3e:	e673      	b.n	408b28 <_malloc_r+0xd0>
  408e40:	f108 0801 	add.w	r8, r8, #1
  408e44:	f018 0f03 	tst.w	r8, #3
  408e48:	f10c 0c08 	add.w	ip, ip, #8
  408e4c:	f47f ae7f 	bne.w	408b4e <_malloc_r+0xf6>
  408e50:	e030      	b.n	408eb4 <_malloc_r+0x45c>
  408e52:	68dc      	ldr	r4, [r3, #12]
  408e54:	42a3      	cmp	r3, r4
  408e56:	bf08      	it	eq
  408e58:	3002      	addeq	r0, #2
  408e5a:	f43f ae35 	beq.w	408ac8 <_malloc_r+0x70>
  408e5e:	e6b3      	b.n	408bc8 <_malloc_r+0x170>
  408e60:	440b      	add	r3, r1
  408e62:	460c      	mov	r4, r1
  408e64:	685a      	ldr	r2, [r3, #4]
  408e66:	68c9      	ldr	r1, [r1, #12]
  408e68:	f854 5f08 	ldr.w	r5, [r4, #8]!
  408e6c:	f042 0201 	orr.w	r2, r2, #1
  408e70:	605a      	str	r2, [r3, #4]
  408e72:	4630      	mov	r0, r6
  408e74:	60e9      	str	r1, [r5, #12]
  408e76:	608d      	str	r5, [r1, #8]
  408e78:	f000 fa2c 	bl	4092d4 <__malloc_unlock>
  408e7c:	e6b4      	b.n	408be8 <_malloc_r+0x190>
  408e7e:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  408e82:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  408e86:	ea4f 034e 	mov.w	r3, lr, lsl #1
  408e8a:	e607      	b.n	408a9c <_malloc_r+0x44>
  408e8c:	099a      	lsrs	r2, r3, #6
  408e8e:	f102 0139 	add.w	r1, r2, #57	; 0x39
  408e92:	0049      	lsls	r1, r1, #1
  408e94:	3238      	adds	r2, #56	; 0x38
  408e96:	e7a1      	b.n	408ddc <_malloc_r+0x384>
  408e98:	42bc      	cmp	r4, r7
  408e9a:	4b4a      	ldr	r3, [pc, #296]	; (408fc4 <_malloc_r+0x56c>)
  408e9c:	f43f af00 	beq.w	408ca0 <_malloc_r+0x248>
  408ea0:	689c      	ldr	r4, [r3, #8]
  408ea2:	6862      	ldr	r2, [r4, #4]
  408ea4:	f022 0203 	bic.w	r2, r2, #3
  408ea8:	e75a      	b.n	408d60 <_malloc_r+0x308>
  408eaa:	f859 3908 	ldr.w	r3, [r9], #-8
  408eae:	4599      	cmp	r9, r3
  408eb0:	f040 8082 	bne.w	408fb8 <_malloc_r+0x560>
  408eb4:	f010 0f03 	tst.w	r0, #3
  408eb8:	f100 30ff 	add.w	r0, r0, #4294967295
  408ebc:	d1f5      	bne.n	408eaa <_malloc_r+0x452>
  408ebe:	687b      	ldr	r3, [r7, #4]
  408ec0:	ea23 0304 	bic.w	r3, r3, r4
  408ec4:	607b      	str	r3, [r7, #4]
  408ec6:	0064      	lsls	r4, r4, #1
  408ec8:	429c      	cmp	r4, r3
  408eca:	f63f aebd 	bhi.w	408c48 <_malloc_r+0x1f0>
  408ece:	2c00      	cmp	r4, #0
  408ed0:	f43f aeba 	beq.w	408c48 <_malloc_r+0x1f0>
  408ed4:	421c      	tst	r4, r3
  408ed6:	4640      	mov	r0, r8
  408ed8:	f47f ae35 	bne.w	408b46 <_malloc_r+0xee>
  408edc:	0064      	lsls	r4, r4, #1
  408ede:	421c      	tst	r4, r3
  408ee0:	f100 0004 	add.w	r0, r0, #4
  408ee4:	d0fa      	beq.n	408edc <_malloc_r+0x484>
  408ee6:	e62e      	b.n	408b46 <_malloc_r+0xee>
  408ee8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  408eec:	d818      	bhi.n	408f20 <_malloc_r+0x4c8>
  408eee:	0be8      	lsrs	r0, r5, #15
  408ef0:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  408ef4:	ea4f 034e 	mov.w	r3, lr, lsl #1
  408ef8:	3077      	adds	r0, #119	; 0x77
  408efa:	e5cf      	b.n	408a9c <_malloc_r+0x44>
  408efc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  408f00:	e6eb      	b.n	408cda <_malloc_r+0x282>
  408f02:	2101      	movs	r1, #1
  408f04:	f8d8 3004 	ldr.w	r3, [r8, #4]
  408f08:	1092      	asrs	r2, r2, #2
  408f0a:	fa01 f202 	lsl.w	r2, r1, r2
  408f0e:	431a      	orrs	r2, r3
  408f10:	f8c8 2004 	str.w	r2, [r8, #4]
  408f14:	4661      	mov	r1, ip
  408f16:	e777      	b.n	408e08 <_malloc_r+0x3b0>
  408f18:	2301      	movs	r3, #1
  408f1a:	f8cb 3004 	str.w	r3, [fp, #4]
  408f1e:	e725      	b.n	408d6c <_malloc_r+0x314>
  408f20:	f240 5254 	movw	r2, #1364	; 0x554
  408f24:	4293      	cmp	r3, r2
  408f26:	d820      	bhi.n	408f6a <_malloc_r+0x512>
  408f28:	0ca8      	lsrs	r0, r5, #18
  408f2a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  408f2e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  408f32:	307c      	adds	r0, #124	; 0x7c
  408f34:	e5b2      	b.n	408a9c <_malloc_r+0x44>
  408f36:	3210      	adds	r2, #16
  408f38:	e6a4      	b.n	408c84 <_malloc_r+0x22c>
  408f3a:	2a54      	cmp	r2, #84	; 0x54
  408f3c:	d826      	bhi.n	408f8c <_malloc_r+0x534>
  408f3e:	0b1a      	lsrs	r2, r3, #12
  408f40:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  408f44:	0049      	lsls	r1, r1, #1
  408f46:	326e      	adds	r2, #110	; 0x6e
  408f48:	e748      	b.n	408ddc <_malloc_r+0x384>
  408f4a:	68bc      	ldr	r4, [r7, #8]
  408f4c:	6862      	ldr	r2, [r4, #4]
  408f4e:	f022 0203 	bic.w	r2, r2, #3
  408f52:	e705      	b.n	408d60 <_malloc_r+0x308>
  408f54:	f3ca 000b 	ubfx	r0, sl, #0, #12
  408f58:	2800      	cmp	r0, #0
  408f5a:	f47f aea8 	bne.w	408cae <_malloc_r+0x256>
  408f5e:	4442      	add	r2, r8
  408f60:	68bb      	ldr	r3, [r7, #8]
  408f62:	f042 0201 	orr.w	r2, r2, #1
  408f66:	605a      	str	r2, [r3, #4]
  408f68:	e6ec      	b.n	408d44 <_malloc_r+0x2ec>
  408f6a:	23fe      	movs	r3, #254	; 0xfe
  408f6c:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  408f70:	207e      	movs	r0, #126	; 0x7e
  408f72:	e593      	b.n	408a9c <_malloc_r+0x44>
  408f74:	2201      	movs	r2, #1
  408f76:	f04f 0900 	mov.w	r9, #0
  408f7a:	e6c1      	b.n	408d00 <_malloc_r+0x2a8>
  408f7c:	f104 0108 	add.w	r1, r4, #8
  408f80:	4630      	mov	r0, r6
  408f82:	f7ff fa4b 	bl	40841c <_free_r>
  408f86:	f8d9 1000 	ldr.w	r1, [r9]
  408f8a:	e6db      	b.n	408d44 <_malloc_r+0x2ec>
  408f8c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408f90:	d805      	bhi.n	408f9e <_malloc_r+0x546>
  408f92:	0bda      	lsrs	r2, r3, #15
  408f94:	f102 0178 	add.w	r1, r2, #120	; 0x78
  408f98:	0049      	lsls	r1, r1, #1
  408f9a:	3277      	adds	r2, #119	; 0x77
  408f9c:	e71e      	b.n	408ddc <_malloc_r+0x384>
  408f9e:	f240 5154 	movw	r1, #1364	; 0x554
  408fa2:	428a      	cmp	r2, r1
  408fa4:	d805      	bhi.n	408fb2 <_malloc_r+0x55a>
  408fa6:	0c9a      	lsrs	r2, r3, #18
  408fa8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  408fac:	0049      	lsls	r1, r1, #1
  408fae:	327c      	adds	r2, #124	; 0x7c
  408fb0:	e714      	b.n	408ddc <_malloc_r+0x384>
  408fb2:	21fe      	movs	r1, #254	; 0xfe
  408fb4:	227e      	movs	r2, #126	; 0x7e
  408fb6:	e711      	b.n	408ddc <_malloc_r+0x384>
  408fb8:	687b      	ldr	r3, [r7, #4]
  408fba:	e784      	b.n	408ec6 <_malloc_r+0x46e>
  408fbc:	08e8      	lsrs	r0, r5, #3
  408fbe:	1c43      	adds	r3, r0, #1
  408fc0:	005b      	lsls	r3, r3, #1
  408fc2:	e5f8      	b.n	408bb6 <_malloc_r+0x15e>
  408fc4:	204004ac 	.word	0x204004ac
	...

00408fd0 <memchr>:
  408fd0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408fd4:	2a10      	cmp	r2, #16
  408fd6:	db2b      	blt.n	409030 <memchr+0x60>
  408fd8:	f010 0f07 	tst.w	r0, #7
  408fdc:	d008      	beq.n	408ff0 <memchr+0x20>
  408fde:	f810 3b01 	ldrb.w	r3, [r0], #1
  408fe2:	3a01      	subs	r2, #1
  408fe4:	428b      	cmp	r3, r1
  408fe6:	d02d      	beq.n	409044 <memchr+0x74>
  408fe8:	f010 0f07 	tst.w	r0, #7
  408fec:	b342      	cbz	r2, 409040 <memchr+0x70>
  408fee:	d1f6      	bne.n	408fde <memchr+0xe>
  408ff0:	b4f0      	push	{r4, r5, r6, r7}
  408ff2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408ff6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  408ffa:	f022 0407 	bic.w	r4, r2, #7
  408ffe:	f07f 0700 	mvns.w	r7, #0
  409002:	2300      	movs	r3, #0
  409004:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  409008:	3c08      	subs	r4, #8
  40900a:	ea85 0501 	eor.w	r5, r5, r1
  40900e:	ea86 0601 	eor.w	r6, r6, r1
  409012:	fa85 f547 	uadd8	r5, r5, r7
  409016:	faa3 f587 	sel	r5, r3, r7
  40901a:	fa86 f647 	uadd8	r6, r6, r7
  40901e:	faa5 f687 	sel	r6, r5, r7
  409022:	b98e      	cbnz	r6, 409048 <memchr+0x78>
  409024:	d1ee      	bne.n	409004 <memchr+0x34>
  409026:	bcf0      	pop	{r4, r5, r6, r7}
  409028:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40902c:	f002 0207 	and.w	r2, r2, #7
  409030:	b132      	cbz	r2, 409040 <memchr+0x70>
  409032:	f810 3b01 	ldrb.w	r3, [r0], #1
  409036:	3a01      	subs	r2, #1
  409038:	ea83 0301 	eor.w	r3, r3, r1
  40903c:	b113      	cbz	r3, 409044 <memchr+0x74>
  40903e:	d1f8      	bne.n	409032 <memchr+0x62>
  409040:	2000      	movs	r0, #0
  409042:	4770      	bx	lr
  409044:	3801      	subs	r0, #1
  409046:	4770      	bx	lr
  409048:	2d00      	cmp	r5, #0
  40904a:	bf06      	itte	eq
  40904c:	4635      	moveq	r5, r6
  40904e:	3803      	subeq	r0, #3
  409050:	3807      	subne	r0, #7
  409052:	f015 0f01 	tst.w	r5, #1
  409056:	d107      	bne.n	409068 <memchr+0x98>
  409058:	3001      	adds	r0, #1
  40905a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40905e:	bf02      	ittt	eq
  409060:	3001      	addeq	r0, #1
  409062:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  409066:	3001      	addeq	r0, #1
  409068:	bcf0      	pop	{r4, r5, r6, r7}
  40906a:	3801      	subs	r0, #1
  40906c:	4770      	bx	lr
  40906e:	bf00      	nop

00409070 <memcmp>:
  409070:	2a03      	cmp	r2, #3
  409072:	b470      	push	{r4, r5, r6}
  409074:	d926      	bls.n	4090c4 <memcmp+0x54>
  409076:	ea40 0301 	orr.w	r3, r0, r1
  40907a:	079b      	lsls	r3, r3, #30
  40907c:	d011      	beq.n	4090a2 <memcmp+0x32>
  40907e:	7804      	ldrb	r4, [r0, #0]
  409080:	780d      	ldrb	r5, [r1, #0]
  409082:	42ac      	cmp	r4, r5
  409084:	d122      	bne.n	4090cc <memcmp+0x5c>
  409086:	4402      	add	r2, r0
  409088:	1c43      	adds	r3, r0, #1
  40908a:	e005      	b.n	409098 <memcmp+0x28>
  40908c:	f813 4b01 	ldrb.w	r4, [r3], #1
  409090:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  409094:	42ac      	cmp	r4, r5
  409096:	d119      	bne.n	4090cc <memcmp+0x5c>
  409098:	4293      	cmp	r3, r2
  40909a:	d1f7      	bne.n	40908c <memcmp+0x1c>
  40909c:	2000      	movs	r0, #0
  40909e:	bc70      	pop	{r4, r5, r6}
  4090a0:	4770      	bx	lr
  4090a2:	460c      	mov	r4, r1
  4090a4:	4603      	mov	r3, r0
  4090a6:	681e      	ldr	r6, [r3, #0]
  4090a8:	6825      	ldr	r5, [r4, #0]
  4090aa:	42ae      	cmp	r6, r5
  4090ac:	4618      	mov	r0, r3
  4090ae:	4621      	mov	r1, r4
  4090b0:	f103 0304 	add.w	r3, r3, #4
  4090b4:	f104 0404 	add.w	r4, r4, #4
  4090b8:	d1e1      	bne.n	40907e <memcmp+0xe>
  4090ba:	3a04      	subs	r2, #4
  4090bc:	2a03      	cmp	r2, #3
  4090be:	4618      	mov	r0, r3
  4090c0:	4621      	mov	r1, r4
  4090c2:	d8f0      	bhi.n	4090a6 <memcmp+0x36>
  4090c4:	2a00      	cmp	r2, #0
  4090c6:	d1da      	bne.n	40907e <memcmp+0xe>
  4090c8:	4610      	mov	r0, r2
  4090ca:	e7e8      	b.n	40909e <memcmp+0x2e>
  4090cc:	1b60      	subs	r0, r4, r5
  4090ce:	bc70      	pop	{r4, r5, r6}
  4090d0:	4770      	bx	lr
  4090d2:	bf00      	nop

004090d4 <memcpy>:
  4090d4:	4684      	mov	ip, r0
  4090d6:	ea41 0300 	orr.w	r3, r1, r0
  4090da:	f013 0303 	ands.w	r3, r3, #3
  4090de:	d16d      	bne.n	4091bc <memcpy+0xe8>
  4090e0:	3a40      	subs	r2, #64	; 0x40
  4090e2:	d341      	bcc.n	409168 <memcpy+0x94>
  4090e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4090e8:	f840 3b04 	str.w	r3, [r0], #4
  4090ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4090f0:	f840 3b04 	str.w	r3, [r0], #4
  4090f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4090f8:	f840 3b04 	str.w	r3, [r0], #4
  4090fc:	f851 3b04 	ldr.w	r3, [r1], #4
  409100:	f840 3b04 	str.w	r3, [r0], #4
  409104:	f851 3b04 	ldr.w	r3, [r1], #4
  409108:	f840 3b04 	str.w	r3, [r0], #4
  40910c:	f851 3b04 	ldr.w	r3, [r1], #4
  409110:	f840 3b04 	str.w	r3, [r0], #4
  409114:	f851 3b04 	ldr.w	r3, [r1], #4
  409118:	f840 3b04 	str.w	r3, [r0], #4
  40911c:	f851 3b04 	ldr.w	r3, [r1], #4
  409120:	f840 3b04 	str.w	r3, [r0], #4
  409124:	f851 3b04 	ldr.w	r3, [r1], #4
  409128:	f840 3b04 	str.w	r3, [r0], #4
  40912c:	f851 3b04 	ldr.w	r3, [r1], #4
  409130:	f840 3b04 	str.w	r3, [r0], #4
  409134:	f851 3b04 	ldr.w	r3, [r1], #4
  409138:	f840 3b04 	str.w	r3, [r0], #4
  40913c:	f851 3b04 	ldr.w	r3, [r1], #4
  409140:	f840 3b04 	str.w	r3, [r0], #4
  409144:	f851 3b04 	ldr.w	r3, [r1], #4
  409148:	f840 3b04 	str.w	r3, [r0], #4
  40914c:	f851 3b04 	ldr.w	r3, [r1], #4
  409150:	f840 3b04 	str.w	r3, [r0], #4
  409154:	f851 3b04 	ldr.w	r3, [r1], #4
  409158:	f840 3b04 	str.w	r3, [r0], #4
  40915c:	f851 3b04 	ldr.w	r3, [r1], #4
  409160:	f840 3b04 	str.w	r3, [r0], #4
  409164:	3a40      	subs	r2, #64	; 0x40
  409166:	d2bd      	bcs.n	4090e4 <memcpy+0x10>
  409168:	3230      	adds	r2, #48	; 0x30
  40916a:	d311      	bcc.n	409190 <memcpy+0xbc>
  40916c:	f851 3b04 	ldr.w	r3, [r1], #4
  409170:	f840 3b04 	str.w	r3, [r0], #4
  409174:	f851 3b04 	ldr.w	r3, [r1], #4
  409178:	f840 3b04 	str.w	r3, [r0], #4
  40917c:	f851 3b04 	ldr.w	r3, [r1], #4
  409180:	f840 3b04 	str.w	r3, [r0], #4
  409184:	f851 3b04 	ldr.w	r3, [r1], #4
  409188:	f840 3b04 	str.w	r3, [r0], #4
  40918c:	3a10      	subs	r2, #16
  40918e:	d2ed      	bcs.n	40916c <memcpy+0x98>
  409190:	320c      	adds	r2, #12
  409192:	d305      	bcc.n	4091a0 <memcpy+0xcc>
  409194:	f851 3b04 	ldr.w	r3, [r1], #4
  409198:	f840 3b04 	str.w	r3, [r0], #4
  40919c:	3a04      	subs	r2, #4
  40919e:	d2f9      	bcs.n	409194 <memcpy+0xc0>
  4091a0:	3204      	adds	r2, #4
  4091a2:	d008      	beq.n	4091b6 <memcpy+0xe2>
  4091a4:	07d2      	lsls	r2, r2, #31
  4091a6:	bf1c      	itt	ne
  4091a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4091ac:	f800 3b01 	strbne.w	r3, [r0], #1
  4091b0:	d301      	bcc.n	4091b6 <memcpy+0xe2>
  4091b2:	880b      	ldrh	r3, [r1, #0]
  4091b4:	8003      	strh	r3, [r0, #0]
  4091b6:	4660      	mov	r0, ip
  4091b8:	4770      	bx	lr
  4091ba:	bf00      	nop
  4091bc:	2a08      	cmp	r2, #8
  4091be:	d313      	bcc.n	4091e8 <memcpy+0x114>
  4091c0:	078b      	lsls	r3, r1, #30
  4091c2:	d08d      	beq.n	4090e0 <memcpy+0xc>
  4091c4:	f010 0303 	ands.w	r3, r0, #3
  4091c8:	d08a      	beq.n	4090e0 <memcpy+0xc>
  4091ca:	f1c3 0304 	rsb	r3, r3, #4
  4091ce:	1ad2      	subs	r2, r2, r3
  4091d0:	07db      	lsls	r3, r3, #31
  4091d2:	bf1c      	itt	ne
  4091d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4091d8:	f800 3b01 	strbne.w	r3, [r0], #1
  4091dc:	d380      	bcc.n	4090e0 <memcpy+0xc>
  4091de:	f831 3b02 	ldrh.w	r3, [r1], #2
  4091e2:	f820 3b02 	strh.w	r3, [r0], #2
  4091e6:	e77b      	b.n	4090e0 <memcpy+0xc>
  4091e8:	3a04      	subs	r2, #4
  4091ea:	d3d9      	bcc.n	4091a0 <memcpy+0xcc>
  4091ec:	3a01      	subs	r2, #1
  4091ee:	f811 3b01 	ldrb.w	r3, [r1], #1
  4091f2:	f800 3b01 	strb.w	r3, [r0], #1
  4091f6:	d2f9      	bcs.n	4091ec <memcpy+0x118>
  4091f8:	780b      	ldrb	r3, [r1, #0]
  4091fa:	7003      	strb	r3, [r0, #0]
  4091fc:	784b      	ldrb	r3, [r1, #1]
  4091fe:	7043      	strb	r3, [r0, #1]
  409200:	788b      	ldrb	r3, [r1, #2]
  409202:	7083      	strb	r3, [r0, #2]
  409204:	4660      	mov	r0, ip
  409206:	4770      	bx	lr

00409208 <memmove>:
  409208:	4288      	cmp	r0, r1
  40920a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40920c:	d90d      	bls.n	40922a <memmove+0x22>
  40920e:	188b      	adds	r3, r1, r2
  409210:	4298      	cmp	r0, r3
  409212:	d20a      	bcs.n	40922a <memmove+0x22>
  409214:	1881      	adds	r1, r0, r2
  409216:	2a00      	cmp	r2, #0
  409218:	d051      	beq.n	4092be <memmove+0xb6>
  40921a:	1a9a      	subs	r2, r3, r2
  40921c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  409220:	f801 4d01 	strb.w	r4, [r1, #-1]!
  409224:	4293      	cmp	r3, r2
  409226:	d1f9      	bne.n	40921c <memmove+0x14>
  409228:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40922a:	2a0f      	cmp	r2, #15
  40922c:	d948      	bls.n	4092c0 <memmove+0xb8>
  40922e:	ea41 0300 	orr.w	r3, r1, r0
  409232:	079b      	lsls	r3, r3, #30
  409234:	d146      	bne.n	4092c4 <memmove+0xbc>
  409236:	f100 0410 	add.w	r4, r0, #16
  40923a:	f101 0310 	add.w	r3, r1, #16
  40923e:	4615      	mov	r5, r2
  409240:	f853 6c10 	ldr.w	r6, [r3, #-16]
  409244:	f844 6c10 	str.w	r6, [r4, #-16]
  409248:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40924c:	f844 6c0c 	str.w	r6, [r4, #-12]
  409250:	f853 6c08 	ldr.w	r6, [r3, #-8]
  409254:	f844 6c08 	str.w	r6, [r4, #-8]
  409258:	3d10      	subs	r5, #16
  40925a:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40925e:	f844 6c04 	str.w	r6, [r4, #-4]
  409262:	2d0f      	cmp	r5, #15
  409264:	f103 0310 	add.w	r3, r3, #16
  409268:	f104 0410 	add.w	r4, r4, #16
  40926c:	d8e8      	bhi.n	409240 <memmove+0x38>
  40926e:	f1a2 0310 	sub.w	r3, r2, #16
  409272:	f023 030f 	bic.w	r3, r3, #15
  409276:	f002 0e0f 	and.w	lr, r2, #15
  40927a:	3310      	adds	r3, #16
  40927c:	f1be 0f03 	cmp.w	lr, #3
  409280:	4419      	add	r1, r3
  409282:	4403      	add	r3, r0
  409284:	d921      	bls.n	4092ca <memmove+0xc2>
  409286:	1f1e      	subs	r6, r3, #4
  409288:	460d      	mov	r5, r1
  40928a:	4674      	mov	r4, lr
  40928c:	3c04      	subs	r4, #4
  40928e:	f855 7b04 	ldr.w	r7, [r5], #4
  409292:	f846 7f04 	str.w	r7, [r6, #4]!
  409296:	2c03      	cmp	r4, #3
  409298:	d8f8      	bhi.n	40928c <memmove+0x84>
  40929a:	f1ae 0404 	sub.w	r4, lr, #4
  40929e:	f024 0403 	bic.w	r4, r4, #3
  4092a2:	3404      	adds	r4, #4
  4092a4:	4423      	add	r3, r4
  4092a6:	4421      	add	r1, r4
  4092a8:	f002 0203 	and.w	r2, r2, #3
  4092ac:	b162      	cbz	r2, 4092c8 <memmove+0xc0>
  4092ae:	3b01      	subs	r3, #1
  4092b0:	440a      	add	r2, r1
  4092b2:	f811 4b01 	ldrb.w	r4, [r1], #1
  4092b6:	f803 4f01 	strb.w	r4, [r3, #1]!
  4092ba:	428a      	cmp	r2, r1
  4092bc:	d1f9      	bne.n	4092b2 <memmove+0xaa>
  4092be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4092c0:	4603      	mov	r3, r0
  4092c2:	e7f3      	b.n	4092ac <memmove+0xa4>
  4092c4:	4603      	mov	r3, r0
  4092c6:	e7f2      	b.n	4092ae <memmove+0xa6>
  4092c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4092ca:	4672      	mov	r2, lr
  4092cc:	e7ee      	b.n	4092ac <memmove+0xa4>
  4092ce:	bf00      	nop

004092d0 <__malloc_lock>:
  4092d0:	4770      	bx	lr
  4092d2:	bf00      	nop

004092d4 <__malloc_unlock>:
  4092d4:	4770      	bx	lr
  4092d6:	bf00      	nop

004092d8 <_Balloc>:
  4092d8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4092da:	b570      	push	{r4, r5, r6, lr}
  4092dc:	4605      	mov	r5, r0
  4092de:	460c      	mov	r4, r1
  4092e0:	b14b      	cbz	r3, 4092f6 <_Balloc+0x1e>
  4092e2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4092e6:	b180      	cbz	r0, 40930a <_Balloc+0x32>
  4092e8:	6802      	ldr	r2, [r0, #0]
  4092ea:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4092ee:	2300      	movs	r3, #0
  4092f0:	6103      	str	r3, [r0, #16]
  4092f2:	60c3      	str	r3, [r0, #12]
  4092f4:	bd70      	pop	{r4, r5, r6, pc}
  4092f6:	2221      	movs	r2, #33	; 0x21
  4092f8:	2104      	movs	r1, #4
  4092fa:	f000 ff1f 	bl	40a13c <_calloc_r>
  4092fe:	64e8      	str	r0, [r5, #76]	; 0x4c
  409300:	4603      	mov	r3, r0
  409302:	2800      	cmp	r0, #0
  409304:	d1ed      	bne.n	4092e2 <_Balloc+0xa>
  409306:	2000      	movs	r0, #0
  409308:	bd70      	pop	{r4, r5, r6, pc}
  40930a:	2101      	movs	r1, #1
  40930c:	fa01 f604 	lsl.w	r6, r1, r4
  409310:	1d72      	adds	r2, r6, #5
  409312:	4628      	mov	r0, r5
  409314:	0092      	lsls	r2, r2, #2
  409316:	f000 ff11 	bl	40a13c <_calloc_r>
  40931a:	2800      	cmp	r0, #0
  40931c:	d0f3      	beq.n	409306 <_Balloc+0x2e>
  40931e:	6044      	str	r4, [r0, #4]
  409320:	6086      	str	r6, [r0, #8]
  409322:	e7e4      	b.n	4092ee <_Balloc+0x16>

00409324 <_Bfree>:
  409324:	b131      	cbz	r1, 409334 <_Bfree+0x10>
  409326:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409328:	684a      	ldr	r2, [r1, #4]
  40932a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40932e:	6008      	str	r0, [r1, #0]
  409330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  409334:	4770      	bx	lr
  409336:	bf00      	nop

00409338 <__multadd>:
  409338:	b5f0      	push	{r4, r5, r6, r7, lr}
  40933a:	690c      	ldr	r4, [r1, #16]
  40933c:	b083      	sub	sp, #12
  40933e:	460d      	mov	r5, r1
  409340:	4606      	mov	r6, r0
  409342:	f101 0e14 	add.w	lr, r1, #20
  409346:	2700      	movs	r7, #0
  409348:	f8de 0000 	ldr.w	r0, [lr]
  40934c:	b281      	uxth	r1, r0
  40934e:	fb02 3101 	mla	r1, r2, r1, r3
  409352:	0c0b      	lsrs	r3, r1, #16
  409354:	0c00      	lsrs	r0, r0, #16
  409356:	fb02 3300 	mla	r3, r2, r0, r3
  40935a:	b289      	uxth	r1, r1
  40935c:	3701      	adds	r7, #1
  40935e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  409362:	42bc      	cmp	r4, r7
  409364:	f84e 1b04 	str.w	r1, [lr], #4
  409368:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40936c:	dcec      	bgt.n	409348 <__multadd+0x10>
  40936e:	b13b      	cbz	r3, 409380 <__multadd+0x48>
  409370:	68aa      	ldr	r2, [r5, #8]
  409372:	4294      	cmp	r4, r2
  409374:	da07      	bge.n	409386 <__multadd+0x4e>
  409376:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40937a:	3401      	adds	r4, #1
  40937c:	6153      	str	r3, [r2, #20]
  40937e:	612c      	str	r4, [r5, #16]
  409380:	4628      	mov	r0, r5
  409382:	b003      	add	sp, #12
  409384:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409386:	6869      	ldr	r1, [r5, #4]
  409388:	9301      	str	r3, [sp, #4]
  40938a:	3101      	adds	r1, #1
  40938c:	4630      	mov	r0, r6
  40938e:	f7ff ffa3 	bl	4092d8 <_Balloc>
  409392:	692a      	ldr	r2, [r5, #16]
  409394:	3202      	adds	r2, #2
  409396:	f105 010c 	add.w	r1, r5, #12
  40939a:	4607      	mov	r7, r0
  40939c:	0092      	lsls	r2, r2, #2
  40939e:	300c      	adds	r0, #12
  4093a0:	f7ff fe98 	bl	4090d4 <memcpy>
  4093a4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4093a6:	6869      	ldr	r1, [r5, #4]
  4093a8:	9b01      	ldr	r3, [sp, #4]
  4093aa:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4093ae:	6028      	str	r0, [r5, #0]
  4093b0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  4093b4:	463d      	mov	r5, r7
  4093b6:	e7de      	b.n	409376 <__multadd+0x3e>

004093b8 <__hi0bits>:
  4093b8:	0c03      	lsrs	r3, r0, #16
  4093ba:	041b      	lsls	r3, r3, #16
  4093bc:	b9b3      	cbnz	r3, 4093ec <__hi0bits+0x34>
  4093be:	0400      	lsls	r0, r0, #16
  4093c0:	2310      	movs	r3, #16
  4093c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  4093c6:	bf04      	itt	eq
  4093c8:	0200      	lsleq	r0, r0, #8
  4093ca:	3308      	addeq	r3, #8
  4093cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  4093d0:	bf04      	itt	eq
  4093d2:	0100      	lsleq	r0, r0, #4
  4093d4:	3304      	addeq	r3, #4
  4093d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  4093da:	bf04      	itt	eq
  4093dc:	0080      	lsleq	r0, r0, #2
  4093de:	3302      	addeq	r3, #2
  4093e0:	2800      	cmp	r0, #0
  4093e2:	db07      	blt.n	4093f4 <__hi0bits+0x3c>
  4093e4:	0042      	lsls	r2, r0, #1
  4093e6:	d403      	bmi.n	4093f0 <__hi0bits+0x38>
  4093e8:	2020      	movs	r0, #32
  4093ea:	4770      	bx	lr
  4093ec:	2300      	movs	r3, #0
  4093ee:	e7e8      	b.n	4093c2 <__hi0bits+0xa>
  4093f0:	1c58      	adds	r0, r3, #1
  4093f2:	4770      	bx	lr
  4093f4:	4618      	mov	r0, r3
  4093f6:	4770      	bx	lr

004093f8 <__lo0bits>:
  4093f8:	6803      	ldr	r3, [r0, #0]
  4093fa:	f013 0207 	ands.w	r2, r3, #7
  4093fe:	d007      	beq.n	409410 <__lo0bits+0x18>
  409400:	07d9      	lsls	r1, r3, #31
  409402:	d420      	bmi.n	409446 <__lo0bits+0x4e>
  409404:	079a      	lsls	r2, r3, #30
  409406:	d420      	bmi.n	40944a <__lo0bits+0x52>
  409408:	089b      	lsrs	r3, r3, #2
  40940a:	6003      	str	r3, [r0, #0]
  40940c:	2002      	movs	r0, #2
  40940e:	4770      	bx	lr
  409410:	b299      	uxth	r1, r3
  409412:	b909      	cbnz	r1, 409418 <__lo0bits+0x20>
  409414:	0c1b      	lsrs	r3, r3, #16
  409416:	2210      	movs	r2, #16
  409418:	f013 0fff 	tst.w	r3, #255	; 0xff
  40941c:	bf04      	itt	eq
  40941e:	0a1b      	lsreq	r3, r3, #8
  409420:	3208      	addeq	r2, #8
  409422:	0719      	lsls	r1, r3, #28
  409424:	bf04      	itt	eq
  409426:	091b      	lsreq	r3, r3, #4
  409428:	3204      	addeq	r2, #4
  40942a:	0799      	lsls	r1, r3, #30
  40942c:	bf04      	itt	eq
  40942e:	089b      	lsreq	r3, r3, #2
  409430:	3202      	addeq	r2, #2
  409432:	07d9      	lsls	r1, r3, #31
  409434:	d404      	bmi.n	409440 <__lo0bits+0x48>
  409436:	085b      	lsrs	r3, r3, #1
  409438:	d101      	bne.n	40943e <__lo0bits+0x46>
  40943a:	2020      	movs	r0, #32
  40943c:	4770      	bx	lr
  40943e:	3201      	adds	r2, #1
  409440:	6003      	str	r3, [r0, #0]
  409442:	4610      	mov	r0, r2
  409444:	4770      	bx	lr
  409446:	2000      	movs	r0, #0
  409448:	4770      	bx	lr
  40944a:	085b      	lsrs	r3, r3, #1
  40944c:	6003      	str	r3, [r0, #0]
  40944e:	2001      	movs	r0, #1
  409450:	4770      	bx	lr
  409452:	bf00      	nop

00409454 <__i2b>:
  409454:	b510      	push	{r4, lr}
  409456:	460c      	mov	r4, r1
  409458:	2101      	movs	r1, #1
  40945a:	f7ff ff3d 	bl	4092d8 <_Balloc>
  40945e:	2201      	movs	r2, #1
  409460:	6144      	str	r4, [r0, #20]
  409462:	6102      	str	r2, [r0, #16]
  409464:	bd10      	pop	{r4, pc}
  409466:	bf00      	nop

00409468 <__multiply>:
  409468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40946c:	690d      	ldr	r5, [r1, #16]
  40946e:	6917      	ldr	r7, [r2, #16]
  409470:	42bd      	cmp	r5, r7
  409472:	b083      	sub	sp, #12
  409474:	460c      	mov	r4, r1
  409476:	4616      	mov	r6, r2
  409478:	da04      	bge.n	409484 <__multiply+0x1c>
  40947a:	462a      	mov	r2, r5
  40947c:	4634      	mov	r4, r6
  40947e:	463d      	mov	r5, r7
  409480:	460e      	mov	r6, r1
  409482:	4617      	mov	r7, r2
  409484:	68a3      	ldr	r3, [r4, #8]
  409486:	6861      	ldr	r1, [r4, #4]
  409488:	eb05 0807 	add.w	r8, r5, r7
  40948c:	4598      	cmp	r8, r3
  40948e:	bfc8      	it	gt
  409490:	3101      	addgt	r1, #1
  409492:	f7ff ff21 	bl	4092d8 <_Balloc>
  409496:	f100 0c14 	add.w	ip, r0, #20
  40949a:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  40949e:	45cc      	cmp	ip, r9
  4094a0:	9000      	str	r0, [sp, #0]
  4094a2:	d205      	bcs.n	4094b0 <__multiply+0x48>
  4094a4:	4663      	mov	r3, ip
  4094a6:	2100      	movs	r1, #0
  4094a8:	f843 1b04 	str.w	r1, [r3], #4
  4094ac:	4599      	cmp	r9, r3
  4094ae:	d8fb      	bhi.n	4094a8 <__multiply+0x40>
  4094b0:	f106 0214 	add.w	r2, r6, #20
  4094b4:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  4094b8:	f104 0314 	add.w	r3, r4, #20
  4094bc:	4552      	cmp	r2, sl
  4094be:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  4094c2:	d254      	bcs.n	40956e <__multiply+0x106>
  4094c4:	f8cd 9004 	str.w	r9, [sp, #4]
  4094c8:	4699      	mov	r9, r3
  4094ca:	f852 3b04 	ldr.w	r3, [r2], #4
  4094ce:	fa1f fb83 	uxth.w	fp, r3
  4094d2:	f1bb 0f00 	cmp.w	fp, #0
  4094d6:	d020      	beq.n	40951a <__multiply+0xb2>
  4094d8:	2000      	movs	r0, #0
  4094da:	464f      	mov	r7, r9
  4094dc:	4666      	mov	r6, ip
  4094de:	4605      	mov	r5, r0
  4094e0:	e000      	b.n	4094e4 <__multiply+0x7c>
  4094e2:	461e      	mov	r6, r3
  4094e4:	f857 4b04 	ldr.w	r4, [r7], #4
  4094e8:	6830      	ldr	r0, [r6, #0]
  4094ea:	b2a1      	uxth	r1, r4
  4094ec:	b283      	uxth	r3, r0
  4094ee:	fb0b 3101 	mla	r1, fp, r1, r3
  4094f2:	0c24      	lsrs	r4, r4, #16
  4094f4:	0c00      	lsrs	r0, r0, #16
  4094f6:	194b      	adds	r3, r1, r5
  4094f8:	fb0b 0004 	mla	r0, fp, r4, r0
  4094fc:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  409500:	b299      	uxth	r1, r3
  409502:	4633      	mov	r3, r6
  409504:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  409508:	45be      	cmp	lr, r7
  40950a:	ea4f 4510 	mov.w	r5, r0, lsr #16
  40950e:	f843 1b04 	str.w	r1, [r3], #4
  409512:	d8e6      	bhi.n	4094e2 <__multiply+0x7a>
  409514:	6075      	str	r5, [r6, #4]
  409516:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40951a:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  40951e:	d020      	beq.n	409562 <__multiply+0xfa>
  409520:	f8dc 3000 	ldr.w	r3, [ip]
  409524:	4667      	mov	r7, ip
  409526:	4618      	mov	r0, r3
  409528:	464d      	mov	r5, r9
  40952a:	2100      	movs	r1, #0
  40952c:	e000      	b.n	409530 <__multiply+0xc8>
  40952e:	4637      	mov	r7, r6
  409530:	882c      	ldrh	r4, [r5, #0]
  409532:	0c00      	lsrs	r0, r0, #16
  409534:	fb0b 0004 	mla	r0, fp, r4, r0
  409538:	4401      	add	r1, r0
  40953a:	b29c      	uxth	r4, r3
  40953c:	463e      	mov	r6, r7
  40953e:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  409542:	f846 3b04 	str.w	r3, [r6], #4
  409546:	6878      	ldr	r0, [r7, #4]
  409548:	f855 4b04 	ldr.w	r4, [r5], #4
  40954c:	b283      	uxth	r3, r0
  40954e:	0c24      	lsrs	r4, r4, #16
  409550:	fb0b 3404 	mla	r4, fp, r4, r3
  409554:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  409558:	45ae      	cmp	lr, r5
  40955a:	ea4f 4113 	mov.w	r1, r3, lsr #16
  40955e:	d8e6      	bhi.n	40952e <__multiply+0xc6>
  409560:	607b      	str	r3, [r7, #4]
  409562:	4592      	cmp	sl, r2
  409564:	f10c 0c04 	add.w	ip, ip, #4
  409568:	d8af      	bhi.n	4094ca <__multiply+0x62>
  40956a:	f8dd 9004 	ldr.w	r9, [sp, #4]
  40956e:	f1b8 0f00 	cmp.w	r8, #0
  409572:	dd0b      	ble.n	40958c <__multiply+0x124>
  409574:	f859 3c04 	ldr.w	r3, [r9, #-4]
  409578:	f1a9 0904 	sub.w	r9, r9, #4
  40957c:	b11b      	cbz	r3, 409586 <__multiply+0x11e>
  40957e:	e005      	b.n	40958c <__multiply+0x124>
  409580:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  409584:	b913      	cbnz	r3, 40958c <__multiply+0x124>
  409586:	f1b8 0801 	subs.w	r8, r8, #1
  40958a:	d1f9      	bne.n	409580 <__multiply+0x118>
  40958c:	9800      	ldr	r0, [sp, #0]
  40958e:	f8c0 8010 	str.w	r8, [r0, #16]
  409592:	b003      	add	sp, #12
  409594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409598 <__pow5mult>:
  409598:	f012 0303 	ands.w	r3, r2, #3
  40959c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4095a0:	4614      	mov	r4, r2
  4095a2:	4607      	mov	r7, r0
  4095a4:	d12e      	bne.n	409604 <__pow5mult+0x6c>
  4095a6:	460e      	mov	r6, r1
  4095a8:	10a4      	asrs	r4, r4, #2
  4095aa:	d01c      	beq.n	4095e6 <__pow5mult+0x4e>
  4095ac:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  4095ae:	b395      	cbz	r5, 409616 <__pow5mult+0x7e>
  4095b0:	07e3      	lsls	r3, r4, #31
  4095b2:	f04f 0800 	mov.w	r8, #0
  4095b6:	d406      	bmi.n	4095c6 <__pow5mult+0x2e>
  4095b8:	1064      	asrs	r4, r4, #1
  4095ba:	d014      	beq.n	4095e6 <__pow5mult+0x4e>
  4095bc:	6828      	ldr	r0, [r5, #0]
  4095be:	b1a8      	cbz	r0, 4095ec <__pow5mult+0x54>
  4095c0:	4605      	mov	r5, r0
  4095c2:	07e3      	lsls	r3, r4, #31
  4095c4:	d5f8      	bpl.n	4095b8 <__pow5mult+0x20>
  4095c6:	462a      	mov	r2, r5
  4095c8:	4631      	mov	r1, r6
  4095ca:	4638      	mov	r0, r7
  4095cc:	f7ff ff4c 	bl	409468 <__multiply>
  4095d0:	b1b6      	cbz	r6, 409600 <__pow5mult+0x68>
  4095d2:	6872      	ldr	r2, [r6, #4]
  4095d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4095d6:	1064      	asrs	r4, r4, #1
  4095d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4095dc:	6031      	str	r1, [r6, #0]
  4095de:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4095e2:	4606      	mov	r6, r0
  4095e4:	d1ea      	bne.n	4095bc <__pow5mult+0x24>
  4095e6:	4630      	mov	r0, r6
  4095e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4095ec:	462a      	mov	r2, r5
  4095ee:	4629      	mov	r1, r5
  4095f0:	4638      	mov	r0, r7
  4095f2:	f7ff ff39 	bl	409468 <__multiply>
  4095f6:	6028      	str	r0, [r5, #0]
  4095f8:	f8c0 8000 	str.w	r8, [r0]
  4095fc:	4605      	mov	r5, r0
  4095fe:	e7e0      	b.n	4095c2 <__pow5mult+0x2a>
  409600:	4606      	mov	r6, r0
  409602:	e7d9      	b.n	4095b8 <__pow5mult+0x20>
  409604:	1e5a      	subs	r2, r3, #1
  409606:	4d0b      	ldr	r5, [pc, #44]	; (409634 <__pow5mult+0x9c>)
  409608:	2300      	movs	r3, #0
  40960a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40960e:	f7ff fe93 	bl	409338 <__multadd>
  409612:	4606      	mov	r6, r0
  409614:	e7c8      	b.n	4095a8 <__pow5mult+0x10>
  409616:	2101      	movs	r1, #1
  409618:	4638      	mov	r0, r7
  40961a:	f7ff fe5d 	bl	4092d8 <_Balloc>
  40961e:	f240 2171 	movw	r1, #625	; 0x271
  409622:	2201      	movs	r2, #1
  409624:	2300      	movs	r3, #0
  409626:	6141      	str	r1, [r0, #20]
  409628:	6102      	str	r2, [r0, #16]
  40962a:	4605      	mov	r5, r0
  40962c:	64b8      	str	r0, [r7, #72]	; 0x48
  40962e:	6003      	str	r3, [r0, #0]
  409630:	e7be      	b.n	4095b0 <__pow5mult+0x18>
  409632:	bf00      	nop
  409634:	0040c2e8 	.word	0x0040c2e8

00409638 <__lshift>:
  409638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40963c:	4691      	mov	r9, r2
  40963e:	690a      	ldr	r2, [r1, #16]
  409640:	688b      	ldr	r3, [r1, #8]
  409642:	ea4f 1469 	mov.w	r4, r9, asr #5
  409646:	eb04 0802 	add.w	r8, r4, r2
  40964a:	f108 0501 	add.w	r5, r8, #1
  40964e:	429d      	cmp	r5, r3
  409650:	460e      	mov	r6, r1
  409652:	4682      	mov	sl, r0
  409654:	6849      	ldr	r1, [r1, #4]
  409656:	dd04      	ble.n	409662 <__lshift+0x2a>
  409658:	005b      	lsls	r3, r3, #1
  40965a:	429d      	cmp	r5, r3
  40965c:	f101 0101 	add.w	r1, r1, #1
  409660:	dcfa      	bgt.n	409658 <__lshift+0x20>
  409662:	4650      	mov	r0, sl
  409664:	f7ff fe38 	bl	4092d8 <_Balloc>
  409668:	2c00      	cmp	r4, #0
  40966a:	f100 0214 	add.w	r2, r0, #20
  40966e:	dd38      	ble.n	4096e2 <__lshift+0xaa>
  409670:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  409674:	2100      	movs	r1, #0
  409676:	f842 1b04 	str.w	r1, [r2], #4
  40967a:	4293      	cmp	r3, r2
  40967c:	d1fb      	bne.n	409676 <__lshift+0x3e>
  40967e:	6934      	ldr	r4, [r6, #16]
  409680:	f106 0114 	add.w	r1, r6, #20
  409684:	f019 091f 	ands.w	r9, r9, #31
  409688:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40968c:	d021      	beq.n	4096d2 <__lshift+0x9a>
  40968e:	f1c9 0220 	rsb	r2, r9, #32
  409692:	2400      	movs	r4, #0
  409694:	680f      	ldr	r7, [r1, #0]
  409696:	fa07 fc09 	lsl.w	ip, r7, r9
  40969a:	ea4c 0404 	orr.w	r4, ip, r4
  40969e:	469c      	mov	ip, r3
  4096a0:	f843 4b04 	str.w	r4, [r3], #4
  4096a4:	f851 4b04 	ldr.w	r4, [r1], #4
  4096a8:	458e      	cmp	lr, r1
  4096aa:	fa24 f402 	lsr.w	r4, r4, r2
  4096ae:	d8f1      	bhi.n	409694 <__lshift+0x5c>
  4096b0:	f8cc 4004 	str.w	r4, [ip, #4]
  4096b4:	b10c      	cbz	r4, 4096ba <__lshift+0x82>
  4096b6:	f108 0502 	add.w	r5, r8, #2
  4096ba:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  4096be:	6872      	ldr	r2, [r6, #4]
  4096c0:	3d01      	subs	r5, #1
  4096c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4096c6:	6105      	str	r5, [r0, #16]
  4096c8:	6031      	str	r1, [r6, #0]
  4096ca:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4096ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4096d2:	3b04      	subs	r3, #4
  4096d4:	f851 2b04 	ldr.w	r2, [r1], #4
  4096d8:	f843 2f04 	str.w	r2, [r3, #4]!
  4096dc:	458e      	cmp	lr, r1
  4096de:	d8f9      	bhi.n	4096d4 <__lshift+0x9c>
  4096e0:	e7eb      	b.n	4096ba <__lshift+0x82>
  4096e2:	4613      	mov	r3, r2
  4096e4:	e7cb      	b.n	40967e <__lshift+0x46>
  4096e6:	bf00      	nop

004096e8 <__mcmp>:
  4096e8:	6902      	ldr	r2, [r0, #16]
  4096ea:	690b      	ldr	r3, [r1, #16]
  4096ec:	1ad2      	subs	r2, r2, r3
  4096ee:	d112      	bne.n	409716 <__mcmp+0x2e>
  4096f0:	009b      	lsls	r3, r3, #2
  4096f2:	3014      	adds	r0, #20
  4096f4:	3114      	adds	r1, #20
  4096f6:	4419      	add	r1, r3
  4096f8:	b410      	push	{r4}
  4096fa:	4403      	add	r3, r0
  4096fc:	e001      	b.n	409702 <__mcmp+0x1a>
  4096fe:	4298      	cmp	r0, r3
  409700:	d20b      	bcs.n	40971a <__mcmp+0x32>
  409702:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  409706:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40970a:	4294      	cmp	r4, r2
  40970c:	d0f7      	beq.n	4096fe <__mcmp+0x16>
  40970e:	d307      	bcc.n	409720 <__mcmp+0x38>
  409710:	2001      	movs	r0, #1
  409712:	bc10      	pop	{r4}
  409714:	4770      	bx	lr
  409716:	4610      	mov	r0, r2
  409718:	4770      	bx	lr
  40971a:	2000      	movs	r0, #0
  40971c:	bc10      	pop	{r4}
  40971e:	4770      	bx	lr
  409720:	f04f 30ff 	mov.w	r0, #4294967295
  409724:	e7f5      	b.n	409712 <__mcmp+0x2a>
  409726:	bf00      	nop

00409728 <__mdiff>:
  409728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40972c:	690b      	ldr	r3, [r1, #16]
  40972e:	460f      	mov	r7, r1
  409730:	6911      	ldr	r1, [r2, #16]
  409732:	1a5b      	subs	r3, r3, r1
  409734:	2b00      	cmp	r3, #0
  409736:	4690      	mov	r8, r2
  409738:	d117      	bne.n	40976a <__mdiff+0x42>
  40973a:	0089      	lsls	r1, r1, #2
  40973c:	f107 0214 	add.w	r2, r7, #20
  409740:	f108 0514 	add.w	r5, r8, #20
  409744:	1853      	adds	r3, r2, r1
  409746:	4429      	add	r1, r5
  409748:	e001      	b.n	40974e <__mdiff+0x26>
  40974a:	429a      	cmp	r2, r3
  40974c:	d25e      	bcs.n	40980c <__mdiff+0xe4>
  40974e:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  409752:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  409756:	42a6      	cmp	r6, r4
  409758:	d0f7      	beq.n	40974a <__mdiff+0x22>
  40975a:	d260      	bcs.n	40981e <__mdiff+0xf6>
  40975c:	463b      	mov	r3, r7
  40975e:	4614      	mov	r4, r2
  409760:	4647      	mov	r7, r8
  409762:	f04f 0901 	mov.w	r9, #1
  409766:	4698      	mov	r8, r3
  409768:	e006      	b.n	409778 <__mdiff+0x50>
  40976a:	db5d      	blt.n	409828 <__mdiff+0x100>
  40976c:	f107 0514 	add.w	r5, r7, #20
  409770:	f102 0414 	add.w	r4, r2, #20
  409774:	f04f 0900 	mov.w	r9, #0
  409778:	6879      	ldr	r1, [r7, #4]
  40977a:	f7ff fdad 	bl	4092d8 <_Balloc>
  40977e:	f8d8 3010 	ldr.w	r3, [r8, #16]
  409782:	693e      	ldr	r6, [r7, #16]
  409784:	f8c0 900c 	str.w	r9, [r0, #12]
  409788:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40978c:	46a6      	mov	lr, r4
  40978e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  409792:	f100 0414 	add.w	r4, r0, #20
  409796:	2300      	movs	r3, #0
  409798:	f85e 1b04 	ldr.w	r1, [lr], #4
  40979c:	f855 8b04 	ldr.w	r8, [r5], #4
  4097a0:	b28a      	uxth	r2, r1
  4097a2:	fa13 f388 	uxtah	r3, r3, r8
  4097a6:	0c09      	lsrs	r1, r1, #16
  4097a8:	1a9a      	subs	r2, r3, r2
  4097aa:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4097ae:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4097b2:	b292      	uxth	r2, r2
  4097b4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4097b8:	45f4      	cmp	ip, lr
  4097ba:	f844 2b04 	str.w	r2, [r4], #4
  4097be:	ea4f 4323 	mov.w	r3, r3, asr #16
  4097c2:	d8e9      	bhi.n	409798 <__mdiff+0x70>
  4097c4:	42af      	cmp	r7, r5
  4097c6:	d917      	bls.n	4097f8 <__mdiff+0xd0>
  4097c8:	46a4      	mov	ip, r4
  4097ca:	4629      	mov	r1, r5
  4097cc:	f851 eb04 	ldr.w	lr, [r1], #4
  4097d0:	fa13 f28e 	uxtah	r2, r3, lr
  4097d4:	1413      	asrs	r3, r2, #16
  4097d6:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  4097da:	b292      	uxth	r2, r2
  4097dc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4097e0:	428f      	cmp	r7, r1
  4097e2:	f84c 2b04 	str.w	r2, [ip], #4
  4097e6:	ea4f 4323 	mov.w	r3, r3, asr #16
  4097ea:	d8ef      	bhi.n	4097cc <__mdiff+0xa4>
  4097ec:	43ed      	mvns	r5, r5
  4097ee:	443d      	add	r5, r7
  4097f0:	f025 0503 	bic.w	r5, r5, #3
  4097f4:	3504      	adds	r5, #4
  4097f6:	442c      	add	r4, r5
  4097f8:	3c04      	subs	r4, #4
  4097fa:	b922      	cbnz	r2, 409806 <__mdiff+0xde>
  4097fc:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  409800:	3e01      	subs	r6, #1
  409802:	2b00      	cmp	r3, #0
  409804:	d0fa      	beq.n	4097fc <__mdiff+0xd4>
  409806:	6106      	str	r6, [r0, #16]
  409808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40980c:	2100      	movs	r1, #0
  40980e:	f7ff fd63 	bl	4092d8 <_Balloc>
  409812:	2201      	movs	r2, #1
  409814:	2300      	movs	r3, #0
  409816:	6102      	str	r2, [r0, #16]
  409818:	6143      	str	r3, [r0, #20]
  40981a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40981e:	462c      	mov	r4, r5
  409820:	f04f 0900 	mov.w	r9, #0
  409824:	4615      	mov	r5, r2
  409826:	e7a7      	b.n	409778 <__mdiff+0x50>
  409828:	463b      	mov	r3, r7
  40982a:	f107 0414 	add.w	r4, r7, #20
  40982e:	f108 0514 	add.w	r5, r8, #20
  409832:	4647      	mov	r7, r8
  409834:	f04f 0901 	mov.w	r9, #1
  409838:	4698      	mov	r8, r3
  40983a:	e79d      	b.n	409778 <__mdiff+0x50>

0040983c <__d2b>:
  40983c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409840:	b082      	sub	sp, #8
  409842:	2101      	movs	r1, #1
  409844:	461c      	mov	r4, r3
  409846:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40984a:	4615      	mov	r5, r2
  40984c:	9e08      	ldr	r6, [sp, #32]
  40984e:	f7ff fd43 	bl	4092d8 <_Balloc>
  409852:	f3c4 0413 	ubfx	r4, r4, #0, #20
  409856:	4680      	mov	r8, r0
  409858:	b10f      	cbz	r7, 40985e <__d2b+0x22>
  40985a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40985e:	9401      	str	r4, [sp, #4]
  409860:	b31d      	cbz	r5, 4098aa <__d2b+0x6e>
  409862:	a802      	add	r0, sp, #8
  409864:	f840 5d08 	str.w	r5, [r0, #-8]!
  409868:	f7ff fdc6 	bl	4093f8 <__lo0bits>
  40986c:	2800      	cmp	r0, #0
  40986e:	d134      	bne.n	4098da <__d2b+0x9e>
  409870:	e89d 000c 	ldmia.w	sp, {r2, r3}
  409874:	f8c8 2014 	str.w	r2, [r8, #20]
  409878:	2b00      	cmp	r3, #0
  40987a:	bf0c      	ite	eq
  40987c:	2101      	moveq	r1, #1
  40987e:	2102      	movne	r1, #2
  409880:	f8c8 3018 	str.w	r3, [r8, #24]
  409884:	f8c8 1010 	str.w	r1, [r8, #16]
  409888:	b9df      	cbnz	r7, 4098c2 <__d2b+0x86>
  40988a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40988e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  409892:	6030      	str	r0, [r6, #0]
  409894:	6918      	ldr	r0, [r3, #16]
  409896:	f7ff fd8f 	bl	4093b8 <__hi0bits>
  40989a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40989c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4098a0:	6018      	str	r0, [r3, #0]
  4098a2:	4640      	mov	r0, r8
  4098a4:	b002      	add	sp, #8
  4098a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4098aa:	a801      	add	r0, sp, #4
  4098ac:	f7ff fda4 	bl	4093f8 <__lo0bits>
  4098b0:	9b01      	ldr	r3, [sp, #4]
  4098b2:	f8c8 3014 	str.w	r3, [r8, #20]
  4098b6:	2101      	movs	r1, #1
  4098b8:	3020      	adds	r0, #32
  4098ba:	f8c8 1010 	str.w	r1, [r8, #16]
  4098be:	2f00      	cmp	r7, #0
  4098c0:	d0e3      	beq.n	40988a <__d2b+0x4e>
  4098c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4098c4:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4098c8:	4407      	add	r7, r0
  4098ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4098ce:	6037      	str	r7, [r6, #0]
  4098d0:	6018      	str	r0, [r3, #0]
  4098d2:	4640      	mov	r0, r8
  4098d4:	b002      	add	sp, #8
  4098d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4098da:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4098de:	f1c0 0120 	rsb	r1, r0, #32
  4098e2:	fa03 f101 	lsl.w	r1, r3, r1
  4098e6:	430a      	orrs	r2, r1
  4098e8:	40c3      	lsrs	r3, r0
  4098ea:	9301      	str	r3, [sp, #4]
  4098ec:	f8c8 2014 	str.w	r2, [r8, #20]
  4098f0:	e7c2      	b.n	409878 <__d2b+0x3c>
  4098f2:	bf00      	nop

004098f4 <_realloc_r>:
  4098f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4098f8:	4617      	mov	r7, r2
  4098fa:	b083      	sub	sp, #12
  4098fc:	2900      	cmp	r1, #0
  4098fe:	f000 80c1 	beq.w	409a84 <_realloc_r+0x190>
  409902:	460e      	mov	r6, r1
  409904:	4681      	mov	r9, r0
  409906:	f107 050b 	add.w	r5, r7, #11
  40990a:	f7ff fce1 	bl	4092d0 <__malloc_lock>
  40990e:	f856 ec04 	ldr.w	lr, [r6, #-4]
  409912:	2d16      	cmp	r5, #22
  409914:	f02e 0403 	bic.w	r4, lr, #3
  409918:	f1a6 0808 	sub.w	r8, r6, #8
  40991c:	d840      	bhi.n	4099a0 <_realloc_r+0xac>
  40991e:	2210      	movs	r2, #16
  409920:	4615      	mov	r5, r2
  409922:	42af      	cmp	r7, r5
  409924:	d841      	bhi.n	4099aa <_realloc_r+0xb6>
  409926:	4294      	cmp	r4, r2
  409928:	da75      	bge.n	409a16 <_realloc_r+0x122>
  40992a:	4bc9      	ldr	r3, [pc, #804]	; (409c50 <_realloc_r+0x35c>)
  40992c:	6899      	ldr	r1, [r3, #8]
  40992e:	eb08 0004 	add.w	r0, r8, r4
  409932:	4288      	cmp	r0, r1
  409934:	6841      	ldr	r1, [r0, #4]
  409936:	f000 80d9 	beq.w	409aec <_realloc_r+0x1f8>
  40993a:	f021 0301 	bic.w	r3, r1, #1
  40993e:	4403      	add	r3, r0
  409940:	685b      	ldr	r3, [r3, #4]
  409942:	07db      	lsls	r3, r3, #31
  409944:	d57d      	bpl.n	409a42 <_realloc_r+0x14e>
  409946:	f01e 0f01 	tst.w	lr, #1
  40994a:	d035      	beq.n	4099b8 <_realloc_r+0xc4>
  40994c:	4639      	mov	r1, r7
  40994e:	4648      	mov	r0, r9
  409950:	f7ff f882 	bl	408a58 <_malloc_r>
  409954:	4607      	mov	r7, r0
  409956:	b1e0      	cbz	r0, 409992 <_realloc_r+0x9e>
  409958:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40995c:	f023 0301 	bic.w	r3, r3, #1
  409960:	4443      	add	r3, r8
  409962:	f1a0 0208 	sub.w	r2, r0, #8
  409966:	429a      	cmp	r2, r3
  409968:	f000 8144 	beq.w	409bf4 <_realloc_r+0x300>
  40996c:	1f22      	subs	r2, r4, #4
  40996e:	2a24      	cmp	r2, #36	; 0x24
  409970:	f200 8131 	bhi.w	409bd6 <_realloc_r+0x2e2>
  409974:	2a13      	cmp	r2, #19
  409976:	f200 8104 	bhi.w	409b82 <_realloc_r+0x28e>
  40997a:	4603      	mov	r3, r0
  40997c:	4632      	mov	r2, r6
  40997e:	6811      	ldr	r1, [r2, #0]
  409980:	6019      	str	r1, [r3, #0]
  409982:	6851      	ldr	r1, [r2, #4]
  409984:	6059      	str	r1, [r3, #4]
  409986:	6892      	ldr	r2, [r2, #8]
  409988:	609a      	str	r2, [r3, #8]
  40998a:	4631      	mov	r1, r6
  40998c:	4648      	mov	r0, r9
  40998e:	f7fe fd45 	bl	40841c <_free_r>
  409992:	4648      	mov	r0, r9
  409994:	f7ff fc9e 	bl	4092d4 <__malloc_unlock>
  409998:	4638      	mov	r0, r7
  40999a:	b003      	add	sp, #12
  40999c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4099a0:	f025 0507 	bic.w	r5, r5, #7
  4099a4:	2d00      	cmp	r5, #0
  4099a6:	462a      	mov	r2, r5
  4099a8:	dabb      	bge.n	409922 <_realloc_r+0x2e>
  4099aa:	230c      	movs	r3, #12
  4099ac:	2000      	movs	r0, #0
  4099ae:	f8c9 3000 	str.w	r3, [r9]
  4099b2:	b003      	add	sp, #12
  4099b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4099b8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4099bc:	ebc3 0a08 	rsb	sl, r3, r8
  4099c0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4099c4:	f023 0c03 	bic.w	ip, r3, #3
  4099c8:	eb04 030c 	add.w	r3, r4, ip
  4099cc:	4293      	cmp	r3, r2
  4099ce:	dbbd      	blt.n	40994c <_realloc_r+0x58>
  4099d0:	4657      	mov	r7, sl
  4099d2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4099d6:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4099da:	1f22      	subs	r2, r4, #4
  4099dc:	2a24      	cmp	r2, #36	; 0x24
  4099de:	60c1      	str	r1, [r0, #12]
  4099e0:	6088      	str	r0, [r1, #8]
  4099e2:	f200 8117 	bhi.w	409c14 <_realloc_r+0x320>
  4099e6:	2a13      	cmp	r2, #19
  4099e8:	f240 8112 	bls.w	409c10 <_realloc_r+0x31c>
  4099ec:	6831      	ldr	r1, [r6, #0]
  4099ee:	f8ca 1008 	str.w	r1, [sl, #8]
  4099f2:	6871      	ldr	r1, [r6, #4]
  4099f4:	f8ca 100c 	str.w	r1, [sl, #12]
  4099f8:	2a1b      	cmp	r2, #27
  4099fa:	f200 812b 	bhi.w	409c54 <_realloc_r+0x360>
  4099fe:	3608      	adds	r6, #8
  409a00:	f10a 0210 	add.w	r2, sl, #16
  409a04:	6831      	ldr	r1, [r6, #0]
  409a06:	6011      	str	r1, [r2, #0]
  409a08:	6871      	ldr	r1, [r6, #4]
  409a0a:	6051      	str	r1, [r2, #4]
  409a0c:	68b1      	ldr	r1, [r6, #8]
  409a0e:	6091      	str	r1, [r2, #8]
  409a10:	463e      	mov	r6, r7
  409a12:	461c      	mov	r4, r3
  409a14:	46d0      	mov	r8, sl
  409a16:	1b63      	subs	r3, r4, r5
  409a18:	2b0f      	cmp	r3, #15
  409a1a:	d81d      	bhi.n	409a58 <_realloc_r+0x164>
  409a1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  409a20:	f003 0301 	and.w	r3, r3, #1
  409a24:	4323      	orrs	r3, r4
  409a26:	4444      	add	r4, r8
  409a28:	f8c8 3004 	str.w	r3, [r8, #4]
  409a2c:	6863      	ldr	r3, [r4, #4]
  409a2e:	f043 0301 	orr.w	r3, r3, #1
  409a32:	6063      	str	r3, [r4, #4]
  409a34:	4648      	mov	r0, r9
  409a36:	f7ff fc4d 	bl	4092d4 <__malloc_unlock>
  409a3a:	4630      	mov	r0, r6
  409a3c:	b003      	add	sp, #12
  409a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409a42:	f021 0103 	bic.w	r1, r1, #3
  409a46:	4421      	add	r1, r4
  409a48:	4291      	cmp	r1, r2
  409a4a:	db21      	blt.n	409a90 <_realloc_r+0x19c>
  409a4c:	68c3      	ldr	r3, [r0, #12]
  409a4e:	6882      	ldr	r2, [r0, #8]
  409a50:	460c      	mov	r4, r1
  409a52:	60d3      	str	r3, [r2, #12]
  409a54:	609a      	str	r2, [r3, #8]
  409a56:	e7de      	b.n	409a16 <_realloc_r+0x122>
  409a58:	f8d8 2004 	ldr.w	r2, [r8, #4]
  409a5c:	eb08 0105 	add.w	r1, r8, r5
  409a60:	f002 0201 	and.w	r2, r2, #1
  409a64:	4315      	orrs	r5, r2
  409a66:	f043 0201 	orr.w	r2, r3, #1
  409a6a:	440b      	add	r3, r1
  409a6c:	f8c8 5004 	str.w	r5, [r8, #4]
  409a70:	604a      	str	r2, [r1, #4]
  409a72:	685a      	ldr	r2, [r3, #4]
  409a74:	f042 0201 	orr.w	r2, r2, #1
  409a78:	3108      	adds	r1, #8
  409a7a:	605a      	str	r2, [r3, #4]
  409a7c:	4648      	mov	r0, r9
  409a7e:	f7fe fccd 	bl	40841c <_free_r>
  409a82:	e7d7      	b.n	409a34 <_realloc_r+0x140>
  409a84:	4611      	mov	r1, r2
  409a86:	b003      	add	sp, #12
  409a88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409a8c:	f7fe bfe4 	b.w	408a58 <_malloc_r>
  409a90:	f01e 0f01 	tst.w	lr, #1
  409a94:	f47f af5a 	bne.w	40994c <_realloc_r+0x58>
  409a98:	f856 3c08 	ldr.w	r3, [r6, #-8]
  409a9c:	ebc3 0a08 	rsb	sl, r3, r8
  409aa0:	f8da 3004 	ldr.w	r3, [sl, #4]
  409aa4:	f023 0c03 	bic.w	ip, r3, #3
  409aa8:	eb01 0e0c 	add.w	lr, r1, ip
  409aac:	4596      	cmp	lr, r2
  409aae:	db8b      	blt.n	4099c8 <_realloc_r+0xd4>
  409ab0:	68c3      	ldr	r3, [r0, #12]
  409ab2:	6882      	ldr	r2, [r0, #8]
  409ab4:	4657      	mov	r7, sl
  409ab6:	60d3      	str	r3, [r2, #12]
  409ab8:	609a      	str	r2, [r3, #8]
  409aba:	f857 1f08 	ldr.w	r1, [r7, #8]!
  409abe:	f8da 300c 	ldr.w	r3, [sl, #12]
  409ac2:	60cb      	str	r3, [r1, #12]
  409ac4:	1f22      	subs	r2, r4, #4
  409ac6:	2a24      	cmp	r2, #36	; 0x24
  409ac8:	6099      	str	r1, [r3, #8]
  409aca:	f200 8099 	bhi.w	409c00 <_realloc_r+0x30c>
  409ace:	2a13      	cmp	r2, #19
  409ad0:	d962      	bls.n	409b98 <_realloc_r+0x2a4>
  409ad2:	6833      	ldr	r3, [r6, #0]
  409ad4:	f8ca 3008 	str.w	r3, [sl, #8]
  409ad8:	6873      	ldr	r3, [r6, #4]
  409ada:	f8ca 300c 	str.w	r3, [sl, #12]
  409ade:	2a1b      	cmp	r2, #27
  409ae0:	f200 80a0 	bhi.w	409c24 <_realloc_r+0x330>
  409ae4:	3608      	adds	r6, #8
  409ae6:	f10a 0310 	add.w	r3, sl, #16
  409aea:	e056      	b.n	409b9a <_realloc_r+0x2a6>
  409aec:	f021 0b03 	bic.w	fp, r1, #3
  409af0:	44a3      	add	fp, r4
  409af2:	f105 0010 	add.w	r0, r5, #16
  409af6:	4583      	cmp	fp, r0
  409af8:	da59      	bge.n	409bae <_realloc_r+0x2ba>
  409afa:	f01e 0f01 	tst.w	lr, #1
  409afe:	f47f af25 	bne.w	40994c <_realloc_r+0x58>
  409b02:	f856 1c08 	ldr.w	r1, [r6, #-8]
  409b06:	ebc1 0a08 	rsb	sl, r1, r8
  409b0a:	f8da 1004 	ldr.w	r1, [sl, #4]
  409b0e:	f021 0c03 	bic.w	ip, r1, #3
  409b12:	44e3      	add	fp, ip
  409b14:	4558      	cmp	r0, fp
  409b16:	f73f af57 	bgt.w	4099c8 <_realloc_r+0xd4>
  409b1a:	4657      	mov	r7, sl
  409b1c:	f8da 100c 	ldr.w	r1, [sl, #12]
  409b20:	f857 0f08 	ldr.w	r0, [r7, #8]!
  409b24:	1f22      	subs	r2, r4, #4
  409b26:	2a24      	cmp	r2, #36	; 0x24
  409b28:	60c1      	str	r1, [r0, #12]
  409b2a:	6088      	str	r0, [r1, #8]
  409b2c:	f200 80b4 	bhi.w	409c98 <_realloc_r+0x3a4>
  409b30:	2a13      	cmp	r2, #19
  409b32:	f240 80a5 	bls.w	409c80 <_realloc_r+0x38c>
  409b36:	6831      	ldr	r1, [r6, #0]
  409b38:	f8ca 1008 	str.w	r1, [sl, #8]
  409b3c:	6871      	ldr	r1, [r6, #4]
  409b3e:	f8ca 100c 	str.w	r1, [sl, #12]
  409b42:	2a1b      	cmp	r2, #27
  409b44:	f200 80af 	bhi.w	409ca6 <_realloc_r+0x3b2>
  409b48:	3608      	adds	r6, #8
  409b4a:	f10a 0210 	add.w	r2, sl, #16
  409b4e:	6831      	ldr	r1, [r6, #0]
  409b50:	6011      	str	r1, [r2, #0]
  409b52:	6871      	ldr	r1, [r6, #4]
  409b54:	6051      	str	r1, [r2, #4]
  409b56:	68b1      	ldr	r1, [r6, #8]
  409b58:	6091      	str	r1, [r2, #8]
  409b5a:	eb0a 0105 	add.w	r1, sl, r5
  409b5e:	ebc5 020b 	rsb	r2, r5, fp
  409b62:	f042 0201 	orr.w	r2, r2, #1
  409b66:	6099      	str	r1, [r3, #8]
  409b68:	604a      	str	r2, [r1, #4]
  409b6a:	f8da 3004 	ldr.w	r3, [sl, #4]
  409b6e:	f003 0301 	and.w	r3, r3, #1
  409b72:	431d      	orrs	r5, r3
  409b74:	4648      	mov	r0, r9
  409b76:	f8ca 5004 	str.w	r5, [sl, #4]
  409b7a:	f7ff fbab 	bl	4092d4 <__malloc_unlock>
  409b7e:	4638      	mov	r0, r7
  409b80:	e75c      	b.n	409a3c <_realloc_r+0x148>
  409b82:	6833      	ldr	r3, [r6, #0]
  409b84:	6003      	str	r3, [r0, #0]
  409b86:	6873      	ldr	r3, [r6, #4]
  409b88:	6043      	str	r3, [r0, #4]
  409b8a:	2a1b      	cmp	r2, #27
  409b8c:	d827      	bhi.n	409bde <_realloc_r+0x2ea>
  409b8e:	f100 0308 	add.w	r3, r0, #8
  409b92:	f106 0208 	add.w	r2, r6, #8
  409b96:	e6f2      	b.n	40997e <_realloc_r+0x8a>
  409b98:	463b      	mov	r3, r7
  409b9a:	6832      	ldr	r2, [r6, #0]
  409b9c:	601a      	str	r2, [r3, #0]
  409b9e:	6872      	ldr	r2, [r6, #4]
  409ba0:	605a      	str	r2, [r3, #4]
  409ba2:	68b2      	ldr	r2, [r6, #8]
  409ba4:	609a      	str	r2, [r3, #8]
  409ba6:	463e      	mov	r6, r7
  409ba8:	4674      	mov	r4, lr
  409baa:	46d0      	mov	r8, sl
  409bac:	e733      	b.n	409a16 <_realloc_r+0x122>
  409bae:	eb08 0105 	add.w	r1, r8, r5
  409bb2:	ebc5 0b0b 	rsb	fp, r5, fp
  409bb6:	f04b 0201 	orr.w	r2, fp, #1
  409bba:	6099      	str	r1, [r3, #8]
  409bbc:	604a      	str	r2, [r1, #4]
  409bbe:	f856 3c04 	ldr.w	r3, [r6, #-4]
  409bc2:	f003 0301 	and.w	r3, r3, #1
  409bc6:	431d      	orrs	r5, r3
  409bc8:	4648      	mov	r0, r9
  409bca:	f846 5c04 	str.w	r5, [r6, #-4]
  409bce:	f7ff fb81 	bl	4092d4 <__malloc_unlock>
  409bd2:	4630      	mov	r0, r6
  409bd4:	e732      	b.n	409a3c <_realloc_r+0x148>
  409bd6:	4631      	mov	r1, r6
  409bd8:	f7ff fb16 	bl	409208 <memmove>
  409bdc:	e6d5      	b.n	40998a <_realloc_r+0x96>
  409bde:	68b3      	ldr	r3, [r6, #8]
  409be0:	6083      	str	r3, [r0, #8]
  409be2:	68f3      	ldr	r3, [r6, #12]
  409be4:	60c3      	str	r3, [r0, #12]
  409be6:	2a24      	cmp	r2, #36	; 0x24
  409be8:	d028      	beq.n	409c3c <_realloc_r+0x348>
  409bea:	f100 0310 	add.w	r3, r0, #16
  409bee:	f106 0210 	add.w	r2, r6, #16
  409bf2:	e6c4      	b.n	40997e <_realloc_r+0x8a>
  409bf4:	f850 3c04 	ldr.w	r3, [r0, #-4]
  409bf8:	f023 0303 	bic.w	r3, r3, #3
  409bfc:	441c      	add	r4, r3
  409bfe:	e70a      	b.n	409a16 <_realloc_r+0x122>
  409c00:	4631      	mov	r1, r6
  409c02:	4638      	mov	r0, r7
  409c04:	4674      	mov	r4, lr
  409c06:	46d0      	mov	r8, sl
  409c08:	f7ff fafe 	bl	409208 <memmove>
  409c0c:	463e      	mov	r6, r7
  409c0e:	e702      	b.n	409a16 <_realloc_r+0x122>
  409c10:	463a      	mov	r2, r7
  409c12:	e6f7      	b.n	409a04 <_realloc_r+0x110>
  409c14:	4631      	mov	r1, r6
  409c16:	4638      	mov	r0, r7
  409c18:	461c      	mov	r4, r3
  409c1a:	46d0      	mov	r8, sl
  409c1c:	f7ff faf4 	bl	409208 <memmove>
  409c20:	463e      	mov	r6, r7
  409c22:	e6f8      	b.n	409a16 <_realloc_r+0x122>
  409c24:	68b3      	ldr	r3, [r6, #8]
  409c26:	f8ca 3010 	str.w	r3, [sl, #16]
  409c2a:	68f3      	ldr	r3, [r6, #12]
  409c2c:	f8ca 3014 	str.w	r3, [sl, #20]
  409c30:	2a24      	cmp	r2, #36	; 0x24
  409c32:	d01b      	beq.n	409c6c <_realloc_r+0x378>
  409c34:	3610      	adds	r6, #16
  409c36:	f10a 0318 	add.w	r3, sl, #24
  409c3a:	e7ae      	b.n	409b9a <_realloc_r+0x2a6>
  409c3c:	6933      	ldr	r3, [r6, #16]
  409c3e:	6103      	str	r3, [r0, #16]
  409c40:	6973      	ldr	r3, [r6, #20]
  409c42:	6143      	str	r3, [r0, #20]
  409c44:	f106 0218 	add.w	r2, r6, #24
  409c48:	f100 0318 	add.w	r3, r0, #24
  409c4c:	e697      	b.n	40997e <_realloc_r+0x8a>
  409c4e:	bf00      	nop
  409c50:	204004ac 	.word	0x204004ac
  409c54:	68b1      	ldr	r1, [r6, #8]
  409c56:	f8ca 1010 	str.w	r1, [sl, #16]
  409c5a:	68f1      	ldr	r1, [r6, #12]
  409c5c:	f8ca 1014 	str.w	r1, [sl, #20]
  409c60:	2a24      	cmp	r2, #36	; 0x24
  409c62:	d00f      	beq.n	409c84 <_realloc_r+0x390>
  409c64:	3610      	adds	r6, #16
  409c66:	f10a 0218 	add.w	r2, sl, #24
  409c6a:	e6cb      	b.n	409a04 <_realloc_r+0x110>
  409c6c:	6933      	ldr	r3, [r6, #16]
  409c6e:	f8ca 3018 	str.w	r3, [sl, #24]
  409c72:	6973      	ldr	r3, [r6, #20]
  409c74:	f8ca 301c 	str.w	r3, [sl, #28]
  409c78:	3618      	adds	r6, #24
  409c7a:	f10a 0320 	add.w	r3, sl, #32
  409c7e:	e78c      	b.n	409b9a <_realloc_r+0x2a6>
  409c80:	463a      	mov	r2, r7
  409c82:	e764      	b.n	409b4e <_realloc_r+0x25a>
  409c84:	6932      	ldr	r2, [r6, #16]
  409c86:	f8ca 2018 	str.w	r2, [sl, #24]
  409c8a:	6972      	ldr	r2, [r6, #20]
  409c8c:	f8ca 201c 	str.w	r2, [sl, #28]
  409c90:	3618      	adds	r6, #24
  409c92:	f10a 0220 	add.w	r2, sl, #32
  409c96:	e6b5      	b.n	409a04 <_realloc_r+0x110>
  409c98:	4631      	mov	r1, r6
  409c9a:	4638      	mov	r0, r7
  409c9c:	9301      	str	r3, [sp, #4]
  409c9e:	f7ff fab3 	bl	409208 <memmove>
  409ca2:	9b01      	ldr	r3, [sp, #4]
  409ca4:	e759      	b.n	409b5a <_realloc_r+0x266>
  409ca6:	68b1      	ldr	r1, [r6, #8]
  409ca8:	f8ca 1010 	str.w	r1, [sl, #16]
  409cac:	68f1      	ldr	r1, [r6, #12]
  409cae:	f8ca 1014 	str.w	r1, [sl, #20]
  409cb2:	2a24      	cmp	r2, #36	; 0x24
  409cb4:	d003      	beq.n	409cbe <_realloc_r+0x3ca>
  409cb6:	3610      	adds	r6, #16
  409cb8:	f10a 0218 	add.w	r2, sl, #24
  409cbc:	e747      	b.n	409b4e <_realloc_r+0x25a>
  409cbe:	6932      	ldr	r2, [r6, #16]
  409cc0:	f8ca 2018 	str.w	r2, [sl, #24]
  409cc4:	6972      	ldr	r2, [r6, #20]
  409cc6:	f8ca 201c 	str.w	r2, [sl, #28]
  409cca:	3618      	adds	r6, #24
  409ccc:	f10a 0220 	add.w	r2, sl, #32
  409cd0:	e73d      	b.n	409b4e <_realloc_r+0x25a>
  409cd2:	bf00      	nop

00409cd4 <_sbrk_r>:
  409cd4:	b538      	push	{r3, r4, r5, lr}
  409cd6:	4c07      	ldr	r4, [pc, #28]	; (409cf4 <_sbrk_r+0x20>)
  409cd8:	2300      	movs	r3, #0
  409cda:	4605      	mov	r5, r0
  409cdc:	4608      	mov	r0, r1
  409cde:	6023      	str	r3, [r4, #0]
  409ce0:	f7f9 fe4a 	bl	403978 <_sbrk>
  409ce4:	1c43      	adds	r3, r0, #1
  409ce6:	d000      	beq.n	409cea <_sbrk_r+0x16>
  409ce8:	bd38      	pop	{r3, r4, r5, pc}
  409cea:	6823      	ldr	r3, [r4, #0]
  409cec:	2b00      	cmp	r3, #0
  409cee:	d0fb      	beq.n	409ce8 <_sbrk_r+0x14>
  409cf0:	602b      	str	r3, [r5, #0]
  409cf2:	bd38      	pop	{r3, r4, r5, pc}
  409cf4:	2040101c 	.word	0x2040101c

00409cf8 <__sread>:
  409cf8:	b510      	push	{r4, lr}
  409cfa:	460c      	mov	r4, r1
  409cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409d00:	f000 fadc 	bl	40a2bc <_read_r>
  409d04:	2800      	cmp	r0, #0
  409d06:	db03      	blt.n	409d10 <__sread+0x18>
  409d08:	6d23      	ldr	r3, [r4, #80]	; 0x50
  409d0a:	4403      	add	r3, r0
  409d0c:	6523      	str	r3, [r4, #80]	; 0x50
  409d0e:	bd10      	pop	{r4, pc}
  409d10:	89a3      	ldrh	r3, [r4, #12]
  409d12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409d16:	81a3      	strh	r3, [r4, #12]
  409d18:	bd10      	pop	{r4, pc}
  409d1a:	bf00      	nop

00409d1c <__swrite>:
  409d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409d20:	4616      	mov	r6, r2
  409d22:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  409d26:	461f      	mov	r7, r3
  409d28:	05d3      	lsls	r3, r2, #23
  409d2a:	460c      	mov	r4, r1
  409d2c:	4605      	mov	r5, r0
  409d2e:	d507      	bpl.n	409d40 <__swrite+0x24>
  409d30:	2200      	movs	r2, #0
  409d32:	2302      	movs	r3, #2
  409d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409d38:	f000 faaa 	bl	40a290 <_lseek_r>
  409d3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409d40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  409d44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  409d48:	81a2      	strh	r2, [r4, #12]
  409d4a:	463b      	mov	r3, r7
  409d4c:	4632      	mov	r2, r6
  409d4e:	4628      	mov	r0, r5
  409d50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409d54:	f000 b98a 	b.w	40a06c <_write_r>

00409d58 <__sseek>:
  409d58:	b510      	push	{r4, lr}
  409d5a:	460c      	mov	r4, r1
  409d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409d60:	f000 fa96 	bl	40a290 <_lseek_r>
  409d64:	89a3      	ldrh	r3, [r4, #12]
  409d66:	1c42      	adds	r2, r0, #1
  409d68:	bf0e      	itee	eq
  409d6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  409d6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  409d72:	6520      	strne	r0, [r4, #80]	; 0x50
  409d74:	81a3      	strh	r3, [r4, #12]
  409d76:	bd10      	pop	{r4, pc}

00409d78 <__sclose>:
  409d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409d7c:	f000 ba0e 	b.w	40a19c <_close_r>

00409d80 <strchr>:
  409d80:	b470      	push	{r4, r5, r6}
  409d82:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
  409d86:	d034      	beq.n	409df2 <strchr+0x72>
  409d88:	0785      	lsls	r5, r0, #30
  409d8a:	d00f      	beq.n	409dac <strchr+0x2c>
  409d8c:	7803      	ldrb	r3, [r0, #0]
  409d8e:	2b00      	cmp	r3, #0
  409d90:	d05a      	beq.n	409e48 <strchr+0xc8>
  409d92:	429c      	cmp	r4, r3
  409d94:	d02b      	beq.n	409dee <strchr+0x6e>
  409d96:	1c43      	adds	r3, r0, #1
  409d98:	e005      	b.n	409da6 <strchr+0x26>
  409d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
  409d9e:	2a00      	cmp	r2, #0
  409da0:	d04f      	beq.n	409e42 <strchr+0xc2>
  409da2:	4294      	cmp	r4, r2
  409da4:	d023      	beq.n	409dee <strchr+0x6e>
  409da6:	079a      	lsls	r2, r3, #30
  409da8:	4618      	mov	r0, r3
  409daa:	d1f6      	bne.n	409d9a <strchr+0x1a>
  409dac:	020e      	lsls	r6, r1, #8
  409dae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
  409db2:	4326      	orrs	r6, r4
  409db4:	6803      	ldr	r3, [r0, #0]
  409db6:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  409dba:	e001      	b.n	409dc0 <strchr+0x40>
  409dbc:	f850 3f04 	ldr.w	r3, [r0, #4]!
  409dc0:	ea86 0503 	eor.w	r5, r6, r3
  409dc4:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  409dc8:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
  409dcc:	ea22 0205 	bic.w	r2, r2, r5
  409dd0:	ea21 0303 	bic.w	r3, r1, r3
  409dd4:	4313      	orrs	r3, r2
  409dd6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  409dda:	d0ef      	beq.n	409dbc <strchr+0x3c>
  409ddc:	7803      	ldrb	r3, [r0, #0]
  409dde:	b923      	cbnz	r3, 409dea <strchr+0x6a>
  409de0:	e032      	b.n	409e48 <strchr+0xc8>
  409de2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  409de6:	2b00      	cmp	r3, #0
  409de8:	d02e      	beq.n	409e48 <strchr+0xc8>
  409dea:	429c      	cmp	r4, r3
  409dec:	d1f9      	bne.n	409de2 <strchr+0x62>
  409dee:	bc70      	pop	{r4, r5, r6}
  409df0:	4770      	bx	lr
  409df2:	0784      	lsls	r4, r0, #30
  409df4:	d00b      	beq.n	409e0e <strchr+0x8e>
  409df6:	7803      	ldrb	r3, [r0, #0]
  409df8:	2b00      	cmp	r3, #0
  409dfa:	d0f8      	beq.n	409dee <strchr+0x6e>
  409dfc:	1c43      	adds	r3, r0, #1
  409dfe:	e003      	b.n	409e08 <strchr+0x88>
  409e00:	7802      	ldrb	r2, [r0, #0]
  409e02:	3301      	adds	r3, #1
  409e04:	2a00      	cmp	r2, #0
  409e06:	d0f2      	beq.n	409dee <strchr+0x6e>
  409e08:	0799      	lsls	r1, r3, #30
  409e0a:	4618      	mov	r0, r3
  409e0c:	d1f8      	bne.n	409e00 <strchr+0x80>
  409e0e:	6802      	ldr	r2, [r0, #0]
  409e10:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  409e14:	ea23 0302 	bic.w	r3, r3, r2
  409e18:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  409e1c:	d108      	bne.n	409e30 <strchr+0xb0>
  409e1e:	f850 2f04 	ldr.w	r2, [r0, #4]!
  409e22:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  409e26:	ea23 0302 	bic.w	r3, r3, r2
  409e2a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  409e2e:	d0f6      	beq.n	409e1e <strchr+0x9e>
  409e30:	7803      	ldrb	r3, [r0, #0]
  409e32:	2b00      	cmp	r3, #0
  409e34:	d0db      	beq.n	409dee <strchr+0x6e>
  409e36:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  409e3a:	2b00      	cmp	r3, #0
  409e3c:	d1fb      	bne.n	409e36 <strchr+0xb6>
  409e3e:	bc70      	pop	{r4, r5, r6}
  409e40:	4770      	bx	lr
  409e42:	4610      	mov	r0, r2
  409e44:	bc70      	pop	{r4, r5, r6}
  409e46:	4770      	bx	lr
  409e48:	4618      	mov	r0, r3
  409e4a:	bc70      	pop	{r4, r5, r6}
  409e4c:	4770      	bx	lr
  409e4e:	bf00      	nop

00409e50 <__ssprint_r>:
  409e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409e54:	6893      	ldr	r3, [r2, #8]
  409e56:	b083      	sub	sp, #12
  409e58:	4690      	mov	r8, r2
  409e5a:	2b00      	cmp	r3, #0
  409e5c:	d072      	beq.n	409f44 <__ssprint_r+0xf4>
  409e5e:	4683      	mov	fp, r0
  409e60:	f04f 0900 	mov.w	r9, #0
  409e64:	6816      	ldr	r6, [r2, #0]
  409e66:	6808      	ldr	r0, [r1, #0]
  409e68:	688b      	ldr	r3, [r1, #8]
  409e6a:	460d      	mov	r5, r1
  409e6c:	464c      	mov	r4, r9
  409e6e:	2c00      	cmp	r4, #0
  409e70:	d045      	beq.n	409efe <__ssprint_r+0xae>
  409e72:	429c      	cmp	r4, r3
  409e74:	461f      	mov	r7, r3
  409e76:	469a      	mov	sl, r3
  409e78:	d346      	bcc.n	409f08 <__ssprint_r+0xb8>
  409e7a:	89ab      	ldrh	r3, [r5, #12]
  409e7c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  409e80:	d02d      	beq.n	409ede <__ssprint_r+0x8e>
  409e82:	696f      	ldr	r7, [r5, #20]
  409e84:	6929      	ldr	r1, [r5, #16]
  409e86:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  409e8a:	ebc1 0a00 	rsb	sl, r1, r0
  409e8e:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  409e92:	1c60      	adds	r0, r4, #1
  409e94:	107f      	asrs	r7, r7, #1
  409e96:	4450      	add	r0, sl
  409e98:	42b8      	cmp	r0, r7
  409e9a:	463a      	mov	r2, r7
  409e9c:	bf84      	itt	hi
  409e9e:	4607      	movhi	r7, r0
  409ea0:	463a      	movhi	r2, r7
  409ea2:	055b      	lsls	r3, r3, #21
  409ea4:	d533      	bpl.n	409f0e <__ssprint_r+0xbe>
  409ea6:	4611      	mov	r1, r2
  409ea8:	4658      	mov	r0, fp
  409eaa:	f7fe fdd5 	bl	408a58 <_malloc_r>
  409eae:	2800      	cmp	r0, #0
  409eb0:	d037      	beq.n	409f22 <__ssprint_r+0xd2>
  409eb2:	4652      	mov	r2, sl
  409eb4:	6929      	ldr	r1, [r5, #16]
  409eb6:	9001      	str	r0, [sp, #4]
  409eb8:	f7ff f90c 	bl	4090d4 <memcpy>
  409ebc:	89aa      	ldrh	r2, [r5, #12]
  409ebe:	9b01      	ldr	r3, [sp, #4]
  409ec0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  409ec4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  409ec8:	81aa      	strh	r2, [r5, #12]
  409eca:	ebca 0207 	rsb	r2, sl, r7
  409ece:	eb03 000a 	add.w	r0, r3, sl
  409ed2:	616f      	str	r7, [r5, #20]
  409ed4:	612b      	str	r3, [r5, #16]
  409ed6:	6028      	str	r0, [r5, #0]
  409ed8:	60aa      	str	r2, [r5, #8]
  409eda:	4627      	mov	r7, r4
  409edc:	46a2      	mov	sl, r4
  409ede:	4652      	mov	r2, sl
  409ee0:	4649      	mov	r1, r9
  409ee2:	f7ff f991 	bl	409208 <memmove>
  409ee6:	f8d8 2008 	ldr.w	r2, [r8, #8]
  409eea:	68ab      	ldr	r3, [r5, #8]
  409eec:	6828      	ldr	r0, [r5, #0]
  409eee:	1bdb      	subs	r3, r3, r7
  409ef0:	4450      	add	r0, sl
  409ef2:	1b14      	subs	r4, r2, r4
  409ef4:	60ab      	str	r3, [r5, #8]
  409ef6:	6028      	str	r0, [r5, #0]
  409ef8:	f8c8 4008 	str.w	r4, [r8, #8]
  409efc:	b314      	cbz	r4, 409f44 <__ssprint_r+0xf4>
  409efe:	f8d6 9000 	ldr.w	r9, [r6]
  409f02:	6874      	ldr	r4, [r6, #4]
  409f04:	3608      	adds	r6, #8
  409f06:	e7b2      	b.n	409e6e <__ssprint_r+0x1e>
  409f08:	4627      	mov	r7, r4
  409f0a:	46a2      	mov	sl, r4
  409f0c:	e7e7      	b.n	409ede <__ssprint_r+0x8e>
  409f0e:	4658      	mov	r0, fp
  409f10:	f7ff fcf0 	bl	4098f4 <_realloc_r>
  409f14:	4603      	mov	r3, r0
  409f16:	2800      	cmp	r0, #0
  409f18:	d1d7      	bne.n	409eca <__ssprint_r+0x7a>
  409f1a:	6929      	ldr	r1, [r5, #16]
  409f1c:	4658      	mov	r0, fp
  409f1e:	f7fe fa7d 	bl	40841c <_free_r>
  409f22:	230c      	movs	r3, #12
  409f24:	f8cb 3000 	str.w	r3, [fp]
  409f28:	89ab      	ldrh	r3, [r5, #12]
  409f2a:	2200      	movs	r2, #0
  409f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409f30:	f04f 30ff 	mov.w	r0, #4294967295
  409f34:	81ab      	strh	r3, [r5, #12]
  409f36:	f8c8 2008 	str.w	r2, [r8, #8]
  409f3a:	f8c8 2004 	str.w	r2, [r8, #4]
  409f3e:	b003      	add	sp, #12
  409f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409f44:	2000      	movs	r0, #0
  409f46:	f8c8 0004 	str.w	r0, [r8, #4]
  409f4a:	b003      	add	sp, #12
  409f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409f50 <__swbuf_r>:
  409f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409f52:	460e      	mov	r6, r1
  409f54:	4614      	mov	r4, r2
  409f56:	4607      	mov	r7, r0
  409f58:	b110      	cbz	r0, 409f60 <__swbuf_r+0x10>
  409f5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409f5c:	2b00      	cmp	r3, #0
  409f5e:	d04a      	beq.n	409ff6 <__swbuf_r+0xa6>
  409f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409f64:	69a3      	ldr	r3, [r4, #24]
  409f66:	60a3      	str	r3, [r4, #8]
  409f68:	b291      	uxth	r1, r2
  409f6a:	0708      	lsls	r0, r1, #28
  409f6c:	d538      	bpl.n	409fe0 <__swbuf_r+0x90>
  409f6e:	6923      	ldr	r3, [r4, #16]
  409f70:	2b00      	cmp	r3, #0
  409f72:	d035      	beq.n	409fe0 <__swbuf_r+0x90>
  409f74:	0489      	lsls	r1, r1, #18
  409f76:	b2f5      	uxtb	r5, r6
  409f78:	d515      	bpl.n	409fa6 <__swbuf_r+0x56>
  409f7a:	6822      	ldr	r2, [r4, #0]
  409f7c:	6961      	ldr	r1, [r4, #20]
  409f7e:	1ad3      	subs	r3, r2, r3
  409f80:	428b      	cmp	r3, r1
  409f82:	da1c      	bge.n	409fbe <__swbuf_r+0x6e>
  409f84:	3301      	adds	r3, #1
  409f86:	68a1      	ldr	r1, [r4, #8]
  409f88:	1c50      	adds	r0, r2, #1
  409f8a:	3901      	subs	r1, #1
  409f8c:	60a1      	str	r1, [r4, #8]
  409f8e:	6020      	str	r0, [r4, #0]
  409f90:	7016      	strb	r6, [r2, #0]
  409f92:	6962      	ldr	r2, [r4, #20]
  409f94:	429a      	cmp	r2, r3
  409f96:	d01a      	beq.n	409fce <__swbuf_r+0x7e>
  409f98:	89a3      	ldrh	r3, [r4, #12]
  409f9a:	07db      	lsls	r3, r3, #31
  409f9c:	d501      	bpl.n	409fa2 <__swbuf_r+0x52>
  409f9e:	2d0a      	cmp	r5, #10
  409fa0:	d015      	beq.n	409fce <__swbuf_r+0x7e>
  409fa2:	4628      	mov	r0, r5
  409fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409fa6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  409fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  409fac:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  409fb0:	81a2      	strh	r2, [r4, #12]
  409fb2:	6822      	ldr	r2, [r4, #0]
  409fb4:	6661      	str	r1, [r4, #100]	; 0x64
  409fb6:	6961      	ldr	r1, [r4, #20]
  409fb8:	1ad3      	subs	r3, r2, r3
  409fba:	428b      	cmp	r3, r1
  409fbc:	dbe2      	blt.n	409f84 <__swbuf_r+0x34>
  409fbe:	4621      	mov	r1, r4
  409fc0:	4638      	mov	r0, r7
  409fc2:	f7fe f8cd 	bl	408160 <_fflush_r>
  409fc6:	b940      	cbnz	r0, 409fda <__swbuf_r+0x8a>
  409fc8:	6822      	ldr	r2, [r4, #0]
  409fca:	2301      	movs	r3, #1
  409fcc:	e7db      	b.n	409f86 <__swbuf_r+0x36>
  409fce:	4621      	mov	r1, r4
  409fd0:	4638      	mov	r0, r7
  409fd2:	f7fe f8c5 	bl	408160 <_fflush_r>
  409fd6:	2800      	cmp	r0, #0
  409fd8:	d0e3      	beq.n	409fa2 <__swbuf_r+0x52>
  409fda:	f04f 30ff 	mov.w	r0, #4294967295
  409fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409fe0:	4621      	mov	r1, r4
  409fe2:	4638      	mov	r0, r7
  409fe4:	f7fc ffe4 	bl	406fb0 <__swsetup_r>
  409fe8:	2800      	cmp	r0, #0
  409fea:	d1f6      	bne.n	409fda <__swbuf_r+0x8a>
  409fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409ff0:	6923      	ldr	r3, [r4, #16]
  409ff2:	b291      	uxth	r1, r2
  409ff4:	e7be      	b.n	409f74 <__swbuf_r+0x24>
  409ff6:	f7fe f947 	bl	408288 <__sinit>
  409ffa:	e7b1      	b.n	409f60 <__swbuf_r+0x10>

00409ffc <_wcrtomb_r>:
  409ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a000:	4605      	mov	r5, r0
  40a002:	b086      	sub	sp, #24
  40a004:	461e      	mov	r6, r3
  40a006:	460c      	mov	r4, r1
  40a008:	b1a1      	cbz	r1, 40a034 <_wcrtomb_r+0x38>
  40a00a:	4b10      	ldr	r3, [pc, #64]	; (40a04c <_wcrtomb_r+0x50>)
  40a00c:	4617      	mov	r7, r2
  40a00e:	f8d3 8000 	ldr.w	r8, [r3]
  40a012:	f7fe fc97 	bl	408944 <__locale_charset>
  40a016:	9600      	str	r6, [sp, #0]
  40a018:	4603      	mov	r3, r0
  40a01a:	463a      	mov	r2, r7
  40a01c:	4621      	mov	r1, r4
  40a01e:	4628      	mov	r0, r5
  40a020:	47c0      	blx	r8
  40a022:	1c43      	adds	r3, r0, #1
  40a024:	d103      	bne.n	40a02e <_wcrtomb_r+0x32>
  40a026:	2200      	movs	r2, #0
  40a028:	238a      	movs	r3, #138	; 0x8a
  40a02a:	6032      	str	r2, [r6, #0]
  40a02c:	602b      	str	r3, [r5, #0]
  40a02e:	b006      	add	sp, #24
  40a030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a034:	4b05      	ldr	r3, [pc, #20]	; (40a04c <_wcrtomb_r+0x50>)
  40a036:	681f      	ldr	r7, [r3, #0]
  40a038:	f7fe fc84 	bl	408944 <__locale_charset>
  40a03c:	9600      	str	r6, [sp, #0]
  40a03e:	4603      	mov	r3, r0
  40a040:	4622      	mov	r2, r4
  40a042:	a903      	add	r1, sp, #12
  40a044:	4628      	mov	r0, r5
  40a046:	47b8      	blx	r7
  40a048:	e7eb      	b.n	40a022 <_wcrtomb_r+0x26>
  40a04a:	bf00      	nop
  40a04c:	204008bc 	.word	0x204008bc

0040a050 <__ascii_wctomb>:
  40a050:	b121      	cbz	r1, 40a05c <__ascii_wctomb+0xc>
  40a052:	2aff      	cmp	r2, #255	; 0xff
  40a054:	d804      	bhi.n	40a060 <__ascii_wctomb+0x10>
  40a056:	700a      	strb	r2, [r1, #0]
  40a058:	2001      	movs	r0, #1
  40a05a:	4770      	bx	lr
  40a05c:	4608      	mov	r0, r1
  40a05e:	4770      	bx	lr
  40a060:	238a      	movs	r3, #138	; 0x8a
  40a062:	6003      	str	r3, [r0, #0]
  40a064:	f04f 30ff 	mov.w	r0, #4294967295
  40a068:	4770      	bx	lr
  40a06a:	bf00      	nop

0040a06c <_write_r>:
  40a06c:	b570      	push	{r4, r5, r6, lr}
  40a06e:	460d      	mov	r5, r1
  40a070:	4c08      	ldr	r4, [pc, #32]	; (40a094 <_write_r+0x28>)
  40a072:	4611      	mov	r1, r2
  40a074:	4606      	mov	r6, r0
  40a076:	461a      	mov	r2, r3
  40a078:	4628      	mov	r0, r5
  40a07a:	2300      	movs	r3, #0
  40a07c:	6023      	str	r3, [r4, #0]
  40a07e:	f7f8 fe39 	bl	402cf4 <_write>
  40a082:	1c43      	adds	r3, r0, #1
  40a084:	d000      	beq.n	40a088 <_write_r+0x1c>
  40a086:	bd70      	pop	{r4, r5, r6, pc}
  40a088:	6823      	ldr	r3, [r4, #0]
  40a08a:	2b00      	cmp	r3, #0
  40a08c:	d0fb      	beq.n	40a086 <_write_r+0x1a>
  40a08e:	6033      	str	r3, [r6, #0]
  40a090:	bd70      	pop	{r4, r5, r6, pc}
  40a092:	bf00      	nop
  40a094:	2040101c 	.word	0x2040101c

0040a098 <__register_exitproc>:
  40a098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a09c:	4c25      	ldr	r4, [pc, #148]	; (40a134 <__register_exitproc+0x9c>)
  40a09e:	6825      	ldr	r5, [r4, #0]
  40a0a0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40a0a4:	4606      	mov	r6, r0
  40a0a6:	4688      	mov	r8, r1
  40a0a8:	4692      	mov	sl, r2
  40a0aa:	4699      	mov	r9, r3
  40a0ac:	b3c4      	cbz	r4, 40a120 <__register_exitproc+0x88>
  40a0ae:	6860      	ldr	r0, [r4, #4]
  40a0b0:	281f      	cmp	r0, #31
  40a0b2:	dc17      	bgt.n	40a0e4 <__register_exitproc+0x4c>
  40a0b4:	1c43      	adds	r3, r0, #1
  40a0b6:	b176      	cbz	r6, 40a0d6 <__register_exitproc+0x3e>
  40a0b8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40a0bc:	2201      	movs	r2, #1
  40a0be:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40a0c2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40a0c6:	4082      	lsls	r2, r0
  40a0c8:	4311      	orrs	r1, r2
  40a0ca:	2e02      	cmp	r6, #2
  40a0cc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40a0d0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40a0d4:	d01e      	beq.n	40a114 <__register_exitproc+0x7c>
  40a0d6:	3002      	adds	r0, #2
  40a0d8:	6063      	str	r3, [r4, #4]
  40a0da:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40a0de:	2000      	movs	r0, #0
  40a0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a0e4:	4b14      	ldr	r3, [pc, #80]	; (40a138 <__register_exitproc+0xa0>)
  40a0e6:	b303      	cbz	r3, 40a12a <__register_exitproc+0x92>
  40a0e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40a0ec:	f7fe fcac 	bl	408a48 <malloc>
  40a0f0:	4604      	mov	r4, r0
  40a0f2:	b1d0      	cbz	r0, 40a12a <__register_exitproc+0x92>
  40a0f4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40a0f8:	2700      	movs	r7, #0
  40a0fa:	e880 0088 	stmia.w	r0, {r3, r7}
  40a0fe:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40a102:	4638      	mov	r0, r7
  40a104:	2301      	movs	r3, #1
  40a106:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40a10a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40a10e:	2e00      	cmp	r6, #0
  40a110:	d0e1      	beq.n	40a0d6 <__register_exitproc+0x3e>
  40a112:	e7d1      	b.n	40a0b8 <__register_exitproc+0x20>
  40a114:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40a118:	430a      	orrs	r2, r1
  40a11a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40a11e:	e7da      	b.n	40a0d6 <__register_exitproc+0x3e>
  40a120:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40a124:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40a128:	e7c1      	b.n	40a0ae <__register_exitproc+0x16>
  40a12a:	f04f 30ff 	mov.w	r0, #4294967295
  40a12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a132:	bf00      	nop
  40a134:	0040c050 	.word	0x0040c050
  40a138:	00408a49 	.word	0x00408a49

0040a13c <_calloc_r>:
  40a13c:	b510      	push	{r4, lr}
  40a13e:	fb02 f101 	mul.w	r1, r2, r1
  40a142:	f7fe fc89 	bl	408a58 <_malloc_r>
  40a146:	4604      	mov	r4, r0
  40a148:	b1d8      	cbz	r0, 40a182 <_calloc_r+0x46>
  40a14a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40a14e:	f022 0203 	bic.w	r2, r2, #3
  40a152:	3a04      	subs	r2, #4
  40a154:	2a24      	cmp	r2, #36	; 0x24
  40a156:	d818      	bhi.n	40a18a <_calloc_r+0x4e>
  40a158:	2a13      	cmp	r2, #19
  40a15a:	d914      	bls.n	40a186 <_calloc_r+0x4a>
  40a15c:	2300      	movs	r3, #0
  40a15e:	2a1b      	cmp	r2, #27
  40a160:	6003      	str	r3, [r0, #0]
  40a162:	6043      	str	r3, [r0, #4]
  40a164:	d916      	bls.n	40a194 <_calloc_r+0x58>
  40a166:	2a24      	cmp	r2, #36	; 0x24
  40a168:	6083      	str	r3, [r0, #8]
  40a16a:	60c3      	str	r3, [r0, #12]
  40a16c:	bf11      	iteee	ne
  40a16e:	f100 0210 	addne.w	r2, r0, #16
  40a172:	6103      	streq	r3, [r0, #16]
  40a174:	6143      	streq	r3, [r0, #20]
  40a176:	f100 0218 	addeq.w	r2, r0, #24
  40a17a:	2300      	movs	r3, #0
  40a17c:	6013      	str	r3, [r2, #0]
  40a17e:	6053      	str	r3, [r2, #4]
  40a180:	6093      	str	r3, [r2, #8]
  40a182:	4620      	mov	r0, r4
  40a184:	bd10      	pop	{r4, pc}
  40a186:	4602      	mov	r2, r0
  40a188:	e7f7      	b.n	40a17a <_calloc_r+0x3e>
  40a18a:	2100      	movs	r1, #0
  40a18c:	f7f9 ffa2 	bl	4040d4 <memset>
  40a190:	4620      	mov	r0, r4
  40a192:	bd10      	pop	{r4, pc}
  40a194:	f100 0208 	add.w	r2, r0, #8
  40a198:	e7ef      	b.n	40a17a <_calloc_r+0x3e>
  40a19a:	bf00      	nop

0040a19c <_close_r>:
  40a19c:	b538      	push	{r3, r4, r5, lr}
  40a19e:	4c07      	ldr	r4, [pc, #28]	; (40a1bc <_close_r+0x20>)
  40a1a0:	2300      	movs	r3, #0
  40a1a2:	4605      	mov	r5, r0
  40a1a4:	4608      	mov	r0, r1
  40a1a6:	6023      	str	r3, [r4, #0]
  40a1a8:	f7f9 fc00 	bl	4039ac <_close>
  40a1ac:	1c43      	adds	r3, r0, #1
  40a1ae:	d000      	beq.n	40a1b2 <_close_r+0x16>
  40a1b0:	bd38      	pop	{r3, r4, r5, pc}
  40a1b2:	6823      	ldr	r3, [r4, #0]
  40a1b4:	2b00      	cmp	r3, #0
  40a1b6:	d0fb      	beq.n	40a1b0 <_close_r+0x14>
  40a1b8:	602b      	str	r3, [r5, #0]
  40a1ba:	bd38      	pop	{r3, r4, r5, pc}
  40a1bc:	2040101c 	.word	0x2040101c

0040a1c0 <_fclose_r>:
  40a1c0:	2900      	cmp	r1, #0
  40a1c2:	d03d      	beq.n	40a240 <_fclose_r+0x80>
  40a1c4:	b570      	push	{r4, r5, r6, lr}
  40a1c6:	4605      	mov	r5, r0
  40a1c8:	460c      	mov	r4, r1
  40a1ca:	b108      	cbz	r0, 40a1d0 <_fclose_r+0x10>
  40a1cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a1ce:	b37b      	cbz	r3, 40a230 <_fclose_r+0x70>
  40a1d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a1d4:	b90b      	cbnz	r3, 40a1da <_fclose_r+0x1a>
  40a1d6:	2000      	movs	r0, #0
  40a1d8:	bd70      	pop	{r4, r5, r6, pc}
  40a1da:	4621      	mov	r1, r4
  40a1dc:	4628      	mov	r0, r5
  40a1de:	f7fd ff1b 	bl	408018 <__sflush_r>
  40a1e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40a1e4:	4606      	mov	r6, r0
  40a1e6:	b133      	cbz	r3, 40a1f6 <_fclose_r+0x36>
  40a1e8:	69e1      	ldr	r1, [r4, #28]
  40a1ea:	4628      	mov	r0, r5
  40a1ec:	4798      	blx	r3
  40a1ee:	2800      	cmp	r0, #0
  40a1f0:	bfb8      	it	lt
  40a1f2:	f04f 36ff 	movlt.w	r6, #4294967295
  40a1f6:	89a3      	ldrh	r3, [r4, #12]
  40a1f8:	061b      	lsls	r3, r3, #24
  40a1fa:	d41c      	bmi.n	40a236 <_fclose_r+0x76>
  40a1fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40a1fe:	b141      	cbz	r1, 40a212 <_fclose_r+0x52>
  40a200:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40a204:	4299      	cmp	r1, r3
  40a206:	d002      	beq.n	40a20e <_fclose_r+0x4e>
  40a208:	4628      	mov	r0, r5
  40a20a:	f7fe f907 	bl	40841c <_free_r>
  40a20e:	2300      	movs	r3, #0
  40a210:	6323      	str	r3, [r4, #48]	; 0x30
  40a212:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40a214:	b121      	cbz	r1, 40a220 <_fclose_r+0x60>
  40a216:	4628      	mov	r0, r5
  40a218:	f7fe f900 	bl	40841c <_free_r>
  40a21c:	2300      	movs	r3, #0
  40a21e:	6463      	str	r3, [r4, #68]	; 0x44
  40a220:	f7fe f838 	bl	408294 <__sfp_lock_acquire>
  40a224:	2300      	movs	r3, #0
  40a226:	81a3      	strh	r3, [r4, #12]
  40a228:	f7fe f836 	bl	408298 <__sfp_lock_release>
  40a22c:	4630      	mov	r0, r6
  40a22e:	bd70      	pop	{r4, r5, r6, pc}
  40a230:	f7fe f82a 	bl	408288 <__sinit>
  40a234:	e7cc      	b.n	40a1d0 <_fclose_r+0x10>
  40a236:	6921      	ldr	r1, [r4, #16]
  40a238:	4628      	mov	r0, r5
  40a23a:	f7fe f8ef 	bl	40841c <_free_r>
  40a23e:	e7dd      	b.n	40a1fc <_fclose_r+0x3c>
  40a240:	2000      	movs	r0, #0
  40a242:	4770      	bx	lr

0040a244 <_fstat_r>:
  40a244:	b538      	push	{r3, r4, r5, lr}
  40a246:	460b      	mov	r3, r1
  40a248:	4c07      	ldr	r4, [pc, #28]	; (40a268 <_fstat_r+0x24>)
  40a24a:	4605      	mov	r5, r0
  40a24c:	4611      	mov	r1, r2
  40a24e:	4618      	mov	r0, r3
  40a250:	2300      	movs	r3, #0
  40a252:	6023      	str	r3, [r4, #0]
  40a254:	f7f9 fbae 	bl	4039b4 <_fstat>
  40a258:	1c43      	adds	r3, r0, #1
  40a25a:	d000      	beq.n	40a25e <_fstat_r+0x1a>
  40a25c:	bd38      	pop	{r3, r4, r5, pc}
  40a25e:	6823      	ldr	r3, [r4, #0]
  40a260:	2b00      	cmp	r3, #0
  40a262:	d0fb      	beq.n	40a25c <_fstat_r+0x18>
  40a264:	602b      	str	r3, [r5, #0]
  40a266:	bd38      	pop	{r3, r4, r5, pc}
  40a268:	2040101c 	.word	0x2040101c

0040a26c <_isatty_r>:
  40a26c:	b538      	push	{r3, r4, r5, lr}
  40a26e:	4c07      	ldr	r4, [pc, #28]	; (40a28c <_isatty_r+0x20>)
  40a270:	2300      	movs	r3, #0
  40a272:	4605      	mov	r5, r0
  40a274:	4608      	mov	r0, r1
  40a276:	6023      	str	r3, [r4, #0]
  40a278:	f7f9 fba2 	bl	4039c0 <_isatty>
  40a27c:	1c43      	adds	r3, r0, #1
  40a27e:	d000      	beq.n	40a282 <_isatty_r+0x16>
  40a280:	bd38      	pop	{r3, r4, r5, pc}
  40a282:	6823      	ldr	r3, [r4, #0]
  40a284:	2b00      	cmp	r3, #0
  40a286:	d0fb      	beq.n	40a280 <_isatty_r+0x14>
  40a288:	602b      	str	r3, [r5, #0]
  40a28a:	bd38      	pop	{r3, r4, r5, pc}
  40a28c:	2040101c 	.word	0x2040101c

0040a290 <_lseek_r>:
  40a290:	b570      	push	{r4, r5, r6, lr}
  40a292:	460d      	mov	r5, r1
  40a294:	4c08      	ldr	r4, [pc, #32]	; (40a2b8 <_lseek_r+0x28>)
  40a296:	4611      	mov	r1, r2
  40a298:	4606      	mov	r6, r0
  40a29a:	461a      	mov	r2, r3
  40a29c:	4628      	mov	r0, r5
  40a29e:	2300      	movs	r3, #0
  40a2a0:	6023      	str	r3, [r4, #0]
  40a2a2:	f7f9 fb8f 	bl	4039c4 <_lseek>
  40a2a6:	1c43      	adds	r3, r0, #1
  40a2a8:	d000      	beq.n	40a2ac <_lseek_r+0x1c>
  40a2aa:	bd70      	pop	{r4, r5, r6, pc}
  40a2ac:	6823      	ldr	r3, [r4, #0]
  40a2ae:	2b00      	cmp	r3, #0
  40a2b0:	d0fb      	beq.n	40a2aa <_lseek_r+0x1a>
  40a2b2:	6033      	str	r3, [r6, #0]
  40a2b4:	bd70      	pop	{r4, r5, r6, pc}
  40a2b6:	bf00      	nop
  40a2b8:	2040101c 	.word	0x2040101c

0040a2bc <_read_r>:
  40a2bc:	b570      	push	{r4, r5, r6, lr}
  40a2be:	460d      	mov	r5, r1
  40a2c0:	4c08      	ldr	r4, [pc, #32]	; (40a2e4 <_read_r+0x28>)
  40a2c2:	4611      	mov	r1, r2
  40a2c4:	4606      	mov	r6, r0
  40a2c6:	461a      	mov	r2, r3
  40a2c8:	4628      	mov	r0, r5
  40a2ca:	2300      	movs	r3, #0
  40a2cc:	6023      	str	r3, [r4, #0]
  40a2ce:	f7f8 fcf3 	bl	402cb8 <_read>
  40a2d2:	1c43      	adds	r3, r0, #1
  40a2d4:	d000      	beq.n	40a2d8 <_read_r+0x1c>
  40a2d6:	bd70      	pop	{r4, r5, r6, pc}
  40a2d8:	6823      	ldr	r3, [r4, #0]
  40a2da:	2b00      	cmp	r3, #0
  40a2dc:	d0fb      	beq.n	40a2d6 <_read_r+0x1a>
  40a2de:	6033      	str	r3, [r6, #0]
  40a2e0:	bd70      	pop	{r4, r5, r6, pc}
  40a2e2:	bf00      	nop
  40a2e4:	2040101c 	.word	0x2040101c

0040a2e8 <__aeabi_drsub>:
  40a2e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40a2ec:	e002      	b.n	40a2f4 <__adddf3>
  40a2ee:	bf00      	nop

0040a2f0 <__aeabi_dsub>:
  40a2f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040a2f4 <__adddf3>:
  40a2f4:	b530      	push	{r4, r5, lr}
  40a2f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40a2fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40a2fe:	ea94 0f05 	teq	r4, r5
  40a302:	bf08      	it	eq
  40a304:	ea90 0f02 	teqeq	r0, r2
  40a308:	bf1f      	itttt	ne
  40a30a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40a30e:	ea55 0c02 	orrsne.w	ip, r5, r2
  40a312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40a316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a31a:	f000 80e2 	beq.w	40a4e2 <__adddf3+0x1ee>
  40a31e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40a322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40a326:	bfb8      	it	lt
  40a328:	426d      	neglt	r5, r5
  40a32a:	dd0c      	ble.n	40a346 <__adddf3+0x52>
  40a32c:	442c      	add	r4, r5
  40a32e:	ea80 0202 	eor.w	r2, r0, r2
  40a332:	ea81 0303 	eor.w	r3, r1, r3
  40a336:	ea82 0000 	eor.w	r0, r2, r0
  40a33a:	ea83 0101 	eor.w	r1, r3, r1
  40a33e:	ea80 0202 	eor.w	r2, r0, r2
  40a342:	ea81 0303 	eor.w	r3, r1, r3
  40a346:	2d36      	cmp	r5, #54	; 0x36
  40a348:	bf88      	it	hi
  40a34a:	bd30      	pophi	{r4, r5, pc}
  40a34c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a350:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40a358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40a35c:	d002      	beq.n	40a364 <__adddf3+0x70>
  40a35e:	4240      	negs	r0, r0
  40a360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40a368:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a36c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40a370:	d002      	beq.n	40a378 <__adddf3+0x84>
  40a372:	4252      	negs	r2, r2
  40a374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40a378:	ea94 0f05 	teq	r4, r5
  40a37c:	f000 80a7 	beq.w	40a4ce <__adddf3+0x1da>
  40a380:	f1a4 0401 	sub.w	r4, r4, #1
  40a384:	f1d5 0e20 	rsbs	lr, r5, #32
  40a388:	db0d      	blt.n	40a3a6 <__adddf3+0xb2>
  40a38a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40a38e:	fa22 f205 	lsr.w	r2, r2, r5
  40a392:	1880      	adds	r0, r0, r2
  40a394:	f141 0100 	adc.w	r1, r1, #0
  40a398:	fa03 f20e 	lsl.w	r2, r3, lr
  40a39c:	1880      	adds	r0, r0, r2
  40a39e:	fa43 f305 	asr.w	r3, r3, r5
  40a3a2:	4159      	adcs	r1, r3
  40a3a4:	e00e      	b.n	40a3c4 <__adddf3+0xd0>
  40a3a6:	f1a5 0520 	sub.w	r5, r5, #32
  40a3aa:	f10e 0e20 	add.w	lr, lr, #32
  40a3ae:	2a01      	cmp	r2, #1
  40a3b0:	fa03 fc0e 	lsl.w	ip, r3, lr
  40a3b4:	bf28      	it	cs
  40a3b6:	f04c 0c02 	orrcs.w	ip, ip, #2
  40a3ba:	fa43 f305 	asr.w	r3, r3, r5
  40a3be:	18c0      	adds	r0, r0, r3
  40a3c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40a3c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a3c8:	d507      	bpl.n	40a3da <__adddf3+0xe6>
  40a3ca:	f04f 0e00 	mov.w	lr, #0
  40a3ce:	f1dc 0c00 	rsbs	ip, ip, #0
  40a3d2:	eb7e 0000 	sbcs.w	r0, lr, r0
  40a3d6:	eb6e 0101 	sbc.w	r1, lr, r1
  40a3da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40a3de:	d31b      	bcc.n	40a418 <__adddf3+0x124>
  40a3e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40a3e4:	d30c      	bcc.n	40a400 <__adddf3+0x10c>
  40a3e6:	0849      	lsrs	r1, r1, #1
  40a3e8:	ea5f 0030 	movs.w	r0, r0, rrx
  40a3ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40a3f0:	f104 0401 	add.w	r4, r4, #1
  40a3f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40a3f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40a3fc:	f080 809a 	bcs.w	40a534 <__adddf3+0x240>
  40a400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40a404:	bf08      	it	eq
  40a406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a40a:	f150 0000 	adcs.w	r0, r0, #0
  40a40e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a412:	ea41 0105 	orr.w	r1, r1, r5
  40a416:	bd30      	pop	{r4, r5, pc}
  40a418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40a41c:	4140      	adcs	r0, r0
  40a41e:	eb41 0101 	adc.w	r1, r1, r1
  40a422:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a426:	f1a4 0401 	sub.w	r4, r4, #1
  40a42a:	d1e9      	bne.n	40a400 <__adddf3+0x10c>
  40a42c:	f091 0f00 	teq	r1, #0
  40a430:	bf04      	itt	eq
  40a432:	4601      	moveq	r1, r0
  40a434:	2000      	moveq	r0, #0
  40a436:	fab1 f381 	clz	r3, r1
  40a43a:	bf08      	it	eq
  40a43c:	3320      	addeq	r3, #32
  40a43e:	f1a3 030b 	sub.w	r3, r3, #11
  40a442:	f1b3 0220 	subs.w	r2, r3, #32
  40a446:	da0c      	bge.n	40a462 <__adddf3+0x16e>
  40a448:	320c      	adds	r2, #12
  40a44a:	dd08      	ble.n	40a45e <__adddf3+0x16a>
  40a44c:	f102 0c14 	add.w	ip, r2, #20
  40a450:	f1c2 020c 	rsb	r2, r2, #12
  40a454:	fa01 f00c 	lsl.w	r0, r1, ip
  40a458:	fa21 f102 	lsr.w	r1, r1, r2
  40a45c:	e00c      	b.n	40a478 <__adddf3+0x184>
  40a45e:	f102 0214 	add.w	r2, r2, #20
  40a462:	bfd8      	it	le
  40a464:	f1c2 0c20 	rsble	ip, r2, #32
  40a468:	fa01 f102 	lsl.w	r1, r1, r2
  40a46c:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a470:	bfdc      	itt	le
  40a472:	ea41 010c 	orrle.w	r1, r1, ip
  40a476:	4090      	lslle	r0, r2
  40a478:	1ae4      	subs	r4, r4, r3
  40a47a:	bfa2      	ittt	ge
  40a47c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40a480:	4329      	orrge	r1, r5
  40a482:	bd30      	popge	{r4, r5, pc}
  40a484:	ea6f 0404 	mvn.w	r4, r4
  40a488:	3c1f      	subs	r4, #31
  40a48a:	da1c      	bge.n	40a4c6 <__adddf3+0x1d2>
  40a48c:	340c      	adds	r4, #12
  40a48e:	dc0e      	bgt.n	40a4ae <__adddf3+0x1ba>
  40a490:	f104 0414 	add.w	r4, r4, #20
  40a494:	f1c4 0220 	rsb	r2, r4, #32
  40a498:	fa20 f004 	lsr.w	r0, r0, r4
  40a49c:	fa01 f302 	lsl.w	r3, r1, r2
  40a4a0:	ea40 0003 	orr.w	r0, r0, r3
  40a4a4:	fa21 f304 	lsr.w	r3, r1, r4
  40a4a8:	ea45 0103 	orr.w	r1, r5, r3
  40a4ac:	bd30      	pop	{r4, r5, pc}
  40a4ae:	f1c4 040c 	rsb	r4, r4, #12
  40a4b2:	f1c4 0220 	rsb	r2, r4, #32
  40a4b6:	fa20 f002 	lsr.w	r0, r0, r2
  40a4ba:	fa01 f304 	lsl.w	r3, r1, r4
  40a4be:	ea40 0003 	orr.w	r0, r0, r3
  40a4c2:	4629      	mov	r1, r5
  40a4c4:	bd30      	pop	{r4, r5, pc}
  40a4c6:	fa21 f004 	lsr.w	r0, r1, r4
  40a4ca:	4629      	mov	r1, r5
  40a4cc:	bd30      	pop	{r4, r5, pc}
  40a4ce:	f094 0f00 	teq	r4, #0
  40a4d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40a4d6:	bf06      	itte	eq
  40a4d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40a4dc:	3401      	addeq	r4, #1
  40a4de:	3d01      	subne	r5, #1
  40a4e0:	e74e      	b.n	40a380 <__adddf3+0x8c>
  40a4e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a4e6:	bf18      	it	ne
  40a4e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a4ec:	d029      	beq.n	40a542 <__adddf3+0x24e>
  40a4ee:	ea94 0f05 	teq	r4, r5
  40a4f2:	bf08      	it	eq
  40a4f4:	ea90 0f02 	teqeq	r0, r2
  40a4f8:	d005      	beq.n	40a506 <__adddf3+0x212>
  40a4fa:	ea54 0c00 	orrs.w	ip, r4, r0
  40a4fe:	bf04      	itt	eq
  40a500:	4619      	moveq	r1, r3
  40a502:	4610      	moveq	r0, r2
  40a504:	bd30      	pop	{r4, r5, pc}
  40a506:	ea91 0f03 	teq	r1, r3
  40a50a:	bf1e      	ittt	ne
  40a50c:	2100      	movne	r1, #0
  40a50e:	2000      	movne	r0, #0
  40a510:	bd30      	popne	{r4, r5, pc}
  40a512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40a516:	d105      	bne.n	40a524 <__adddf3+0x230>
  40a518:	0040      	lsls	r0, r0, #1
  40a51a:	4149      	adcs	r1, r1
  40a51c:	bf28      	it	cs
  40a51e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40a522:	bd30      	pop	{r4, r5, pc}
  40a524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40a528:	bf3c      	itt	cc
  40a52a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40a52e:	bd30      	popcc	{r4, r5, pc}
  40a530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40a538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a53c:	f04f 0000 	mov.w	r0, #0
  40a540:	bd30      	pop	{r4, r5, pc}
  40a542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a546:	bf1a      	itte	ne
  40a548:	4619      	movne	r1, r3
  40a54a:	4610      	movne	r0, r2
  40a54c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40a550:	bf1c      	itt	ne
  40a552:	460b      	movne	r3, r1
  40a554:	4602      	movne	r2, r0
  40a556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a55a:	bf06      	itte	eq
  40a55c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40a560:	ea91 0f03 	teqeq	r1, r3
  40a564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40a568:	bd30      	pop	{r4, r5, pc}
  40a56a:	bf00      	nop

0040a56c <__aeabi_ui2d>:
  40a56c:	f090 0f00 	teq	r0, #0
  40a570:	bf04      	itt	eq
  40a572:	2100      	moveq	r1, #0
  40a574:	4770      	bxeq	lr
  40a576:	b530      	push	{r4, r5, lr}
  40a578:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a57c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a580:	f04f 0500 	mov.w	r5, #0
  40a584:	f04f 0100 	mov.w	r1, #0
  40a588:	e750      	b.n	40a42c <__adddf3+0x138>
  40a58a:	bf00      	nop

0040a58c <__aeabi_i2d>:
  40a58c:	f090 0f00 	teq	r0, #0
  40a590:	bf04      	itt	eq
  40a592:	2100      	moveq	r1, #0
  40a594:	4770      	bxeq	lr
  40a596:	b530      	push	{r4, r5, lr}
  40a598:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a59c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a5a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40a5a4:	bf48      	it	mi
  40a5a6:	4240      	negmi	r0, r0
  40a5a8:	f04f 0100 	mov.w	r1, #0
  40a5ac:	e73e      	b.n	40a42c <__adddf3+0x138>
  40a5ae:	bf00      	nop

0040a5b0 <__aeabi_f2d>:
  40a5b0:	0042      	lsls	r2, r0, #1
  40a5b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40a5b6:	ea4f 0131 	mov.w	r1, r1, rrx
  40a5ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40a5be:	bf1f      	itttt	ne
  40a5c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40a5c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a5c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40a5cc:	4770      	bxne	lr
  40a5ce:	f092 0f00 	teq	r2, #0
  40a5d2:	bf14      	ite	ne
  40a5d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a5d8:	4770      	bxeq	lr
  40a5da:	b530      	push	{r4, r5, lr}
  40a5dc:	f44f 7460 	mov.w	r4, #896	; 0x380
  40a5e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a5e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a5e8:	e720      	b.n	40a42c <__adddf3+0x138>
  40a5ea:	bf00      	nop

0040a5ec <__aeabi_ul2d>:
  40a5ec:	ea50 0201 	orrs.w	r2, r0, r1
  40a5f0:	bf08      	it	eq
  40a5f2:	4770      	bxeq	lr
  40a5f4:	b530      	push	{r4, r5, lr}
  40a5f6:	f04f 0500 	mov.w	r5, #0
  40a5fa:	e00a      	b.n	40a612 <__aeabi_l2d+0x16>

0040a5fc <__aeabi_l2d>:
  40a5fc:	ea50 0201 	orrs.w	r2, r0, r1
  40a600:	bf08      	it	eq
  40a602:	4770      	bxeq	lr
  40a604:	b530      	push	{r4, r5, lr}
  40a606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40a60a:	d502      	bpl.n	40a612 <__aeabi_l2d+0x16>
  40a60c:	4240      	negs	r0, r0
  40a60e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a612:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a616:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a61a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40a61e:	f43f aedc 	beq.w	40a3da <__adddf3+0xe6>
  40a622:	f04f 0203 	mov.w	r2, #3
  40a626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a62a:	bf18      	it	ne
  40a62c:	3203      	addne	r2, #3
  40a62e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a632:	bf18      	it	ne
  40a634:	3203      	addne	r2, #3
  40a636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40a63a:	f1c2 0320 	rsb	r3, r2, #32
  40a63e:	fa00 fc03 	lsl.w	ip, r0, r3
  40a642:	fa20 f002 	lsr.w	r0, r0, r2
  40a646:	fa01 fe03 	lsl.w	lr, r1, r3
  40a64a:	ea40 000e 	orr.w	r0, r0, lr
  40a64e:	fa21 f102 	lsr.w	r1, r1, r2
  40a652:	4414      	add	r4, r2
  40a654:	e6c1      	b.n	40a3da <__adddf3+0xe6>
  40a656:	bf00      	nop

0040a658 <__aeabi_dmul>:
  40a658:	b570      	push	{r4, r5, r6, lr}
  40a65a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a65e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a666:	bf1d      	ittte	ne
  40a668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a66c:	ea94 0f0c 	teqne	r4, ip
  40a670:	ea95 0f0c 	teqne	r5, ip
  40a674:	f000 f8de 	bleq	40a834 <__aeabi_dmul+0x1dc>
  40a678:	442c      	add	r4, r5
  40a67a:	ea81 0603 	eor.w	r6, r1, r3
  40a67e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40a682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40a686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40a68a:	bf18      	it	ne
  40a68c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40a690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40a698:	d038      	beq.n	40a70c <__aeabi_dmul+0xb4>
  40a69a:	fba0 ce02 	umull	ip, lr, r0, r2
  40a69e:	f04f 0500 	mov.w	r5, #0
  40a6a2:	fbe1 e502 	umlal	lr, r5, r1, r2
  40a6a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40a6aa:	fbe0 e503 	umlal	lr, r5, r0, r3
  40a6ae:	f04f 0600 	mov.w	r6, #0
  40a6b2:	fbe1 5603 	umlal	r5, r6, r1, r3
  40a6b6:	f09c 0f00 	teq	ip, #0
  40a6ba:	bf18      	it	ne
  40a6bc:	f04e 0e01 	orrne.w	lr, lr, #1
  40a6c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40a6c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40a6c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40a6cc:	d204      	bcs.n	40a6d8 <__aeabi_dmul+0x80>
  40a6ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40a6d2:	416d      	adcs	r5, r5
  40a6d4:	eb46 0606 	adc.w	r6, r6, r6
  40a6d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40a6dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40a6e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40a6e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40a6e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40a6ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a6f0:	bf88      	it	hi
  40a6f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a6f6:	d81e      	bhi.n	40a736 <__aeabi_dmul+0xde>
  40a6f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40a6fc:	bf08      	it	eq
  40a6fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40a702:	f150 0000 	adcs.w	r0, r0, #0
  40a706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a70a:	bd70      	pop	{r4, r5, r6, pc}
  40a70c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40a710:	ea46 0101 	orr.w	r1, r6, r1
  40a714:	ea40 0002 	orr.w	r0, r0, r2
  40a718:	ea81 0103 	eor.w	r1, r1, r3
  40a71c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40a720:	bfc2      	ittt	gt
  40a722:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a72a:	bd70      	popgt	{r4, r5, r6, pc}
  40a72c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a730:	f04f 0e00 	mov.w	lr, #0
  40a734:	3c01      	subs	r4, #1
  40a736:	f300 80ab 	bgt.w	40a890 <__aeabi_dmul+0x238>
  40a73a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40a73e:	bfde      	ittt	le
  40a740:	2000      	movle	r0, #0
  40a742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40a746:	bd70      	pople	{r4, r5, r6, pc}
  40a748:	f1c4 0400 	rsb	r4, r4, #0
  40a74c:	3c20      	subs	r4, #32
  40a74e:	da35      	bge.n	40a7bc <__aeabi_dmul+0x164>
  40a750:	340c      	adds	r4, #12
  40a752:	dc1b      	bgt.n	40a78c <__aeabi_dmul+0x134>
  40a754:	f104 0414 	add.w	r4, r4, #20
  40a758:	f1c4 0520 	rsb	r5, r4, #32
  40a75c:	fa00 f305 	lsl.w	r3, r0, r5
  40a760:	fa20 f004 	lsr.w	r0, r0, r4
  40a764:	fa01 f205 	lsl.w	r2, r1, r5
  40a768:	ea40 0002 	orr.w	r0, r0, r2
  40a76c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40a770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a778:	fa21 f604 	lsr.w	r6, r1, r4
  40a77c:	eb42 0106 	adc.w	r1, r2, r6
  40a780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a784:	bf08      	it	eq
  40a786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a78a:	bd70      	pop	{r4, r5, r6, pc}
  40a78c:	f1c4 040c 	rsb	r4, r4, #12
  40a790:	f1c4 0520 	rsb	r5, r4, #32
  40a794:	fa00 f304 	lsl.w	r3, r0, r4
  40a798:	fa20 f005 	lsr.w	r0, r0, r5
  40a79c:	fa01 f204 	lsl.w	r2, r1, r4
  40a7a0:	ea40 0002 	orr.w	r0, r0, r2
  40a7a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a7a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a7ac:	f141 0100 	adc.w	r1, r1, #0
  40a7b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a7b4:	bf08      	it	eq
  40a7b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a7ba:	bd70      	pop	{r4, r5, r6, pc}
  40a7bc:	f1c4 0520 	rsb	r5, r4, #32
  40a7c0:	fa00 f205 	lsl.w	r2, r0, r5
  40a7c4:	ea4e 0e02 	orr.w	lr, lr, r2
  40a7c8:	fa20 f304 	lsr.w	r3, r0, r4
  40a7cc:	fa01 f205 	lsl.w	r2, r1, r5
  40a7d0:	ea43 0302 	orr.w	r3, r3, r2
  40a7d4:	fa21 f004 	lsr.w	r0, r1, r4
  40a7d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a7dc:	fa21 f204 	lsr.w	r2, r1, r4
  40a7e0:	ea20 0002 	bic.w	r0, r0, r2
  40a7e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40a7e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a7ec:	bf08      	it	eq
  40a7ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a7f2:	bd70      	pop	{r4, r5, r6, pc}
  40a7f4:	f094 0f00 	teq	r4, #0
  40a7f8:	d10f      	bne.n	40a81a <__aeabi_dmul+0x1c2>
  40a7fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40a7fe:	0040      	lsls	r0, r0, #1
  40a800:	eb41 0101 	adc.w	r1, r1, r1
  40a804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a808:	bf08      	it	eq
  40a80a:	3c01      	subeq	r4, #1
  40a80c:	d0f7      	beq.n	40a7fe <__aeabi_dmul+0x1a6>
  40a80e:	ea41 0106 	orr.w	r1, r1, r6
  40a812:	f095 0f00 	teq	r5, #0
  40a816:	bf18      	it	ne
  40a818:	4770      	bxne	lr
  40a81a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40a81e:	0052      	lsls	r2, r2, #1
  40a820:	eb43 0303 	adc.w	r3, r3, r3
  40a824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40a828:	bf08      	it	eq
  40a82a:	3d01      	subeq	r5, #1
  40a82c:	d0f7      	beq.n	40a81e <__aeabi_dmul+0x1c6>
  40a82e:	ea43 0306 	orr.w	r3, r3, r6
  40a832:	4770      	bx	lr
  40a834:	ea94 0f0c 	teq	r4, ip
  40a838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a83c:	bf18      	it	ne
  40a83e:	ea95 0f0c 	teqne	r5, ip
  40a842:	d00c      	beq.n	40a85e <__aeabi_dmul+0x206>
  40a844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a848:	bf18      	it	ne
  40a84a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a84e:	d1d1      	bne.n	40a7f4 <__aeabi_dmul+0x19c>
  40a850:	ea81 0103 	eor.w	r1, r1, r3
  40a854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a858:	f04f 0000 	mov.w	r0, #0
  40a85c:	bd70      	pop	{r4, r5, r6, pc}
  40a85e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a862:	bf06      	itte	eq
  40a864:	4610      	moveq	r0, r2
  40a866:	4619      	moveq	r1, r3
  40a868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a86c:	d019      	beq.n	40a8a2 <__aeabi_dmul+0x24a>
  40a86e:	ea94 0f0c 	teq	r4, ip
  40a872:	d102      	bne.n	40a87a <__aeabi_dmul+0x222>
  40a874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40a878:	d113      	bne.n	40a8a2 <__aeabi_dmul+0x24a>
  40a87a:	ea95 0f0c 	teq	r5, ip
  40a87e:	d105      	bne.n	40a88c <__aeabi_dmul+0x234>
  40a880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40a884:	bf1c      	itt	ne
  40a886:	4610      	movne	r0, r2
  40a888:	4619      	movne	r1, r3
  40a88a:	d10a      	bne.n	40a8a2 <__aeabi_dmul+0x24a>
  40a88c:	ea81 0103 	eor.w	r1, r1, r3
  40a890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a89c:	f04f 0000 	mov.w	r0, #0
  40a8a0:	bd70      	pop	{r4, r5, r6, pc}
  40a8a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a8a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40a8aa:	bd70      	pop	{r4, r5, r6, pc}

0040a8ac <__aeabi_ddiv>:
  40a8ac:	b570      	push	{r4, r5, r6, lr}
  40a8ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a8b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a8b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a8ba:	bf1d      	ittte	ne
  40a8bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a8c0:	ea94 0f0c 	teqne	r4, ip
  40a8c4:	ea95 0f0c 	teqne	r5, ip
  40a8c8:	f000 f8a7 	bleq	40aa1a <__aeabi_ddiv+0x16e>
  40a8cc:	eba4 0405 	sub.w	r4, r4, r5
  40a8d0:	ea81 0e03 	eor.w	lr, r1, r3
  40a8d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40a8d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a8dc:	f000 8088 	beq.w	40a9f0 <__aeabi_ddiv+0x144>
  40a8e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a8e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40a8e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40a8ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40a8f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40a8f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40a8f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40a8fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40a900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40a904:	429d      	cmp	r5, r3
  40a906:	bf08      	it	eq
  40a908:	4296      	cmpeq	r6, r2
  40a90a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40a90e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40a912:	d202      	bcs.n	40a91a <__aeabi_ddiv+0x6e>
  40a914:	085b      	lsrs	r3, r3, #1
  40a916:	ea4f 0232 	mov.w	r2, r2, rrx
  40a91a:	1ab6      	subs	r6, r6, r2
  40a91c:	eb65 0503 	sbc.w	r5, r5, r3
  40a920:	085b      	lsrs	r3, r3, #1
  40a922:	ea4f 0232 	mov.w	r2, r2, rrx
  40a926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40a92a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40a92e:	ebb6 0e02 	subs.w	lr, r6, r2
  40a932:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a936:	bf22      	ittt	cs
  40a938:	1ab6      	subcs	r6, r6, r2
  40a93a:	4675      	movcs	r5, lr
  40a93c:	ea40 000c 	orrcs.w	r0, r0, ip
  40a940:	085b      	lsrs	r3, r3, #1
  40a942:	ea4f 0232 	mov.w	r2, r2, rrx
  40a946:	ebb6 0e02 	subs.w	lr, r6, r2
  40a94a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a94e:	bf22      	ittt	cs
  40a950:	1ab6      	subcs	r6, r6, r2
  40a952:	4675      	movcs	r5, lr
  40a954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40a958:	085b      	lsrs	r3, r3, #1
  40a95a:	ea4f 0232 	mov.w	r2, r2, rrx
  40a95e:	ebb6 0e02 	subs.w	lr, r6, r2
  40a962:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a966:	bf22      	ittt	cs
  40a968:	1ab6      	subcs	r6, r6, r2
  40a96a:	4675      	movcs	r5, lr
  40a96c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40a970:	085b      	lsrs	r3, r3, #1
  40a972:	ea4f 0232 	mov.w	r2, r2, rrx
  40a976:	ebb6 0e02 	subs.w	lr, r6, r2
  40a97a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a97e:	bf22      	ittt	cs
  40a980:	1ab6      	subcs	r6, r6, r2
  40a982:	4675      	movcs	r5, lr
  40a984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40a988:	ea55 0e06 	orrs.w	lr, r5, r6
  40a98c:	d018      	beq.n	40a9c0 <__aeabi_ddiv+0x114>
  40a98e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40a992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40a996:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40a99a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40a99e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40a9a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40a9a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40a9aa:	d1c0      	bne.n	40a92e <__aeabi_ddiv+0x82>
  40a9ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a9b0:	d10b      	bne.n	40a9ca <__aeabi_ddiv+0x11e>
  40a9b2:	ea41 0100 	orr.w	r1, r1, r0
  40a9b6:	f04f 0000 	mov.w	r0, #0
  40a9ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40a9be:	e7b6      	b.n	40a92e <__aeabi_ddiv+0x82>
  40a9c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a9c4:	bf04      	itt	eq
  40a9c6:	4301      	orreq	r1, r0
  40a9c8:	2000      	moveq	r0, #0
  40a9ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a9ce:	bf88      	it	hi
  40a9d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a9d4:	f63f aeaf 	bhi.w	40a736 <__aeabi_dmul+0xde>
  40a9d8:	ebb5 0c03 	subs.w	ip, r5, r3
  40a9dc:	bf04      	itt	eq
  40a9de:	ebb6 0c02 	subseq.w	ip, r6, r2
  40a9e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a9e6:	f150 0000 	adcs.w	r0, r0, #0
  40a9ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a9ee:	bd70      	pop	{r4, r5, r6, pc}
  40a9f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40a9f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40a9f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40a9fc:	bfc2      	ittt	gt
  40a9fe:	ebd4 050c 	rsbsgt	r5, r4, ip
  40aa02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40aa06:	bd70      	popgt	{r4, r5, r6, pc}
  40aa08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40aa0c:	f04f 0e00 	mov.w	lr, #0
  40aa10:	3c01      	subs	r4, #1
  40aa12:	e690      	b.n	40a736 <__aeabi_dmul+0xde>
  40aa14:	ea45 0e06 	orr.w	lr, r5, r6
  40aa18:	e68d      	b.n	40a736 <__aeabi_dmul+0xde>
  40aa1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40aa1e:	ea94 0f0c 	teq	r4, ip
  40aa22:	bf08      	it	eq
  40aa24:	ea95 0f0c 	teqeq	r5, ip
  40aa28:	f43f af3b 	beq.w	40a8a2 <__aeabi_dmul+0x24a>
  40aa2c:	ea94 0f0c 	teq	r4, ip
  40aa30:	d10a      	bne.n	40aa48 <__aeabi_ddiv+0x19c>
  40aa32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40aa36:	f47f af34 	bne.w	40a8a2 <__aeabi_dmul+0x24a>
  40aa3a:	ea95 0f0c 	teq	r5, ip
  40aa3e:	f47f af25 	bne.w	40a88c <__aeabi_dmul+0x234>
  40aa42:	4610      	mov	r0, r2
  40aa44:	4619      	mov	r1, r3
  40aa46:	e72c      	b.n	40a8a2 <__aeabi_dmul+0x24a>
  40aa48:	ea95 0f0c 	teq	r5, ip
  40aa4c:	d106      	bne.n	40aa5c <__aeabi_ddiv+0x1b0>
  40aa4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40aa52:	f43f aefd 	beq.w	40a850 <__aeabi_dmul+0x1f8>
  40aa56:	4610      	mov	r0, r2
  40aa58:	4619      	mov	r1, r3
  40aa5a:	e722      	b.n	40a8a2 <__aeabi_dmul+0x24a>
  40aa5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40aa60:	bf18      	it	ne
  40aa62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40aa66:	f47f aec5 	bne.w	40a7f4 <__aeabi_dmul+0x19c>
  40aa6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40aa6e:	f47f af0d 	bne.w	40a88c <__aeabi_dmul+0x234>
  40aa72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40aa76:	f47f aeeb 	bne.w	40a850 <__aeabi_dmul+0x1f8>
  40aa7a:	e712      	b.n	40a8a2 <__aeabi_dmul+0x24a>

0040aa7c <__gedf2>:
  40aa7c:	f04f 3cff 	mov.w	ip, #4294967295
  40aa80:	e006      	b.n	40aa90 <__cmpdf2+0x4>
  40aa82:	bf00      	nop

0040aa84 <__ledf2>:
  40aa84:	f04f 0c01 	mov.w	ip, #1
  40aa88:	e002      	b.n	40aa90 <__cmpdf2+0x4>
  40aa8a:	bf00      	nop

0040aa8c <__cmpdf2>:
  40aa8c:	f04f 0c01 	mov.w	ip, #1
  40aa90:	f84d cd04 	str.w	ip, [sp, #-4]!
  40aa94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40aa98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40aa9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40aaa0:	bf18      	it	ne
  40aaa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40aaa6:	d01b      	beq.n	40aae0 <__cmpdf2+0x54>
  40aaa8:	b001      	add	sp, #4
  40aaaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40aaae:	bf0c      	ite	eq
  40aab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40aab4:	ea91 0f03 	teqne	r1, r3
  40aab8:	bf02      	ittt	eq
  40aaba:	ea90 0f02 	teqeq	r0, r2
  40aabe:	2000      	moveq	r0, #0
  40aac0:	4770      	bxeq	lr
  40aac2:	f110 0f00 	cmn.w	r0, #0
  40aac6:	ea91 0f03 	teq	r1, r3
  40aaca:	bf58      	it	pl
  40aacc:	4299      	cmppl	r1, r3
  40aace:	bf08      	it	eq
  40aad0:	4290      	cmpeq	r0, r2
  40aad2:	bf2c      	ite	cs
  40aad4:	17d8      	asrcs	r0, r3, #31
  40aad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40aada:	f040 0001 	orr.w	r0, r0, #1
  40aade:	4770      	bx	lr
  40aae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40aae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40aae8:	d102      	bne.n	40aaf0 <__cmpdf2+0x64>
  40aaea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40aaee:	d107      	bne.n	40ab00 <__cmpdf2+0x74>
  40aaf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40aaf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40aaf8:	d1d6      	bne.n	40aaa8 <__cmpdf2+0x1c>
  40aafa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40aafe:	d0d3      	beq.n	40aaa8 <__cmpdf2+0x1c>
  40ab00:	f85d 0b04 	ldr.w	r0, [sp], #4
  40ab04:	4770      	bx	lr
  40ab06:	bf00      	nop

0040ab08 <__aeabi_cdrcmple>:
  40ab08:	4684      	mov	ip, r0
  40ab0a:	4610      	mov	r0, r2
  40ab0c:	4662      	mov	r2, ip
  40ab0e:	468c      	mov	ip, r1
  40ab10:	4619      	mov	r1, r3
  40ab12:	4663      	mov	r3, ip
  40ab14:	e000      	b.n	40ab18 <__aeabi_cdcmpeq>
  40ab16:	bf00      	nop

0040ab18 <__aeabi_cdcmpeq>:
  40ab18:	b501      	push	{r0, lr}
  40ab1a:	f7ff ffb7 	bl	40aa8c <__cmpdf2>
  40ab1e:	2800      	cmp	r0, #0
  40ab20:	bf48      	it	mi
  40ab22:	f110 0f00 	cmnmi.w	r0, #0
  40ab26:	bd01      	pop	{r0, pc}

0040ab28 <__aeabi_dcmpeq>:
  40ab28:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ab2c:	f7ff fff4 	bl	40ab18 <__aeabi_cdcmpeq>
  40ab30:	bf0c      	ite	eq
  40ab32:	2001      	moveq	r0, #1
  40ab34:	2000      	movne	r0, #0
  40ab36:	f85d fb08 	ldr.w	pc, [sp], #8
  40ab3a:	bf00      	nop

0040ab3c <__aeabi_dcmplt>:
  40ab3c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ab40:	f7ff ffea 	bl	40ab18 <__aeabi_cdcmpeq>
  40ab44:	bf34      	ite	cc
  40ab46:	2001      	movcc	r0, #1
  40ab48:	2000      	movcs	r0, #0
  40ab4a:	f85d fb08 	ldr.w	pc, [sp], #8
  40ab4e:	bf00      	nop

0040ab50 <__aeabi_dcmple>:
  40ab50:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ab54:	f7ff ffe0 	bl	40ab18 <__aeabi_cdcmpeq>
  40ab58:	bf94      	ite	ls
  40ab5a:	2001      	movls	r0, #1
  40ab5c:	2000      	movhi	r0, #0
  40ab5e:	f85d fb08 	ldr.w	pc, [sp], #8
  40ab62:	bf00      	nop

0040ab64 <__aeabi_dcmpge>:
  40ab64:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ab68:	f7ff ffce 	bl	40ab08 <__aeabi_cdrcmple>
  40ab6c:	bf94      	ite	ls
  40ab6e:	2001      	movls	r0, #1
  40ab70:	2000      	movhi	r0, #0
  40ab72:	f85d fb08 	ldr.w	pc, [sp], #8
  40ab76:	bf00      	nop

0040ab78 <__aeabi_dcmpgt>:
  40ab78:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ab7c:	f7ff ffc4 	bl	40ab08 <__aeabi_cdrcmple>
  40ab80:	bf34      	ite	cc
  40ab82:	2001      	movcc	r0, #1
  40ab84:	2000      	movcs	r0, #0
  40ab86:	f85d fb08 	ldr.w	pc, [sp], #8
  40ab8a:	bf00      	nop

0040ab8c <__aeabi_dcmpun>:
  40ab8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ab90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ab94:	d102      	bne.n	40ab9c <__aeabi_dcmpun+0x10>
  40ab96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40ab9a:	d10a      	bne.n	40abb2 <__aeabi_dcmpun+0x26>
  40ab9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40aba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40aba4:	d102      	bne.n	40abac <__aeabi_dcmpun+0x20>
  40aba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40abaa:	d102      	bne.n	40abb2 <__aeabi_dcmpun+0x26>
  40abac:	f04f 0000 	mov.w	r0, #0
  40abb0:	4770      	bx	lr
  40abb2:	f04f 0001 	mov.w	r0, #1
  40abb6:	4770      	bx	lr

0040abb8 <__aeabi_d2iz>:
  40abb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40abbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40abc0:	d215      	bcs.n	40abee <__aeabi_d2iz+0x36>
  40abc2:	d511      	bpl.n	40abe8 <__aeabi_d2iz+0x30>
  40abc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40abc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40abcc:	d912      	bls.n	40abf4 <__aeabi_d2iz+0x3c>
  40abce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40abd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40abd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40abda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40abde:	fa23 f002 	lsr.w	r0, r3, r2
  40abe2:	bf18      	it	ne
  40abe4:	4240      	negne	r0, r0
  40abe6:	4770      	bx	lr
  40abe8:	f04f 0000 	mov.w	r0, #0
  40abec:	4770      	bx	lr
  40abee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40abf2:	d105      	bne.n	40ac00 <__aeabi_d2iz+0x48>
  40abf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40abf8:	bf08      	it	eq
  40abfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40abfe:	4770      	bx	lr
  40ac00:	f04f 0000 	mov.w	r0, #0
  40ac04:	4770      	bx	lr
  40ac06:	bf00      	nop

0040ac08 <__aeabi_uldivmod>:
  40ac08:	b953      	cbnz	r3, 40ac20 <__aeabi_uldivmod+0x18>
  40ac0a:	b94a      	cbnz	r2, 40ac20 <__aeabi_uldivmod+0x18>
  40ac0c:	2900      	cmp	r1, #0
  40ac0e:	bf08      	it	eq
  40ac10:	2800      	cmpeq	r0, #0
  40ac12:	bf1c      	itt	ne
  40ac14:	f04f 31ff 	movne.w	r1, #4294967295
  40ac18:	f04f 30ff 	movne.w	r0, #4294967295
  40ac1c:	f000 b97e 	b.w	40af1c <__aeabi_idiv0>
  40ac20:	f1ad 0c08 	sub.w	ip, sp, #8
  40ac24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40ac28:	f000 f806 	bl	40ac38 <__udivmoddi4>
  40ac2c:	f8dd e004 	ldr.w	lr, [sp, #4]
  40ac30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40ac34:	b004      	add	sp, #16
  40ac36:	4770      	bx	lr

0040ac38 <__udivmoddi4>:
  40ac38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ac3c:	468c      	mov	ip, r1
  40ac3e:	460e      	mov	r6, r1
  40ac40:	4604      	mov	r4, r0
  40ac42:	9d08      	ldr	r5, [sp, #32]
  40ac44:	2b00      	cmp	r3, #0
  40ac46:	d150      	bne.n	40acea <__udivmoddi4+0xb2>
  40ac48:	428a      	cmp	r2, r1
  40ac4a:	4617      	mov	r7, r2
  40ac4c:	d96c      	bls.n	40ad28 <__udivmoddi4+0xf0>
  40ac4e:	fab2 fe82 	clz	lr, r2
  40ac52:	f1be 0f00 	cmp.w	lr, #0
  40ac56:	d00b      	beq.n	40ac70 <__udivmoddi4+0x38>
  40ac58:	f1ce 0420 	rsb	r4, lr, #32
  40ac5c:	fa20 f404 	lsr.w	r4, r0, r4
  40ac60:	fa01 f60e 	lsl.w	r6, r1, lr
  40ac64:	ea44 0c06 	orr.w	ip, r4, r6
  40ac68:	fa02 f70e 	lsl.w	r7, r2, lr
  40ac6c:	fa00 f40e 	lsl.w	r4, r0, lr
  40ac70:	ea4f 4917 	mov.w	r9, r7, lsr #16
  40ac74:	0c22      	lsrs	r2, r4, #16
  40ac76:	fbbc f0f9 	udiv	r0, ip, r9
  40ac7a:	fa1f f887 	uxth.w	r8, r7
  40ac7e:	fb09 c610 	mls	r6, r9, r0, ip
  40ac82:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40ac86:	fb00 f308 	mul.w	r3, r0, r8
  40ac8a:	42b3      	cmp	r3, r6
  40ac8c:	d909      	bls.n	40aca2 <__udivmoddi4+0x6a>
  40ac8e:	19f6      	adds	r6, r6, r7
  40ac90:	f100 32ff 	add.w	r2, r0, #4294967295
  40ac94:	f080 8122 	bcs.w	40aedc <__udivmoddi4+0x2a4>
  40ac98:	42b3      	cmp	r3, r6
  40ac9a:	f240 811f 	bls.w	40aedc <__udivmoddi4+0x2a4>
  40ac9e:	3802      	subs	r0, #2
  40aca0:	443e      	add	r6, r7
  40aca2:	1af6      	subs	r6, r6, r3
  40aca4:	b2a2      	uxth	r2, r4
  40aca6:	fbb6 f3f9 	udiv	r3, r6, r9
  40acaa:	fb09 6613 	mls	r6, r9, r3, r6
  40acae:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40acb2:	fb03 f808 	mul.w	r8, r3, r8
  40acb6:	45a0      	cmp	r8, r4
  40acb8:	d909      	bls.n	40acce <__udivmoddi4+0x96>
  40acba:	19e4      	adds	r4, r4, r7
  40acbc:	f103 32ff 	add.w	r2, r3, #4294967295
  40acc0:	f080 810a 	bcs.w	40aed8 <__udivmoddi4+0x2a0>
  40acc4:	45a0      	cmp	r8, r4
  40acc6:	f240 8107 	bls.w	40aed8 <__udivmoddi4+0x2a0>
  40acca:	3b02      	subs	r3, #2
  40accc:	443c      	add	r4, r7
  40acce:	ebc8 0404 	rsb	r4, r8, r4
  40acd2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40acd6:	2100      	movs	r1, #0
  40acd8:	2d00      	cmp	r5, #0
  40acda:	d062      	beq.n	40ada2 <__udivmoddi4+0x16a>
  40acdc:	fa24 f40e 	lsr.w	r4, r4, lr
  40ace0:	2300      	movs	r3, #0
  40ace2:	602c      	str	r4, [r5, #0]
  40ace4:	606b      	str	r3, [r5, #4]
  40ace6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40acea:	428b      	cmp	r3, r1
  40acec:	d907      	bls.n	40acfe <__udivmoddi4+0xc6>
  40acee:	2d00      	cmp	r5, #0
  40acf0:	d055      	beq.n	40ad9e <__udivmoddi4+0x166>
  40acf2:	2100      	movs	r1, #0
  40acf4:	e885 0041 	stmia.w	r5, {r0, r6}
  40acf8:	4608      	mov	r0, r1
  40acfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40acfe:	fab3 f183 	clz	r1, r3
  40ad02:	2900      	cmp	r1, #0
  40ad04:	f040 8090 	bne.w	40ae28 <__udivmoddi4+0x1f0>
  40ad08:	42b3      	cmp	r3, r6
  40ad0a:	d302      	bcc.n	40ad12 <__udivmoddi4+0xda>
  40ad0c:	4282      	cmp	r2, r0
  40ad0e:	f200 80f8 	bhi.w	40af02 <__udivmoddi4+0x2ca>
  40ad12:	1a84      	subs	r4, r0, r2
  40ad14:	eb66 0603 	sbc.w	r6, r6, r3
  40ad18:	2001      	movs	r0, #1
  40ad1a:	46b4      	mov	ip, r6
  40ad1c:	2d00      	cmp	r5, #0
  40ad1e:	d040      	beq.n	40ada2 <__udivmoddi4+0x16a>
  40ad20:	e885 1010 	stmia.w	r5, {r4, ip}
  40ad24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ad28:	b912      	cbnz	r2, 40ad30 <__udivmoddi4+0xf8>
  40ad2a:	2701      	movs	r7, #1
  40ad2c:	fbb7 f7f2 	udiv	r7, r7, r2
  40ad30:	fab7 fe87 	clz	lr, r7
  40ad34:	f1be 0f00 	cmp.w	lr, #0
  40ad38:	d135      	bne.n	40ada6 <__udivmoddi4+0x16e>
  40ad3a:	1bf3      	subs	r3, r6, r7
  40ad3c:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40ad40:	fa1f fc87 	uxth.w	ip, r7
  40ad44:	2101      	movs	r1, #1
  40ad46:	fbb3 f0f8 	udiv	r0, r3, r8
  40ad4a:	0c22      	lsrs	r2, r4, #16
  40ad4c:	fb08 3610 	mls	r6, r8, r0, r3
  40ad50:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40ad54:	fb0c f300 	mul.w	r3, ip, r0
  40ad58:	42b3      	cmp	r3, r6
  40ad5a:	d907      	bls.n	40ad6c <__udivmoddi4+0x134>
  40ad5c:	19f6      	adds	r6, r6, r7
  40ad5e:	f100 32ff 	add.w	r2, r0, #4294967295
  40ad62:	d202      	bcs.n	40ad6a <__udivmoddi4+0x132>
  40ad64:	42b3      	cmp	r3, r6
  40ad66:	f200 80ce 	bhi.w	40af06 <__udivmoddi4+0x2ce>
  40ad6a:	4610      	mov	r0, r2
  40ad6c:	1af6      	subs	r6, r6, r3
  40ad6e:	b2a2      	uxth	r2, r4
  40ad70:	fbb6 f3f8 	udiv	r3, r6, r8
  40ad74:	fb08 6613 	mls	r6, r8, r3, r6
  40ad78:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40ad7c:	fb0c fc03 	mul.w	ip, ip, r3
  40ad80:	45a4      	cmp	ip, r4
  40ad82:	d907      	bls.n	40ad94 <__udivmoddi4+0x15c>
  40ad84:	19e4      	adds	r4, r4, r7
  40ad86:	f103 32ff 	add.w	r2, r3, #4294967295
  40ad8a:	d202      	bcs.n	40ad92 <__udivmoddi4+0x15a>
  40ad8c:	45a4      	cmp	ip, r4
  40ad8e:	f200 80b5 	bhi.w	40aefc <__udivmoddi4+0x2c4>
  40ad92:	4613      	mov	r3, r2
  40ad94:	ebcc 0404 	rsb	r4, ip, r4
  40ad98:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40ad9c:	e79c      	b.n	40acd8 <__udivmoddi4+0xa0>
  40ad9e:	4629      	mov	r1, r5
  40ada0:	4628      	mov	r0, r5
  40ada2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ada6:	f1ce 0120 	rsb	r1, lr, #32
  40adaa:	fa06 f30e 	lsl.w	r3, r6, lr
  40adae:	fa07 f70e 	lsl.w	r7, r7, lr
  40adb2:	fa20 f901 	lsr.w	r9, r0, r1
  40adb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40adba:	40ce      	lsrs	r6, r1
  40adbc:	ea49 0903 	orr.w	r9, r9, r3
  40adc0:	fbb6 faf8 	udiv	sl, r6, r8
  40adc4:	ea4f 4419 	mov.w	r4, r9, lsr #16
  40adc8:	fb08 661a 	mls	r6, r8, sl, r6
  40adcc:	fa1f fc87 	uxth.w	ip, r7
  40add0:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  40add4:	fb0a f20c 	mul.w	r2, sl, ip
  40add8:	429a      	cmp	r2, r3
  40adda:	fa00 f40e 	lsl.w	r4, r0, lr
  40adde:	d90a      	bls.n	40adf6 <__udivmoddi4+0x1be>
  40ade0:	19db      	adds	r3, r3, r7
  40ade2:	f10a 31ff 	add.w	r1, sl, #4294967295
  40ade6:	f080 8087 	bcs.w	40aef8 <__udivmoddi4+0x2c0>
  40adea:	429a      	cmp	r2, r3
  40adec:	f240 8084 	bls.w	40aef8 <__udivmoddi4+0x2c0>
  40adf0:	f1aa 0a02 	sub.w	sl, sl, #2
  40adf4:	443b      	add	r3, r7
  40adf6:	1a9b      	subs	r3, r3, r2
  40adf8:	fa1f f989 	uxth.w	r9, r9
  40adfc:	fbb3 f1f8 	udiv	r1, r3, r8
  40ae00:	fb08 3311 	mls	r3, r8, r1, r3
  40ae04:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  40ae08:	fb01 f60c 	mul.w	r6, r1, ip
  40ae0c:	429e      	cmp	r6, r3
  40ae0e:	d907      	bls.n	40ae20 <__udivmoddi4+0x1e8>
  40ae10:	19db      	adds	r3, r3, r7
  40ae12:	f101 32ff 	add.w	r2, r1, #4294967295
  40ae16:	d26b      	bcs.n	40aef0 <__udivmoddi4+0x2b8>
  40ae18:	429e      	cmp	r6, r3
  40ae1a:	d969      	bls.n	40aef0 <__udivmoddi4+0x2b8>
  40ae1c:	3902      	subs	r1, #2
  40ae1e:	443b      	add	r3, r7
  40ae20:	1b9b      	subs	r3, r3, r6
  40ae22:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  40ae26:	e78e      	b.n	40ad46 <__udivmoddi4+0x10e>
  40ae28:	f1c1 0e20 	rsb	lr, r1, #32
  40ae2c:	fa22 f40e 	lsr.w	r4, r2, lr
  40ae30:	408b      	lsls	r3, r1
  40ae32:	4323      	orrs	r3, r4
  40ae34:	fa20 f70e 	lsr.w	r7, r0, lr
  40ae38:	fa06 f401 	lsl.w	r4, r6, r1
  40ae3c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40ae40:	fa26 f60e 	lsr.w	r6, r6, lr
  40ae44:	433c      	orrs	r4, r7
  40ae46:	fbb6 f9fc 	udiv	r9, r6, ip
  40ae4a:	0c27      	lsrs	r7, r4, #16
  40ae4c:	fb0c 6619 	mls	r6, ip, r9, r6
  40ae50:	fa1f f883 	uxth.w	r8, r3
  40ae54:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  40ae58:	fb09 f708 	mul.w	r7, r9, r8
  40ae5c:	42b7      	cmp	r7, r6
  40ae5e:	fa02 f201 	lsl.w	r2, r2, r1
  40ae62:	fa00 fa01 	lsl.w	sl, r0, r1
  40ae66:	d908      	bls.n	40ae7a <__udivmoddi4+0x242>
  40ae68:	18f6      	adds	r6, r6, r3
  40ae6a:	f109 30ff 	add.w	r0, r9, #4294967295
  40ae6e:	d241      	bcs.n	40aef4 <__udivmoddi4+0x2bc>
  40ae70:	42b7      	cmp	r7, r6
  40ae72:	d93f      	bls.n	40aef4 <__udivmoddi4+0x2bc>
  40ae74:	f1a9 0902 	sub.w	r9, r9, #2
  40ae78:	441e      	add	r6, r3
  40ae7a:	1bf6      	subs	r6, r6, r7
  40ae7c:	b2a0      	uxth	r0, r4
  40ae7e:	fbb6 f4fc 	udiv	r4, r6, ip
  40ae82:	fb0c 6614 	mls	r6, ip, r4, r6
  40ae86:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  40ae8a:	fb04 f808 	mul.w	r8, r4, r8
  40ae8e:	45b8      	cmp	r8, r7
  40ae90:	d907      	bls.n	40aea2 <__udivmoddi4+0x26a>
  40ae92:	18ff      	adds	r7, r7, r3
  40ae94:	f104 30ff 	add.w	r0, r4, #4294967295
  40ae98:	d228      	bcs.n	40aeec <__udivmoddi4+0x2b4>
  40ae9a:	45b8      	cmp	r8, r7
  40ae9c:	d926      	bls.n	40aeec <__udivmoddi4+0x2b4>
  40ae9e:	3c02      	subs	r4, #2
  40aea0:	441f      	add	r7, r3
  40aea2:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  40aea6:	ebc8 0707 	rsb	r7, r8, r7
  40aeaa:	fba0 8902 	umull	r8, r9, r0, r2
  40aeae:	454f      	cmp	r7, r9
  40aeb0:	4644      	mov	r4, r8
  40aeb2:	464e      	mov	r6, r9
  40aeb4:	d314      	bcc.n	40aee0 <__udivmoddi4+0x2a8>
  40aeb6:	d029      	beq.n	40af0c <__udivmoddi4+0x2d4>
  40aeb8:	b365      	cbz	r5, 40af14 <__udivmoddi4+0x2dc>
  40aeba:	ebba 0304 	subs.w	r3, sl, r4
  40aebe:	eb67 0706 	sbc.w	r7, r7, r6
  40aec2:	fa07 fe0e 	lsl.w	lr, r7, lr
  40aec6:	40cb      	lsrs	r3, r1
  40aec8:	40cf      	lsrs	r7, r1
  40aeca:	ea4e 0303 	orr.w	r3, lr, r3
  40aece:	e885 0088 	stmia.w	r5, {r3, r7}
  40aed2:	2100      	movs	r1, #0
  40aed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40aed8:	4613      	mov	r3, r2
  40aeda:	e6f8      	b.n	40acce <__udivmoddi4+0x96>
  40aedc:	4610      	mov	r0, r2
  40aede:	e6e0      	b.n	40aca2 <__udivmoddi4+0x6a>
  40aee0:	ebb8 0402 	subs.w	r4, r8, r2
  40aee4:	eb69 0603 	sbc.w	r6, r9, r3
  40aee8:	3801      	subs	r0, #1
  40aeea:	e7e5      	b.n	40aeb8 <__udivmoddi4+0x280>
  40aeec:	4604      	mov	r4, r0
  40aeee:	e7d8      	b.n	40aea2 <__udivmoddi4+0x26a>
  40aef0:	4611      	mov	r1, r2
  40aef2:	e795      	b.n	40ae20 <__udivmoddi4+0x1e8>
  40aef4:	4681      	mov	r9, r0
  40aef6:	e7c0      	b.n	40ae7a <__udivmoddi4+0x242>
  40aef8:	468a      	mov	sl, r1
  40aefa:	e77c      	b.n	40adf6 <__udivmoddi4+0x1be>
  40aefc:	3b02      	subs	r3, #2
  40aefe:	443c      	add	r4, r7
  40af00:	e748      	b.n	40ad94 <__udivmoddi4+0x15c>
  40af02:	4608      	mov	r0, r1
  40af04:	e70a      	b.n	40ad1c <__udivmoddi4+0xe4>
  40af06:	3802      	subs	r0, #2
  40af08:	443e      	add	r6, r7
  40af0a:	e72f      	b.n	40ad6c <__udivmoddi4+0x134>
  40af0c:	45c2      	cmp	sl, r8
  40af0e:	d3e7      	bcc.n	40aee0 <__udivmoddi4+0x2a8>
  40af10:	463e      	mov	r6, r7
  40af12:	e7d1      	b.n	40aeb8 <__udivmoddi4+0x280>
  40af14:	4629      	mov	r1, r5
  40af16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40af1a:	bf00      	nop

0040af1c <__aeabi_idiv0>:
  40af1c:	4770      	bx	lr
  40af1e:	bf00      	nop
  40af20:	50504128 	.word	0x50504128
  40af24:	52452829 	.word	0x52452829
  40af28:	255b2952 	.word	0x255b2952
  40af2c:	255b5d73 	.word	0x255b5d73
  40af30:	00005d64 	.word	0x00005d64
  40af34:	61766e49 	.word	0x61766e49
  40af38:	2064696c 	.word	0x2064696c
  40af3c:	54434f49 	.word	0x54434f49
  40af40:	6f63204c 	.word	0x6f63204c
  40af44:	6e616d6d 	.word	0x6e616d6d
  40af48:	000a2164 	.word	0x000a2164
  40af4c:	0000000d 	.word	0x0000000d

0040af50 <__FUNCTION__.9672>:
  40af50:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....

0040af60 <__FUNCTION__.8784>:
  40af60:	5f666968 00727369                       hif_isr.

0040af68 <__FUNCTION__.8805>:
  40af68:	5f666968 65636572 00657669 46494828     hif_receive.(HIF
  40af78:	69614629 6f74206c 6b617720 74207075     )Fail to wakup t
  40af88:	63206568 0a706968 00000000 66696828     he chip.....(hif
  40af98:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
  40afa8:	4c525443 6220315f 66207375 0a6c6961     CTRL_1 bus fail.
  40afb8:	00000000 66696828 64612029 73657264     ....(hif) addres
  40afc8:	75622073 61662073 000a6c69 66696828     s bus fail..(hif
  40afd8:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
  40afe8:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
  40aff8:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
  40b008:	25203d20 3e583230 0000000a 66696828      = %02X>....(hif
  40b018:	6e692029 696c6176 72672064 2070756f     ) invalid group 
  40b028:	000a4449 66696828 6f682029 61207473     ID..(hif) host a
  40b038:	64207070 276e6469 65732074 58522074     pp didn't set RX
  40b048:	6e6f4420 00000a65 66696828 72572029      Done...(hif) Wr
  40b058:	20676e6f 657a6953 0000000a 66696828     ong Size....(hif
  40b068:	61462029 2065736c 65746e69 70757272     ) False interrup
  40b078:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
  40b088:	74206c69 6552206f 69206461 7265746e     il to Read inter
  40b098:	74707572 67657220 0000000a 66696828     rupt reg....(hif
  40b0a8:	41462029 74204c49 6177206f 7075656b     ) FAIL to wakeup
  40b0b8:	65687420 69686320 00000a70 46494828      the chip...(HIF
  40b0c8:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
  40b0d8:	746e6920 75727265 25207470 72742064      interrupt %d tr
  40b0e8:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
  40b0f8:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
  40b108:	72612064 656d7567 000a746e 20505041     d argument..APP 
  40b118:	75716552 65747365 69532064 6920657a     Requested Size i
  40b128:	616c2073 72656772 61687420 6874206e     s larger than th
  40b138:	65722065 65766963 75622064 72656666     e recived buffer
  40b148:	7a697320 253c2065 253c3e64 000a3e64      size <%d><%d>..
  40b158:	20505041 75716552 65747365 64412064     APP Requested Ad
  40b168:	73657264 65622073 646e6f79 65687420     dress beyond the
  40b178:	63657220 64657669 66756220 20726566      recived buffer 
  40b188:	72646461 20737365 20646e61 676e656c     address and leng
  40b198:	000a6874 20705247 6425203f 0000000a     th..GRp ? %d....

0040b1a8 <__FUNCTION__.8820>:
  40b1a8:	5f666968 69676572 72657473 0062635f     hif_register_cb.

0040b1b8 <__FUNCTION__.8774>:
  40b1b8:	5f666968 646e6573 00000000              hif_send....

0040b1c4 <__FUNCTION__.8790>:
  40b1c4:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0040b1d4 <__FUNCTION__.8799>:
  40b1d4:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
  40b1e4:	0063735f                                _sc.

0040b1e8 <__FUNCTION__.8747>:
  40b1e8:	5f6d326d 69666977 0062635f 50504128     m2m_wifi_cb.(APP
  40b1f8:	4e492829 00294f46 666e6f43 7463696c     )(INFO).Conflict
  40b208:	49206465 20222050 252e7525 75252e75     ed IP " %u.%u.%u
  40b218:	2075252e 000a2022 20514552 20746f4e     .%u " ..REQ Not 
  40b228:	69666564 2064656e 000a6425 41564e49     defined %d..INVA
  40b238:	2044494c 4e494f50 0a524554 00000000     LID POINTER.....
  40b248:	41564e49 2044494c 44495353 0000000a     INVALID SSID....
  40b258:	41564e49 2044494c 000a4843 41564e49     INVALID CH..INVA
  40b268:	2044494c 50434844 52455320 20524556     LID DHCP SERVER 
  40b278:	000a5049 41564e49 2044494c 2059454b     IP..INVALID KEY 
  40b288:	45444e49 00000a58 41564e49 2044494c     INDEX...INVALID 
  40b298:	2059454b 455a4953 0000000a 41564e49     KEY SIZE....INVA
  40b2a8:	2044494c 20504557 0a59454b 00000000     LID WEP KEY.....
  40b2b8:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
  40b2c8:	49544143 4d204e4f 0a45444f 00000000     CATION MODE.....
  40b2d8:	6d726946 65726177 72657620 3a202020     Firmware ver   :
  40b2e8:	2e752520 252e7525 00000a75 206e694d      %u.%u.%u...Min 
  40b2f8:	76697264 76207265 3a207265 2e752520     driver ver : %u.
  40b308:	252e7525 00000a75 72727543 69726420     %u.%u...Curr dri
  40b318:	20726576 3a726576 2e752520 252e7525     ver ver: %u.%u.%
  40b328:	00000a75 6d73694d 68637461 72694620     u...Mismatch Fir
  40b338:	7277616d 65562065 6f697372 00000a6e     mawre Version...
  40b348:	2079654b 6e207369 7620746f 64696c61     Key is not valid
  40b358:	0000000a 61766e49 2064696c 0a79654b     ....Invalid Key.
  40b368:	00000000 44495353 4e454c20 564e4920     ....SSID LEN INV
  40b378:	44494c41 0000000a 49204843 4c41564e     ALID....CH INVAL
  40b388:	000a4449 61766e49 2064696c 20706557     ID..Invalid Wep 
  40b398:	2079656b 65646e69 64252078 0000000a     key index %d....
  40b3a8:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
  40b3b8:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
  40b3c8:	63657272 53502074 656b204b 656c2079     rrect PSK key le
  40b3d8:	6874676e 0000000a 65646e75 656e6966     ngth....undefine
  40b3e8:	65732064 79742063 000a6570 41564e49     d sec type..INVA
  40b3f8:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
  40b408:	73746f6c 00000a21 41564e49 2044494c     lots!...INVALID 
  40b418:	6e616373 6f6c7320 69742074 0a21656d     scan slot time!.
  40b428:	00000000 41564e49 2044494c 6f206f4e     ....INVALID No o
  40b438:	72702066 2065626f 75716572 73747365     f probe requests
  40b448:	72657020 61637320 6c73206e 000a746f      per scan slot..
  40b458:	41564e49 2044494c 49535352 72687420     INVALID RSSI thr
  40b468:	6f687365 2520646c 000a2064 5f53505f     eshold %d .._PS_
  40b478:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
  40b488:	6e696665 000a6465 7473694c 63206e65     efined..Listen c
  40b498:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
  40b4a8:	6220796c 2c312065 6f203620 31312072     ly be 1, 6 or 11
  40b4b8:	0000000a 45574f50 41532052 25204556     ....POWER SAVE %
  40b4c8:	00000a64 41564e49 2044494c 414d4f44     d...INVALID DOMA
  40b4d8:	4e204e49 0a454d41 00000000 474e5250     IN NAME.....PRNG
  40b4e8:	66754220 20726566 65637865 64656465      Buffer exceeded
  40b4f8:	78616d20 6d756d69 7a697320 64252065      maximum size %d
  40b508:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
  40b518:	00000000                                ....

0040b51c <__FUNCTION__.8771>:
  40b51c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0040b52c <__FUNCTION__.8678>:
  40b52c:	70696863 6965645f 0074696e              chip_deinit.

0040b538 <__FUNCTION__.8584>:
  40b538:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.
  40b548:	20737542 6f727265 31282072 57202e29     Bus error (1). W
  40b558:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40b568:	20737542 6f727265 32282072 57202e29     Bus error (2). W
  40b578:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40b588:	636f6c63 7320736b 6c6c6974 46464f20     clocks still OFF
  40b598:	6157202e 7520656b 61662070 64656c69     . Wake up failed
  40b5a8:	0000000a 696d6e5b 61747320 3a5d7472     ....[nmi start]:
  40b5b8:	69616620 6572206c 72206461 30206765      fail read reg 0
  40b5c8:	31313178 2e2e2038 00000a2e 3a676572     x1118 ......reg:
  40b5d8:	2f207825 20782520 0000000a 6c696166     %x / %x ....fail
  40b5e8:	74206465 6564206f 696e692d 6c616974     ed to de-initial
  40b5f8:	0a657a69 00000000 6f727245 68772072     ize.....Error wh
  40b608:	20656c69 74697277 20676e69 0a676572     ile writing reg.
  40b618:	00000000 6f727245 68772072 20656c69     ....Error while 
  40b628:	64616572 20676e69 0a676572 00000000     reading reg.....
  40b638:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
  40b648:	656c6961 6f742064 61657220 00000a64     ailed to read...
  40b658:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
  40b668:	656c6961 6f742064 69727720 000a6574     ailed to write..
  40b678:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
  40b688:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
  40b698:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
  40b6a8:	74206465 6e65206f 656c6261 746e6920     ed to enable int
  40b6b8:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
  40b6c8:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
  40b6d8:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
  40b6e8:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
  40b6f8:	69642068 6c626173 61662065 000a6c69     h disable fail..
  40b708:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
  40b718:	696e6920 75622074 00000a73               init bus...

0040b724 <__FUNCTION__.8665>:
  40b724:	645f6d6e 695f7672 0074696e              nm_drv_init.

0040b730 <__FUNCTION__.8672>:
  40b730:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0040b740 <__FUNCTION__.8073>:
  40b740:	5f697073 61746164 6165725f 00000064     spi_data_read...

0040b750 <crc7_syndrome_table>:
  40b750:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
  40b760:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
  40b770:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
  40b780:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
  40b790:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
  40b7a0:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
  40b7b0:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
  40b7c0:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
  40b7d0:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
  40b7e0:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
  40b7f0:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
  40b800:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
  40b810:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
  40b820:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
  40b830:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
  40b840:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy

0040b850 <__FUNCTION__.8140>:
  40b850:	735f6d6e 695f6970 0074696e              nm_spi_init.

0040b85c <__FUNCTION__.8088>:
  40b85c:	5f697073 61746164 6972775f 00006574     spi_data_write..

0040b86c <__FUNCTION__.8123>:
  40b86c:	735f6d6e 725f6970 00646165 696d6e5b     nm_spi_read.[nmi
  40b87c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40b88c:	65722064 6e6f7073 72206573 2c646165     d response read,
  40b89c:	73756220 72726520 2e2e726f 00000a2e      bus error......
  40b8ac:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40b8bc:	61642064 72206174 6f707365 2065736e     d data response 
  40b8cc:	64616572 7562202c 72652073 2e726f72     read, bus error.
  40b8dc:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40b8ec:	656c6961 61642064 72206174 6f707365     ailed data respo
  40b8fc:	2065736e 64616572 282e2e2e 78323025     nse read...(%02x
  40b90c:	00000a29 696d6e5b 69707320 46203a5d     )...[nmi spi]: F
  40b91c:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40b92c:	61657220 62202c64 65207375 726f7272      read, bus error
  40b93c:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
  40b94c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  40b95c:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
  40b96c:	65207375 726f7272 0a2e2e2e 00000000     us error........
  40b97c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40b98c:	6d632064 72772064 2c657469 73756220     d cmd write, bus
  40b99c:	72726520 2e2e726f 00000a2e 696d6e5b      error......[nmi
  40b9ac:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40b9bc:	77202c64 65746972 67657220 30252820     d, write reg (%0
  40b9cc:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
  40b9dc:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
  40b9ec:	6e6f7073 202c6573 74697277 65722065     sponse, write re
  40b9fc:	25282067 29783830 0a2e2e2e 00000000     g (%08x)........
  40ba0c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40ba1c:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
  40ba2c:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
  40ba3c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40ba4c:	65722064 6e6f7073 202c6573 64616572     d response, read
  40ba5c:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
  40ba6c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40ba7c:	61642064 72206174 2e646165 000a2e2e     d data read.....
  40ba8c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40ba9c:	6e692064 6e726574 72206c61 20646165     d internal read 
  40baac:	746f7270 6c6f636f 74697720 52432068     protocol with CR
  40babc:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
  40bacc:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
  40badc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40baec:	6e692064 6e726574 72206c61 20646165     d internal read 
  40bafc:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
  40bb0c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40bb1c:	6e692064 6e726574 77206c61 65746972     d internal write
  40bb2c:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
  40bb3c:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40bb4c:	206c6961 20646d63 64616572 69686320     ail cmd read chi
  40bb5c:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
  40bb6c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40bb7c:	72202c64 20646165 636f6c62 2528206b     d, read block (%
  40bb8c:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
  40bb9c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40bbac:	65722064 6e6f7073 202c6573 64616572     d response, read
  40bbbc:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
  40bbcc:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40bbdc:	656c6961 6c622064 206b636f 61746164     ailed block data
  40bbec:	61657220 2e2e2e64 0000000a 696d6e5b      read.......[nmi
  40bbfc:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40bc0c:	77202c64 65746972 6f6c6220 28206b63     d, write block (
  40bc1c:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
  40bc2c:	69707320 203a5d20 6c696146 63206465      spi ]: Failed c
  40bc3c:	7220646d 6f707365 2c65736e 69727720     md response, wri
  40bc4c:	62206574 6b636f6c 30252820 2e297838     te block (%08x).
  40bc5c:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40bc6c:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40bc7c:	646d6320 69727720 202c6574 20737562      cmd write, bus 
  40bc8c:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
  40bc9c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  40bcac:	62206174 6b636f6c 69727720 202c6574     ta block write, 
  40bcbc:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
  40bccc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40bcdc:	61642064 62206174 6b636f6c 63726320     d data block crc
  40bcec:	69727720 202c6574 20737562 6f727265      write, bus erro
  40bcfc:	2e2e2e72 0000000a 696d6e5b 69707320     r.......[nmi spi
  40bd0c:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  40bd1c:	61746164 69727720 2e2e6574 00000a2e     data write......

0040bd2c <__FUNCTION__.8098>:
  40bd2c:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0040bd3c <__FUNCTION__.8049>:
  40bd3c:	5f697073 00646d63                       spi_cmd.

0040bd44 <__FUNCTION__.8106>:
  40bd44:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0040bd54 <__FUNCTION__.8057>:
  40bd54:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0040bd60 <__FUNCTION__.8115>:
  40bd60:	5f697073 64616572 6765725f 00000000     spi_read_reg....
  40bd70:	52524528 75432952 6e657272 253c2074     (ERRR)Current <%
  40bd80:	000a3e64 20494e53 65637845 20736465     d>..SNI Exceeds 
  40bd90:	2078614d 676e654c 000a6874 6e6b6e55     Max Length..Unkn
  40bda0:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
  40bdb0:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
  40bdc0:	204c5353 6b636f53 000a7465 6f736572     SSL Socket..reso
  40bdd0:	5f65766c 203a6263 49207325 64612050     lve_cb: %s IP ad
  40bde0:	73657264 73692073 2e642520 252e6425     dress is %d.%d.%
  40bdf0:	64252e64 0a0d0a0d 00000000 20544547     d.%d........GET 
  40be00:	5448202f 312f5054 0a0d312e 63634120     / HTTP/1.1.. Acc
  40be10:	3a747065 2a2f2a20 0a0d0a0d 00000000     ept: */*........
  40be20:	6b636f73 635f7465 63203a62 656e6e6f     socket_cb: conne
  40be30:	65207463 726f7272 000a0d21 2d2d2d2d     ct error!...----
  40be40:	2d2d2d2d 2d2d2d2d 0a202d2d 00000000     ---------- .....
  40be50:	743e703c 3a706d65 00000000 63256325     <p>temp:....%c%c
  40be60:	00000000 706d6554 3d203120 0a642520     ....Temp 1 = %d.
  40be70:	00000000 706d6554 3d203220 0a642520     ....Temp 2 = %d.
  40be80:	00000000 706d6554 3d203320 0a642520     ....Temp 3 = %d.
  40be90:	00000000 6b636f73 635f7465 72203a62     ....socket_cb: r
  40bea0:	20766365 6f727265 0a0d2172 00000000     ecv error!......
  40beb0:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
  40bec0:	4f435f49 43454e4e 0d444554 0000000a     I_CONNECTED.....
  40bed0:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
  40bee0:	49445f49 4e4f4353 5443454e 0a0d4445     I_DISCONNECTED..
  40bef0:	00000000 69666977 3a62635f 20504920     ....wifi_cb: IP 
  40bf00:	72646461 20737365 25207369 75252e75     address is %u.%u
  40bf10:	2e75252e 0a0d7525 00000000 646e6573     .%u.%u......send
  40bf20:	25203a20 000a2064 57202d2d 31434e49      : %d ..-- WINC1
  40bf30:	20303035 74616577 20726568 65696c63     500 weather clie
  40bf40:	6520746e 706d6178 2d20656c 2d0a0d2d     nt example --..-
  40bf50:	4153202d 3037454d 4c50582d 2d2d2044     - SAME70-XPLD --
  40bf60:	2d2d0a0d 6d6f4320 656c6970 44203a64     ..-- Compiled: D
  40bf70:	20206365 30322036 32203731 31303a31     ec  6 2017 21:01
  40bf80:	2031353a 0a0d2d2d 00000000 6e69616d     :51 --......main
  40bf90:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
  40bfa0:	6c6c6163 72726520 2821726f 0d296425     call error!(%d).
  40bfb0:	0000000a 706d6f63 63617475 00006f61     ....computacao..
  40bfc0:	6972614d 64614761 00000075 6e69616d     MariaGadu...main
  40bfd0:	6166203a 64656c69 206f7420 61657263     : failed to crea
  40bfe0:	54206574 63205043 6e65696c 6f732074     te TCP client so
  40bff0:	74656b63 72726520 0d21726f 0000000a     cket error!.....
  40c000:	2e323931 2e383631 32312e30 00000031     192.168.0.121...
  40c010:	74656e69 6f74615f 203a206e 58257830     inet_aton : 0x%X
  40c020:	00000a20 6e69616d 6166203a 64656c69      ...main: failed
  40c030:	206f7420 6e6e6f63 20746365 6b636f73      to connect sock
  40c040:	65207465 726f7272 000a0d21 00000043     et error!...C...

0040c050 <_global_impure_ptr>:
  40c050:	20400020                                 .@ 

0040c054 <zeroes.7035>:
  40c054:	30303030 30303030 30303030 30303030     0000000000000000
  40c064:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  40c074:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  40c084:	00000000 33323130 37363534 62613938     ....0123456789ab
  40c094:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  40c0a4:	00000030                                0...

0040c0a8 <blanks.7034>:
  40c0a8:	20202020 20202020 20202020 20202020                     

0040c0b8 <zeroes.6993>:
  40c0b8:	30303030 30303030 30303030 30303030     0000000000000000

0040c0c8 <blanks.6992>:
  40c0c8:	20202020 20202020 20202020 20202020                     

0040c0d8 <_ctype_>:
  40c0d8:	20202000 20202020 28282020 20282828     .         ((((( 
  40c0e8:	20202020 20202020 20202020 20202020                     
  40c0f8:	10108820 10101010 10101010 10101010      ...............
  40c108:	04040410 04040404 10040404 10101010     ................
  40c118:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40c128:	01010101 01010101 01010101 10101010     ................
  40c138:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40c148:	02020202 02020202 02020202 10101010     ................
  40c158:	00000020 00000000 00000000 00000000      ...............
	...
  40c1dc:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40c1ec:	49534f50 00000058 0000002e              POSIX.......

0040c1f8 <__mprec_tens>:
  40c1f8:	00000000 3ff00000 00000000 40240000     .......?......$@
  40c208:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40c218:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40c228:	00000000 412e8480 00000000 416312d0     .......A......cA
  40c238:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40c248:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40c258:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40c268:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40c278:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40c288:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40c298:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40c2a8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40c2b8:	79d99db4 44ea7843                       ...yCx.D

0040c2c0 <__mprec_bigtens>:
  40c2c0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40c2d0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40c2e0:	7f73bf3c 75154fdd                       <.s..O.u

0040c2e8 <p05.5373>:
  40c2e8:	00000005 00000019 0000007d              ........}...

0040c2f4 <_init>:
  40c2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c2f6:	bf00      	nop
  40c2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40c2fa:	bc08      	pop	{r3}
  40c2fc:	469e      	mov	lr, r3
  40c2fe:	4770      	bx	lr

0040c300 <__init_array_start>:
  40c300:	00407079 	.word	0x00407079

0040c304 <__frame_dummy_init_array_entry>:
  40c304:	00400165                                e.@.

0040c308 <_fini>:
  40c308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c30a:	bf00      	nop
  40c30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40c30e:	bc08      	pop	{r3}
  40c310:	469e      	mov	lr, r3
  40c312:	4770      	bx	lr

0040c314 <__fini_array_start>:
  40c314:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <egstrNmBusCapabilities>:
2040000c:	1000 0000                                   ....

20400010 <clk_status_reg_adr>:
20400010:	000f 0000                                   ....

20400014 <g_interrupt_enabled>:
20400014:	0001 0000                                   ....

20400018 <SystemCoreClock>:
20400018:	0900 003d                                   ..=.

2040001c <tcp_client_socket>:
2040001c:	22ff                                             .

2040001d <globalTemp1>:
2040001d:	2422                                             "

2040001e <globalTemp2>:
2040001e:	2524                                             $

2040001f <globalTemp3>:
2040001f:	0025                                             %

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
20400054:	c04c 0040 0000 0000 0000 0000 0000 0000     L.@.............
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <_impure_ptr>:
20400448:	0020 2040                                    .@ 

2040044c <__ctype_ptr__>:
2040044c:	c0d8 0040                                   ..@.

20400450 <lconv>:
20400450:	c1f4 0040 be1c 0040 be1c 0040 be1c 0040     ..@...@...@...@.
20400460:	be1c 0040 be1c 0040 be1c 0040 be1c 0040     ..@...@...@...@.
20400470:	be1c 0040 be1c 0040 ffff ffff ffff ffff     ..@...@.........
20400480:	ffff ffff ffff 0000                         ........

20400488 <lc_ctype_charset>:
20400488:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

204004a8 <__mb_cur_max>:
204004a8:	0001 0000                                   ....

204004ac <__malloc_av_>:
	...
204004b4:	04ac 2040 04ac 2040 04b4 2040 04b4 2040     ..@ ..@ ..@ ..@ 
204004c4:	04bc 2040 04bc 2040 04c4 2040 04c4 2040     ..@ ..@ ..@ ..@ 
204004d4:	04cc 2040 04cc 2040 04d4 2040 04d4 2040     ..@ ..@ ..@ ..@ 
204004e4:	04dc 2040 04dc 2040 04e4 2040 04e4 2040     ..@ ..@ ..@ ..@ 
204004f4:	04ec 2040 04ec 2040 04f4 2040 04f4 2040     ..@ ..@ ..@ ..@ 
20400504:	04fc 2040 04fc 2040 0504 2040 0504 2040     ..@ ..@ ..@ ..@ 
20400514:	050c 2040 050c 2040 0514 2040 0514 2040     ..@ ..@ ..@ ..@ 
20400524:	051c 2040 051c 2040 0524 2040 0524 2040     ..@ ..@ $.@ $.@ 
20400534:	052c 2040 052c 2040 0534 2040 0534 2040     ,.@ ,.@ 4.@ 4.@ 
20400544:	053c 2040 053c 2040 0544 2040 0544 2040     <.@ <.@ D.@ D.@ 
20400554:	054c 2040 054c 2040 0554 2040 0554 2040     L.@ L.@ T.@ T.@ 
20400564:	055c 2040 055c 2040 0564 2040 0564 2040     \.@ \.@ d.@ d.@ 
20400574:	056c 2040 056c 2040 0574 2040 0574 2040     l.@ l.@ t.@ t.@ 
20400584:	057c 2040 057c 2040 0584 2040 0584 2040     |.@ |.@ ..@ ..@ 
20400594:	058c 2040 058c 2040 0594 2040 0594 2040     ..@ ..@ ..@ ..@ 
204005a4:	059c 2040 059c 2040 05a4 2040 05a4 2040     ..@ ..@ ..@ ..@ 
204005b4:	05ac 2040 05ac 2040 05b4 2040 05b4 2040     ..@ ..@ ..@ ..@ 
204005c4:	05bc 2040 05bc 2040 05c4 2040 05c4 2040     ..@ ..@ ..@ ..@ 
204005d4:	05cc 2040 05cc 2040 05d4 2040 05d4 2040     ..@ ..@ ..@ ..@ 
204005e4:	05dc 2040 05dc 2040 05e4 2040 05e4 2040     ..@ ..@ ..@ ..@ 
204005f4:	05ec 2040 05ec 2040 05f4 2040 05f4 2040     ..@ ..@ ..@ ..@ 
20400604:	05fc 2040 05fc 2040 0604 2040 0604 2040     ..@ ..@ ..@ ..@ 
20400614:	060c 2040 060c 2040 0614 2040 0614 2040     ..@ ..@ ..@ ..@ 
20400624:	061c 2040 061c 2040 0624 2040 0624 2040     ..@ ..@ $.@ $.@ 
20400634:	062c 2040 062c 2040 0634 2040 0634 2040     ,.@ ,.@ 4.@ 4.@ 
20400644:	063c 2040 063c 2040 0644 2040 0644 2040     <.@ <.@ D.@ D.@ 
20400654:	064c 2040 064c 2040 0654 2040 0654 2040     L.@ L.@ T.@ T.@ 
20400664:	065c 2040 065c 2040 0664 2040 0664 2040     \.@ \.@ d.@ d.@ 
20400674:	066c 2040 066c 2040 0674 2040 0674 2040     l.@ l.@ t.@ t.@ 
20400684:	067c 2040 067c 2040 0684 2040 0684 2040     |.@ |.@ ..@ ..@ 
20400694:	068c 2040 068c 2040 0694 2040 0694 2040     ..@ ..@ ..@ ..@ 
204006a4:	069c 2040 069c 2040 06a4 2040 06a4 2040     ..@ ..@ ..@ ..@ 
204006b4:	06ac 2040 06ac 2040 06b4 2040 06b4 2040     ..@ ..@ ..@ ..@ 
204006c4:	06bc 2040 06bc 2040 06c4 2040 06c4 2040     ..@ ..@ ..@ ..@ 
204006d4:	06cc 2040 06cc 2040 06d4 2040 06d4 2040     ..@ ..@ ..@ ..@ 
204006e4:	06dc 2040 06dc 2040 06e4 2040 06e4 2040     ..@ ..@ ..@ ..@ 
204006f4:	06ec 2040 06ec 2040 06f4 2040 06f4 2040     ..@ ..@ ..@ ..@ 
20400704:	06fc 2040 06fc 2040 0704 2040 0704 2040     ..@ ..@ ..@ ..@ 
20400714:	070c 2040 070c 2040 0714 2040 0714 2040     ..@ ..@ ..@ ..@ 
20400724:	071c 2040 071c 2040 0724 2040 0724 2040     ..@ ..@ $.@ $.@ 
20400734:	072c 2040 072c 2040 0734 2040 0734 2040     ,.@ ,.@ 4.@ 4.@ 
20400744:	073c 2040 073c 2040 0744 2040 0744 2040     <.@ <.@ D.@ D.@ 
20400754:	074c 2040 074c 2040 0754 2040 0754 2040     L.@ L.@ T.@ T.@ 
20400764:	075c 2040 075c 2040 0764 2040 0764 2040     \.@ \.@ d.@ d.@ 
20400774:	076c 2040 076c 2040 0774 2040 0774 2040     l.@ l.@ t.@ t.@ 
20400784:	077c 2040 077c 2040 0784 2040 0784 2040     |.@ |.@ ..@ ..@ 
20400794:	078c 2040 078c 2040 0794 2040 0794 2040     ..@ ..@ ..@ ..@ 
204007a4:	079c 2040 079c 2040 07a4 2040 07a4 2040     ..@ ..@ ..@ ..@ 
204007b4:	07ac 2040 07ac 2040 07b4 2040 07b4 2040     ..@ ..@ ..@ ..@ 
204007c4:	07bc 2040 07bc 2040 07c4 2040 07c4 2040     ..@ ..@ ..@ ..@ 
204007d4:	07cc 2040 07cc 2040 07d4 2040 07d4 2040     ..@ ..@ ..@ ..@ 
204007e4:	07dc 2040 07dc 2040 07e4 2040 07e4 2040     ..@ ..@ ..@ ..@ 
204007f4:	07ec 2040 07ec 2040 07f4 2040 07f4 2040     ..@ ..@ ..@ ..@ 
20400804:	07fc 2040 07fc 2040 0804 2040 0804 2040     ..@ ..@ ..@ ..@ 
20400814:	080c 2040 080c 2040 0814 2040 0814 2040     ..@ ..@ ..@ ..@ 
20400824:	081c 2040 081c 2040 0824 2040 0824 2040     ..@ ..@ $.@ $.@ 
20400834:	082c 2040 082c 2040 0834 2040 0834 2040     ,.@ ,.@ 4.@ 4.@ 
20400844:	083c 2040 083c 2040 0844 2040 0844 2040     <.@ <.@ D.@ D.@ 
20400854:	084c 2040 084c 2040 0854 2040 0854 2040     L.@ L.@ T.@ T.@ 
20400864:	085c 2040 085c 2040 0864 2040 0864 2040     \.@ \.@ d.@ d.@ 
20400874:	086c 2040 086c 2040 0874 2040 0874 2040     l.@ l.@ t.@ t.@ 
20400884:	087c 2040 087c 2040 0884 2040 0884 2040     |.@ |.@ ..@ ..@ 
20400894:	088c 2040 088c 2040 0894 2040 0894 2040     ..@ ..@ ..@ ..@ 
204008a4:	089c 2040 089c 2040 08a4 2040 08a4 2040     ..@ ..@ ..@ ..@ 

204008b4 <__malloc_trim_threshold>:
204008b4:	0000 0002                                   ....

204008b8 <__malloc_sbrk_base>:
204008b8:	ffff ffff                                   ....

204008bc <__wctomb>:
204008bc:	a051 0040                                   Q.@.
