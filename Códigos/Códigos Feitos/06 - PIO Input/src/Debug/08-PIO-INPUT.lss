
08-PIO-INPUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018c0  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004018c0  004018c0  000118c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000450  20400000  004018c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000008c  20400450  00401d18  00020450  2**2
                  ALLOC
  4 .stack        00002004  204004dc  00401da4  00020450  2**0
                  ALLOC
  5 .heap         00000200  204024e0  00403da8  00020450  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020450  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002047e  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000689f  00000000  00000000  000204d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000f04  00000000  00000000  00026d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000037c0  00000000  00000000  00027c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000660  00000000  00000000  0002b43a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005d0  00000000  00000000  0002ba9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001bcec  00000000  00000000  0002c06a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006ba0  00000000  00000000  00047d56  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00088dc8  00000000  00000000  0004e8f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001b78  00000000  00000000  000d76c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	204024e0 	.word	0x204024e0
  400004:	00400a41 	.word	0x00400a41
  400008:	00400af1 	.word	0x00400af1
  40000c:	00400af1 	.word	0x00400af1
  400010:	00400af1 	.word	0x00400af1
  400014:	00400af1 	.word	0x00400af1
  400018:	00400af1 	.word	0x00400af1
	...
  40002c:	00400af1 	.word	0x00400af1
  400030:	00400af1 	.word	0x00400af1
  400034:	00000000 	.word	0x00000000
  400038:	00400af1 	.word	0x00400af1
  40003c:	00400af1 	.word	0x00400af1
  400040:	00400af1 	.word	0x00400af1
  400044:	00400af1 	.word	0x00400af1
  400048:	00400af1 	.word	0x00400af1
  40004c:	00400af1 	.word	0x00400af1
  400050:	00400af1 	.word	0x00400af1
  400054:	00400af1 	.word	0x00400af1
  400058:	00400af1 	.word	0x00400af1
  40005c:	00400af1 	.word	0x00400af1
  400060:	00400af1 	.word	0x00400af1
  400064:	00000000 	.word	0x00000000
  400068:	0040067d 	.word	0x0040067d
  40006c:	00400695 	.word	0x00400695
  400070:	004006ad 	.word	0x004006ad
  400074:	00400af1 	.word	0x00400af1
  400078:	00400af1 	.word	0x00400af1
  40007c:	00400af1 	.word	0x00400af1
  400080:	004006c5 	.word	0x004006c5
  400084:	004006dd 	.word	0x004006dd
  400088:	00400af1 	.word	0x00400af1
  40008c:	00400af1 	.word	0x00400af1
  400090:	00400af1 	.word	0x00400af1
  400094:	00400af1 	.word	0x00400af1
  400098:	00400af1 	.word	0x00400af1
  40009c:	00400af1 	.word	0x00400af1
  4000a0:	00400af1 	.word	0x00400af1
  4000a4:	00400af1 	.word	0x00400af1
  4000a8:	00400af1 	.word	0x00400af1
  4000ac:	00400af1 	.word	0x00400af1
  4000b0:	00400af1 	.word	0x00400af1
  4000b4:	00400af1 	.word	0x00400af1
  4000b8:	00400af1 	.word	0x00400af1
  4000bc:	00400af1 	.word	0x00400af1
  4000c0:	00400af1 	.word	0x00400af1
  4000c4:	00400af1 	.word	0x00400af1
  4000c8:	00400af1 	.word	0x00400af1
  4000cc:	00400af1 	.word	0x00400af1
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00400af1 	.word	0x00400af1
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00400af1 	.word	0x00400af1
  4000e0:	00400af1 	.word	0x00400af1
  4000e4:	00400af1 	.word	0x00400af1
  4000e8:	00400af1 	.word	0x00400af1
  4000ec:	00400af1 	.word	0x00400af1
  4000f0:	00400af1 	.word	0x00400af1
  4000f4:	00400af1 	.word	0x00400af1
  4000f8:	00400af1 	.word	0x00400af1
  4000fc:	00400af1 	.word	0x00400af1
  400100:	00400af1 	.word	0x00400af1
  400104:	00400af1 	.word	0x00400af1
  400108:	00400af1 	.word	0x00400af1
  40010c:	00400af1 	.word	0x00400af1
  400110:	00400af1 	.word	0x00400af1
	...
  400120:	00400af1 	.word	0x00400af1
  400124:	00400af1 	.word	0x00400af1
  400128:	00400af1 	.word	0x00400af1
  40012c:	00400af1 	.word	0x00400af1
  400130:	00400af1 	.word	0x00400af1
  400134:	00000000 	.word	0x00000000
  400138:	00400af1 	.word	0x00400af1
  40013c:	00400af1 	.word	0x00400af1

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400450 	.word	0x20400450
  40015c:	00000000 	.word	0x00000000
  400160:	004018c8 	.word	0x004018c8

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400454 	.word	0x20400454
  400190:	004018c8 	.word	0x004018c8
  400194:	004018c8 	.word	0x004018c8
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d831      	bhi.n	40020e <osc_enable+0x72>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b11      	ldr	r3, [pc, #68]	; (400218 <osc_enable+0x7c>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e01a      	b.n	40020e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0f      	ldr	r3, [pc, #60]	; (400218 <osc_enable+0x7c>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e016      	b.n	40020e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0e      	ldr	r3, [pc, #56]	; (40021c <osc_enable+0x80>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e012      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0c      	ldr	r3, [pc, #48]	; (40021c <osc_enable+0x80>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00e      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b0a      	ldr	r3, [pc, #40]	; (40021c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e00a      	b.n	40020e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	213e      	movs	r1, #62	; 0x3e
  4001fa:	2000      	movs	r0, #0
  4001fc:	4b08      	ldr	r3, [pc, #32]	; (400220 <osc_enable+0x84>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e005      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	213e      	movs	r1, #62	; 0x3e
  400204:	2001      	movs	r0, #1
  400206:	4b06      	ldr	r3, [pc, #24]	; (400220 <osc_enable+0x84>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	e000      	b.n	40020e <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  40020c:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  40020e:	bf00      	nop
  400210:	3708      	adds	r7, #8
  400212:	46bd      	mov	sp, r7
  400214:	bd80      	pop	{r7, pc}
  400216:	bf00      	nop
  400218:	004007f5 	.word	0x004007f5
  40021c:	00400861 	.word	0x00400861
  400220:	004008d1 	.word	0x004008d1

00400224 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400224:	b580      	push	{r7, lr}
  400226:	b082      	sub	sp, #8
  400228:	af00      	add	r7, sp, #0
  40022a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40022c:	687b      	ldr	r3, [r7, #4]
  40022e:	2b07      	cmp	r3, #7
  400230:	d826      	bhi.n	400280 <osc_is_ready+0x5c>
  400232:	a201      	add	r2, pc, #4	; (adr r2, 400238 <osc_is_ready+0x14>)
  400234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400238:	00400259 	.word	0x00400259
  40023c:	0040025d 	.word	0x0040025d
  400240:	0040025d 	.word	0x0040025d
  400244:	0040026f 	.word	0x0040026f
  400248:	0040026f 	.word	0x0040026f
  40024c:	0040026f 	.word	0x0040026f
  400250:	0040026f 	.word	0x0040026f
  400254:	0040026f 	.word	0x0040026f
	case OSC_SLCK_32K_RC:
		return 1;
  400258:	2301      	movs	r3, #1
  40025a:	e012      	b.n	400282 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40025c:	4b0b      	ldr	r3, [pc, #44]	; (40028c <osc_is_ready+0x68>)
  40025e:	4798      	blx	r3
  400260:	4603      	mov	r3, r0
  400262:	2b00      	cmp	r3, #0
  400264:	bf14      	ite	ne
  400266:	2301      	movne	r3, #1
  400268:	2300      	moveq	r3, #0
  40026a:	b2db      	uxtb	r3, r3
  40026c:	e009      	b.n	400282 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026e:	4b08      	ldr	r3, [pc, #32]	; (400290 <osc_is_ready+0x6c>)
  400270:	4798      	blx	r3
  400272:	4603      	mov	r3, r0
  400274:	2b00      	cmp	r3, #0
  400276:	bf14      	ite	ne
  400278:	2301      	movne	r3, #1
  40027a:	2300      	moveq	r3, #0
  40027c:	b2db      	uxtb	r3, r3
  40027e:	e000      	b.n	400282 <osc_is_ready+0x5e>
	}

	return 0;
  400280:	2300      	movs	r3, #0
}
  400282:	4618      	mov	r0, r3
  400284:	3708      	adds	r7, #8
  400286:	46bd      	mov	sp, r7
  400288:	bd80      	pop	{r7, pc}
  40028a:	bf00      	nop
  40028c:	0040082d 	.word	0x0040082d
  400290:	00400949 	.word	0x00400949

00400294 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400294:	b480      	push	{r7}
  400296:	b083      	sub	sp, #12
  400298:	af00      	add	r7, sp, #0
  40029a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40029c:	687b      	ldr	r3, [r7, #4]
  40029e:	2b07      	cmp	r3, #7
  4002a0:	d825      	bhi.n	4002ee <osc_get_rate+0x5a>
  4002a2:	a201      	add	r2, pc, #4	; (adr r2, 4002a8 <osc_get_rate+0x14>)
  4002a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002a8:	004002c9 	.word	0x004002c9
  4002ac:	004002cf 	.word	0x004002cf
  4002b0:	004002d5 	.word	0x004002d5
  4002b4:	004002db 	.word	0x004002db
  4002b8:	004002df 	.word	0x004002df
  4002bc:	004002e3 	.word	0x004002e3
  4002c0:	004002e7 	.word	0x004002e7
  4002c4:	004002eb 	.word	0x004002eb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002cc:	e010      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d2:	e00d      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d8:	e00a      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <osc_get_rate+0x68>)
  4002dc:	e008      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002de:	4b08      	ldr	r3, [pc, #32]	; (400300 <osc_get_rate+0x6c>)
  4002e0:	e006      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002e2:	4b08      	ldr	r3, [pc, #32]	; (400304 <osc_get_rate+0x70>)
  4002e4:	e004      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002e6:	4b07      	ldr	r3, [pc, #28]	; (400304 <osc_get_rate+0x70>)
  4002e8:	e002      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002ea:	4b06      	ldr	r3, [pc, #24]	; (400304 <osc_get_rate+0x70>)
  4002ec:	e000      	b.n	4002f0 <osc_get_rate+0x5c>
	}

	return 0;
  4002ee:	2300      	movs	r3, #0
}
  4002f0:	4618      	mov	r0, r3
  4002f2:	370c      	adds	r7, #12
  4002f4:	46bd      	mov	sp, r7
  4002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002fa:	4770      	bx	lr
  4002fc:	003d0900 	.word	0x003d0900
  400300:	007a1200 	.word	0x007a1200
  400304:	00b71b00 	.word	0x00b71b00

00400308 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400308:	b580      	push	{r7, lr}
  40030a:	b082      	sub	sp, #8
  40030c:	af00      	add	r7, sp, #0
  40030e:	4603      	mov	r3, r0
  400310:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400312:	bf00      	nop
  400314:	79fb      	ldrb	r3, [r7, #7]
  400316:	4618      	mov	r0, r3
  400318:	4b05      	ldr	r3, [pc, #20]	; (400330 <osc_wait_ready+0x28>)
  40031a:	4798      	blx	r3
  40031c:	4603      	mov	r3, r0
  40031e:	f083 0301 	eor.w	r3, r3, #1
  400322:	b2db      	uxtb	r3, r3
  400324:	2b00      	cmp	r3, #0
  400326:	d1f5      	bne.n	400314 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400328:	bf00      	nop
  40032a:	3708      	adds	r7, #8
  40032c:	46bd      	mov	sp, r7
  40032e:	bd80      	pop	{r7, pc}
  400330:	00400225 	.word	0x00400225

00400334 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400334:	b580      	push	{r7, lr}
  400336:	b086      	sub	sp, #24
  400338:	af00      	add	r7, sp, #0
  40033a:	60f8      	str	r0, [r7, #12]
  40033c:	607a      	str	r2, [r7, #4]
  40033e:	603b      	str	r3, [r7, #0]
  400340:	460b      	mov	r3, r1
  400342:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	2b00      	cmp	r3, #0
  400348:	d107      	bne.n	40035a <pll_config_init+0x26>
  40034a:	683b      	ldr	r3, [r7, #0]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d104      	bne.n	40035a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400350:	68fb      	ldr	r3, [r7, #12]
  400352:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400356:	601a      	str	r2, [r3, #0]
  400358:	e019      	b.n	40038e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40035a:	7afb      	ldrb	r3, [r7, #11]
  40035c:	4618      	mov	r0, r3
  40035e:	4b0e      	ldr	r3, [pc, #56]	; (400398 <pll_config_init+0x64>)
  400360:	4798      	blx	r3
  400362:	4602      	mov	r2, r0
  400364:	687b      	ldr	r3, [r7, #4]
  400366:	fbb2 f3f3 	udiv	r3, r2, r3
  40036a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40036c:	697b      	ldr	r3, [r7, #20]
  40036e:	683a      	ldr	r2, [r7, #0]
  400370:	fb02 f303 	mul.w	r3, r2, r3
  400374:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400376:	683b      	ldr	r3, [r7, #0]
  400378:	3b01      	subs	r3, #1
  40037a:	041a      	lsls	r2, r3, #16
  40037c:	4b07      	ldr	r3, [pc, #28]	; (40039c <pll_config_init+0x68>)
  40037e:	4013      	ands	r3, r2
  400380:	687a      	ldr	r2, [r7, #4]
  400382:	b2d2      	uxtb	r2, r2
  400384:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400386:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40038a:	68fb      	ldr	r3, [r7, #12]
  40038c:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  40038e:	bf00      	nop
  400390:	3718      	adds	r7, #24
  400392:	46bd      	mov	sp, r7
  400394:	bd80      	pop	{r7, pc}
  400396:	bf00      	nop
  400398:	00400295 	.word	0x00400295
  40039c:	07ff0000 	.word	0x07ff0000

004003a0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003a0:	b580      	push	{r7, lr}
  4003a2:	b082      	sub	sp, #8
  4003a4:	af00      	add	r7, sp, #0
  4003a6:	6078      	str	r0, [r7, #4]
  4003a8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003aa:	683b      	ldr	r3, [r7, #0]
  4003ac:	2b00      	cmp	r3, #0
  4003ae:	d108      	bne.n	4003c2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003b0:	4b09      	ldr	r3, [pc, #36]	; (4003d8 <pll_enable+0x38>)
  4003b2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003b4:	4a09      	ldr	r2, [pc, #36]	; (4003dc <pll_enable+0x3c>)
  4003b6:	687b      	ldr	r3, [r7, #4]
  4003b8:	681b      	ldr	r3, [r3, #0]
  4003ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003be:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003c0:	e005      	b.n	4003ce <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003c2:	4a06      	ldr	r2, [pc, #24]	; (4003dc <pll_enable+0x3c>)
  4003c4:	687b      	ldr	r3, [r7, #4]
  4003c6:	681b      	ldr	r3, [r3, #0]
  4003c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003cc:	61d3      	str	r3, [r2, #28]
	}
}
  4003ce:	bf00      	nop
  4003d0:	3708      	adds	r7, #8
  4003d2:	46bd      	mov	sp, r7
  4003d4:	bd80      	pop	{r7, pc}
  4003d6:	bf00      	nop
  4003d8:	00400965 	.word	0x00400965
  4003dc:	400e0600 	.word	0x400e0600

004003e0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003e0:	b580      	push	{r7, lr}
  4003e2:	b082      	sub	sp, #8
  4003e4:	af00      	add	r7, sp, #0
  4003e6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e8:	687b      	ldr	r3, [r7, #4]
  4003ea:	2b00      	cmp	r3, #0
  4003ec:	d103      	bne.n	4003f6 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003ee:	4b05      	ldr	r3, [pc, #20]	; (400404 <pll_is_locked+0x24>)
  4003f0:	4798      	blx	r3
  4003f2:	4603      	mov	r3, r0
  4003f4:	e002      	b.n	4003fc <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4003f6:	4b04      	ldr	r3, [pc, #16]	; (400408 <pll_is_locked+0x28>)
  4003f8:	4798      	blx	r3
  4003fa:	4603      	mov	r3, r0
	}
}
  4003fc:	4618      	mov	r0, r3
  4003fe:	3708      	adds	r7, #8
  400400:	46bd      	mov	sp, r7
  400402:	bd80      	pop	{r7, pc}
  400404:	00400981 	.word	0x00400981
  400408:	0040099d 	.word	0x0040099d

0040040c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40040c:	b580      	push	{r7, lr}
  40040e:	b082      	sub	sp, #8
  400410:	af00      	add	r7, sp, #0
  400412:	4603      	mov	r3, r0
  400414:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400416:	79fb      	ldrb	r3, [r7, #7]
  400418:	3b03      	subs	r3, #3
  40041a:	2b04      	cmp	r3, #4
  40041c:	d808      	bhi.n	400430 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40041e:	79fb      	ldrb	r3, [r7, #7]
  400420:	4618      	mov	r0, r3
  400422:	4b06      	ldr	r3, [pc, #24]	; (40043c <pll_enable_source+0x30>)
  400424:	4798      	blx	r3
		osc_wait_ready(e_src);
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	4618      	mov	r0, r3
  40042a:	4b05      	ldr	r3, [pc, #20]	; (400440 <pll_enable_source+0x34>)
  40042c:	4798      	blx	r3
		break;
  40042e:	e000      	b.n	400432 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400430:	bf00      	nop
	}
}
  400432:	bf00      	nop
  400434:	3708      	adds	r7, #8
  400436:	46bd      	mov	sp, r7
  400438:	bd80      	pop	{r7, pc}
  40043a:	bf00      	nop
  40043c:	0040019d 	.word	0x0040019d
  400440:	00400309 	.word	0x00400309

00400444 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400444:	b580      	push	{r7, lr}
  400446:	b082      	sub	sp, #8
  400448:	af00      	add	r7, sp, #0
  40044a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40044c:	bf00      	nop
  40044e:	6878      	ldr	r0, [r7, #4]
  400450:	4b04      	ldr	r3, [pc, #16]	; (400464 <pll_wait_for_lock+0x20>)
  400452:	4798      	blx	r3
  400454:	4603      	mov	r3, r0
  400456:	2b00      	cmp	r3, #0
  400458:	d0f9      	beq.n	40044e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40045a:	2300      	movs	r3, #0
}
  40045c:	4618      	mov	r0, r3
  40045e:	3708      	adds	r7, #8
  400460:	46bd      	mov	sp, r7
  400462:	bd80      	pop	{r7, pc}
  400464:	004003e1 	.word	0x004003e1

00400468 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400468:	b580      	push	{r7, lr}
  40046a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40046c:	2006      	movs	r0, #6
  40046e:	4b05      	ldr	r3, [pc, #20]	; (400484 <sysclk_get_main_hz+0x1c>)
  400470:	4798      	blx	r3
  400472:	4602      	mov	r2, r0
  400474:	4613      	mov	r3, r2
  400476:	009b      	lsls	r3, r3, #2
  400478:	4413      	add	r3, r2
  40047a:	009a      	lsls	r2, r3, #2
  40047c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40047e:	4618      	mov	r0, r3
  400480:	bd80      	pop	{r7, pc}
  400482:	bf00      	nop
  400484:	00400295 	.word	0x00400295

00400488 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400488:	b580      	push	{r7, lr}
  40048a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40048c:	4b02      	ldr	r3, [pc, #8]	; (400498 <sysclk_get_cpu_hz+0x10>)
  40048e:	4798      	blx	r3
  400490:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400492:	4618      	mov	r0, r3
  400494:	bd80      	pop	{r7, pc}
  400496:	bf00      	nop
  400498:	00400469 	.word	0x00400469

0040049c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40049c:	b590      	push	{r4, r7, lr}
  40049e:	b083      	sub	sp, #12
  4004a0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004a2:	4813      	ldr	r0, [pc, #76]	; (4004f0 <sysclk_init+0x54>)
  4004a4:	4b13      	ldr	r3, [pc, #76]	; (4004f4 <sysclk_init+0x58>)
  4004a6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004a8:	2006      	movs	r0, #6
  4004aa:	4b13      	ldr	r3, [pc, #76]	; (4004f8 <sysclk_init+0x5c>)
  4004ac:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004ae:	1d38      	adds	r0, r7, #4
  4004b0:	2319      	movs	r3, #25
  4004b2:	2201      	movs	r2, #1
  4004b4:	2106      	movs	r1, #6
  4004b6:	4c11      	ldr	r4, [pc, #68]	; (4004fc <sysclk_init+0x60>)
  4004b8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ba:	1d3b      	adds	r3, r7, #4
  4004bc:	2100      	movs	r1, #0
  4004be:	4618      	mov	r0, r3
  4004c0:	4b0f      	ldr	r3, [pc, #60]	; (400500 <sysclk_init+0x64>)
  4004c2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004c4:	2000      	movs	r0, #0
  4004c6:	4b0f      	ldr	r3, [pc, #60]	; (400504 <sysclk_init+0x68>)
  4004c8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004ca:	2002      	movs	r0, #2
  4004cc:	4b0e      	ldr	r3, [pc, #56]	; (400508 <sysclk_init+0x6c>)
  4004ce:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004d0:	2000      	movs	r0, #0
  4004d2:	4b0e      	ldr	r3, [pc, #56]	; (40050c <sysclk_init+0x70>)
  4004d4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004d6:	4b0e      	ldr	r3, [pc, #56]	; (400510 <sysclk_init+0x74>)
  4004d8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004da:	4b0e      	ldr	r3, [pc, #56]	; (400514 <sysclk_init+0x78>)
  4004dc:	4798      	blx	r3
  4004de:	4603      	mov	r3, r0
  4004e0:	4618      	mov	r0, r3
  4004e2:	4b04      	ldr	r3, [pc, #16]	; (4004f4 <sysclk_init+0x58>)
  4004e4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004e6:	bf00      	nop
  4004e8:	370c      	adds	r7, #12
  4004ea:	46bd      	mov	sp, r7
  4004ec:	bd90      	pop	{r4, r7, pc}
  4004ee:	bf00      	nop
  4004f0:	11e1a300 	.word	0x11e1a300
  4004f4:	00400c65 	.word	0x00400c65
  4004f8:	0040040d 	.word	0x0040040d
  4004fc:	00400335 	.word	0x00400335
  400500:	004003a1 	.word	0x004003a1
  400504:	00400445 	.word	0x00400445
  400508:	004006f5 	.word	0x004006f5
  40050c:	00400771 	.word	0x00400771
  400510:	00400af9 	.word	0x00400af9
  400514:	00400489 	.word	0x00400489

00400518 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  400518:	b480      	push	{r7}
  40051a:	b083      	sub	sp, #12
  40051c:	af00      	add	r7, sp, #0
  40051e:	6078      	str	r0, [r7, #4]
  400520:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  400522:	687b      	ldr	r3, [r7, #4]
  400524:	683a      	ldr	r2, [r7, #0]
  400526:	631a      	str	r2, [r3, #48]	; 0x30
}
  400528:	bf00      	nop
  40052a:	370c      	adds	r7, #12
  40052c:	46bd      	mov	sp, r7
  40052e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400532:	4770      	bx	lr

00400534 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  400534:	b480      	push	{r7}
  400536:	b083      	sub	sp, #12
  400538:	af00      	add	r7, sp, #0
  40053a:	6078      	str	r0, [r7, #4]
  40053c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  40053e:	687b      	ldr	r3, [r7, #4]
  400540:	683a      	ldr	r2, [r7, #0]
  400542:	635a      	str	r2, [r3, #52]	; 0x34
}
  400544:	bf00      	nop
  400546:	370c      	adds	r7, #12
  400548:	46bd      	mov	sp, r7
  40054a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40054e:	4770      	bx	lr

00400550 <pio_get>:
 * \retval 1 at least one PIO currently has a high level.
 * \retval 0 all PIOs have a low level.
 */
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400550:	b480      	push	{r7}
  400552:	b087      	sub	sp, #28
  400554:	af00      	add	r7, sp, #0
  400556:	60f8      	str	r0, [r7, #12]
  400558:	60b9      	str	r1, [r7, #8]
  40055a:	607a      	str	r2, [r7, #4]
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  40055c:	68bb      	ldr	r3, [r7, #8]
  40055e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400562:	d003      	beq.n	40056c <pio_get+0x1c>
  400564:	68bb      	ldr	r3, [r7, #8]
  400566:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40056a:	d103      	bne.n	400574 <pio_get+0x24>
		ul_reg = p_pio->PIO_ODSR;
  40056c:	68fb      	ldr	r3, [r7, #12]
  40056e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400570:	617b      	str	r3, [r7, #20]
  400572:	e002      	b.n	40057a <pio_get+0x2a>
	} else {
		ul_reg = p_pio->PIO_PDSR;
  400574:	68fb      	ldr	r3, [r7, #12]
  400576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400578:	617b      	str	r3, [r7, #20]
	}

	if ((ul_reg & ul_mask) == 0) {
  40057a:	697a      	ldr	r2, [r7, #20]
  40057c:	687b      	ldr	r3, [r7, #4]
  40057e:	4013      	ands	r3, r2
  400580:	2b00      	cmp	r3, #0
  400582:	d101      	bne.n	400588 <pio_get+0x38>
		return 0;
  400584:	2300      	movs	r3, #0
  400586:	e000      	b.n	40058a <pio_get+0x3a>
	} else {
		return 1;
  400588:	2301      	movs	r3, #1
	}
}
  40058a:	4618      	mov	r0, r3
  40058c:	371c      	adds	r7, #28
  40058e:	46bd      	mov	sp, r7
  400590:	f85d 7b04 	ldr.w	r7, [sp], #4
  400594:	4770      	bx	lr
  400596:	bf00      	nop

00400598 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400598:	b480      	push	{r7}
  40059a:	b083      	sub	sp, #12
  40059c:	af00      	add	r7, sp, #0
  40059e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4005a0:	687b      	ldr	r3, [r7, #4]
  4005a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4005a4:	4618      	mov	r0, r3
  4005a6:	370c      	adds	r7, #12
  4005a8:	46bd      	mov	sp, r7
  4005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005ae:	4770      	bx	lr

004005b0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4005b0:	b480      	push	{r7}
  4005b2:	b083      	sub	sp, #12
  4005b4:	af00      	add	r7, sp, #0
  4005b6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4005b8:	687b      	ldr	r3, [r7, #4]
  4005ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4005bc:	4618      	mov	r0, r3
  4005be:	370c      	adds	r7, #12
  4005c0:	46bd      	mov	sp, r7
  4005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005c6:	4770      	bx	lr

004005c8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4005c8:	b580      	push	{r7, lr}
  4005ca:	b084      	sub	sp, #16
  4005cc:	af00      	add	r7, sp, #0
  4005ce:	6078      	str	r0, [r7, #4]
  4005d0:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4005d2:	6878      	ldr	r0, [r7, #4]
  4005d4:	4b26      	ldr	r3, [pc, #152]	; (400670 <pio_handler_process+0xa8>)
  4005d6:	4798      	blx	r3
  4005d8:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4005da:	6878      	ldr	r0, [r7, #4]
  4005dc:	4b25      	ldr	r3, [pc, #148]	; (400674 <pio_handler_process+0xac>)
  4005de:	4798      	blx	r3
  4005e0:	4602      	mov	r2, r0
  4005e2:	68fb      	ldr	r3, [r7, #12]
  4005e4:	4013      	ands	r3, r2
  4005e6:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4005e8:	68fb      	ldr	r3, [r7, #12]
  4005ea:	2b00      	cmp	r3, #0
  4005ec:	d03c      	beq.n	400668 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4005ee:	2300      	movs	r3, #0
  4005f0:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4005f2:	e034      	b.n	40065e <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4005f4:	4a20      	ldr	r2, [pc, #128]	; (400678 <pio_handler_process+0xb0>)
  4005f6:	68bb      	ldr	r3, [r7, #8]
  4005f8:	011b      	lsls	r3, r3, #4
  4005fa:	4413      	add	r3, r2
  4005fc:	681a      	ldr	r2, [r3, #0]
  4005fe:	683b      	ldr	r3, [r7, #0]
  400600:	429a      	cmp	r2, r3
  400602:	d126      	bne.n	400652 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400604:	4a1c      	ldr	r2, [pc, #112]	; (400678 <pio_handler_process+0xb0>)
  400606:	68bb      	ldr	r3, [r7, #8]
  400608:	011b      	lsls	r3, r3, #4
  40060a:	4413      	add	r3, r2
  40060c:	3304      	adds	r3, #4
  40060e:	681a      	ldr	r2, [r3, #0]
  400610:	68fb      	ldr	r3, [r7, #12]
  400612:	4013      	ands	r3, r2
  400614:	2b00      	cmp	r3, #0
  400616:	d01c      	beq.n	400652 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400618:	4a17      	ldr	r2, [pc, #92]	; (400678 <pio_handler_process+0xb0>)
  40061a:	68bb      	ldr	r3, [r7, #8]
  40061c:	011b      	lsls	r3, r3, #4
  40061e:	4413      	add	r3, r2
  400620:	330c      	adds	r3, #12
  400622:	681b      	ldr	r3, [r3, #0]
  400624:	4914      	ldr	r1, [pc, #80]	; (400678 <pio_handler_process+0xb0>)
  400626:	68ba      	ldr	r2, [r7, #8]
  400628:	0112      	lsls	r2, r2, #4
  40062a:	440a      	add	r2, r1
  40062c:	6810      	ldr	r0, [r2, #0]
  40062e:	4912      	ldr	r1, [pc, #72]	; (400678 <pio_handler_process+0xb0>)
  400630:	68ba      	ldr	r2, [r7, #8]
  400632:	0112      	lsls	r2, r2, #4
  400634:	440a      	add	r2, r1
  400636:	3204      	adds	r2, #4
  400638:	6812      	ldr	r2, [r2, #0]
  40063a:	4611      	mov	r1, r2
  40063c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40063e:	4a0e      	ldr	r2, [pc, #56]	; (400678 <pio_handler_process+0xb0>)
  400640:	68bb      	ldr	r3, [r7, #8]
  400642:	011b      	lsls	r3, r3, #4
  400644:	4413      	add	r3, r2
  400646:	3304      	adds	r3, #4
  400648:	681b      	ldr	r3, [r3, #0]
  40064a:	43db      	mvns	r3, r3
  40064c:	68fa      	ldr	r2, [r7, #12]
  40064e:	4013      	ands	r3, r2
  400650:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400652:	68bb      	ldr	r3, [r7, #8]
  400654:	3301      	adds	r3, #1
  400656:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400658:	68bb      	ldr	r3, [r7, #8]
  40065a:	2b06      	cmp	r3, #6
  40065c:	d803      	bhi.n	400666 <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40065e:	68fb      	ldr	r3, [r7, #12]
  400660:	2b00      	cmp	r3, #0
  400662:	d1c7      	bne.n	4005f4 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400664:	e000      	b.n	400668 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  400666:	bf00      	nop
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400668:	bf00      	nop
  40066a:	3710      	adds	r7, #16
  40066c:	46bd      	mov	sp, r7
  40066e:	bd80      	pop	{r7, pc}
  400670:	00400599 	.word	0x00400599
  400674:	004005b1 	.word	0x004005b1
  400678:	2040046c 	.word	0x2040046c

0040067c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40067c:	b580      	push	{r7, lr}
  40067e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400680:	210a      	movs	r1, #10
  400682:	4802      	ldr	r0, [pc, #8]	; (40068c <PIOA_Handler+0x10>)
  400684:	4b02      	ldr	r3, [pc, #8]	; (400690 <PIOA_Handler+0x14>)
  400686:	4798      	blx	r3
}
  400688:	bf00      	nop
  40068a:	bd80      	pop	{r7, pc}
  40068c:	400e0e00 	.word	0x400e0e00
  400690:	004005c9 	.word	0x004005c9

00400694 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400694:	b580      	push	{r7, lr}
  400696:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400698:	210b      	movs	r1, #11
  40069a:	4802      	ldr	r0, [pc, #8]	; (4006a4 <PIOB_Handler+0x10>)
  40069c:	4b02      	ldr	r3, [pc, #8]	; (4006a8 <PIOB_Handler+0x14>)
  40069e:	4798      	blx	r3
}
  4006a0:	bf00      	nop
  4006a2:	bd80      	pop	{r7, pc}
  4006a4:	400e1000 	.word	0x400e1000
  4006a8:	004005c9 	.word	0x004005c9

004006ac <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4006ac:	b580      	push	{r7, lr}
  4006ae:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4006b0:	210c      	movs	r1, #12
  4006b2:	4802      	ldr	r0, [pc, #8]	; (4006bc <PIOC_Handler+0x10>)
  4006b4:	4b02      	ldr	r3, [pc, #8]	; (4006c0 <PIOC_Handler+0x14>)
  4006b6:	4798      	blx	r3
}
  4006b8:	bf00      	nop
  4006ba:	bd80      	pop	{r7, pc}
  4006bc:	400e1200 	.word	0x400e1200
  4006c0:	004005c9 	.word	0x004005c9

004006c4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4006c4:	b580      	push	{r7, lr}
  4006c6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4006c8:	2110      	movs	r1, #16
  4006ca:	4802      	ldr	r0, [pc, #8]	; (4006d4 <PIOD_Handler+0x10>)
  4006cc:	4b02      	ldr	r3, [pc, #8]	; (4006d8 <PIOD_Handler+0x14>)
  4006ce:	4798      	blx	r3
}
  4006d0:	bf00      	nop
  4006d2:	bd80      	pop	{r7, pc}
  4006d4:	400e1400 	.word	0x400e1400
  4006d8:	004005c9 	.word	0x004005c9

004006dc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4006dc:	b580      	push	{r7, lr}
  4006de:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  4006e0:	2111      	movs	r1, #17
  4006e2:	4802      	ldr	r0, [pc, #8]	; (4006ec <PIOE_Handler+0x10>)
  4006e4:	4b02      	ldr	r3, [pc, #8]	; (4006f0 <PIOE_Handler+0x14>)
  4006e6:	4798      	blx	r3
}
  4006e8:	bf00      	nop
  4006ea:	bd80      	pop	{r7, pc}
  4006ec:	400e1600 	.word	0x400e1600
  4006f0:	004005c9 	.word	0x004005c9

004006f4 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4006f4:	b480      	push	{r7}
  4006f6:	b083      	sub	sp, #12
  4006f8:	af00      	add	r7, sp, #0
  4006fa:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  4006fc:	687b      	ldr	r3, [r7, #4]
  4006fe:	3b01      	subs	r3, #1
  400700:	2b03      	cmp	r3, #3
  400702:	d81a      	bhi.n	40073a <pmc_mck_set_division+0x46>
  400704:	a201      	add	r2, pc, #4	; (adr r2, 40070c <pmc_mck_set_division+0x18>)
  400706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40070a:	bf00      	nop
  40070c:	0040071d 	.word	0x0040071d
  400710:	00400723 	.word	0x00400723
  400714:	0040072b 	.word	0x0040072b
  400718:	00400733 	.word	0x00400733
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40071c:	2300      	movs	r3, #0
  40071e:	607b      	str	r3, [r7, #4]
			break;
  400720:	e00e      	b.n	400740 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  400722:	f44f 7380 	mov.w	r3, #256	; 0x100
  400726:	607b      	str	r3, [r7, #4]
			break;
  400728:	e00a      	b.n	400740 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40072a:	f44f 7340 	mov.w	r3, #768	; 0x300
  40072e:	607b      	str	r3, [r7, #4]
			break;
  400730:	e006      	b.n	400740 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400732:	f44f 7300 	mov.w	r3, #512	; 0x200
  400736:	607b      	str	r3, [r7, #4]
			break;
  400738:	e002      	b.n	400740 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40073a:	2300      	movs	r3, #0
  40073c:	607b      	str	r3, [r7, #4]
			break;
  40073e:	bf00      	nop
	}
	PMC->PMC_MCKR =
  400740:	490a      	ldr	r1, [pc, #40]	; (40076c <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400742:	4b0a      	ldr	r3, [pc, #40]	; (40076c <pmc_mck_set_division+0x78>)
  400744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400746:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  40074a:	687b      	ldr	r3, [r7, #4]
  40074c:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  40074e:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400750:	bf00      	nop
  400752:	4b06      	ldr	r3, [pc, #24]	; (40076c <pmc_mck_set_division+0x78>)
  400754:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400756:	f003 0308 	and.w	r3, r3, #8
  40075a:	2b00      	cmp	r3, #0
  40075c:	d0f9      	beq.n	400752 <pmc_mck_set_division+0x5e>
}
  40075e:	bf00      	nop
  400760:	370c      	adds	r7, #12
  400762:	46bd      	mov	sp, r7
  400764:	f85d 7b04 	ldr.w	r7, [sp], #4
  400768:	4770      	bx	lr
  40076a:	bf00      	nop
  40076c:	400e0600 	.word	0x400e0600

00400770 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400770:	b480      	push	{r7}
  400772:	b085      	sub	sp, #20
  400774:	af00      	add	r7, sp, #0
  400776:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400778:	491d      	ldr	r1, [pc, #116]	; (4007f0 <pmc_switch_mck_to_pllack+0x80>)
  40077a:	4b1d      	ldr	r3, [pc, #116]	; (4007f0 <pmc_switch_mck_to_pllack+0x80>)
  40077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40077e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400782:	687b      	ldr	r3, [r7, #4]
  400784:	4313      	orrs	r3, r2
  400786:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40078c:	60fb      	str	r3, [r7, #12]
  40078e:	e007      	b.n	4007a0 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400790:	68fb      	ldr	r3, [r7, #12]
  400792:	2b00      	cmp	r3, #0
  400794:	d101      	bne.n	40079a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400796:	2301      	movs	r3, #1
  400798:	e023      	b.n	4007e2 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40079a:	68fb      	ldr	r3, [r7, #12]
  40079c:	3b01      	subs	r3, #1
  40079e:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007a0:	4b13      	ldr	r3, [pc, #76]	; (4007f0 <pmc_switch_mck_to_pllack+0x80>)
  4007a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4007a4:	f003 0308 	and.w	r3, r3, #8
  4007a8:	2b00      	cmp	r3, #0
  4007aa:	d0f1      	beq.n	400790 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4007ac:	4a10      	ldr	r2, [pc, #64]	; (4007f0 <pmc_switch_mck_to_pllack+0x80>)
  4007ae:	4b10      	ldr	r3, [pc, #64]	; (4007f0 <pmc_switch_mck_to_pllack+0x80>)
  4007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4007b2:	f023 0303 	bic.w	r3, r3, #3
  4007b6:	f043 0302 	orr.w	r3, r3, #2
  4007ba:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4007c0:	60fb      	str	r3, [r7, #12]
  4007c2:	e007      	b.n	4007d4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007c4:	68fb      	ldr	r3, [r7, #12]
  4007c6:	2b00      	cmp	r3, #0
  4007c8:	d101      	bne.n	4007ce <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4007ca:	2301      	movs	r3, #1
  4007cc:	e009      	b.n	4007e2 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4007ce:	68fb      	ldr	r3, [r7, #12]
  4007d0:	3b01      	subs	r3, #1
  4007d2:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007d4:	4b06      	ldr	r3, [pc, #24]	; (4007f0 <pmc_switch_mck_to_pllack+0x80>)
  4007d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4007d8:	f003 0308 	and.w	r3, r3, #8
  4007dc:	2b00      	cmp	r3, #0
  4007de:	d0f1      	beq.n	4007c4 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4007e0:	2300      	movs	r3, #0
}
  4007e2:	4618      	mov	r0, r3
  4007e4:	3714      	adds	r7, #20
  4007e6:	46bd      	mov	sp, r7
  4007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007ec:	4770      	bx	lr
  4007ee:	bf00      	nop
  4007f0:	400e0600 	.word	0x400e0600

004007f4 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4007f4:	b480      	push	{r7}
  4007f6:	b083      	sub	sp, #12
  4007f8:	af00      	add	r7, sp, #0
  4007fa:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4007fc:	687b      	ldr	r3, [r7, #4]
  4007fe:	2b01      	cmp	r3, #1
  400800:	d105      	bne.n	40080e <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400802:	4907      	ldr	r1, [pc, #28]	; (400820 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400804:	4b06      	ldr	r3, [pc, #24]	; (400820 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400806:	689a      	ldr	r2, [r3, #8]
  400808:	4b06      	ldr	r3, [pc, #24]	; (400824 <pmc_switch_sclk_to_32kxtal+0x30>)
  40080a:	4313      	orrs	r3, r2
  40080c:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40080e:	4b04      	ldr	r3, [pc, #16]	; (400820 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400810:	4a05      	ldr	r2, [pc, #20]	; (400828 <pmc_switch_sclk_to_32kxtal+0x34>)
  400812:	601a      	str	r2, [r3, #0]
}
  400814:	bf00      	nop
  400816:	370c      	adds	r7, #12
  400818:	46bd      	mov	sp, r7
  40081a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40081e:	4770      	bx	lr
  400820:	400e1810 	.word	0x400e1810
  400824:	a5100000 	.word	0xa5100000
  400828:	a5000008 	.word	0xa5000008

0040082c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  40082c:	b480      	push	{r7}
  40082e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400830:	4b09      	ldr	r3, [pc, #36]	; (400858 <pmc_osc_is_ready_32kxtal+0x2c>)
  400832:	695b      	ldr	r3, [r3, #20]
  400834:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400838:	2b00      	cmp	r3, #0
  40083a:	d007      	beq.n	40084c <pmc_osc_is_ready_32kxtal+0x20>
  40083c:	4b07      	ldr	r3, [pc, #28]	; (40085c <pmc_osc_is_ready_32kxtal+0x30>)
  40083e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400840:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400844:	2b00      	cmp	r3, #0
  400846:	d001      	beq.n	40084c <pmc_osc_is_ready_32kxtal+0x20>
  400848:	2301      	movs	r3, #1
  40084a:	e000      	b.n	40084e <pmc_osc_is_ready_32kxtal+0x22>
  40084c:	2300      	movs	r3, #0
}
  40084e:	4618      	mov	r0, r3
  400850:	46bd      	mov	sp, r7
  400852:	f85d 7b04 	ldr.w	r7, [sp], #4
  400856:	4770      	bx	lr
  400858:	400e1810 	.word	0x400e1810
  40085c:	400e0600 	.word	0x400e0600

00400860 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400860:	b480      	push	{r7}
  400862:	b083      	sub	sp, #12
  400864:	af00      	add	r7, sp, #0
  400866:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400868:	4915      	ldr	r1, [pc, #84]	; (4008c0 <pmc_switch_mainck_to_fastrc+0x60>)
  40086a:	4b15      	ldr	r3, [pc, #84]	; (4008c0 <pmc_switch_mainck_to_fastrc+0x60>)
  40086c:	6a1a      	ldr	r2, [r3, #32]
  40086e:	4b15      	ldr	r3, [pc, #84]	; (4008c4 <pmc_switch_mainck_to_fastrc+0x64>)
  400870:	4313      	orrs	r3, r2
  400872:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400874:	bf00      	nop
  400876:	4b12      	ldr	r3, [pc, #72]	; (4008c0 <pmc_switch_mainck_to_fastrc+0x60>)
  400878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40087a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40087e:	2b00      	cmp	r3, #0
  400880:	d0f9      	beq.n	400876 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400882:	490f      	ldr	r1, [pc, #60]	; (4008c0 <pmc_switch_mainck_to_fastrc+0x60>)
  400884:	4b0e      	ldr	r3, [pc, #56]	; (4008c0 <pmc_switch_mainck_to_fastrc+0x60>)
  400886:	6a1a      	ldr	r2, [r3, #32]
  400888:	4b0f      	ldr	r3, [pc, #60]	; (4008c8 <pmc_switch_mainck_to_fastrc+0x68>)
  40088a:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40088c:	687a      	ldr	r2, [r7, #4]
  40088e:	4313      	orrs	r3, r2
  400890:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400894:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400896:	bf00      	nop
  400898:	4b09      	ldr	r3, [pc, #36]	; (4008c0 <pmc_switch_mainck_to_fastrc+0x60>)
  40089a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40089c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4008a0:	2b00      	cmp	r3, #0
  4008a2:	d0f9      	beq.n	400898 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4008a4:	4906      	ldr	r1, [pc, #24]	; (4008c0 <pmc_switch_mainck_to_fastrc+0x60>)
  4008a6:	4b06      	ldr	r3, [pc, #24]	; (4008c0 <pmc_switch_mainck_to_fastrc+0x60>)
  4008a8:	6a1a      	ldr	r2, [r3, #32]
  4008aa:	4b08      	ldr	r3, [pc, #32]	; (4008cc <pmc_switch_mainck_to_fastrc+0x6c>)
  4008ac:	4013      	ands	r3, r2
  4008ae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4008b2:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4008b4:	bf00      	nop
  4008b6:	370c      	adds	r7, #12
  4008b8:	46bd      	mov	sp, r7
  4008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008be:	4770      	bx	lr
  4008c0:	400e0600 	.word	0x400e0600
  4008c4:	00370008 	.word	0x00370008
  4008c8:	ffc8ff8f 	.word	0xffc8ff8f
  4008cc:	fec8ffff 	.word	0xfec8ffff

004008d0 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4008d0:	b480      	push	{r7}
  4008d2:	b083      	sub	sp, #12
  4008d4:	af00      	add	r7, sp, #0
  4008d6:	6078      	str	r0, [r7, #4]
  4008d8:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4008da:	687b      	ldr	r3, [r7, #4]
  4008dc:	2b00      	cmp	r3, #0
  4008de:	d008      	beq.n	4008f2 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4008e0:	4913      	ldr	r1, [pc, #76]	; (400930 <pmc_switch_mainck_to_xtal+0x60>)
  4008e2:	4b13      	ldr	r3, [pc, #76]	; (400930 <pmc_switch_mainck_to_xtal+0x60>)
  4008e4:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4008e6:	4a13      	ldr	r2, [pc, #76]	; (400934 <pmc_switch_mainck_to_xtal+0x64>)
  4008e8:	401a      	ands	r2, r3
  4008ea:	4b13      	ldr	r3, [pc, #76]	; (400938 <pmc_switch_mainck_to_xtal+0x68>)
  4008ec:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4008ee:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4008f0:	e018      	b.n	400924 <pmc_switch_mainck_to_xtal+0x54>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4008f2:	490f      	ldr	r1, [pc, #60]	; (400930 <pmc_switch_mainck_to_xtal+0x60>)
  4008f4:	4b0e      	ldr	r3, [pc, #56]	; (400930 <pmc_switch_mainck_to_xtal+0x60>)
  4008f6:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4008f8:	4b10      	ldr	r3, [pc, #64]	; (40093c <pmc_switch_mainck_to_xtal+0x6c>)
  4008fa:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4008fc:	683a      	ldr	r2, [r7, #0]
  4008fe:	0212      	lsls	r2, r2, #8
  400900:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400902:	431a      	orrs	r2, r3
  400904:	4b0e      	ldr	r3, [pc, #56]	; (400940 <pmc_switch_mainck_to_xtal+0x70>)
  400906:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400908:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40090a:	bf00      	nop
  40090c:	4b08      	ldr	r3, [pc, #32]	; (400930 <pmc_switch_mainck_to_xtal+0x60>)
  40090e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400910:	f003 0301 	and.w	r3, r3, #1
  400914:	2b00      	cmp	r3, #0
  400916:	d0f9      	beq.n	40090c <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400918:	4905      	ldr	r1, [pc, #20]	; (400930 <pmc_switch_mainck_to_xtal+0x60>)
  40091a:	4b05      	ldr	r3, [pc, #20]	; (400930 <pmc_switch_mainck_to_xtal+0x60>)
  40091c:	6a1a      	ldr	r2, [r3, #32]
  40091e:	4b09      	ldr	r3, [pc, #36]	; (400944 <pmc_switch_mainck_to_xtal+0x74>)
  400920:	4313      	orrs	r3, r2
  400922:	620b      	str	r3, [r1, #32]
	}
}
  400924:	bf00      	nop
  400926:	370c      	adds	r7, #12
  400928:	46bd      	mov	sp, r7
  40092a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40092e:	4770      	bx	lr
  400930:	400e0600 	.word	0x400e0600
  400934:	fec8fffc 	.word	0xfec8fffc
  400938:	01370002 	.word	0x01370002
  40093c:	ffc8fffc 	.word	0xffc8fffc
  400940:	00370001 	.word	0x00370001
  400944:	01370000 	.word	0x01370000

00400948 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400948:	b480      	push	{r7}
  40094a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40094c:	4b04      	ldr	r3, [pc, #16]	; (400960 <pmc_osc_is_ready_mainck+0x18>)
  40094e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400954:	4618      	mov	r0, r3
  400956:	46bd      	mov	sp, r7
  400958:	f85d 7b04 	ldr.w	r7, [sp], #4
  40095c:	4770      	bx	lr
  40095e:	bf00      	nop
  400960:	400e0600 	.word	0x400e0600

00400964 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400964:	b480      	push	{r7}
  400966:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400968:	4b04      	ldr	r3, [pc, #16]	; (40097c <pmc_disable_pllack+0x18>)
  40096a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40096e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400970:	bf00      	nop
  400972:	46bd      	mov	sp, r7
  400974:	f85d 7b04 	ldr.w	r7, [sp], #4
  400978:	4770      	bx	lr
  40097a:	bf00      	nop
  40097c:	400e0600 	.word	0x400e0600

00400980 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400980:	b480      	push	{r7}
  400982:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400984:	4b04      	ldr	r3, [pc, #16]	; (400998 <pmc_is_locked_pllack+0x18>)
  400986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400988:	f003 0302 	and.w	r3, r3, #2
}
  40098c:	4618      	mov	r0, r3
  40098e:	46bd      	mov	sp, r7
  400990:	f85d 7b04 	ldr.w	r7, [sp], #4
  400994:	4770      	bx	lr
  400996:	bf00      	nop
  400998:	400e0600 	.word	0x400e0600

0040099c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  40099c:	b480      	push	{r7}
  40099e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  4009a0:	4b04      	ldr	r3, [pc, #16]	; (4009b4 <pmc_is_locked_upll+0x18>)
  4009a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4009a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  4009a8:	4618      	mov	r0, r3
  4009aa:	46bd      	mov	sp, r7
  4009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009b0:	4770      	bx	lr
  4009b2:	bf00      	nop
  4009b4:	400e0600 	.word	0x400e0600

004009b8 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  4009b8:	b480      	push	{r7}
  4009ba:	b083      	sub	sp, #12
  4009bc:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4009be:	f3ef 8310 	mrs	r3, PRIMASK
  4009c2:	607b      	str	r3, [r7, #4]
  return(result);
  4009c4:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4009c6:	2b00      	cmp	r3, #0
  4009c8:	bf0c      	ite	eq
  4009ca:	2301      	moveq	r3, #1
  4009cc:	2300      	movne	r3, #0
  4009ce:	b2db      	uxtb	r3, r3
  4009d0:	603b      	str	r3, [r7, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4009d2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4009d4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4009d8:	4b04      	ldr	r3, [pc, #16]	; (4009ec <cpu_irq_save+0x34>)
  4009da:	2200      	movs	r2, #0
  4009dc:	701a      	strb	r2, [r3, #0]
	return flags;
  4009de:	683b      	ldr	r3, [r7, #0]
}
  4009e0:	4618      	mov	r0, r3
  4009e2:	370c      	adds	r7, #12
  4009e4:	46bd      	mov	sp, r7
  4009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009ea:	4770      	bx	lr
  4009ec:	2040000c 	.word	0x2040000c

004009f0 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  4009f0:	b480      	push	{r7}
  4009f2:	b083      	sub	sp, #12
  4009f4:	af00      	add	r7, sp, #0
  4009f6:	6078      	str	r0, [r7, #4]
	return (flags);
  4009f8:	687b      	ldr	r3, [r7, #4]
  4009fa:	2b00      	cmp	r3, #0
  4009fc:	bf14      	ite	ne
  4009fe:	2301      	movne	r3, #1
  400a00:	2300      	moveq	r3, #0
  400a02:	b2db      	uxtb	r3, r3
}
  400a04:	4618      	mov	r0, r3
  400a06:	370c      	adds	r7, #12
  400a08:	46bd      	mov	sp, r7
  400a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a0e:	4770      	bx	lr

00400a10 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  400a10:	b580      	push	{r7, lr}
  400a12:	b082      	sub	sp, #8
  400a14:	af00      	add	r7, sp, #0
  400a16:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  400a18:	6878      	ldr	r0, [r7, #4]
  400a1a:	4b07      	ldr	r3, [pc, #28]	; (400a38 <cpu_irq_restore+0x28>)
  400a1c:	4798      	blx	r3
  400a1e:	4603      	mov	r3, r0
  400a20:	2b00      	cmp	r3, #0
  400a22:	d005      	beq.n	400a30 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  400a24:	4b05      	ldr	r3, [pc, #20]	; (400a3c <cpu_irq_restore+0x2c>)
  400a26:	2201      	movs	r2, #1
  400a28:	701a      	strb	r2, [r3, #0]
  400a2a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400a2e:	b662      	cpsie	i
}
  400a30:	bf00      	nop
  400a32:	3708      	adds	r7, #8
  400a34:	46bd      	mov	sp, r7
  400a36:	bd80      	pop	{r7, pc}
  400a38:	004009f1 	.word	0x004009f1
  400a3c:	2040000c 	.word	0x2040000c

00400a40 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400a40:	b580      	push	{r7, lr}
  400a42:	b084      	sub	sp, #16
  400a44:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  400a46:	4b1e      	ldr	r3, [pc, #120]	; (400ac0 <Reset_Handler+0x80>)
  400a48:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  400a4a:	4b1e      	ldr	r3, [pc, #120]	; (400ac4 <Reset_Handler+0x84>)
  400a4c:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  400a4e:	68fa      	ldr	r2, [r7, #12]
  400a50:	68bb      	ldr	r3, [r7, #8]
  400a52:	429a      	cmp	r2, r3
  400a54:	d00c      	beq.n	400a70 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  400a56:	e007      	b.n	400a68 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  400a58:	68bb      	ldr	r3, [r7, #8]
  400a5a:	1d1a      	adds	r2, r3, #4
  400a5c:	60ba      	str	r2, [r7, #8]
  400a5e:	68fa      	ldr	r2, [r7, #12]
  400a60:	1d11      	adds	r1, r2, #4
  400a62:	60f9      	str	r1, [r7, #12]
  400a64:	6812      	ldr	r2, [r2, #0]
  400a66:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  400a68:	68bb      	ldr	r3, [r7, #8]
  400a6a:	4a17      	ldr	r2, [pc, #92]	; (400ac8 <Reset_Handler+0x88>)
  400a6c:	4293      	cmp	r3, r2
  400a6e:	d3f3      	bcc.n	400a58 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400a70:	4b16      	ldr	r3, [pc, #88]	; (400acc <Reset_Handler+0x8c>)
  400a72:	60bb      	str	r3, [r7, #8]
  400a74:	e004      	b.n	400a80 <Reset_Handler+0x40>
                *pDest++ = 0;
  400a76:	68bb      	ldr	r3, [r7, #8]
  400a78:	1d1a      	adds	r2, r3, #4
  400a7a:	60ba      	str	r2, [r7, #8]
  400a7c:	2200      	movs	r2, #0
  400a7e:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400a80:	68bb      	ldr	r3, [r7, #8]
  400a82:	4a13      	ldr	r2, [pc, #76]	; (400ad0 <Reset_Handler+0x90>)
  400a84:	4293      	cmp	r3, r2
  400a86:	d3f6      	bcc.n	400a76 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  400a88:	4b12      	ldr	r3, [pc, #72]	; (400ad4 <Reset_Handler+0x94>)
  400a8a:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400a8c:	4a12      	ldr	r2, [pc, #72]	; (400ad8 <Reset_Handler+0x98>)
  400a8e:	68fb      	ldr	r3, [r7, #12]
  400a90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400a94:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  400a96:	4b11      	ldr	r3, [pc, #68]	; (400adc <Reset_Handler+0x9c>)
  400a98:	4798      	blx	r3
  400a9a:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  400a9c:	4a10      	ldr	r2, [pc, #64]	; (400ae0 <Reset_Handler+0xa0>)
  400a9e:	4b10      	ldr	r3, [pc, #64]	; (400ae0 <Reset_Handler+0xa0>)
  400aa0:	681b      	ldr	r3, [r3, #0]
  400aa2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400aa6:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400aa8:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400aac:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  400ab0:	6878      	ldr	r0, [r7, #4]
  400ab2:	4b0c      	ldr	r3, [pc, #48]	; (400ae4 <Reset_Handler+0xa4>)
  400ab4:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  400ab6:	4b0c      	ldr	r3, [pc, #48]	; (400ae8 <Reset_Handler+0xa8>)
  400ab8:	4798      	blx	r3

        /* Branch to main function */
        main();
  400aba:	4b0c      	ldr	r3, [pc, #48]	; (400aec <Reset_Handler+0xac>)
  400abc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  400abe:	e7fe      	b.n	400abe <Reset_Handler+0x7e>
  400ac0:	004018c8 	.word	0x004018c8
  400ac4:	20400000 	.word	0x20400000
  400ac8:	20400450 	.word	0x20400450
  400acc:	20400450 	.word	0x20400450
  400ad0:	204004dc 	.word	0x204004dc
  400ad4:	00400000 	.word	0x00400000
  400ad8:	e000ed00 	.word	0xe000ed00
  400adc:	004009b9 	.word	0x004009b9
  400ae0:	e000ed88 	.word	0xe000ed88
  400ae4:	00400a11 	.word	0x00400a11
  400ae8:	00401759 	.word	0x00401759
  400aec:	0040131d 	.word	0x0040131d

00400af0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400af0:	b480      	push	{r7}
  400af2:	af00      	add	r7, sp, #0
        while (1) {
        }
  400af4:	e7fe      	b.n	400af4 <Dummy_Handler+0x4>
  400af6:	bf00      	nop

00400af8 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  400af8:	b480      	push	{r7}
  400afa:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400afc:	4b52      	ldr	r3, [pc, #328]	; (400c48 <SystemCoreClockUpdate+0x150>)
  400afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b00:	f003 0303 	and.w	r3, r3, #3
  400b04:	2b01      	cmp	r3, #1
  400b06:	d014      	beq.n	400b32 <SystemCoreClockUpdate+0x3a>
  400b08:	2b01      	cmp	r3, #1
  400b0a:	d302      	bcc.n	400b12 <SystemCoreClockUpdate+0x1a>
  400b0c:	2b02      	cmp	r3, #2
  400b0e:	d038      	beq.n	400b82 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  400b10:	e07a      	b.n	400c08 <SystemCoreClockUpdate+0x110>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400b12:	4b4e      	ldr	r3, [pc, #312]	; (400c4c <SystemCoreClockUpdate+0x154>)
  400b14:	695b      	ldr	r3, [r3, #20]
  400b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400b1a:	2b00      	cmp	r3, #0
  400b1c:	d004      	beq.n	400b28 <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400b1e:	4b4c      	ldr	r3, [pc, #304]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400b20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400b24:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  400b26:	e06f      	b.n	400c08 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400b28:	4b49      	ldr	r3, [pc, #292]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400b2a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  400b2e:	601a      	str	r2, [r3, #0]
      }
    break;
  400b30:	e06a      	b.n	400c08 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400b32:	4b45      	ldr	r3, [pc, #276]	; (400c48 <SystemCoreClockUpdate+0x150>)
  400b34:	6a1b      	ldr	r3, [r3, #32]
  400b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400b3a:	2b00      	cmp	r3, #0
  400b3c:	d003      	beq.n	400b46 <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400b3e:	4b44      	ldr	r3, [pc, #272]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400b40:	4a44      	ldr	r2, [pc, #272]	; (400c54 <SystemCoreClockUpdate+0x15c>)
  400b42:	601a      	str	r2, [r3, #0]

          default:
          break;
        }
      }
    break;
  400b44:	e060      	b.n	400c08 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b46:	4b42      	ldr	r3, [pc, #264]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400b48:	4a43      	ldr	r2, [pc, #268]	; (400c58 <SystemCoreClockUpdate+0x160>)
  400b4a:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400b4c:	4b3e      	ldr	r3, [pc, #248]	; (400c48 <SystemCoreClockUpdate+0x150>)
  400b4e:	6a1b      	ldr	r3, [r3, #32]
  400b50:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b54:	2b10      	cmp	r3, #16
  400b56:	d004      	beq.n	400b62 <SystemCoreClockUpdate+0x6a>
  400b58:	2b20      	cmp	r3, #32
  400b5a:	d008      	beq.n	400b6e <SystemCoreClockUpdate+0x76>
  400b5c:	2b00      	cmp	r3, #0
  400b5e:	d00e      	beq.n	400b7e <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  400b60:	e00e      	b.n	400b80 <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  400b62:	4b3b      	ldr	r3, [pc, #236]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400b64:	681b      	ldr	r3, [r3, #0]
  400b66:	005b      	lsls	r3, r3, #1
  400b68:	4a39      	ldr	r2, [pc, #228]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400b6a:	6013      	str	r3, [r2, #0]
          break;
  400b6c:	e008      	b.n	400b80 <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  400b6e:	4b38      	ldr	r3, [pc, #224]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400b70:	681a      	ldr	r2, [r3, #0]
  400b72:	4613      	mov	r3, r2
  400b74:	005b      	lsls	r3, r3, #1
  400b76:	4413      	add	r3, r2
  400b78:	4a35      	ldr	r2, [pc, #212]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400b7a:	6013      	str	r3, [r2, #0]
          break;
  400b7c:	e000      	b.n	400b80 <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  400b7e:	bf00      	nop

          default:
          break;
        }
      }
    break;
  400b80:	e042      	b.n	400c08 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400b82:	4b31      	ldr	r3, [pc, #196]	; (400c48 <SystemCoreClockUpdate+0x150>)
  400b84:	6a1b      	ldr	r3, [r3, #32]
  400b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400b8a:	2b00      	cmp	r3, #0
  400b8c:	d003      	beq.n	400b96 <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400b8e:	4b30      	ldr	r3, [pc, #192]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400b90:	4a30      	ldr	r2, [pc, #192]	; (400c54 <SystemCoreClockUpdate+0x15c>)
  400b92:	601a      	str	r2, [r3, #0]
  400b94:	e01c      	b.n	400bd0 <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b96:	4b2e      	ldr	r3, [pc, #184]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400b98:	4a2f      	ldr	r2, [pc, #188]	; (400c58 <SystemCoreClockUpdate+0x160>)
  400b9a:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400b9c:	4b2a      	ldr	r3, [pc, #168]	; (400c48 <SystemCoreClockUpdate+0x150>)
  400b9e:	6a1b      	ldr	r3, [r3, #32]
  400ba0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ba4:	2b10      	cmp	r3, #16
  400ba6:	d004      	beq.n	400bb2 <SystemCoreClockUpdate+0xba>
  400ba8:	2b20      	cmp	r3, #32
  400baa:	d008      	beq.n	400bbe <SystemCoreClockUpdate+0xc6>
  400bac:	2b00      	cmp	r3, #0
  400bae:	d00e      	beq.n	400bce <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  400bb0:	e00e      	b.n	400bd0 <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  400bb2:	4b27      	ldr	r3, [pc, #156]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400bb4:	681b      	ldr	r3, [r3, #0]
  400bb6:	005b      	lsls	r3, r3, #1
  400bb8:	4a25      	ldr	r2, [pc, #148]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400bba:	6013      	str	r3, [r2, #0]
          break;
  400bbc:	e008      	b.n	400bd0 <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  400bbe:	4b24      	ldr	r3, [pc, #144]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400bc0:	681a      	ldr	r2, [r3, #0]
  400bc2:	4613      	mov	r3, r2
  400bc4:	005b      	lsls	r3, r3, #1
  400bc6:	4413      	add	r3, r2
  400bc8:	4a21      	ldr	r2, [pc, #132]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400bca:	6013      	str	r3, [r2, #0]
          break;
  400bcc:	e000      	b.n	400bd0 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  400bce:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400bd0:	4b1d      	ldr	r3, [pc, #116]	; (400c48 <SystemCoreClockUpdate+0x150>)
  400bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400bd4:	f003 0303 	and.w	r3, r3, #3
  400bd8:	2b02      	cmp	r3, #2
  400bda:	d114      	bne.n	400c06 <SystemCoreClockUpdate+0x10e>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400bdc:	4b1a      	ldr	r3, [pc, #104]	; (400c48 <SystemCoreClockUpdate+0x150>)
  400bde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  400be0:	4b1e      	ldr	r3, [pc, #120]	; (400c5c <SystemCoreClockUpdate+0x164>)
  400be2:	4013      	ands	r3, r2
  400be4:	0c1b      	lsrs	r3, r3, #16
  400be6:	3301      	adds	r3, #1
  400be8:	4a19      	ldr	r2, [pc, #100]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400bea:	6812      	ldr	r2, [r2, #0]
  400bec:	fb02 f303 	mul.w	r3, r2, r3
  400bf0:	4a17      	ldr	r2, [pc, #92]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400bf2:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400bf4:	4b14      	ldr	r3, [pc, #80]	; (400c48 <SystemCoreClockUpdate+0x150>)
  400bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  400bf8:	b2db      	uxtb	r3, r3
  400bfa:	4a15      	ldr	r2, [pc, #84]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400bfc:	6812      	ldr	r2, [r2, #0]
  400bfe:	fbb2 f3f3 	udiv	r3, r2, r3
  400c02:	4a13      	ldr	r2, [pc, #76]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400c04:	6013      	str	r3, [r2, #0]
      }
    break;
  400c06:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400c08:	4b0f      	ldr	r3, [pc, #60]	; (400c48 <SystemCoreClockUpdate+0x150>)
  400c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c10:	2b70      	cmp	r3, #112	; 0x70
  400c12:	d108      	bne.n	400c26 <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  400c14:	4b0e      	ldr	r3, [pc, #56]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400c16:	681b      	ldr	r3, [r3, #0]
  400c18:	4a11      	ldr	r2, [pc, #68]	; (400c60 <SystemCoreClockUpdate+0x168>)
  400c1a:	fba2 2303 	umull	r2, r3, r2, r3
  400c1e:	085b      	lsrs	r3, r3, #1
  400c20:	4a0b      	ldr	r2, [pc, #44]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400c22:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  400c24:	e00a      	b.n	400c3c <SystemCoreClockUpdate+0x144>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400c26:	4b08      	ldr	r3, [pc, #32]	; (400c48 <SystemCoreClockUpdate+0x150>)
  400c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c2e:	091b      	lsrs	r3, r3, #4
  400c30:	4a07      	ldr	r2, [pc, #28]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400c32:	6812      	ldr	r2, [r2, #0]
  400c34:	fa22 f303 	lsr.w	r3, r2, r3
  400c38:	4a05      	ldr	r2, [pc, #20]	; (400c50 <SystemCoreClockUpdate+0x158>)
  400c3a:	6013      	str	r3, [r2, #0]
  }
}
  400c3c:	bf00      	nop
  400c3e:	46bd      	mov	sp, r7
  400c40:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c44:	4770      	bx	lr
  400c46:	bf00      	nop
  400c48:	400e0600 	.word	0x400e0600
  400c4c:	400e1810 	.word	0x400e1810
  400c50:	20400010 	.word	0x20400010
  400c54:	00b71b00 	.word	0x00b71b00
  400c58:	003d0900 	.word	0x003d0900
  400c5c:	07ff0000 	.word	0x07ff0000
  400c60:	aaaaaaab 	.word	0xaaaaaaab

00400c64 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  400c64:	b480      	push	{r7}
  400c66:	b083      	sub	sp, #12
  400c68:	af00      	add	r7, sp, #0
  400c6a:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400c6c:	687b      	ldr	r3, [r7, #4]
  400c6e:	4a19      	ldr	r2, [pc, #100]	; (400cd4 <system_init_flash+0x70>)
  400c70:	4293      	cmp	r3, r2
  400c72:	d804      	bhi.n	400c7e <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400c74:	4b18      	ldr	r3, [pc, #96]	; (400cd8 <system_init_flash+0x74>)
  400c76:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400c7a:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  400c7c:	e023      	b.n	400cc6 <system_init_flash+0x62>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400c7e:	687b      	ldr	r3, [r7, #4]
  400c80:	4a16      	ldr	r2, [pc, #88]	; (400cdc <system_init_flash+0x78>)
  400c82:	4293      	cmp	r3, r2
  400c84:	d803      	bhi.n	400c8e <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400c86:	4b14      	ldr	r3, [pc, #80]	; (400cd8 <system_init_flash+0x74>)
  400c88:	4a15      	ldr	r2, [pc, #84]	; (400ce0 <system_init_flash+0x7c>)
  400c8a:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  400c8c:	e01b      	b.n	400cc6 <system_init_flash+0x62>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400c8e:	687b      	ldr	r3, [r7, #4]
  400c90:	4a14      	ldr	r2, [pc, #80]	; (400ce4 <system_init_flash+0x80>)
  400c92:	4293      	cmp	r3, r2
  400c94:	d803      	bhi.n	400c9e <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400c96:	4b10      	ldr	r3, [pc, #64]	; (400cd8 <system_init_flash+0x74>)
  400c98:	4a13      	ldr	r2, [pc, #76]	; (400ce8 <system_init_flash+0x84>)
  400c9a:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  400c9c:	e013      	b.n	400cc6 <system_init_flash+0x62>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400c9e:	687b      	ldr	r3, [r7, #4]
  400ca0:	4a12      	ldr	r2, [pc, #72]	; (400cec <system_init_flash+0x88>)
  400ca2:	4293      	cmp	r3, r2
  400ca4:	d803      	bhi.n	400cae <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400ca6:	4b0c      	ldr	r3, [pc, #48]	; (400cd8 <system_init_flash+0x74>)
  400ca8:	4a11      	ldr	r2, [pc, #68]	; (400cf0 <system_init_flash+0x8c>)
  400caa:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  400cac:	e00b      	b.n	400cc6 <system_init_flash+0x62>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400cae:	687b      	ldr	r3, [r7, #4]
  400cb0:	4a10      	ldr	r2, [pc, #64]	; (400cf4 <system_init_flash+0x90>)
  400cb2:	4293      	cmp	r3, r2
  400cb4:	d804      	bhi.n	400cc0 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400cb6:	4b08      	ldr	r3, [pc, #32]	; (400cd8 <system_init_flash+0x74>)
  400cb8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400cbc:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  400cbe:	e002      	b.n	400cc6 <system_init_flash+0x62>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400cc0:	4b05      	ldr	r3, [pc, #20]	; (400cd8 <system_init_flash+0x74>)
  400cc2:	4a0d      	ldr	r2, [pc, #52]	; (400cf8 <system_init_flash+0x94>)
  400cc4:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  400cc6:	bf00      	nop
  400cc8:	370c      	adds	r7, #12
  400cca:	46bd      	mov	sp, r7
  400ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cd0:	4770      	bx	lr
  400cd2:	bf00      	nop
  400cd4:	01312cff 	.word	0x01312cff
  400cd8:	400e0c00 	.word	0x400e0c00
  400cdc:	026259ff 	.word	0x026259ff
  400ce0:	04000100 	.word	0x04000100
  400ce4:	039386ff 	.word	0x039386ff
  400ce8:	04000200 	.word	0x04000200
  400cec:	04c4b3ff 	.word	0x04c4b3ff
  400cf0:	04000300 	.word	0x04000300
  400cf4:	05f5e0ff 	.word	0x05f5e0ff
  400cf8:	04000500 	.word	0x04000500

00400cfc <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400cfc:	b480      	push	{r7}
  400cfe:	b083      	sub	sp, #12
  400d00:	af00      	add	r7, sp, #0
  400d02:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400d04:	687b      	ldr	r3, [r7, #4]
  400d06:	2b07      	cmp	r3, #7
  400d08:	d825      	bhi.n	400d56 <osc_get_rate+0x5a>
  400d0a:	a201      	add	r2, pc, #4	; (adr r2, 400d10 <osc_get_rate+0x14>)
  400d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400d10:	00400d31 	.word	0x00400d31
  400d14:	00400d37 	.word	0x00400d37
  400d18:	00400d3d 	.word	0x00400d3d
  400d1c:	00400d43 	.word	0x00400d43
  400d20:	00400d47 	.word	0x00400d47
  400d24:	00400d4b 	.word	0x00400d4b
  400d28:	00400d4f 	.word	0x00400d4f
  400d2c:	00400d53 	.word	0x00400d53
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400d30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400d34:	e010      	b.n	400d58 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d3a:	e00d      	b.n	400d58 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400d3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d40:	e00a      	b.n	400d58 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400d42:	4b08      	ldr	r3, [pc, #32]	; (400d64 <osc_get_rate+0x68>)
  400d44:	e008      	b.n	400d58 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400d46:	4b08      	ldr	r3, [pc, #32]	; (400d68 <osc_get_rate+0x6c>)
  400d48:	e006      	b.n	400d58 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400d4a:	4b08      	ldr	r3, [pc, #32]	; (400d6c <osc_get_rate+0x70>)
  400d4c:	e004      	b.n	400d58 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400d4e:	4b07      	ldr	r3, [pc, #28]	; (400d6c <osc_get_rate+0x70>)
  400d50:	e002      	b.n	400d58 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400d52:	4b06      	ldr	r3, [pc, #24]	; (400d6c <osc_get_rate+0x70>)
  400d54:	e000      	b.n	400d58 <osc_get_rate+0x5c>
	}

	return 0;
  400d56:	2300      	movs	r3, #0
}
  400d58:	4618      	mov	r0, r3
  400d5a:	370c      	adds	r7, #12
  400d5c:	46bd      	mov	sp, r7
  400d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d62:	4770      	bx	lr
  400d64:	003d0900 	.word	0x003d0900
  400d68:	007a1200 	.word	0x007a1200
  400d6c:	00b71b00 	.word	0x00b71b00

00400d70 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400d70:	b580      	push	{r7, lr}
  400d72:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400d74:	2006      	movs	r0, #6
  400d76:	4b05      	ldr	r3, [pc, #20]	; (400d8c <sysclk_get_main_hz+0x1c>)
  400d78:	4798      	blx	r3
  400d7a:	4602      	mov	r2, r0
  400d7c:	4613      	mov	r3, r2
  400d7e:	009b      	lsls	r3, r3, #2
  400d80:	4413      	add	r3, r2
  400d82:	009a      	lsls	r2, r3, #2
  400d84:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400d86:	4618      	mov	r0, r3
  400d88:	bd80      	pop	{r7, pc}
  400d8a:	bf00      	nop
  400d8c:	00400cfd 	.word	0x00400cfd

00400d90 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400d90:	b580      	push	{r7, lr}
  400d92:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400d94:	4b02      	ldr	r3, [pc, #8]	; (400da0 <sysclk_get_cpu_hz+0x10>)
  400d96:	4798      	blx	r3
  400d98:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400d9a:	4618      	mov	r0, r3
  400d9c:	bd80      	pop	{r7, pc}
  400d9e:	bf00      	nop
  400da0:	00400d71 	.word	0x00400d71

00400da4 <ledConfig>:
/************************************************************************/

/**
 * @Brief Inicializa o pino do LED
 */
void ledConfig(int estado){
  400da4:	b480      	push	{r7}
  400da6:	b083      	sub	sp, #12
  400da8:	af00      	add	r7, sp, #0
  400daa:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCER0    = (1<<LED_PIO_ID);	    // Ativa clock do periférico no PMC
  400dac:	4b0e      	ldr	r3, [pc, #56]	; (400de8 <ledConfig+0x44>)
  400dae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400db2:	611a      	str	r2, [r3, #16]
	LED_PIO->PIO_PER  = LED_PIN_MASK;           // Ativa controle do pino no PIO    (PIO ENABLE register)
  400db4:	4b0d      	ldr	r3, [pc, #52]	; (400dec <ledConfig+0x48>)
  400db6:	f44f 7280 	mov.w	r2, #256	; 0x100
  400dba:	601a      	str	r2, [r3, #0]
	LED_PIO->PIO_OER  = LED_PIN_MASK;           // Ativa saída                      (Output ENABLE register)
  400dbc:	4b0b      	ldr	r3, [pc, #44]	; (400dec <ledConfig+0x48>)
  400dbe:	f44f 7280 	mov.w	r2, #256	; 0x100
  400dc2:	611a      	str	r2, [r3, #16]
  if(!estado)                                 // Checa pela inicialização desejada
  400dc4:	687b      	ldr	r3, [r7, #4]
  400dc6:	2b00      	cmp	r3, #0
  400dc8:	d104      	bne.n	400dd4 <ledConfig+0x30>
    LED_PIO->PIO_CODR = LED_PIN_MASK;       // Coloca 0 na saída                (CLEAR Output Data register)
  400dca:	4b08      	ldr	r3, [pc, #32]	; (400dec <ledConfig+0x48>)
  400dcc:	f44f 7280 	mov.w	r2, #256	; 0x100
  400dd0:	635a      	str	r2, [r3, #52]	; 0x34
  else
    LED_PIO->PIO_SODR = LED_PIN_MASK;       // Coloca 1 na saída                (SET Output Data register)
};
  400dd2:	e003      	b.n	400ddc <ledConfig+0x38>
	LED_PIO->PIO_PER  = LED_PIN_MASK;           // Ativa controle do pino no PIO    (PIO ENABLE register)
	LED_PIO->PIO_OER  = LED_PIN_MASK;           // Ativa saída                      (Output ENABLE register)
  if(!estado)                                 // Checa pela inicialização desejada
    LED_PIO->PIO_CODR = LED_PIN_MASK;       // Coloca 0 na saída                (CLEAR Output Data register)
  else
    LED_PIO->PIO_SODR = LED_PIN_MASK;       // Coloca 1 na saída                (SET Output Data register)
  400dd4:	4b05      	ldr	r3, [pc, #20]	; (400dec <ledConfig+0x48>)
  400dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
  400dda:	631a      	str	r2, [r3, #48]	; 0x30
};
  400ddc:	bf00      	nop
  400dde:	370c      	adds	r7, #12
  400de0:	46bd      	mov	sp, r7
  400de2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400de6:	4770      	bx	lr
  400de8:	400e0600 	.word	0x400e0600
  400dec:	400e1200 	.word	0x400e1200

00400df0 <led1Config>:

void led1Config(int estado){
  400df0:	b480      	push	{r7}
  400df2:	b083      	sub	sp, #12
  400df4:	af00      	add	r7, sp, #0
  400df6:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCER0    = (1<<LED1_PIO_ID);	    // Ativa clock do periférico no PMC
  400df8:	4b0c      	ldr	r3, [pc, #48]	; (400e2c <led1Config+0x3c>)
  400dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400dfe:	611a      	str	r2, [r3, #16]
	LED1_PIO->PIO_PER  = LED1_PIN_MASK;           // Ativa controle do pino no PIO    (PIO ENABLE register)
  400e00:	4b0b      	ldr	r3, [pc, #44]	; (400e30 <led1Config+0x40>)
  400e02:	2201      	movs	r2, #1
  400e04:	601a      	str	r2, [r3, #0]
	LED1_PIO->PIO_OER  = LED1_PIN_MASK;           // Ativa saída                      (Output ENABLE register)
  400e06:	4b0a      	ldr	r3, [pc, #40]	; (400e30 <led1Config+0x40>)
  400e08:	2201      	movs	r2, #1
  400e0a:	611a      	str	r2, [r3, #16]
	if(!estado)                                 // Checa pela inicialização desejada
  400e0c:	687b      	ldr	r3, [r7, #4]
  400e0e:	2b00      	cmp	r3, #0
  400e10:	d103      	bne.n	400e1a <led1Config+0x2a>
	LED1_PIO->PIO_CODR = LED1_PIN_MASK;       // Coloca 0 na saída                (CLEAR Output Data register)
  400e12:	4b07      	ldr	r3, [pc, #28]	; (400e30 <led1Config+0x40>)
  400e14:	2201      	movs	r2, #1
  400e16:	635a      	str	r2, [r3, #52]	; 0x34
	else
	LED1_PIO->PIO_SODR = LED1_PIN_MASK;       // Coloca 1 na saída                (SET Output Data register)
};
  400e18:	e002      	b.n	400e20 <led1Config+0x30>
	LED1_PIO->PIO_PER  = LED1_PIN_MASK;           // Ativa controle do pino no PIO    (PIO ENABLE register)
	LED1_PIO->PIO_OER  = LED1_PIN_MASK;           // Ativa saída                      (Output ENABLE register)
	if(!estado)                                 // Checa pela inicialização desejada
	LED1_PIO->PIO_CODR = LED1_PIN_MASK;       // Coloca 0 na saída                (CLEAR Output Data register)
	else
	LED1_PIO->PIO_SODR = LED1_PIN_MASK;       // Coloca 1 na saída                (SET Output Data register)
  400e1a:	4b05      	ldr	r3, [pc, #20]	; (400e30 <led1Config+0x40>)
  400e1c:	2201      	movs	r2, #1
  400e1e:	631a      	str	r2, [r3, #48]	; 0x30
};
  400e20:	bf00      	nop
  400e22:	370c      	adds	r7, #12
  400e24:	46bd      	mov	sp, r7
  400e26:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e2a:	4770      	bx	lr
  400e2c:	400e0600 	.word	0x400e0600
  400e30:	400e0e00 	.word	0x400e0e00

00400e34 <led2Config>:

void led2Config(int estado){
  400e34:	b480      	push	{r7}
  400e36:	b083      	sub	sp, #12
  400e38:	af00      	add	r7, sp, #0
  400e3a:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCER0    = (1<<LED2_PIO_ID);	    // Ativa clock do periférico no PMC
  400e3c:	4b0e      	ldr	r3, [pc, #56]	; (400e78 <led2Config+0x44>)
  400e3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400e42:	611a      	str	r2, [r3, #16]
	LED2_PIO->PIO_PER  = LED2_PIN_MASK;           // Ativa controle do pino no PIO    (PIO ENABLE register)
  400e44:	4b0d      	ldr	r3, [pc, #52]	; (400e7c <led2Config+0x48>)
  400e46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400e4a:	601a      	str	r2, [r3, #0]
	LED2_PIO->PIO_OER  = LED2_PIN_MASK;           // Ativa saída                      (Output ENABLE register)
  400e4c:	4b0b      	ldr	r3, [pc, #44]	; (400e7c <led2Config+0x48>)
  400e4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400e52:	611a      	str	r2, [r3, #16]
	if(!estado)                                 // Checa pela inicialização desejada
  400e54:	687b      	ldr	r3, [r7, #4]
  400e56:	2b00      	cmp	r3, #0
  400e58:	d104      	bne.n	400e64 <led2Config+0x30>
	LED2_PIO->PIO_CODR = LED2_PIN_MASK;       // Coloca 0 na saída                (CLEAR Output Data register)
  400e5a:	4b08      	ldr	r3, [pc, #32]	; (400e7c <led2Config+0x48>)
  400e5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400e60:	635a      	str	r2, [r3, #52]	; 0x34
	else
	LED2_PIO->PIO_SODR = LED2_PIN_MASK;       // Coloca 1 na saída                (SET Output Data register)
};
  400e62:	e003      	b.n	400e6c <led2Config+0x38>
	LED2_PIO->PIO_PER  = LED2_PIN_MASK;           // Ativa controle do pino no PIO    (PIO ENABLE register)
	LED2_PIO->PIO_OER  = LED2_PIN_MASK;           // Ativa saída                      (Output ENABLE register)
	if(!estado)                                 // Checa pela inicialização desejada
	LED2_PIO->PIO_CODR = LED2_PIN_MASK;       // Coloca 0 na saída                (CLEAR Output Data register)
	else
	LED2_PIO->PIO_SODR = LED2_PIN_MASK;       // Coloca 1 na saída                (SET Output Data register)
  400e64:	4b05      	ldr	r3, [pc, #20]	; (400e7c <led2Config+0x48>)
  400e66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400e6a:	631a      	str	r2, [r3, #48]	; 0x30
};
  400e6c:	bf00      	nop
  400e6e:	370c      	adds	r7, #12
  400e70:	46bd      	mov	sp, r7
  400e72:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e76:	4770      	bx	lr
  400e78:	400e0600 	.word	0x400e0600
  400e7c:	400e1200 	.word	0x400e1200

00400e80 <led3Config>:

void led3Config(int estado){
  400e80:	b480      	push	{r7}
  400e82:	b083      	sub	sp, #12
  400e84:	af00      	add	r7, sp, #0
  400e86:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCER0    = (1<<LED3_PIO_ID);	    // Ativa clock do periférico no PMC
  400e88:	4b0c      	ldr	r3, [pc, #48]	; (400ebc <led3Config+0x3c>)
  400e8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400e8e:	611a      	str	r2, [r3, #16]
	LED3_PIO->PIO_PER  = LED3_PIN_MASK;           // Ativa controle do pino no PIO    (PIO ENABLE register)
  400e90:	4b0b      	ldr	r3, [pc, #44]	; (400ec0 <led3Config+0x40>)
  400e92:	2204      	movs	r2, #4
  400e94:	601a      	str	r2, [r3, #0]
	LED3_PIO->PIO_OER  = LED3_PIN_MASK;           // Ativa saída                      (Output ENABLE register)
  400e96:	4b0a      	ldr	r3, [pc, #40]	; (400ec0 <led3Config+0x40>)
  400e98:	2204      	movs	r2, #4
  400e9a:	611a      	str	r2, [r3, #16]
	if(!estado)                                 // Checa pela inicialização desejada
  400e9c:	687b      	ldr	r3, [r7, #4]
  400e9e:	2b00      	cmp	r3, #0
  400ea0:	d103      	bne.n	400eaa <led3Config+0x2a>
	LED3_PIO->PIO_CODR = LED3_PIN_MASK;       // Coloca 0 na saída                (CLEAR Output Data register)
  400ea2:	4b07      	ldr	r3, [pc, #28]	; (400ec0 <led3Config+0x40>)
  400ea4:	2204      	movs	r2, #4
  400ea6:	635a      	str	r2, [r3, #52]	; 0x34
	else
	LED3_PIO->PIO_SODR = LED3_PIN_MASK;       // Coloca 1 na saída                (SET Output Data register)
};
  400ea8:	e002      	b.n	400eb0 <led3Config+0x30>
	LED3_PIO->PIO_PER  = LED3_PIN_MASK;           // Ativa controle do pino no PIO    (PIO ENABLE register)
	LED3_PIO->PIO_OER  = LED3_PIN_MASK;           // Ativa saída                      (Output ENABLE register)
	if(!estado)                                 // Checa pela inicialização desejada
	LED3_PIO->PIO_CODR = LED3_PIN_MASK;       // Coloca 0 na saída                (CLEAR Output Data register)
	else
	LED3_PIO->PIO_SODR = LED3_PIN_MASK;       // Coloca 1 na saída                (SET Output Data register)
  400eaa:	4b05      	ldr	r3, [pc, #20]	; (400ec0 <led3Config+0x40>)
  400eac:	2204      	movs	r2, #4
  400eae:	631a      	str	r2, [r3, #48]	; 0x30
};
  400eb0:	bf00      	nop
  400eb2:	370c      	adds	r7, #12
  400eb4:	46bd      	mov	sp, r7
  400eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400eba:	4770      	bx	lr
  400ebc:	400e0600 	.word	0x400e0600
  400ec0:	400e1000 	.word	0x400e1000

00400ec4 <butconfig>:

void butconfig (){
  400ec4:	b480      	push	{r7}
  400ec6:	af00      	add	r7, sp, #0
	// Configura botao
	PMC->PMC_PCER0        = (1<<BUT_PIO_ID);     // Ativa clock do periférico no PMC
  400ec8:	4b10      	ldr	r3, [pc, #64]	; (400f0c <butconfig+0x48>)
  400eca:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400ece:	611a      	str	r2, [r3, #16]
	BUT_PIO->PIO_ODR	  = BUT_PIN_MASK;        // Desativa saída                   (Output DISABLE register)
  400ed0:	4b0f      	ldr	r3, [pc, #60]	; (400f10 <butconfig+0x4c>)
  400ed2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400ed6:	615a      	str	r2, [r3, #20]
	BUT_PIO->PIO_PER	  = BUT_PIN_MASK;        // Ativa controle do pino no PIO    (PIO ENABLE register)
  400ed8:	4b0d      	ldr	r3, [pc, #52]	; (400f10 <butconfig+0x4c>)
  400eda:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400ede:	601a      	str	r2, [r3, #0]
	BUT_PIO->PIO_PUER	  = BUT_PIN_MASK;        // Ativa pull-up no PIO             (PullUp ENABLE register)
  400ee0:	4b0b      	ldr	r3, [pc, #44]	; (400f10 <butconfig+0x4c>)
  400ee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400ee6:	665a      	str	r2, [r3, #100]	; 0x64
	BUT_PIO->PIO_IFER	  = BUT_PIN_MASK;        // Ativa debouncing
  400ee8:	4b09      	ldr	r3, [pc, #36]	; (400f10 <butconfig+0x4c>)
  400eea:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400eee:	621a      	str	r2, [r3, #32]
	BUT_PIO->PIO_IFSCER	  = BUT_PIN_MASK;        // Ativa clock periferico
  400ef0:	4b07      	ldr	r3, [pc, #28]	; (400f10 <butconfig+0x4c>)
  400ef2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	BUT_PIO->PIO_SCDR	  = BUT_DEBOUNCING_VALUE;// Configura a frequencia do debouncing
  400efa:	4b05      	ldr	r3, [pc, #20]	; (400f10 <butconfig+0x4c>)
  400efc:	224f      	movs	r2, #79	; 0x4f
  400efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
  400f02:	bf00      	nop
  400f04:	46bd      	mov	sp, r7
  400f06:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f0a:	4770      	bx	lr
  400f0c:	400e0600 	.word	0x400e0600
  400f10:	400e0e00 	.word	0x400e0e00

00400f14 <but1config>:
void but1config (void){
  400f14:	b480      	push	{r7}
  400f16:	af00      	add	r7, sp, #0
	// Configura botao1
	PMC->PMC_PCER0        = (1<<BUT1_PIO_ID);     // Ativa clock do periférico no PMC
  400f18:	4b10      	ldr	r3, [pc, #64]	; (400f5c <but1config+0x48>)
  400f1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400f1e:	611a      	str	r2, [r3, #16]
	BUT1_PIO->PIO_ODR	  = BUT1_PIN_MASK;        // Desativa saída                   (Output DISABLE register)
  400f20:	4b0f      	ldr	r3, [pc, #60]	; (400f60 <but1config+0x4c>)
  400f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f26:	615a      	str	r2, [r3, #20]
	BUT1_PIO->PIO_PER	  = BUT1_PIN_MASK;        // Ativa controle do pino no PIO    (PIO ENABLE register)
  400f28:	4b0d      	ldr	r3, [pc, #52]	; (400f60 <but1config+0x4c>)
  400f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f2e:	601a      	str	r2, [r3, #0]
	BUT1_PIO->PIO_PUER	  = BUT1_PIN_MASK;        // Ativa pull-up no PIO             (PullUp ENABLE register)
  400f30:	4b0b      	ldr	r3, [pc, #44]	; (400f60 <but1config+0x4c>)
  400f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f36:	665a      	str	r2, [r3, #100]	; 0x64
	BUT1_PIO->PIO_IFER	  = BUT1_PIN_MASK;        // Ativa debouncing
  400f38:	4b09      	ldr	r3, [pc, #36]	; (400f60 <but1config+0x4c>)
  400f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f3e:	621a      	str	r2, [r3, #32]
	BUT1_PIO->PIO_IFSCER  = BUT1_PIN_MASK;        // Ativa clock periferico
  400f40:	4b07      	ldr	r3, [pc, #28]	; (400f60 <but1config+0x4c>)
  400f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	BUT1_PIO->PIO_SCDR	  = BUT1_DEBOUNCING_VALUE;// Configura a frequencia do debouncing
  400f4a:	4b05      	ldr	r3, [pc, #20]	; (400f60 <but1config+0x4c>)
  400f4c:	224f      	movs	r2, #79	; 0x4f
  400f4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
  400f52:	bf00      	nop
  400f54:	46bd      	mov	sp, r7
  400f56:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f5a:	4770      	bx	lr
  400f5c:	400e0600 	.word	0x400e0600
  400f60:	400e1400 	.word	0x400e1400

00400f64 <but2config>:
void but2config (void){
  400f64:	b480      	push	{r7}
  400f66:	af00      	add	r7, sp, #0
	// Configura botao2
	PMC->PMC_PCER0        = (1<<BUT2_PIO_ID);     // Ativa clock do periférico no PMC
  400f68:	4b10      	ldr	r3, [pc, #64]	; (400fac <but2config+0x48>)
  400f6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400f6e:	611a      	str	r2, [r3, #16]
	BUT2_PIO->PIO_ODR	  = BUT2_PIN_MASK;        // Desativa saída                   (Output DISABLE register)
  400f70:	4b0f      	ldr	r3, [pc, #60]	; (400fb0 <but2config+0x4c>)
  400f72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400f76:	615a      	str	r2, [r3, #20]
	BUT2_PIO->PIO_PER	  = BUT2_PIN_MASK;        // Ativa controle do pino no PIO    (PIO ENABLE register)
  400f78:	4b0d      	ldr	r3, [pc, #52]	; (400fb0 <but2config+0x4c>)
  400f7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400f7e:	601a      	str	r2, [r3, #0]
	BUT2_PIO->PIO_PUER	  = BUT2_PIN_MASK;        // Ativa pull-up no PIO             (PullUp ENABLE register)
  400f80:	4b0b      	ldr	r3, [pc, #44]	; (400fb0 <but2config+0x4c>)
  400f82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400f86:	665a      	str	r2, [r3, #100]	; 0x64
	BUT2_PIO->PIO_IFER	  = BUT2_PIN_MASK;        // Ativa debouncing
  400f88:	4b09      	ldr	r3, [pc, #36]	; (400fb0 <but2config+0x4c>)
  400f8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400f8e:	621a      	str	r2, [r3, #32]
	BUT2_PIO->PIO_IFSCER  = BUT2_PIN_MASK;        // Ativa clock periferico
  400f90:	4b07      	ldr	r3, [pc, #28]	; (400fb0 <but2config+0x4c>)
  400f92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400f96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	BUT2_PIO->PIO_SCDR	  = BUT2_DEBOUNCING_VALUE;// Configura a frequencia do debouncing
  400f9a:	4b05      	ldr	r3, [pc, #20]	; (400fb0 <but2config+0x4c>)
  400f9c:	224f      	movs	r2, #79	; 0x4f
  400f9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
  400fa2:	bf00      	nop
  400fa4:	46bd      	mov	sp, r7
  400fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400faa:	4770      	bx	lr
  400fac:	400e0600 	.word	0x400e0600
  400fb0:	400e1200 	.word	0x400e1200

00400fb4 <but3config>:
void but3config (void){
  400fb4:	b480      	push	{r7}
  400fb6:	af00      	add	r7, sp, #0
	// Configura botao3
	PMC->PMC_PCER0        = (1<<BUT3_PIO_ID);     // Ativa clock do periférico no PMC
  400fb8:	4b10      	ldr	r3, [pc, #64]	; (400ffc <but3config+0x48>)
  400fba:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400fbe:	611a      	str	r2, [r3, #16]
	BUT3_PIO->PIO_ODR	  = BUT3_PIN_MASK;        // Desativa saída                   (Output DISABLE register)
  400fc0:	4b0f      	ldr	r3, [pc, #60]	; (401000 <but3config+0x4c>)
  400fc2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400fc6:	615a      	str	r2, [r3, #20]
	BUT3_PIO->PIO_PER	  = BUT3_PIN_MASK;        // Ativa controle do pino no PIO    (PIO ENABLE register)
  400fc8:	4b0d      	ldr	r3, [pc, #52]	; (401000 <but3config+0x4c>)
  400fca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400fce:	601a      	str	r2, [r3, #0]
	BUT3_PIO->PIO_PUER	  = BUT3_PIN_MASK;        // Ativa pull-up no PIO             (PullUp ENABLE register)
  400fd0:	4b0b      	ldr	r3, [pc, #44]	; (401000 <but3config+0x4c>)
  400fd2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400fd6:	665a      	str	r2, [r3, #100]	; 0x64
	BUT3_PIO->PIO_IFER	  = BUT3_PIN_MASK;        // Ativa debouncing
  400fd8:	4b09      	ldr	r3, [pc, #36]	; (401000 <but3config+0x4c>)
  400fda:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400fde:	621a      	str	r2, [r3, #32]
	BUT3_PIO->PIO_IFSCER  = BUT3_PIN_MASK;        // Ativa clock periferico
  400fe0:	4b07      	ldr	r3, [pc, #28]	; (401000 <but3config+0x4c>)
  400fe2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	BUT3_PIO->PIO_SCDR	  = BUT3_DEBOUNCING_VALUE;// Configura a frequencia do debouncing
  400fea:	4b05      	ldr	r3, [pc, #20]	; (401000 <but3config+0x4c>)
  400fec:	224f      	movs	r2, #79	; 0x4f
  400fee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
  400ff2:	bf00      	nop
  400ff4:	46bd      	mov	sp, r7
  400ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ffa:	4770      	bx	lr
  400ffc:	400e0600 	.word	0x400e0600
  401000:	400e0e00 	.word	0x400e0e00

00401004 <piscaLED_placa>:
	uint32_t atraso = 100;
	uint32_t atraso1 = 150;
	uint32_t atraso2 = 50;
	uint32_t atraso3 = 200;
void piscaLED_placa(){
  401004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401006:	af00      	add	r7, sp, #0
		pio_set(LED_PIO, LED_PIN_MASK);
  401008:	f44f 7180 	mov.w	r1, #256	; 0x100
  40100c:	4826      	ldr	r0, [pc, #152]	; (4010a8 <piscaLED_placa+0xa4>)
  40100e:	4b27      	ldr	r3, [pc, #156]	; (4010ac <piscaLED_placa+0xa8>)
  401010:	4798      	blx	r3
		delay_ms(atraso);
  401012:	4b27      	ldr	r3, [pc, #156]	; (4010b0 <piscaLED_placa+0xac>)
  401014:	681b      	ldr	r3, [r3, #0]
  401016:	2b00      	cmp	r3, #0
  401018:	d027      	beq.n	40106a <piscaLED_placa+0x66>
  40101a:	4b25      	ldr	r3, [pc, #148]	; (4010b0 <piscaLED_placa+0xac>)
  40101c:	681b      	ldr	r3, [r3, #0]
  40101e:	461d      	mov	r5, r3
  401020:	f04f 0600 	mov.w	r6, #0
  401024:	4b23      	ldr	r3, [pc, #140]	; (4010b4 <piscaLED_placa+0xb0>)
  401026:	4798      	blx	r3
  401028:	4603      	mov	r3, r0
  40102a:	f04f 0400 	mov.w	r4, #0
  40102e:	fb03 f106 	mul.w	r1, r3, r6
  401032:	fb05 f204 	mul.w	r2, r5, r4
  401036:	440a      	add	r2, r1
  401038:	fba5 3403 	umull	r3, r4, r5, r3
  40103c:	4422      	add	r2, r4
  40103e:	4614      	mov	r4, r2
  401040:	f241 712b 	movw	r1, #5931	; 0x172b
  401044:	f04f 0200 	mov.w	r2, #0
  401048:	185d      	adds	r5, r3, r1
  40104a:	eb44 0602 	adc.w	r6, r4, r2
  40104e:	4628      	mov	r0, r5
  401050:	4631      	mov	r1, r6
  401052:	4c19      	ldr	r4, [pc, #100]	; (4010b8 <piscaLED_placa+0xb4>)
  401054:	f241 722c 	movw	r2, #5932	; 0x172c
  401058:	f04f 0300 	mov.w	r3, #0
  40105c:	47a0      	blx	r4
  40105e:	4603      	mov	r3, r0
  401060:	460c      	mov	r4, r1
  401062:	4618      	mov	r0, r3
  401064:	4b15      	ldr	r3, [pc, #84]	; (4010bc <piscaLED_placa+0xb8>)
  401066:	4798      	blx	r3
  401068:	e016      	b.n	401098 <piscaLED_placa+0x94>
  40106a:	4b12      	ldr	r3, [pc, #72]	; (4010b4 <piscaLED_placa+0xb0>)
  40106c:	4798      	blx	r3
  40106e:	4603      	mov	r3, r0
  401070:	f04f 0400 	mov.w	r4, #0
  401074:	4912      	ldr	r1, [pc, #72]	; (4010c0 <piscaLED_placa+0xbc>)
  401076:	f04f 0200 	mov.w	r2, #0
  40107a:	185d      	adds	r5, r3, r1
  40107c:	eb44 0602 	adc.w	r6, r4, r2
  401080:	4628      	mov	r0, r5
  401082:	4631      	mov	r1, r6
  401084:	4c0c      	ldr	r4, [pc, #48]	; (4010b8 <piscaLED_placa+0xb4>)
  401086:	4a0f      	ldr	r2, [pc, #60]	; (4010c4 <piscaLED_placa+0xc0>)
  401088:	f04f 0300 	mov.w	r3, #0
  40108c:	47a0      	blx	r4
  40108e:	4603      	mov	r3, r0
  401090:	460c      	mov	r4, r1
  401092:	4618      	mov	r0, r3
  401094:	4b09      	ldr	r3, [pc, #36]	; (4010bc <piscaLED_placa+0xb8>)
  401096:	4798      	blx	r3
		pio_clear(LED_PIO, LED_PIN_MASK);
  401098:	f44f 7180 	mov.w	r1, #256	; 0x100
  40109c:	4802      	ldr	r0, [pc, #8]	; (4010a8 <piscaLED_placa+0xa4>)
  40109e:	4b0a      	ldr	r3, [pc, #40]	; (4010c8 <piscaLED_placa+0xc4>)
  4010a0:	4798      	blx	r3
}
  4010a2:	bf00      	nop
  4010a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4010a6:	bf00      	nop
  4010a8:	400e1200 	.word	0x400e1200
  4010ac:	00400519 	.word	0x00400519
  4010b0:	20400014 	.word	0x20400014
  4010b4:	00400d91 	.word	0x00400d91
  4010b8:	00401441 	.word	0x00401441
  4010bc:	20400001 	.word	0x20400001
  4010c0:	005a83df 	.word	0x005a83df
  4010c4:	005a83e0 	.word	0x005a83e0
  4010c8:	00400535 	.word	0x00400535

004010cc <piscaLED1>:
void piscaLED1(){
  4010cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4010ce:	af00      	add	r7, sp, #0
		pio_set(LED1_PIO, LED1_PIN_MASK);
  4010d0:	2101      	movs	r1, #1
  4010d2:	4826      	ldr	r0, [pc, #152]	; (40116c <piscaLED1+0xa0>)
  4010d4:	4b26      	ldr	r3, [pc, #152]	; (401170 <piscaLED1+0xa4>)
  4010d6:	4798      	blx	r3
		delay_ms(atraso1);
  4010d8:	4b26      	ldr	r3, [pc, #152]	; (401174 <piscaLED1+0xa8>)
  4010da:	681b      	ldr	r3, [r3, #0]
  4010dc:	2b00      	cmp	r3, #0
  4010de:	d027      	beq.n	401130 <piscaLED1+0x64>
  4010e0:	4b24      	ldr	r3, [pc, #144]	; (401174 <piscaLED1+0xa8>)
  4010e2:	681b      	ldr	r3, [r3, #0]
  4010e4:	461d      	mov	r5, r3
  4010e6:	f04f 0600 	mov.w	r6, #0
  4010ea:	4b23      	ldr	r3, [pc, #140]	; (401178 <piscaLED1+0xac>)
  4010ec:	4798      	blx	r3
  4010ee:	4603      	mov	r3, r0
  4010f0:	f04f 0400 	mov.w	r4, #0
  4010f4:	fb03 f106 	mul.w	r1, r3, r6
  4010f8:	fb05 f204 	mul.w	r2, r5, r4
  4010fc:	440a      	add	r2, r1
  4010fe:	fba5 3403 	umull	r3, r4, r5, r3
  401102:	4422      	add	r2, r4
  401104:	4614      	mov	r4, r2
  401106:	f241 712b 	movw	r1, #5931	; 0x172b
  40110a:	f04f 0200 	mov.w	r2, #0
  40110e:	185d      	adds	r5, r3, r1
  401110:	eb44 0602 	adc.w	r6, r4, r2
  401114:	4628      	mov	r0, r5
  401116:	4631      	mov	r1, r6
  401118:	4c18      	ldr	r4, [pc, #96]	; (40117c <piscaLED1+0xb0>)
  40111a:	f241 722c 	movw	r2, #5932	; 0x172c
  40111e:	f04f 0300 	mov.w	r3, #0
  401122:	47a0      	blx	r4
  401124:	4603      	mov	r3, r0
  401126:	460c      	mov	r4, r1
  401128:	4618      	mov	r0, r3
  40112a:	4b15      	ldr	r3, [pc, #84]	; (401180 <piscaLED1+0xb4>)
  40112c:	4798      	blx	r3
  40112e:	e016      	b.n	40115e <piscaLED1+0x92>
  401130:	4b11      	ldr	r3, [pc, #68]	; (401178 <piscaLED1+0xac>)
  401132:	4798      	blx	r3
  401134:	4603      	mov	r3, r0
  401136:	f04f 0400 	mov.w	r4, #0
  40113a:	4912      	ldr	r1, [pc, #72]	; (401184 <piscaLED1+0xb8>)
  40113c:	f04f 0200 	mov.w	r2, #0
  401140:	185d      	adds	r5, r3, r1
  401142:	eb44 0602 	adc.w	r6, r4, r2
  401146:	4628      	mov	r0, r5
  401148:	4631      	mov	r1, r6
  40114a:	4c0c      	ldr	r4, [pc, #48]	; (40117c <piscaLED1+0xb0>)
  40114c:	4a0e      	ldr	r2, [pc, #56]	; (401188 <piscaLED1+0xbc>)
  40114e:	f04f 0300 	mov.w	r3, #0
  401152:	47a0      	blx	r4
  401154:	4603      	mov	r3, r0
  401156:	460c      	mov	r4, r1
  401158:	4618      	mov	r0, r3
  40115a:	4b09      	ldr	r3, [pc, #36]	; (401180 <piscaLED1+0xb4>)
  40115c:	4798      	blx	r3
		pio_clear(LED1_PIO, LED1_PIN_MASK);
  40115e:	2101      	movs	r1, #1
  401160:	4802      	ldr	r0, [pc, #8]	; (40116c <piscaLED1+0xa0>)
  401162:	4b0a      	ldr	r3, [pc, #40]	; (40118c <piscaLED1+0xc0>)
  401164:	4798      	blx	r3
}
  401166:	bf00      	nop
  401168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40116a:	bf00      	nop
  40116c:	400e0e00 	.word	0x400e0e00
  401170:	00400519 	.word	0x00400519
  401174:	20400018 	.word	0x20400018
  401178:	00400d91 	.word	0x00400d91
  40117c:	00401441 	.word	0x00401441
  401180:	20400001 	.word	0x20400001
  401184:	005a83df 	.word	0x005a83df
  401188:	005a83e0 	.word	0x005a83e0
  40118c:	00400535 	.word	0x00400535

00401190 <piscaLED2>:

void piscaLED2(){
  401190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401192:	af00      	add	r7, sp, #0
		pio_set(LED2_PIO, LED2_PIN_MASK);
  401194:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401198:	4826      	ldr	r0, [pc, #152]	; (401234 <piscaLED2+0xa4>)
  40119a:	4b27      	ldr	r3, [pc, #156]	; (401238 <piscaLED2+0xa8>)
  40119c:	4798      	blx	r3
		delay_ms(atraso2);
  40119e:	4b27      	ldr	r3, [pc, #156]	; (40123c <piscaLED2+0xac>)
  4011a0:	681b      	ldr	r3, [r3, #0]
  4011a2:	2b00      	cmp	r3, #0
  4011a4:	d027      	beq.n	4011f6 <piscaLED2+0x66>
  4011a6:	4b25      	ldr	r3, [pc, #148]	; (40123c <piscaLED2+0xac>)
  4011a8:	681b      	ldr	r3, [r3, #0]
  4011aa:	461d      	mov	r5, r3
  4011ac:	f04f 0600 	mov.w	r6, #0
  4011b0:	4b23      	ldr	r3, [pc, #140]	; (401240 <piscaLED2+0xb0>)
  4011b2:	4798      	blx	r3
  4011b4:	4603      	mov	r3, r0
  4011b6:	f04f 0400 	mov.w	r4, #0
  4011ba:	fb03 f106 	mul.w	r1, r3, r6
  4011be:	fb05 f204 	mul.w	r2, r5, r4
  4011c2:	440a      	add	r2, r1
  4011c4:	fba5 3403 	umull	r3, r4, r5, r3
  4011c8:	4422      	add	r2, r4
  4011ca:	4614      	mov	r4, r2
  4011cc:	f241 712b 	movw	r1, #5931	; 0x172b
  4011d0:	f04f 0200 	mov.w	r2, #0
  4011d4:	185d      	adds	r5, r3, r1
  4011d6:	eb44 0602 	adc.w	r6, r4, r2
  4011da:	4628      	mov	r0, r5
  4011dc:	4631      	mov	r1, r6
  4011de:	4c19      	ldr	r4, [pc, #100]	; (401244 <piscaLED2+0xb4>)
  4011e0:	f241 722c 	movw	r2, #5932	; 0x172c
  4011e4:	f04f 0300 	mov.w	r3, #0
  4011e8:	47a0      	blx	r4
  4011ea:	4603      	mov	r3, r0
  4011ec:	460c      	mov	r4, r1
  4011ee:	4618      	mov	r0, r3
  4011f0:	4b15      	ldr	r3, [pc, #84]	; (401248 <piscaLED2+0xb8>)
  4011f2:	4798      	blx	r3
  4011f4:	e016      	b.n	401224 <piscaLED2+0x94>
  4011f6:	4b12      	ldr	r3, [pc, #72]	; (401240 <piscaLED2+0xb0>)
  4011f8:	4798      	blx	r3
  4011fa:	4603      	mov	r3, r0
  4011fc:	f04f 0400 	mov.w	r4, #0
  401200:	4912      	ldr	r1, [pc, #72]	; (40124c <piscaLED2+0xbc>)
  401202:	f04f 0200 	mov.w	r2, #0
  401206:	185d      	adds	r5, r3, r1
  401208:	eb44 0602 	adc.w	r6, r4, r2
  40120c:	4628      	mov	r0, r5
  40120e:	4631      	mov	r1, r6
  401210:	4c0c      	ldr	r4, [pc, #48]	; (401244 <piscaLED2+0xb4>)
  401212:	4a0f      	ldr	r2, [pc, #60]	; (401250 <piscaLED2+0xc0>)
  401214:	f04f 0300 	mov.w	r3, #0
  401218:	47a0      	blx	r4
  40121a:	4603      	mov	r3, r0
  40121c:	460c      	mov	r4, r1
  40121e:	4618      	mov	r0, r3
  401220:	4b09      	ldr	r3, [pc, #36]	; (401248 <piscaLED2+0xb8>)
  401222:	4798      	blx	r3
		pio_clear(LED2_PIO, LED2_PIN_MASK);
  401224:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401228:	4802      	ldr	r0, [pc, #8]	; (401234 <piscaLED2+0xa4>)
  40122a:	4b0a      	ldr	r3, [pc, #40]	; (401254 <piscaLED2+0xc4>)
  40122c:	4798      	blx	r3
}
  40122e:	bf00      	nop
  401230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401232:	bf00      	nop
  401234:	400e1200 	.word	0x400e1200
  401238:	00400519 	.word	0x00400519
  40123c:	2040001c 	.word	0x2040001c
  401240:	00400d91 	.word	0x00400d91
  401244:	00401441 	.word	0x00401441
  401248:	20400001 	.word	0x20400001
  40124c:	005a83df 	.word	0x005a83df
  401250:	005a83e0 	.word	0x005a83e0
  401254:	00400535 	.word	0x00400535

00401258 <piscaLED3>:
void piscaLED3(){
  401258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40125a:	af00      	add	r7, sp, #0
		pio_set(LED3_PIO, LED3_PIN_MASK);
  40125c:	2104      	movs	r1, #4
  40125e:	4826      	ldr	r0, [pc, #152]	; (4012f8 <piscaLED3+0xa0>)
  401260:	4b26      	ldr	r3, [pc, #152]	; (4012fc <piscaLED3+0xa4>)
  401262:	4798      	blx	r3
		delay_ms(atraso3);
  401264:	4b26      	ldr	r3, [pc, #152]	; (401300 <piscaLED3+0xa8>)
  401266:	681b      	ldr	r3, [r3, #0]
  401268:	2b00      	cmp	r3, #0
  40126a:	d027      	beq.n	4012bc <piscaLED3+0x64>
  40126c:	4b24      	ldr	r3, [pc, #144]	; (401300 <piscaLED3+0xa8>)
  40126e:	681b      	ldr	r3, [r3, #0]
  401270:	461d      	mov	r5, r3
  401272:	f04f 0600 	mov.w	r6, #0
  401276:	4b23      	ldr	r3, [pc, #140]	; (401304 <piscaLED3+0xac>)
  401278:	4798      	blx	r3
  40127a:	4603      	mov	r3, r0
  40127c:	f04f 0400 	mov.w	r4, #0
  401280:	fb03 f106 	mul.w	r1, r3, r6
  401284:	fb05 f204 	mul.w	r2, r5, r4
  401288:	440a      	add	r2, r1
  40128a:	fba5 3403 	umull	r3, r4, r5, r3
  40128e:	4422      	add	r2, r4
  401290:	4614      	mov	r4, r2
  401292:	f241 712b 	movw	r1, #5931	; 0x172b
  401296:	f04f 0200 	mov.w	r2, #0
  40129a:	185d      	adds	r5, r3, r1
  40129c:	eb44 0602 	adc.w	r6, r4, r2
  4012a0:	4628      	mov	r0, r5
  4012a2:	4631      	mov	r1, r6
  4012a4:	4c18      	ldr	r4, [pc, #96]	; (401308 <piscaLED3+0xb0>)
  4012a6:	f241 722c 	movw	r2, #5932	; 0x172c
  4012aa:	f04f 0300 	mov.w	r3, #0
  4012ae:	47a0      	blx	r4
  4012b0:	4603      	mov	r3, r0
  4012b2:	460c      	mov	r4, r1
  4012b4:	4618      	mov	r0, r3
  4012b6:	4b15      	ldr	r3, [pc, #84]	; (40130c <piscaLED3+0xb4>)
  4012b8:	4798      	blx	r3
  4012ba:	e016      	b.n	4012ea <piscaLED3+0x92>
  4012bc:	4b11      	ldr	r3, [pc, #68]	; (401304 <piscaLED3+0xac>)
  4012be:	4798      	blx	r3
  4012c0:	4603      	mov	r3, r0
  4012c2:	f04f 0400 	mov.w	r4, #0
  4012c6:	4912      	ldr	r1, [pc, #72]	; (401310 <piscaLED3+0xb8>)
  4012c8:	f04f 0200 	mov.w	r2, #0
  4012cc:	185d      	adds	r5, r3, r1
  4012ce:	eb44 0602 	adc.w	r6, r4, r2
  4012d2:	4628      	mov	r0, r5
  4012d4:	4631      	mov	r1, r6
  4012d6:	4c0c      	ldr	r4, [pc, #48]	; (401308 <piscaLED3+0xb0>)
  4012d8:	4a0e      	ldr	r2, [pc, #56]	; (401314 <piscaLED3+0xbc>)
  4012da:	f04f 0300 	mov.w	r3, #0
  4012de:	47a0      	blx	r4
  4012e0:	4603      	mov	r3, r0
  4012e2:	460c      	mov	r4, r1
  4012e4:	4618      	mov	r0, r3
  4012e6:	4b09      	ldr	r3, [pc, #36]	; (40130c <piscaLED3+0xb4>)
  4012e8:	4798      	blx	r3
		pio_clear(LED3_PIO, LED3_PIN_MASK);
  4012ea:	2104      	movs	r1, #4
  4012ec:	4802      	ldr	r0, [pc, #8]	; (4012f8 <piscaLED3+0xa0>)
  4012ee:	4b0a      	ldr	r3, [pc, #40]	; (401318 <piscaLED3+0xc0>)
  4012f0:	4798      	blx	r3

}
  4012f2:	bf00      	nop
  4012f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4012f6:	bf00      	nop
  4012f8:	400e1000 	.word	0x400e1000
  4012fc:	00400519 	.word	0x00400519
  401300:	20400020 	.word	0x20400020
  401304:	00400d91 	.word	0x00400d91
  401308:	00401441 	.word	0x00401441
  40130c:	20400001 	.word	0x20400001
  401310:	005a83df 	.word	0x005a83df
  401314:	005a83e0 	.word	0x005a83e0
  401318:	00400535 	.word	0x00400535

0040131c <main>:

/************************************************************************/
/* Main                                                                 */
/************************************************************************/
int main(void)
{
  40131c:	b580      	push	{r7, lr}
  40131e:	b084      	sub	sp, #16
  401320:	af00      	add	r7, sp, #0

	/************************************************************************/
	/* Inicialização básica do uC                                           */
	/************************************************************************/
	sysclk_init();
  401322:	4b35      	ldr	r3, [pc, #212]	; (4013f8 <main+0xdc>)
  401324:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;
  401326:	4b35      	ldr	r3, [pc, #212]	; (4013fc <main+0xe0>)
  401328:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40132c:	605a      	str	r2, [r3, #4]

	/************************************************************************/
	/* Inicializa perifericos                                               */
	/************************************************************************/
	// Configura LED em modo saída
	ledConfig(1);//iniciar led no estado 0, desligado.
  40132e:	2001      	movs	r0, #1
  401330:	4b33      	ldr	r3, [pc, #204]	; (401400 <main+0xe4>)
  401332:	4798      	blx	r3
	led1Config(1);
  401334:	2001      	movs	r0, #1
  401336:	4b33      	ldr	r3, [pc, #204]	; (401404 <main+0xe8>)
  401338:	4798      	blx	r3
	led2Config(1);
  40133a:	2001      	movs	r0, #1
  40133c:	4b32      	ldr	r3, [pc, #200]	; (401408 <main+0xec>)
  40133e:	4798      	blx	r3
	led3Config(1);
  401340:	2001      	movs	r0, #1
  401342:	4b32      	ldr	r3, [pc, #200]	; (40140c <main+0xf0>)
  401344:	4798      	blx	r3
   //Inicializa Botões
	butconfig();//placa
  401346:	4b32      	ldr	r3, [pc, #200]	; (401410 <main+0xf4>)
  401348:	4798      	blx	r3
	but1config();//OLED1
  40134a:	4b32      	ldr	r3, [pc, #200]	; (401414 <main+0xf8>)
  40134c:	4798      	blx	r3
	but2config();//OLED1
  40134e:	4b32      	ldr	r3, [pc, #200]	; (401418 <main+0xfc>)
  401350:	4798      	blx	r3
	but3config();//OLED1
  401352:	4b32      	ldr	r3, [pc, #200]	; (40141c <main+0x100>)
  401354:	4798      	blx	r3
		/**
		 * @Brief Verifica constantemente o status do botão
		 * 1 : não apertado
		 * 0 : apertado
		 */
		uint32_t botaoapertado =  !pio_get(BUT_PIO, PIO_INPUT, BUT_PIN_MASK);//BUT_PIO->PIO_PDSR & (BUT_PIN_MASK);
  401356:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40135a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40135e:	4830      	ldr	r0, [pc, #192]	; (401420 <main+0x104>)
  401360:	4b30      	ldr	r3, [pc, #192]	; (401424 <main+0x108>)
  401362:	4798      	blx	r3
  401364:	4603      	mov	r3, r0
  401366:	2b00      	cmp	r3, #0
  401368:	bf0c      	ite	eq
  40136a:	2301      	moveq	r3, #1
  40136c:	2300      	movne	r3, #0
  40136e:	b2db      	uxtb	r3, r3
  401370:	60fb      	str	r3, [r7, #12]
		uint32_t botao1apertado = !pio_get(BUT1_PIO, PIO_INPUT, BUT1_PIN_MASK);
  401372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401376:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40137a:	482b      	ldr	r0, [pc, #172]	; (401428 <main+0x10c>)
  40137c:	4b29      	ldr	r3, [pc, #164]	; (401424 <main+0x108>)
  40137e:	4798      	blx	r3
  401380:	4603      	mov	r3, r0
  401382:	2b00      	cmp	r3, #0
  401384:	bf0c      	ite	eq
  401386:	2301      	moveq	r3, #1
  401388:	2300      	movne	r3, #0
  40138a:	b2db      	uxtb	r3, r3
  40138c:	60bb      	str	r3, [r7, #8]
		uint32_t botao2apertado = !pio_get(BUT2_PIO, PIO_INPUT, BUT2_PIN_MASK);
  40138e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401392:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401396:	4825      	ldr	r0, [pc, #148]	; (40142c <main+0x110>)
  401398:	4b22      	ldr	r3, [pc, #136]	; (401424 <main+0x108>)
  40139a:	4798      	blx	r3
  40139c:	4603      	mov	r3, r0
  40139e:	2b00      	cmp	r3, #0
  4013a0:	bf0c      	ite	eq
  4013a2:	2301      	moveq	r3, #1
  4013a4:	2300      	movne	r3, #0
  4013a6:	b2db      	uxtb	r3, r3
  4013a8:	607b      	str	r3, [r7, #4]
		uint32_t botao3apertado = !pio_get(BUT3_PIO, PIO_INPUT, BUT3_PIN_MASK);
  4013aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4013ae:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4013b2:	481b      	ldr	r0, [pc, #108]	; (401420 <main+0x104>)
  4013b4:	4b1b      	ldr	r3, [pc, #108]	; (401424 <main+0x108>)
  4013b6:	4798      	blx	r3
  4013b8:	4603      	mov	r3, r0
  4013ba:	2b00      	cmp	r3, #0
  4013bc:	bf0c      	ite	eq
  4013be:	2301      	moveq	r3, #1
  4013c0:	2300      	movne	r3, #0
  4013c2:	b2db      	uxtb	r3, r3
  4013c4:	603b      	str	r3, [r7, #0]

    
		if(botaoapertado){
  4013c6:	68fb      	ldr	r3, [r7, #12]
  4013c8:	2b00      	cmp	r3, #0
  4013ca:	d002      	beq.n	4013d2 <main+0xb6>
			piscaLED_placa();
  4013cc:	4b18      	ldr	r3, [pc, #96]	; (401430 <main+0x114>)
  4013ce:	4798      	blx	r3
  4013d0:	e7c1      	b.n	401356 <main+0x3a>
				//LED_PIO->PIO_CODR = LED_PIN_MASK;//clear do pino ligado no led(por acaso é um led)
				}
		else if(botao1apertado){
  4013d2:	68bb      	ldr	r3, [r7, #8]
  4013d4:	2b00      	cmp	r3, #0
  4013d6:	d002      	beq.n	4013de <main+0xc2>
			piscaLED1();
  4013d8:	4b16      	ldr	r3, [pc, #88]	; (401434 <main+0x118>)
  4013da:	4798      	blx	r3
  4013dc:	e7bb      	b.n	401356 <main+0x3a>
			}
		else if(botao2apertado){
  4013de:	687b      	ldr	r3, [r7, #4]
  4013e0:	2b00      	cmp	r3, #0
  4013e2:	d002      	beq.n	4013ea <main+0xce>
			piscaLED2();
  4013e4:	4b14      	ldr	r3, [pc, #80]	; (401438 <main+0x11c>)
  4013e6:	4798      	blx	r3
  4013e8:	e7b5      	b.n	401356 <main+0x3a>
			}
		else if(botao3apertado){
  4013ea:	683b      	ldr	r3, [r7, #0]
  4013ec:	2b00      	cmp	r3, #0
  4013ee:	d0b2      	beq.n	401356 <main+0x3a>
			piscaLED3();
  4013f0:	4b12      	ldr	r3, [pc, #72]	; (40143c <main+0x120>)
  4013f2:	4798      	blx	r3
			}
	};
  4013f4:	e7af      	b.n	401356 <main+0x3a>
  4013f6:	bf00      	nop
  4013f8:	0040049d 	.word	0x0040049d
  4013fc:	400e1850 	.word	0x400e1850
  401400:	00400da5 	.word	0x00400da5
  401404:	00400df1 	.word	0x00400df1
  401408:	00400e35 	.word	0x00400e35
  40140c:	00400e81 	.word	0x00400e81
  401410:	00400ec5 	.word	0x00400ec5
  401414:	00400f15 	.word	0x00400f15
  401418:	00400f65 	.word	0x00400f65
  40141c:	00400fb5 	.word	0x00400fb5
  401420:	400e0e00 	.word	0x400e0e00
  401424:	00400551 	.word	0x00400551
  401428:	400e1400 	.word	0x400e1400
  40142c:	400e1200 	.word	0x400e1200
  401430:	00401005 	.word	0x00401005
  401434:	004010cd 	.word	0x004010cd
  401438:	00401191 	.word	0x00401191
  40143c:	00401259 	.word	0x00401259

00401440 <__aeabi_uldivmod>:
  401440:	b953      	cbnz	r3, 401458 <__aeabi_uldivmod+0x18>
  401442:	b94a      	cbnz	r2, 401458 <__aeabi_uldivmod+0x18>
  401444:	2900      	cmp	r1, #0
  401446:	bf08      	it	eq
  401448:	2800      	cmpeq	r0, #0
  40144a:	bf1c      	itt	ne
  40144c:	f04f 31ff 	movne.w	r1, #4294967295
  401450:	f04f 30ff 	movne.w	r0, #4294967295
  401454:	f000 b97e 	b.w	401754 <__aeabi_idiv0>
  401458:	f1ad 0c08 	sub.w	ip, sp, #8
  40145c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401460:	f000 f806 	bl	401470 <__udivmoddi4>
  401464:	f8dd e004 	ldr.w	lr, [sp, #4]
  401468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40146c:	b004      	add	sp, #16
  40146e:	4770      	bx	lr

00401470 <__udivmoddi4>:
  401470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401474:	468c      	mov	ip, r1
  401476:	460e      	mov	r6, r1
  401478:	4604      	mov	r4, r0
  40147a:	9d08      	ldr	r5, [sp, #32]
  40147c:	2b00      	cmp	r3, #0
  40147e:	d150      	bne.n	401522 <__udivmoddi4+0xb2>
  401480:	428a      	cmp	r2, r1
  401482:	4617      	mov	r7, r2
  401484:	d96c      	bls.n	401560 <__udivmoddi4+0xf0>
  401486:	fab2 fe82 	clz	lr, r2
  40148a:	f1be 0f00 	cmp.w	lr, #0
  40148e:	d00b      	beq.n	4014a8 <__udivmoddi4+0x38>
  401490:	f1ce 0420 	rsb	r4, lr, #32
  401494:	fa20 f404 	lsr.w	r4, r0, r4
  401498:	fa01 f60e 	lsl.w	r6, r1, lr
  40149c:	ea44 0c06 	orr.w	ip, r4, r6
  4014a0:	fa02 f70e 	lsl.w	r7, r2, lr
  4014a4:	fa00 f40e 	lsl.w	r4, r0, lr
  4014a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
  4014ac:	0c22      	lsrs	r2, r4, #16
  4014ae:	fbbc f0f9 	udiv	r0, ip, r9
  4014b2:	fa1f f887 	uxth.w	r8, r7
  4014b6:	fb09 c610 	mls	r6, r9, r0, ip
  4014ba:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4014be:	fb00 f308 	mul.w	r3, r0, r8
  4014c2:	42b3      	cmp	r3, r6
  4014c4:	d909      	bls.n	4014da <__udivmoddi4+0x6a>
  4014c6:	19f6      	adds	r6, r6, r7
  4014c8:	f100 32ff 	add.w	r2, r0, #4294967295
  4014cc:	f080 8122 	bcs.w	401714 <__udivmoddi4+0x2a4>
  4014d0:	42b3      	cmp	r3, r6
  4014d2:	f240 811f 	bls.w	401714 <__udivmoddi4+0x2a4>
  4014d6:	3802      	subs	r0, #2
  4014d8:	443e      	add	r6, r7
  4014da:	1af6      	subs	r6, r6, r3
  4014dc:	b2a2      	uxth	r2, r4
  4014de:	fbb6 f3f9 	udiv	r3, r6, r9
  4014e2:	fb09 6613 	mls	r6, r9, r3, r6
  4014e6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4014ea:	fb03 f808 	mul.w	r8, r3, r8
  4014ee:	45a0      	cmp	r8, r4
  4014f0:	d909      	bls.n	401506 <__udivmoddi4+0x96>
  4014f2:	19e4      	adds	r4, r4, r7
  4014f4:	f103 32ff 	add.w	r2, r3, #4294967295
  4014f8:	f080 810a 	bcs.w	401710 <__udivmoddi4+0x2a0>
  4014fc:	45a0      	cmp	r8, r4
  4014fe:	f240 8107 	bls.w	401710 <__udivmoddi4+0x2a0>
  401502:	3b02      	subs	r3, #2
  401504:	443c      	add	r4, r7
  401506:	ebc8 0404 	rsb	r4, r8, r4
  40150a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40150e:	2100      	movs	r1, #0
  401510:	2d00      	cmp	r5, #0
  401512:	d062      	beq.n	4015da <__udivmoddi4+0x16a>
  401514:	fa24 f40e 	lsr.w	r4, r4, lr
  401518:	2300      	movs	r3, #0
  40151a:	602c      	str	r4, [r5, #0]
  40151c:	606b      	str	r3, [r5, #4]
  40151e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401522:	428b      	cmp	r3, r1
  401524:	d907      	bls.n	401536 <__udivmoddi4+0xc6>
  401526:	2d00      	cmp	r5, #0
  401528:	d055      	beq.n	4015d6 <__udivmoddi4+0x166>
  40152a:	2100      	movs	r1, #0
  40152c:	e885 0041 	stmia.w	r5, {r0, r6}
  401530:	4608      	mov	r0, r1
  401532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401536:	fab3 f183 	clz	r1, r3
  40153a:	2900      	cmp	r1, #0
  40153c:	f040 8090 	bne.w	401660 <__udivmoddi4+0x1f0>
  401540:	42b3      	cmp	r3, r6
  401542:	d302      	bcc.n	40154a <__udivmoddi4+0xda>
  401544:	4282      	cmp	r2, r0
  401546:	f200 80f8 	bhi.w	40173a <__udivmoddi4+0x2ca>
  40154a:	1a84      	subs	r4, r0, r2
  40154c:	eb66 0603 	sbc.w	r6, r6, r3
  401550:	2001      	movs	r0, #1
  401552:	46b4      	mov	ip, r6
  401554:	2d00      	cmp	r5, #0
  401556:	d040      	beq.n	4015da <__udivmoddi4+0x16a>
  401558:	e885 1010 	stmia.w	r5, {r4, ip}
  40155c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401560:	b912      	cbnz	r2, 401568 <__udivmoddi4+0xf8>
  401562:	2701      	movs	r7, #1
  401564:	fbb7 f7f2 	udiv	r7, r7, r2
  401568:	fab7 fe87 	clz	lr, r7
  40156c:	f1be 0f00 	cmp.w	lr, #0
  401570:	d135      	bne.n	4015de <__udivmoddi4+0x16e>
  401572:	1bf3      	subs	r3, r6, r7
  401574:	ea4f 4817 	mov.w	r8, r7, lsr #16
  401578:	fa1f fc87 	uxth.w	ip, r7
  40157c:	2101      	movs	r1, #1
  40157e:	fbb3 f0f8 	udiv	r0, r3, r8
  401582:	0c22      	lsrs	r2, r4, #16
  401584:	fb08 3610 	mls	r6, r8, r0, r3
  401588:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40158c:	fb0c f300 	mul.w	r3, ip, r0
  401590:	42b3      	cmp	r3, r6
  401592:	d907      	bls.n	4015a4 <__udivmoddi4+0x134>
  401594:	19f6      	adds	r6, r6, r7
  401596:	f100 32ff 	add.w	r2, r0, #4294967295
  40159a:	d202      	bcs.n	4015a2 <__udivmoddi4+0x132>
  40159c:	42b3      	cmp	r3, r6
  40159e:	f200 80ce 	bhi.w	40173e <__udivmoddi4+0x2ce>
  4015a2:	4610      	mov	r0, r2
  4015a4:	1af6      	subs	r6, r6, r3
  4015a6:	b2a2      	uxth	r2, r4
  4015a8:	fbb6 f3f8 	udiv	r3, r6, r8
  4015ac:	fb08 6613 	mls	r6, r8, r3, r6
  4015b0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4015b4:	fb0c fc03 	mul.w	ip, ip, r3
  4015b8:	45a4      	cmp	ip, r4
  4015ba:	d907      	bls.n	4015cc <__udivmoddi4+0x15c>
  4015bc:	19e4      	adds	r4, r4, r7
  4015be:	f103 32ff 	add.w	r2, r3, #4294967295
  4015c2:	d202      	bcs.n	4015ca <__udivmoddi4+0x15a>
  4015c4:	45a4      	cmp	ip, r4
  4015c6:	f200 80b5 	bhi.w	401734 <__udivmoddi4+0x2c4>
  4015ca:	4613      	mov	r3, r2
  4015cc:	ebcc 0404 	rsb	r4, ip, r4
  4015d0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4015d4:	e79c      	b.n	401510 <__udivmoddi4+0xa0>
  4015d6:	4629      	mov	r1, r5
  4015d8:	4628      	mov	r0, r5
  4015da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4015de:	f1ce 0120 	rsb	r1, lr, #32
  4015e2:	fa06 f30e 	lsl.w	r3, r6, lr
  4015e6:	fa07 f70e 	lsl.w	r7, r7, lr
  4015ea:	fa20 f901 	lsr.w	r9, r0, r1
  4015ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
  4015f2:	40ce      	lsrs	r6, r1
  4015f4:	ea49 0903 	orr.w	r9, r9, r3
  4015f8:	fbb6 faf8 	udiv	sl, r6, r8
  4015fc:	ea4f 4419 	mov.w	r4, r9, lsr #16
  401600:	fb08 661a 	mls	r6, r8, sl, r6
  401604:	fa1f fc87 	uxth.w	ip, r7
  401608:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  40160c:	fb0a f20c 	mul.w	r2, sl, ip
  401610:	429a      	cmp	r2, r3
  401612:	fa00 f40e 	lsl.w	r4, r0, lr
  401616:	d90a      	bls.n	40162e <__udivmoddi4+0x1be>
  401618:	19db      	adds	r3, r3, r7
  40161a:	f10a 31ff 	add.w	r1, sl, #4294967295
  40161e:	f080 8087 	bcs.w	401730 <__udivmoddi4+0x2c0>
  401622:	429a      	cmp	r2, r3
  401624:	f240 8084 	bls.w	401730 <__udivmoddi4+0x2c0>
  401628:	f1aa 0a02 	sub.w	sl, sl, #2
  40162c:	443b      	add	r3, r7
  40162e:	1a9b      	subs	r3, r3, r2
  401630:	fa1f f989 	uxth.w	r9, r9
  401634:	fbb3 f1f8 	udiv	r1, r3, r8
  401638:	fb08 3311 	mls	r3, r8, r1, r3
  40163c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  401640:	fb01 f60c 	mul.w	r6, r1, ip
  401644:	429e      	cmp	r6, r3
  401646:	d907      	bls.n	401658 <__udivmoddi4+0x1e8>
  401648:	19db      	adds	r3, r3, r7
  40164a:	f101 32ff 	add.w	r2, r1, #4294967295
  40164e:	d26b      	bcs.n	401728 <__udivmoddi4+0x2b8>
  401650:	429e      	cmp	r6, r3
  401652:	d969      	bls.n	401728 <__udivmoddi4+0x2b8>
  401654:	3902      	subs	r1, #2
  401656:	443b      	add	r3, r7
  401658:	1b9b      	subs	r3, r3, r6
  40165a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  40165e:	e78e      	b.n	40157e <__udivmoddi4+0x10e>
  401660:	f1c1 0e20 	rsb	lr, r1, #32
  401664:	fa22 f40e 	lsr.w	r4, r2, lr
  401668:	408b      	lsls	r3, r1
  40166a:	4323      	orrs	r3, r4
  40166c:	fa20 f70e 	lsr.w	r7, r0, lr
  401670:	fa06 f401 	lsl.w	r4, r6, r1
  401674:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401678:	fa26 f60e 	lsr.w	r6, r6, lr
  40167c:	433c      	orrs	r4, r7
  40167e:	fbb6 f9fc 	udiv	r9, r6, ip
  401682:	0c27      	lsrs	r7, r4, #16
  401684:	fb0c 6619 	mls	r6, ip, r9, r6
  401688:	fa1f f883 	uxth.w	r8, r3
  40168c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  401690:	fb09 f708 	mul.w	r7, r9, r8
  401694:	42b7      	cmp	r7, r6
  401696:	fa02 f201 	lsl.w	r2, r2, r1
  40169a:	fa00 fa01 	lsl.w	sl, r0, r1
  40169e:	d908      	bls.n	4016b2 <__udivmoddi4+0x242>
  4016a0:	18f6      	adds	r6, r6, r3
  4016a2:	f109 30ff 	add.w	r0, r9, #4294967295
  4016a6:	d241      	bcs.n	40172c <__udivmoddi4+0x2bc>
  4016a8:	42b7      	cmp	r7, r6
  4016aa:	d93f      	bls.n	40172c <__udivmoddi4+0x2bc>
  4016ac:	f1a9 0902 	sub.w	r9, r9, #2
  4016b0:	441e      	add	r6, r3
  4016b2:	1bf6      	subs	r6, r6, r7
  4016b4:	b2a0      	uxth	r0, r4
  4016b6:	fbb6 f4fc 	udiv	r4, r6, ip
  4016ba:	fb0c 6614 	mls	r6, ip, r4, r6
  4016be:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  4016c2:	fb04 f808 	mul.w	r8, r4, r8
  4016c6:	45b8      	cmp	r8, r7
  4016c8:	d907      	bls.n	4016da <__udivmoddi4+0x26a>
  4016ca:	18ff      	adds	r7, r7, r3
  4016cc:	f104 30ff 	add.w	r0, r4, #4294967295
  4016d0:	d228      	bcs.n	401724 <__udivmoddi4+0x2b4>
  4016d2:	45b8      	cmp	r8, r7
  4016d4:	d926      	bls.n	401724 <__udivmoddi4+0x2b4>
  4016d6:	3c02      	subs	r4, #2
  4016d8:	441f      	add	r7, r3
  4016da:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  4016de:	ebc8 0707 	rsb	r7, r8, r7
  4016e2:	fba0 8902 	umull	r8, r9, r0, r2
  4016e6:	454f      	cmp	r7, r9
  4016e8:	4644      	mov	r4, r8
  4016ea:	464e      	mov	r6, r9
  4016ec:	d314      	bcc.n	401718 <__udivmoddi4+0x2a8>
  4016ee:	d029      	beq.n	401744 <__udivmoddi4+0x2d4>
  4016f0:	b365      	cbz	r5, 40174c <__udivmoddi4+0x2dc>
  4016f2:	ebba 0304 	subs.w	r3, sl, r4
  4016f6:	eb67 0706 	sbc.w	r7, r7, r6
  4016fa:	fa07 fe0e 	lsl.w	lr, r7, lr
  4016fe:	40cb      	lsrs	r3, r1
  401700:	40cf      	lsrs	r7, r1
  401702:	ea4e 0303 	orr.w	r3, lr, r3
  401706:	e885 0088 	stmia.w	r5, {r3, r7}
  40170a:	2100      	movs	r1, #0
  40170c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401710:	4613      	mov	r3, r2
  401712:	e6f8      	b.n	401506 <__udivmoddi4+0x96>
  401714:	4610      	mov	r0, r2
  401716:	e6e0      	b.n	4014da <__udivmoddi4+0x6a>
  401718:	ebb8 0402 	subs.w	r4, r8, r2
  40171c:	eb69 0603 	sbc.w	r6, r9, r3
  401720:	3801      	subs	r0, #1
  401722:	e7e5      	b.n	4016f0 <__udivmoddi4+0x280>
  401724:	4604      	mov	r4, r0
  401726:	e7d8      	b.n	4016da <__udivmoddi4+0x26a>
  401728:	4611      	mov	r1, r2
  40172a:	e795      	b.n	401658 <__udivmoddi4+0x1e8>
  40172c:	4681      	mov	r9, r0
  40172e:	e7c0      	b.n	4016b2 <__udivmoddi4+0x242>
  401730:	468a      	mov	sl, r1
  401732:	e77c      	b.n	40162e <__udivmoddi4+0x1be>
  401734:	3b02      	subs	r3, #2
  401736:	443c      	add	r4, r7
  401738:	e748      	b.n	4015cc <__udivmoddi4+0x15c>
  40173a:	4608      	mov	r0, r1
  40173c:	e70a      	b.n	401554 <__udivmoddi4+0xe4>
  40173e:	3802      	subs	r0, #2
  401740:	443e      	add	r6, r7
  401742:	e72f      	b.n	4015a4 <__udivmoddi4+0x134>
  401744:	45c2      	cmp	sl, r8
  401746:	d3e7      	bcc.n	401718 <__udivmoddi4+0x2a8>
  401748:	463e      	mov	r6, r7
  40174a:	e7d1      	b.n	4016f0 <__udivmoddi4+0x280>
  40174c:	4629      	mov	r1, r5
  40174e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401752:	bf00      	nop

00401754 <__aeabi_idiv0>:
  401754:	4770      	bx	lr
  401756:	bf00      	nop

00401758 <__libc_init_array>:
  401758:	b570      	push	{r4, r5, r6, lr}
  40175a:	4e0f      	ldr	r6, [pc, #60]	; (401798 <__libc_init_array+0x40>)
  40175c:	4d0f      	ldr	r5, [pc, #60]	; (40179c <__libc_init_array+0x44>)
  40175e:	1b76      	subs	r6, r6, r5
  401760:	10b6      	asrs	r6, r6, #2
  401762:	bf18      	it	ne
  401764:	2400      	movne	r4, #0
  401766:	d005      	beq.n	401774 <__libc_init_array+0x1c>
  401768:	3401      	adds	r4, #1
  40176a:	f855 3b04 	ldr.w	r3, [r5], #4
  40176e:	4798      	blx	r3
  401770:	42a6      	cmp	r6, r4
  401772:	d1f9      	bne.n	401768 <__libc_init_array+0x10>
  401774:	4e0a      	ldr	r6, [pc, #40]	; (4017a0 <__libc_init_array+0x48>)
  401776:	4d0b      	ldr	r5, [pc, #44]	; (4017a4 <__libc_init_array+0x4c>)
  401778:	1b76      	subs	r6, r6, r5
  40177a:	f000 f88f 	bl	40189c <_init>
  40177e:	10b6      	asrs	r6, r6, #2
  401780:	bf18      	it	ne
  401782:	2400      	movne	r4, #0
  401784:	d006      	beq.n	401794 <__libc_init_array+0x3c>
  401786:	3401      	adds	r4, #1
  401788:	f855 3b04 	ldr.w	r3, [r5], #4
  40178c:	4798      	blx	r3
  40178e:	42a6      	cmp	r6, r4
  401790:	d1f9      	bne.n	401786 <__libc_init_array+0x2e>
  401792:	bd70      	pop	{r4, r5, r6, pc}
  401794:	bd70      	pop	{r4, r5, r6, pc}
  401796:	bf00      	nop
  401798:	004018a8 	.word	0x004018a8
  40179c:	004018a8 	.word	0x004018a8
  4017a0:	004018b0 	.word	0x004018b0
  4017a4:	004018a8 	.word	0x004018a8

004017a8 <register_fini>:
  4017a8:	4b02      	ldr	r3, [pc, #8]	; (4017b4 <register_fini+0xc>)
  4017aa:	b113      	cbz	r3, 4017b2 <register_fini+0xa>
  4017ac:	4802      	ldr	r0, [pc, #8]	; (4017b8 <register_fini+0x10>)
  4017ae:	f000 b805 	b.w	4017bc <atexit>
  4017b2:	4770      	bx	lr
  4017b4:	00000000 	.word	0x00000000
  4017b8:	004017c9 	.word	0x004017c9

004017bc <atexit>:
  4017bc:	2300      	movs	r3, #0
  4017be:	4601      	mov	r1, r0
  4017c0:	461a      	mov	r2, r3
  4017c2:	4618      	mov	r0, r3
  4017c4:	f000 b814 	b.w	4017f0 <__register_exitproc>

004017c8 <__libc_fini_array>:
  4017c8:	b538      	push	{r3, r4, r5, lr}
  4017ca:	4d07      	ldr	r5, [pc, #28]	; (4017e8 <__libc_fini_array+0x20>)
  4017cc:	4c07      	ldr	r4, [pc, #28]	; (4017ec <__libc_fini_array+0x24>)
  4017ce:	1b2c      	subs	r4, r5, r4
  4017d0:	10a4      	asrs	r4, r4, #2
  4017d2:	d005      	beq.n	4017e0 <__libc_fini_array+0x18>
  4017d4:	3c01      	subs	r4, #1
  4017d6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4017da:	4798      	blx	r3
  4017dc:	2c00      	cmp	r4, #0
  4017de:	d1f9      	bne.n	4017d4 <__libc_fini_array+0xc>
  4017e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4017e4:	f000 b864 	b.w	4018b0 <_fini>
  4017e8:	004018c0 	.word	0x004018c0
  4017ec:	004018bc 	.word	0x004018bc

004017f0 <__register_exitproc>:
  4017f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4017f4:	4c25      	ldr	r4, [pc, #148]	; (40188c <__register_exitproc+0x9c>)
  4017f6:	6825      	ldr	r5, [r4, #0]
  4017f8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4017fc:	4606      	mov	r6, r0
  4017fe:	4688      	mov	r8, r1
  401800:	4692      	mov	sl, r2
  401802:	4699      	mov	r9, r3
  401804:	b3c4      	cbz	r4, 401878 <__register_exitproc+0x88>
  401806:	6860      	ldr	r0, [r4, #4]
  401808:	281f      	cmp	r0, #31
  40180a:	dc17      	bgt.n	40183c <__register_exitproc+0x4c>
  40180c:	1c43      	adds	r3, r0, #1
  40180e:	b176      	cbz	r6, 40182e <__register_exitproc+0x3e>
  401810:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  401814:	2201      	movs	r2, #1
  401816:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40181a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40181e:	4082      	lsls	r2, r0
  401820:	4311      	orrs	r1, r2
  401822:	2e02      	cmp	r6, #2
  401824:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  401828:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40182c:	d01e      	beq.n	40186c <__register_exitproc+0x7c>
  40182e:	3002      	adds	r0, #2
  401830:	6063      	str	r3, [r4, #4]
  401832:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  401836:	2000      	movs	r0, #0
  401838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40183c:	4b14      	ldr	r3, [pc, #80]	; (401890 <__register_exitproc+0xa0>)
  40183e:	b303      	cbz	r3, 401882 <__register_exitproc+0x92>
  401840:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401844:	f3af 8000 	nop.w
  401848:	4604      	mov	r4, r0
  40184a:	b1d0      	cbz	r0, 401882 <__register_exitproc+0x92>
  40184c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  401850:	2700      	movs	r7, #0
  401852:	e880 0088 	stmia.w	r0, {r3, r7}
  401856:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40185a:	4638      	mov	r0, r7
  40185c:	2301      	movs	r3, #1
  40185e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  401862:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  401866:	2e00      	cmp	r6, #0
  401868:	d0e1      	beq.n	40182e <__register_exitproc+0x3e>
  40186a:	e7d1      	b.n	401810 <__register_exitproc+0x20>
  40186c:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  401870:	430a      	orrs	r2, r1
  401872:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  401876:	e7da      	b.n	40182e <__register_exitproc+0x3e>
  401878:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40187c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  401880:	e7c1      	b.n	401806 <__register_exitproc+0x16>
  401882:	f04f 30ff 	mov.w	r0, #4294967295
  401886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40188a:	bf00      	nop
  40188c:	00401898 	.word	0x00401898
  401890:	00000000 	.word	0x00000000
  401894:	00000043 	.word	0x00000043

00401898 <_global_impure_ptr>:
  401898:	20400028                                (.@ 

0040189c <_init>:
  40189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40189e:	bf00      	nop
  4018a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4018a2:	bc08      	pop	{r3}
  4018a4:	469e      	mov	lr, r3
  4018a6:	4770      	bx	lr

004018a8 <__init_array_start>:
  4018a8:	004017a9 	.word	0x004017a9

004018ac <__frame_dummy_init_array_entry>:
  4018ac:	00400165                                e.@.

004018b0 <_fini>:
  4018b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4018b2:	bf00      	nop
  4018b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4018b6:	bc08      	pop	{r3}
  4018b8:	469e      	mov	lr, r3
  4018ba:	4770      	bx	lr

004018bc <__fini_array_start>:
  4018bc:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <g_interrupt_enabled>:
2040000c:	0001 0000                                   ....

20400010 <SystemCoreClock>:
20400010:	0900 003d                                   ..=.

20400014 <atraso>:
20400014:	0064 0000                                   d...

20400018 <atraso1>:
20400018:	0096 0000                                   ....

2040001c <atraso2>:
2040001c:	0032 0000                                   2...

20400020 <atraso3>:
20400020:	00c8 0000 0000 0000                         ........

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
2040005c:	1894 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
