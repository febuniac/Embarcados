
12-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004920  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404920  00404920  00014920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000086c  20400000  00404928  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000168  2040086c  00405194  0002086c  2**2
                  ALLOC
  4 .stack        00002004  204009d4  004052fc  0002086c  2**0
                  ALLOC
  5 .heap         00000200  204029d8  00407300  0002086c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002086c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002089a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000e540  00000000  00000000  000208f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000023bc  00000000  00000000  0002ee33  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000054f4  00000000  00000000  000311ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b48  00000000  00000000  000366e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b20  00000000  00000000  0003722b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001f433  00000000  00000000  00037d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c369  00000000  00000000  0005717e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008bf3c  00000000  00000000  000634e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002474  00000000  00000000  000ef424  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	204029d8 	.word	0x204029d8
  400004:	00400ff9 	.word	0x00400ff9
  400008:	00400ff5 	.word	0x00400ff5
  40000c:	00400ff5 	.word	0x00400ff5
  400010:	00400ff5 	.word	0x00400ff5
  400014:	00400ff5 	.word	0x00400ff5
  400018:	00400ff5 	.word	0x00400ff5
	...
  40002c:	00400ff5 	.word	0x00400ff5
  400030:	00400ff5 	.word	0x00400ff5
  400034:	00000000 	.word	0x00000000
  400038:	00400ff5 	.word	0x00400ff5
  40003c:	00400ff5 	.word	0x00400ff5
  400040:	00400ff5 	.word	0x00400ff5
  400044:	00400ff5 	.word	0x00400ff5
  400048:	00400ff5 	.word	0x00400ff5
  40004c:	00400ff5 	.word	0x00400ff5
  400050:	00400ff5 	.word	0x00400ff5
  400054:	00400ff5 	.word	0x00400ff5
  400058:	00400ff5 	.word	0x00400ff5
  40005c:	00400ff5 	.word	0x00400ff5
  400060:	00400ff5 	.word	0x00400ff5
  400064:	00000000 	.word	0x00000000
  400068:	00400cd1 	.word	0x00400cd1
  40006c:	00400ce5 	.word	0x00400ce5
  400070:	00400cf9 	.word	0x00400cf9
  400074:	00400ff5 	.word	0x00400ff5
  400078:	00400ff5 	.word	0x00400ff5
  40007c:	00400ff5 	.word	0x00400ff5
  400080:	00400d0d 	.word	0x00400d0d
  400084:	00400d21 	.word	0x00400d21
  400088:	00400ff5 	.word	0x00400ff5
  40008c:	00400ff5 	.word	0x00400ff5
  400090:	00400ff5 	.word	0x00400ff5
  400094:	00400ff5 	.word	0x00400ff5
  400098:	00400ff5 	.word	0x00400ff5
  40009c:	00400ff5 	.word	0x00400ff5
  4000a0:	00400425 	.word	0x00400425
  4000a4:	00400ff5 	.word	0x00400ff5
  4000a8:	00400ff5 	.word	0x00400ff5
  4000ac:	00400ff5 	.word	0x00400ff5
  4000b0:	00400ff5 	.word	0x00400ff5
  4000b4:	00400bed 	.word	0x00400bed
  4000b8:	00400ff5 	.word	0x00400ff5
  4000bc:	00400ff5 	.word	0x00400ff5
  4000c0:	00400ff5 	.word	0x00400ff5
  4000c4:	00400ff5 	.word	0x00400ff5
  4000c8:	00400ff5 	.word	0x00400ff5
  4000cc:	00400ff5 	.word	0x00400ff5
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00400ff5 	.word	0x00400ff5
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00400ff5 	.word	0x00400ff5
  4000e0:	00400c01 	.word	0x00400c01
  4000e4:	00400ff5 	.word	0x00400ff5
  4000e8:	00400ff5 	.word	0x00400ff5
  4000ec:	00400ff5 	.word	0x00400ff5
  4000f0:	00400ff5 	.word	0x00400ff5
  4000f4:	00400ff5 	.word	0x00400ff5
  4000f8:	00400ff5 	.word	0x00400ff5
  4000fc:	00400ff5 	.word	0x00400ff5
  400100:	00400ff5 	.word	0x00400ff5
  400104:	00400ff5 	.word	0x00400ff5
  400108:	00400ff5 	.word	0x00400ff5
  40010c:	00400ff5 	.word	0x00400ff5
  400110:	00400ff5 	.word	0x00400ff5
	...
  400120:	00400ff5 	.word	0x00400ff5
  400124:	00400ff5 	.word	0x00400ff5
  400128:	00400ff5 	.word	0x00400ff5
  40012c:	00400ff5 	.word	0x00400ff5
  400130:	00400ff5 	.word	0x00400ff5
  400134:	00000000 	.word	0x00000000
  400138:	00400ff5 	.word	0x00400ff5
  40013c:	00400ff5 	.word	0x00400ff5

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040086c 	.word	0x2040086c
  40015c:	00000000 	.word	0x00000000
  400160:	00404928 	.word	0x00404928

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400870 	.word	0x20400870
  400190:	00404928 	.word	0x00404928
  400194:	00404928 	.word	0x00404928
  400198:	00000000 	.word	0x00000000

0040019c <convert_adc_to_temp>:
  /*
   * According to datasheet, The output voltage VT = 0.72V at 27C
   * and the temperature slope dVT/dT = 2.33 mV/C
   */
  ul_temp = (ul_vol - 720)  * 100 / 233 + 27;
  return(ul_temp);
  40019c:	f640 43e4 	movw	r3, #3300	; 0xce4
  4001a0:	fb03 f000 	mul.w	r0, r3, r0
  4001a4:	4b0a      	ldr	r3, [pc, #40]	; (4001d0 <convert_adc_to_temp+0x34>)
  4001a6:	fba3 2300 	umull	r2, r3, r3, r0
  4001aa:	1ac0      	subs	r0, r0, r3
  4001ac:	eb03 0350 	add.w	r3, r3, r0, lsr #1
  4001b0:	0adb      	lsrs	r3, r3, #11
  4001b2:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
  4001b6:	2064      	movs	r0, #100	; 0x64
  4001b8:	fb00 f303 	mul.w	r3, r0, r3
  4001bc:	4805      	ldr	r0, [pc, #20]	; (4001d4 <convert_adc_to_temp+0x38>)
  4001be:	fb80 2003 	smull	r2, r0, r0, r3
  4001c2:	4418      	add	r0, r3
  4001c4:	17db      	asrs	r3, r3, #31
  4001c6:	ebc3 10e0 	rsb	r0, r3, r0, asr #7
}
  4001ca:	301b      	adds	r0, #27
  4001cc:	4770      	bx	lr
  4001ce:	bf00      	nop
  4001d0:	00100101 	.word	0x00100101
  4001d4:	8ca29c05 	.word	0x8ca29c05

004001d8 <AFEC_Temp_callback>:
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  4001d8:	4b04      	ldr	r3, [pc, #16]	; (4001ec <AFEC_Temp_callback+0x14>)
  4001da:	220b      	movs	r2, #11
  4001dc:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4001de:	6e9a      	ldr	r2, [r3, #104]	; 0x68
/**
 * \brief AFEC interrupt callback function.
 */
static void AFEC_Temp_callback(void) //Toda vez que o ADC tiver um valor novo essa função é chamada
{
	g_ul_value = afec_channel_get_value(AFEC0, AFEC_CHANNEL_TEMP_SENSOR);//salva o novo valor da converSão de temp
  4001e0:	4b03      	ldr	r3, [pc, #12]	; (4001f0 <AFEC_Temp_callback+0x18>)
  4001e2:	601a      	str	r2, [r3, #0]
	is_conversion_done = true;
  4001e4:	2201      	movs	r2, #1
  4001e6:	4b03      	ldr	r3, [pc, #12]	; (4001f4 <AFEC_Temp_callback+0x1c>)
  4001e8:	701a      	strb	r2, [r3, #0]
  4001ea:	4770      	bx	lr
  4001ec:	4003c000 	.word	0x4003c000
  4001f0:	2040088c 	.word	0x2040088c
  4001f4:	20400888 	.word	0x20400888

004001f8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001fa:	b083      	sub	sp, #12
  4001fc:	4605      	mov	r5, r0
  4001fe:	460c      	mov	r4, r1
	uint32_t val = 0;
  400200:	2300      	movs	r3, #0
  400202:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400204:	4b29      	ldr	r3, [pc, #164]	; (4002ac <usart_serial_getchar+0xb4>)
  400206:	4298      	cmp	r0, r3
  400208:	d107      	bne.n	40021a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40020a:	461f      	mov	r7, r3
  40020c:	4e28      	ldr	r6, [pc, #160]	; (4002b0 <usart_serial_getchar+0xb8>)
  40020e:	4621      	mov	r1, r4
  400210:	4638      	mov	r0, r7
  400212:	47b0      	blx	r6
  400214:	2800      	cmp	r0, #0
  400216:	d1fa      	bne.n	40020e <usart_serial_getchar+0x16>
  400218:	e015      	b.n	400246 <usart_serial_getchar+0x4e>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40021a:	4b26      	ldr	r3, [pc, #152]	; (4002b4 <usart_serial_getchar+0xbc>)
  40021c:	4298      	cmp	r0, r3
  40021e:	d107      	bne.n	400230 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400220:	461f      	mov	r7, r3
  400222:	4e23      	ldr	r6, [pc, #140]	; (4002b0 <usart_serial_getchar+0xb8>)
  400224:	4621      	mov	r1, r4
  400226:	4638      	mov	r0, r7
  400228:	47b0      	blx	r6
  40022a:	2800      	cmp	r0, #0
  40022c:	d1fa      	bne.n	400224 <usart_serial_getchar+0x2c>
  40022e:	e015      	b.n	40025c <usart_serial_getchar+0x64>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400230:	4b21      	ldr	r3, [pc, #132]	; (4002b8 <usart_serial_getchar+0xc0>)
  400232:	4298      	cmp	r0, r3
  400234:	d107      	bne.n	400246 <usart_serial_getchar+0x4e>
		while (uart_read((Uart*)p_usart, data));
  400236:	461f      	mov	r7, r3
  400238:	4e1d      	ldr	r6, [pc, #116]	; (4002b0 <usart_serial_getchar+0xb8>)
  40023a:	4621      	mov	r1, r4
  40023c:	4638      	mov	r0, r7
  40023e:	47b0      	blx	r6
  400240:	2800      	cmp	r0, #0
  400242:	d1fa      	bne.n	40023a <usart_serial_getchar+0x42>
  400244:	e017      	b.n	400276 <usart_serial_getchar+0x7e>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400246:	4b1d      	ldr	r3, [pc, #116]	; (4002bc <usart_serial_getchar+0xc4>)
  400248:	429d      	cmp	r5, r3
  40024a:	d107      	bne.n	40025c <usart_serial_getchar+0x64>
		while (uart_read((Uart*)p_usart, data));
  40024c:	461f      	mov	r7, r3
  40024e:	4e18      	ldr	r6, [pc, #96]	; (4002b0 <usart_serial_getchar+0xb8>)
  400250:	4621      	mov	r1, r4
  400252:	4638      	mov	r0, r7
  400254:	47b0      	blx	r6
  400256:	2800      	cmp	r0, #0
  400258:	d1fa      	bne.n	400250 <usart_serial_getchar+0x58>
  40025a:	e019      	b.n	400290 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40025c:	4b18      	ldr	r3, [pc, #96]	; (4002c0 <usart_serial_getchar+0xc8>)
  40025e:	429d      	cmp	r5, r3
  400260:	d109      	bne.n	400276 <usart_serial_getchar+0x7e>
		while (usart_read(p_usart, &val));
  400262:	461e      	mov	r6, r3
  400264:	4d17      	ldr	r5, [pc, #92]	; (4002c4 <usart_serial_getchar+0xcc>)
  400266:	a901      	add	r1, sp, #4
  400268:	4630      	mov	r0, r6
  40026a:	47a8      	blx	r5
  40026c:	2800      	cmp	r0, #0
  40026e:	d1fa      	bne.n	400266 <usart_serial_getchar+0x6e>
		*data = (uint8_t)(val & 0xFF);
  400270:	9b01      	ldr	r3, [sp, #4]
  400272:	7023      	strb	r3, [r4, #0]
  400274:	e018      	b.n	4002a8 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400276:	4b14      	ldr	r3, [pc, #80]	; (4002c8 <usart_serial_getchar+0xd0>)
  400278:	429d      	cmp	r5, r3
  40027a:	d109      	bne.n	400290 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
  40027c:	461e      	mov	r6, r3
  40027e:	4d11      	ldr	r5, [pc, #68]	; (4002c4 <usart_serial_getchar+0xcc>)
  400280:	a901      	add	r1, sp, #4
  400282:	4630      	mov	r0, r6
  400284:	47a8      	blx	r5
  400286:	2800      	cmp	r0, #0
  400288:	d1fa      	bne.n	400280 <usart_serial_getchar+0x88>
		*data = (uint8_t)(val & 0xFF);
  40028a:	9b01      	ldr	r3, [sp, #4]
  40028c:	7023      	strb	r3, [r4, #0]
  40028e:	e00b      	b.n	4002a8 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400290:	4b0e      	ldr	r3, [pc, #56]	; (4002cc <usart_serial_getchar+0xd4>)
  400292:	429d      	cmp	r5, r3
  400294:	d108      	bne.n	4002a8 <usart_serial_getchar+0xb0>
		while (usart_read(p_usart, &val));
  400296:	461e      	mov	r6, r3
  400298:	4d0a      	ldr	r5, [pc, #40]	; (4002c4 <usart_serial_getchar+0xcc>)
  40029a:	a901      	add	r1, sp, #4
  40029c:	4630      	mov	r0, r6
  40029e:	47a8      	blx	r5
  4002a0:	2800      	cmp	r0, #0
  4002a2:	d1fa      	bne.n	40029a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
  4002a4:	9b01      	ldr	r3, [sp, #4]
  4002a6:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4002a8:	b003      	add	sp, #12
  4002aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4002ac:	400e0800 	.word	0x400e0800
  4002b0:	00400ec5 	.word	0x00400ec5
  4002b4:	400e0a00 	.word	0x400e0a00
  4002b8:	400e1a00 	.word	0x400e1a00
  4002bc:	400e1c00 	.word	0x400e1c00
  4002c0:	40024000 	.word	0x40024000
  4002c4:	00400fdd 	.word	0x00400fdd
  4002c8:	40028000 	.word	0x40028000
  4002cc:	4002c000 	.word	0x4002c000

004002d0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4002d0:	b570      	push	{r4, r5, r6, lr}
  4002d2:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4002d4:	4b2a      	ldr	r3, [pc, #168]	; (400380 <usart_serial_putchar+0xb0>)
  4002d6:	4298      	cmp	r0, r3
  4002d8:	d108      	bne.n	4002ec <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  4002da:	461e      	mov	r6, r3
  4002dc:	4d29      	ldr	r5, [pc, #164]	; (400384 <usart_serial_putchar+0xb4>)
  4002de:	4621      	mov	r1, r4
  4002e0:	4630      	mov	r0, r6
  4002e2:	47a8      	blx	r5
  4002e4:	2800      	cmp	r0, #0
  4002e6:	d1fa      	bne.n	4002de <usart_serial_putchar+0xe>
		return 1;
  4002e8:	2001      	movs	r0, #1
  4002ea:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4002ec:	4b26      	ldr	r3, [pc, #152]	; (400388 <usart_serial_putchar+0xb8>)
  4002ee:	4298      	cmp	r0, r3
  4002f0:	d108      	bne.n	400304 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  4002f2:	461e      	mov	r6, r3
  4002f4:	4d23      	ldr	r5, [pc, #140]	; (400384 <usart_serial_putchar+0xb4>)
  4002f6:	4621      	mov	r1, r4
  4002f8:	4630      	mov	r0, r6
  4002fa:	47a8      	blx	r5
  4002fc:	2800      	cmp	r0, #0
  4002fe:	d1fa      	bne.n	4002f6 <usart_serial_putchar+0x26>
		return 1;
  400300:	2001      	movs	r0, #1
  400302:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400304:	4b21      	ldr	r3, [pc, #132]	; (40038c <usart_serial_putchar+0xbc>)
  400306:	4298      	cmp	r0, r3
  400308:	d108      	bne.n	40031c <usart_serial_putchar+0x4c>
		while (uart_write((Uart*)p_usart, c)!=0);
  40030a:	461e      	mov	r6, r3
  40030c:	4d1d      	ldr	r5, [pc, #116]	; (400384 <usart_serial_putchar+0xb4>)
  40030e:	4621      	mov	r1, r4
  400310:	4630      	mov	r0, r6
  400312:	47a8      	blx	r5
  400314:	2800      	cmp	r0, #0
  400316:	d1fa      	bne.n	40030e <usart_serial_putchar+0x3e>
		return 1;
  400318:	2001      	movs	r0, #1
  40031a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40031c:	4b1c      	ldr	r3, [pc, #112]	; (400390 <usart_serial_putchar+0xc0>)
  40031e:	4298      	cmp	r0, r3
  400320:	d108      	bne.n	400334 <usart_serial_putchar+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
  400322:	461e      	mov	r6, r3
  400324:	4d17      	ldr	r5, [pc, #92]	; (400384 <usart_serial_putchar+0xb4>)
  400326:	4621      	mov	r1, r4
  400328:	4630      	mov	r0, r6
  40032a:	47a8      	blx	r5
  40032c:	2800      	cmp	r0, #0
  40032e:	d1fa      	bne.n	400326 <usart_serial_putchar+0x56>
		return 1;
  400330:	2001      	movs	r0, #1
  400332:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400334:	4b17      	ldr	r3, [pc, #92]	; (400394 <usart_serial_putchar+0xc4>)
  400336:	4298      	cmp	r0, r3
  400338:	d108      	bne.n	40034c <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  40033a:	461e      	mov	r6, r3
  40033c:	4d16      	ldr	r5, [pc, #88]	; (400398 <usart_serial_putchar+0xc8>)
  40033e:	4621      	mov	r1, r4
  400340:	4630      	mov	r0, r6
  400342:	47a8      	blx	r5
  400344:	2800      	cmp	r0, #0
  400346:	d1fa      	bne.n	40033e <usart_serial_putchar+0x6e>
		return 1;
  400348:	2001      	movs	r0, #1
  40034a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40034c:	4b13      	ldr	r3, [pc, #76]	; (40039c <usart_serial_putchar+0xcc>)
  40034e:	4298      	cmp	r0, r3
  400350:	d108      	bne.n	400364 <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  400352:	461e      	mov	r6, r3
  400354:	4d10      	ldr	r5, [pc, #64]	; (400398 <usart_serial_putchar+0xc8>)
  400356:	4621      	mov	r1, r4
  400358:	4630      	mov	r0, r6
  40035a:	47a8      	blx	r5
  40035c:	2800      	cmp	r0, #0
  40035e:	d1fa      	bne.n	400356 <usart_serial_putchar+0x86>
		return 1;
  400360:	2001      	movs	r0, #1
  400362:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400364:	4b0e      	ldr	r3, [pc, #56]	; (4003a0 <usart_serial_putchar+0xd0>)
  400366:	4298      	cmp	r0, r3
  400368:	d108      	bne.n	40037c <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  40036a:	461e      	mov	r6, r3
  40036c:	4d0a      	ldr	r5, [pc, #40]	; (400398 <usart_serial_putchar+0xc8>)
  40036e:	4621      	mov	r1, r4
  400370:	4630      	mov	r0, r6
  400372:	47a8      	blx	r5
  400374:	2800      	cmp	r0, #0
  400376:	d1fa      	bne.n	40036e <usart_serial_putchar+0x9e>
		return 1;
  400378:	2001      	movs	r0, #1
  40037a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  40037c:	2000      	movs	r0, #0
}
  40037e:	bd70      	pop	{r4, r5, r6, pc}
  400380:	400e0800 	.word	0x400e0800
  400384:	00400eb1 	.word	0x00400eb1
  400388:	400e0a00 	.word	0x400e0a00
  40038c:	400e1a00 	.word	0x400e1a00
  400390:	400e1c00 	.word	0x400e1c00
  400394:	40024000 	.word	0x40024000
  400398:	00400fc5 	.word	0x00400fc5
  40039c:	40028000 	.word	0x40028000
  4003a0:	4002c000 	.word	0x4002c000

004003a4 <TC1_init>:
/**
 * \brief Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
void TC1_init(int freq_TC){
  4003a4:	b570      	push	{r4, r5, r6, lr}
  4003a6:	b084      	sub	sp, #16
  4003a8:	4606      	mov	r6, r0
	    uint32_t ul_sysclk = sysclk_get_cpu_hz();
	    
	    uint32_t channel = 1;
	    
	    /* Configura o PMC */
	    pmc_enable_periph_clk(ID_TC1);
  4003aa:	2018      	movs	r0, #24
  4003ac:	4b14      	ldr	r3, [pc, #80]	; (400400 <TC1_init+0x5c>)
  4003ae:	4798      	blx	r3
	    
	    //int freq_TC=4;//4Hz (4 vezes pos segundo led pisca)
	    
	    /** Configura o TC para operar em  4Mhz e interrupçcão no RC compare */
	    tc_find_mck_divisor(freq_TC, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4003b0:	4c14      	ldr	r4, [pc, #80]	; (400404 <TC1_init+0x60>)
  4003b2:	9400      	str	r4, [sp, #0]
  4003b4:	ab02      	add	r3, sp, #8
  4003b6:	aa03      	add	r2, sp, #12
  4003b8:	4621      	mov	r1, r4
  4003ba:	4630      	mov	r0, r6
  4003bc:	4d12      	ldr	r5, [pc, #72]	; (400408 <TC1_init+0x64>)
  4003be:	47a8      	blx	r5
	    tc_init(TC0, channel, ul_tcclks | TC_CMR_CPCTRG);
  4003c0:	4d12      	ldr	r5, [pc, #72]	; (40040c <TC1_init+0x68>)
  4003c2:	9a02      	ldr	r2, [sp, #8]
  4003c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4003c8:	2101      	movs	r1, #1
  4003ca:	4628      	mov	r0, r5
  4003cc:	4b10      	ldr	r3, [pc, #64]	; (400410 <TC1_init+0x6c>)
  4003ce:	4798      	blx	r3
	    tc_write_rc(TC0, channel, (ul_sysclk / ul_div) / freq_TC);
  4003d0:	9a03      	ldr	r2, [sp, #12]
  4003d2:	fbb4 f2f2 	udiv	r2, r4, r2
  4003d6:	fbb2 f2f6 	udiv	r2, r2, r6
  4003da:	2101      	movs	r1, #1
  4003dc:	4628      	mov	r0, r5
  4003de:	4b0d      	ldr	r3, [pc, #52]	; (400414 <TC1_init+0x70>)
  4003e0:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4003e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4003e6:	4b0c      	ldr	r3, [pc, #48]	; (400418 <TC1_init+0x74>)
  4003e8:	601a      	str	r2, [r3, #0]

	    /* Configura e ativa interrupçcão no TC canal 0 */
	    NVIC_EnableIRQ((IRQn_Type) ID_TC1);
	    tc_enable_interrupt(TC0, channel, TC_IER_CPCS);
  4003ea:	2210      	movs	r2, #16
  4003ec:	2101      	movs	r1, #1
  4003ee:	4628      	mov	r0, r5
  4003f0:	4b0a      	ldr	r3, [pc, #40]	; (40041c <TC1_init+0x78>)
  4003f2:	4798      	blx	r3

	    /* Inicializa o canal 0 do TC */
	    tc_start(TC0, channel);
  4003f4:	2101      	movs	r1, #1
  4003f6:	4628      	mov	r0, r5
  4003f8:	4b09      	ldr	r3, [pc, #36]	; (400420 <TC1_init+0x7c>)
  4003fa:	4798      	blx	r3
}
  4003fc:	b004      	add	sp, #16
  4003fe:	bd70      	pop	{r4, r5, r6, pc}
  400400:	00400e5d 	.word	0x00400e5d
  400404:	11e1a300 	.word	0x11e1a300
  400408:	0040068d 	.word	0x0040068d
  40040c:	4000c000 	.word	0x4000c000
  400410:	00400651 	.word	0x00400651
  400414:	00400675 	.word	0x00400675
  400418:	e000e100 	.word	0xe000e100
  40041c:	0040067d 	.word	0x0040067d
  400420:	0040066d 	.word	0x0040066d

00400424 <TC1_Handler>:

void TC1_Handler(void){
  400424:	b500      	push	{lr}
  400426:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;
	
    /****************************************************************
	* Devemos indicar ao TC que a interrupção foi satisfeita.
    ******************************************************************/
	ul_dummy = tc_get_status(TC0, 1);
  400428:	2101      	movs	r1, #1
  40042a:	4805      	ldr	r0, [pc, #20]	; (400440 <TC1_Handler+0x1c>)
  40042c:	4b05      	ldr	r3, [pc, #20]	; (400444 <TC1_Handler+0x20>)
  40042e:	4798      	blx	r3
  400430:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  400432:	9b01      	ldr	r3, [sp, #4]
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
	afec->AFEC_CR = AFEC_CR_START;
  400434:	2202      	movs	r2, #2
  400436:	4b04      	ldr	r3, [pc, #16]	; (400448 <TC1_Handler+0x24>)
  400438:	601a      	str	r2, [r3, #0]

	afec_start_software_conversion(AFEC0);
}
  40043a:	b003      	add	sp, #12
  40043c:	f85d fb04 	ldr.w	pc, [sp], #4
  400440:	4000c000 	.word	0x4000c000
  400444:	00400685 	.word	0x00400685
  400448:	4003c000 	.word	0x4003c000
  40044c:	00000000 	.word	0x00000000

00400450 <main>:

int main(void)
{
  400450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400454:	b091      	sub	sp, #68	; 0x44

	/* Initialize the SAM system. */
  sysclk_init();
  400456:	4b58      	ldr	r3, [pc, #352]	; (4005b8 <main+0x168>)
  400458:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40045a:	200a      	movs	r0, #10
  40045c:	4c57      	ldr	r4, [pc, #348]	; (4005bc <main+0x16c>)
  40045e:	47a0      	blx	r4
  400460:	200b      	movs	r0, #11
  400462:	47a0      	blx	r4
  400464:	200c      	movs	r0, #12
  400466:	47a0      	blx	r4
  400468:	2010      	movs	r0, #16
  40046a:	47a0      	blx	r4
  40046c:	2011      	movs	r0, #17
  40046e:	47a0      	blx	r4
  ioport_init();
  board_init();
  400470:	4b53      	ldr	r3, [pc, #332]	; (4005c0 <main+0x170>)
  400472:	4798      	blx	r3
  400474:	200e      	movs	r0, #14
  400476:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400478:	4e52      	ldr	r6, [pc, #328]	; (4005c4 <main+0x174>)
  40047a:	4b53      	ldr	r3, [pc, #332]	; (4005c8 <main+0x178>)
  40047c:	601e      	str	r6, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40047e:	4a53      	ldr	r2, [pc, #332]	; (4005cc <main+0x17c>)
  400480:	4b53      	ldr	r3, [pc, #332]	; (4005d0 <main+0x180>)
  400482:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400484:	4a53      	ldr	r2, [pc, #332]	; (4005d4 <main+0x184>)
  400486:	4b54      	ldr	r3, [pc, #336]	; (4005d8 <main+0x188>)
  400488:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40048a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40048e:	9301      	str	r3, [sp, #4]
	usart_settings.char_length = opt->charlength;
  400490:	23c0      	movs	r3, #192	; 0xc0
  400492:	9302      	str	r3, [sp, #8]
	usart_settings.parity_type = opt->paritytype;
  400494:	f44f 6700 	mov.w	r7, #2048	; 0x800
  400498:	9703      	str	r7, [sp, #12]
	usart_settings.stop_bits= opt->stopbits;
  40049a:	2500      	movs	r5, #0
  40049c:	9504      	str	r5, [sp, #16]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40049e:	9505      	str	r5, [sp, #20]
  4004a0:	200e      	movs	r0, #14
  4004a2:	47a0      	blx	r4
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4004a4:	4a4d      	ldr	r2, [pc, #308]	; (4005dc <main+0x18c>)
  4004a6:	a901      	add	r1, sp, #4
  4004a8:	4630      	mov	r0, r6
  4004aa:	4b4d      	ldr	r3, [pc, #308]	; (4005e0 <main+0x190>)
  4004ac:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4004ae:	4630      	mov	r0, r6
  4004b0:	4b4c      	ldr	r3, [pc, #304]	; (4005e4 <main+0x194>)
  4004b2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4004b4:	4630      	mov	r0, r6
  4004b6:	4b4c      	ldr	r3, [pc, #304]	; (4005e8 <main+0x198>)
  4004b8:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4004ba:	4e4c      	ldr	r6, [pc, #304]	; (4005ec <main+0x19c>)
  4004bc:	6833      	ldr	r3, [r6, #0]
  4004be:	4629      	mov	r1, r5
  4004c0:	6898      	ldr	r0, [r3, #8]
  4004c2:	4c4b      	ldr	r4, [pc, #300]	; (4005f0 <main+0x1a0>)
  4004c4:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4004c6:	6833      	ldr	r3, [r6, #0]
  4004c8:	4629      	mov	r1, r5
  4004ca:	6858      	ldr	r0, [r3, #4]
  4004cc:	47a0      	blx	r4

  /* inicializa console (printf) */
	configure_console();
  
	/* Output example information. */
	puts(STRING_HEADER);// Mostra o valor escrito no começo
  4004ce:	4849      	ldr	r0, [pc, #292]	; (4005f4 <main+0x1a4>)
  4004d0:	4b49      	ldr	r3, [pc, #292]	; (4005f8 <main+0x1a8>)
  4004d2:	4798      	blx	r3
  /************************************* 
   * Ativa e configura AFEC (lendo temperatura da placa)
   *************************************/  

  /* Ativa AFEC - 0 */
	afec_enable(AFEC0);
  4004d4:	4c49      	ldr	r4, [pc, #292]	; (4005fc <main+0x1ac>)
  4004d6:	4620      	mov	r0, r4
  4004d8:	4b49      	ldr	r3, [pc, #292]	; (400600 <main+0x1b0>)
  4004da:	4798      	blx	r3

  /* struct de configuracao do AFEC */
	struct afec_config afec_cfg;

  /* Carrega parametros padrao */
	afec_get_config_defaults(&afec_cfg);
  4004dc:	a80a      	add	r0, sp, #40	; 0x28
  4004de:	4b49      	ldr	r3, [pc, #292]	; (400604 <main+0x1b4>)
  4004e0:	4798      	blx	r3

  /* Configura AFEC */
	afec_init(AFEC0, &afec_cfg);
  4004e2:	a90a      	add	r1, sp, #40	; 0x28
  4004e4:	4620      	mov	r0, r4
  4004e6:	4b48      	ldr	r3, [pc, #288]	; (400608 <main+0x1b8>)
  4004e8:	4798      	blx	r3
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  4004ea:	6863      	ldr	r3, [r4, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  4004ec:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  4004f0:	6063      	str	r3, [r4, #4]
  
  /* Configura trigger por software */
  afec_set_trigger(AFEC0, AFEC_TRIG_SW);
  
  /* configura call back */
 	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_11,	AFEC_Temp_callback, 1); 
  4004f2:	2301      	movs	r3, #1
  4004f4:	4a45      	ldr	r2, [pc, #276]	; (40060c <main+0x1bc>)
  4004f6:	210b      	movs	r1, #11
  4004f8:	4620      	mov	r0, r4
  4004fa:	4e45      	ldr	r6, [pc, #276]	; (400610 <main+0x1c0>)
  4004fc:	47b0      	blx	r6
   
  /*** Configuracao específica do canal AFEC ***/
  struct afec_ch_config afec_ch_cfg;
  afec_ch_get_config_defaults(&afec_ch_cfg);
  4004fe:	a809      	add	r0, sp, #36	; 0x24
  400500:	4b44      	ldr	r3, [pc, #272]	; (400614 <main+0x1c4>)
  400502:	4798      	blx	r3
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  400504:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
  afec_ch_set_config(AFEC0, AFEC_CHANNEL_TEMP_SENSOR, &afec_ch_cfg);
  400508:	aa09      	add	r2, sp, #36	; 0x24
  40050a:	210b      	movs	r1, #11
  40050c:	4620      	mov	r0, r4
  40050e:	4b42      	ldr	r3, [pc, #264]	; (400618 <main+0x1c8>)
  400510:	4798      	blx	r3
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  400512:	230b      	movs	r3, #11
  400514:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400516:	f44f 7300 	mov.w	r3, #512	; 0x200
  40051a:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec_channel_set_analog_offset(AFEC0, AFEC_CHANNEL_TEMP_SENSOR, 0x200);

  /***  Configura sensor de temperatura ***/
	struct afec_temp_sensor_config afec_temp_sensor_cfg;

	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  40051c:	a807      	add	r0, sp, #28
  40051e:	4b3f      	ldr	r3, [pc, #252]	; (40061c <main+0x1cc>)
  400520:	4798      	blx	r3
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  400522:	a907      	add	r1, sp, #28
  400524:	4620      	mov	r0, r4
  400526:	4b3e      	ldr	r3, [pc, #248]	; (400620 <main+0x1d0>)
  400528:	4798      	blx	r3
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40052a:	6167      	str	r7, [r4, #20]
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
	afec->AFEC_CR = AFEC_CR_START;
  40052c:	2302      	movs	r3, #2
  40052e:	6023      	str	r3, [r4, #0]
  /* Selecina canal e inicializa conversão */  
	afec_channel_enable(AFEC0, AFEC_CHANNEL_TEMP_SENSOR);
  

  afec_start_software_conversion(AFEC0);
	TC1_init(1);
  400530:	2001      	movs	r0, #1
  400532:	4b3c      	ldr	r3, [pc, #240]	; (400624 <main+0x1d4>)
  400534:	4798      	blx	r3
	while (1) {
		if(is_conversion_done == true) {
  400536:	4c3c      	ldr	r4, [pc, #240]	; (400628 <main+0x1d8>)
				printf(" 1 \n");
			}
			else if ((int)convert_adc_to_temp(g_ul_value)>36 && (int)convert_adc_to_temp(g_ul_value)<37){
				printf(" 2 \n");
			}
			else if ((int)convert_adc_to_temp(g_ul_value)>37.5) {
  400538:	f20f 0974 	addw	r9, pc, #116	; 0x74
  40053c:	e9d9 8900 	ldrd	r8, r9, [r9]
  

  afec_start_software_conversion(AFEC0);
	TC1_init(1);
	while (1) {
		if(is_conversion_done == true) {
  400540:	7823      	ldrb	r3, [r4, #0]
  400542:	f013 0fff 	tst.w	r3, #255	; 0xff
  400546:	d0fb      	beq.n	400540 <main+0xf0>
			is_conversion_done = false;
  400548:	2300      	movs	r3, #0
  40054a:	7023      	strb	r3, [r4, #0]
			printf("TEMPERATURA : %d  \r\n", (int)convert_adc_to_temp(g_ul_value) );
  40054c:	4e37      	ldr	r6, [pc, #220]	; (40062c <main+0x1dc>)
  40054e:	6830      	ldr	r0, [r6, #0]
  400550:	4d37      	ldr	r5, [pc, #220]	; (400630 <main+0x1e0>)
  400552:	47a8      	blx	r5
  400554:	4601      	mov	r1, r0
  400556:	4837      	ldr	r0, [pc, #220]	; (400634 <main+0x1e4>)
  400558:	4b37      	ldr	r3, [pc, #220]	; (400638 <main+0x1e8>)
  40055a:	4798      	blx	r3

			if ((int)convert_adc_to_temp(g_ul_value)<36){
  40055c:	6830      	ldr	r0, [r6, #0]
  40055e:	47a8      	blx	r5
  400560:	2823      	cmp	r0, #35	; 0x23
  400562:	dc03      	bgt.n	40056c <main+0x11c>
				printf(" 1 \n");
  400564:	4835      	ldr	r0, [pc, #212]	; (40063c <main+0x1ec>)
  400566:	4b34      	ldr	r3, [pc, #208]	; (400638 <main+0x1e8>)
  400568:	4798      	blx	r3
  40056a:	e7e9      	b.n	400540 <main+0xf0>
			}
			else if ((int)convert_adc_to_temp(g_ul_value)>36 && (int)convert_adc_to_temp(g_ul_value)<37){
  40056c:	4b2f      	ldr	r3, [pc, #188]	; (40062c <main+0x1dc>)
  40056e:	6818      	ldr	r0, [r3, #0]
  400570:	4b2f      	ldr	r3, [pc, #188]	; (400630 <main+0x1e0>)
  400572:	4798      	blx	r3
  400574:	2824      	cmp	r0, #36	; 0x24
  400576:	dd09      	ble.n	40058c <main+0x13c>
  400578:	4b2c      	ldr	r3, [pc, #176]	; (40062c <main+0x1dc>)
  40057a:	6818      	ldr	r0, [r3, #0]
  40057c:	4b2c      	ldr	r3, [pc, #176]	; (400630 <main+0x1e0>)
  40057e:	4798      	blx	r3
  400580:	2824      	cmp	r0, #36	; 0x24
  400582:	dc03      	bgt.n	40058c <main+0x13c>
				printf(" 2 \n");
  400584:	482e      	ldr	r0, [pc, #184]	; (400640 <main+0x1f0>)
  400586:	4b2c      	ldr	r3, [pc, #176]	; (400638 <main+0x1e8>)
  400588:	4798      	blx	r3
  40058a:	e7d9      	b.n	400540 <main+0xf0>
			}
			else if ((int)convert_adc_to_temp(g_ul_value)>37.5) {
  40058c:	4b27      	ldr	r3, [pc, #156]	; (40062c <main+0x1dc>)
  40058e:	6818      	ldr	r0, [r3, #0]
  400590:	4b27      	ldr	r3, [pc, #156]	; (400630 <main+0x1e0>)
  400592:	4798      	blx	r3
  400594:	4b2b      	ldr	r3, [pc, #172]	; (400644 <main+0x1f4>)
  400596:	4798      	blx	r3
  400598:	4642      	mov	r2, r8
  40059a:	464b      	mov	r3, r9
  40059c:	4d2a      	ldr	r5, [pc, #168]	; (400648 <main+0x1f8>)
  40059e:	47a8      	blx	r5
  4005a0:	2800      	cmp	r0, #0
  4005a2:	d0cd      	beq.n	400540 <main+0xf0>
				printf(" 3 \n");
  4005a4:	4829      	ldr	r0, [pc, #164]	; (40064c <main+0x1fc>)
  4005a6:	4b24      	ldr	r3, [pc, #144]	; (400638 <main+0x1e8>)
  4005a8:	4798      	blx	r3
  4005aa:	e7c9      	b.n	400540 <main+0xf0>
  4005ac:	f3af 8000 	nop.w
  4005b0:	00000000 	.word	0x00000000
  4005b4:	4042c000 	.word	0x4042c000
  4005b8:	00400701 	.word	0x00400701
  4005bc:	00400e5d 	.word	0x00400e5d
  4005c0:	004007fd 	.word	0x004007fd
  4005c4:	40028000 	.word	0x40028000
  4005c8:	2040094c 	.word	0x2040094c
  4005cc:	004002d1 	.word	0x004002d1
  4005d0:	20400948 	.word	0x20400948
  4005d4:	004001f9 	.word	0x004001f9
  4005d8:	20400944 	.word	0x20400944
  4005dc:	08f0d180 	.word	0x08f0d180
  4005e0:	00400f61 	.word	0x00400f61
  4005e4:	00400fb5 	.word	0x00400fb5
  4005e8:	00400fbd 	.word	0x00400fbd
  4005ec:	20400430 	.word	0x20400430
  4005f0:	004018cd 	.word	0x004018cd
  4005f4:	00404810 	.word	0x00404810
  4005f8:	004018bd 	.word	0x004018bd
  4005fc:	4003c000 	.word	0x4003c000
  400600:	00400c15 	.word	0x00400c15
  400604:	00400a45 	.word	0x00400a45
  400608:	00400a95 	.word	0x00400a95
  40060c:	004001d9 	.word	0x004001d9
  400610:	00400b95 	.word	0x00400b95
  400614:	00400a75 	.word	0x00400a75
  400618:	00400a01 	.word	0x00400a01
  40061c:	00400a81 	.word	0x00400a81
  400620:	00400a31 	.word	0x00400a31
  400624:	004003a5 	.word	0x004003a5
  400628:	20400888 	.word	0x20400888
  40062c:	2040088c 	.word	0x2040088c
  400630:	0040019d 	.word	0x0040019d
  400634:	00404870 	.word	0x00404870
  400638:	00401791 	.word	0x00401791
  40063c:	00404888 	.word	0x00404888
  400640:	00404890 	.word	0x00404890
  400644:	00401565 	.word	0x00401565
  400648:	0040172d 	.word	0x0040172d
  40064c:	00404898 	.word	0x00404898

00400650 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400650:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400652:	0189      	lsls	r1, r1, #6
  400654:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400656:	2402      	movs	r4, #2
  400658:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40065a:	f04f 31ff 	mov.w	r1, #4294967295
  40065e:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400660:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400662:	605a      	str	r2, [r3, #4]
}
  400664:	f85d 4b04 	ldr.w	r4, [sp], #4
  400668:	4770      	bx	lr
  40066a:	bf00      	nop

0040066c <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40066c:	0189      	lsls	r1, r1, #6
  40066e:	2305      	movs	r3, #5
  400670:	5043      	str	r3, [r0, r1]
  400672:	4770      	bx	lr

00400674 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400674:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400678:	61ca      	str	r2, [r1, #28]
  40067a:	4770      	bx	lr

0040067c <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40067c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400680:	624a      	str	r2, [r1, #36]	; 0x24
  400682:	4770      	bx	lr

00400684 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400684:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400688:	6a08      	ldr	r0, [r1, #32]
}
  40068a:	4770      	bx	lr

0040068c <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  40068c:	b4f0      	push	{r4, r5, r6, r7}
  40068e:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400690:	2402      	movs	r4, #2
  400692:	9401      	str	r4, [sp, #4]
  400694:	2408      	movs	r4, #8
  400696:	9402      	str	r4, [sp, #8]
  400698:	2420      	movs	r4, #32
  40069a:	9403      	str	r4, [sp, #12]
  40069c:	2480      	movs	r4, #128	; 0x80
  40069e:	9404      	str	r4, [sp, #16]
  4006a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4006a2:	0be4      	lsrs	r4, r4, #15
  4006a4:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  4006a6:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  4006aa:	d81c      	bhi.n	4006e6 <tc_find_mck_divisor+0x5a>
  4006ac:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  4006ae:	42a0      	cmp	r0, r4
  4006b0:	d21f      	bcs.n	4006f2 <tc_find_mck_divisor+0x66>
  4006b2:	ae01      	add	r6, sp, #4
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  4006b4:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  4006b6:	f856 4f04 	ldr.w	r4, [r6, #4]!
  4006ba:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  4006be:	0c27      	lsrs	r7, r4, #16
		if (ul_freq > ul_high) {
  4006c0:	4284      	cmp	r4, r0
  4006c2:	d312      	bcc.n	4006ea <tc_find_mck_divisor+0x5e>
			return 0;
		} else if (ul_freq >= ul_low) {
  4006c4:	4287      	cmp	r7, r0
  4006c6:	d915      	bls.n	4006f4 <tc_find_mck_divisor+0x68>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  4006c8:	3501      	adds	r5, #1
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  4006ca:	2d05      	cmp	r5, #5
  4006cc:	d1f3      	bne.n	4006b6 <tc_find_mck_divisor+0x2a>
		} else if (ul_freq >= ul_low) {
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4006ce:	2000      	movs	r0, #0
  4006d0:	e013      	b.n	4006fa <tc_find_mck_divisor+0x6e>
	}

	/*  Store results. */
	if (p_uldiv) {
		*p_uldiv = divisors[ul_index];
  4006d2:	a906      	add	r1, sp, #24
  4006d4:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4006d8:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4006dc:	6011      	str	r1, [r2, #0]
	}

	if (p_ultcclks) {
  4006de:	b133      	cbz	r3, 4006ee <tc_find_mck_divisor+0x62>
		*p_ultcclks = ul_index;
  4006e0:	601d      	str	r5, [r3, #0]
	}

	return 1;
  4006e2:	2001      	movs	r0, #1
  4006e4:	e009      	b.n	4006fa <tc_find_mck_divisor+0x6e>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
  4006e6:	2000      	movs	r0, #0
  4006e8:	e007      	b.n	4006fa <tc_find_mck_divisor+0x6e>
  4006ea:	2000      	movs	r0, #0
  4006ec:	e005      	b.n	4006fa <tc_find_mck_divisor+0x6e>

	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
  4006ee:	2001      	movs	r0, #1
  4006f0:	e003      	b.n	4006fa <tc_find_mck_divisor+0x6e>
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  4006f2:	2500      	movs	r5, #0
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
  4006f4:	2a00      	cmp	r2, #0
  4006f6:	d1ec      	bne.n	4006d2 <tc_find_mck_divisor+0x46>
  4006f8:	e7f1      	b.n	4006de <tc_find_mck_divisor+0x52>
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4006fa:	b006      	add	sp, #24
  4006fc:	bcf0      	pop	{r4, r5, r6, r7}
  4006fe:	4770      	bx	lr

00400700 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400700:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400702:	4810      	ldr	r0, [pc, #64]	; (400744 <sysclk_init+0x44>)
  400704:	4b10      	ldr	r3, [pc, #64]	; (400748 <sysclk_init+0x48>)
  400706:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400708:	213e      	movs	r1, #62	; 0x3e
  40070a:	2000      	movs	r0, #0
  40070c:	4b0f      	ldr	r3, [pc, #60]	; (40074c <sysclk_init+0x4c>)
  40070e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400710:	4c0f      	ldr	r4, [pc, #60]	; (400750 <sysclk_init+0x50>)
  400712:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400714:	2800      	cmp	r0, #0
  400716:	d0fc      	beq.n	400712 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400718:	4b0e      	ldr	r3, [pc, #56]	; (400754 <sysclk_init+0x54>)
  40071a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40071c:	4a0e      	ldr	r2, [pc, #56]	; (400758 <sysclk_init+0x58>)
  40071e:	4b0f      	ldr	r3, [pc, #60]	; (40075c <sysclk_init+0x5c>)
  400720:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400722:	4c0f      	ldr	r4, [pc, #60]	; (400760 <sysclk_init+0x60>)
  400724:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400726:	2800      	cmp	r0, #0
  400728:	d0fc      	beq.n	400724 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40072a:	2002      	movs	r0, #2
  40072c:	4b0d      	ldr	r3, [pc, #52]	; (400764 <sysclk_init+0x64>)
  40072e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400730:	2000      	movs	r0, #0
  400732:	4b0d      	ldr	r3, [pc, #52]	; (400768 <sysclk_init+0x68>)
  400734:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400736:	4b0d      	ldr	r3, [pc, #52]	; (40076c <sysclk_init+0x6c>)
  400738:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40073a:	4802      	ldr	r0, [pc, #8]	; (400744 <sysclk_init+0x44>)
  40073c:	4b02      	ldr	r3, [pc, #8]	; (400748 <sysclk_init+0x48>)
  40073e:	4798      	blx	r3
  400740:	bd10      	pop	{r4, pc}
  400742:	bf00      	nop
  400744:	11e1a300 	.word	0x11e1a300
  400748:	004011e5 	.word	0x004011e5
  40074c:	00400dd9 	.word	0x00400dd9
  400750:	00400e2d 	.word	0x00400e2d
  400754:	00400e3d 	.word	0x00400e3d
  400758:	20183f01 	.word	0x20183f01
  40075c:	400e0600 	.word	0x400e0600
  400760:	00400e4d 	.word	0x00400e4d
  400764:	00400d35 	.word	0x00400d35
  400768:	00400d71 	.word	0x00400d71
  40076c:	004010d5 	.word	0x004010d5

00400770 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400770:	b990      	cbnz	r0, 400798 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400776:	460c      	mov	r4, r1
  400778:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40077a:	2a00      	cmp	r2, #0
  40077c:	dd0f      	ble.n	40079e <_read+0x2e>
  40077e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400780:	4e08      	ldr	r6, [pc, #32]	; (4007a4 <_read+0x34>)
  400782:	4d09      	ldr	r5, [pc, #36]	; (4007a8 <_read+0x38>)
  400784:	6830      	ldr	r0, [r6, #0]
  400786:	4621      	mov	r1, r4
  400788:	682b      	ldr	r3, [r5, #0]
  40078a:	4798      	blx	r3
		ptr++;
  40078c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40078e:	42a7      	cmp	r7, r4
  400790:	d1f8      	bne.n	400784 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400792:	4640      	mov	r0, r8
  400794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400798:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40079c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40079e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4007a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007a4:	2040094c 	.word	0x2040094c
  4007a8:	20400944 	.word	0x20400944

004007ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4007ac:	3801      	subs	r0, #1
  4007ae:	2802      	cmp	r0, #2
  4007b0:	d815      	bhi.n	4007de <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4007b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007b6:	460e      	mov	r6, r1
  4007b8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4007ba:	b19a      	cbz	r2, 4007e4 <_write+0x38>
  4007bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4007be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4007f8 <_write+0x4c>
  4007c2:	4f0c      	ldr	r7, [pc, #48]	; (4007f4 <_write+0x48>)
  4007c4:	f8d8 0000 	ldr.w	r0, [r8]
  4007c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4007cc:	683b      	ldr	r3, [r7, #0]
  4007ce:	4798      	blx	r3
  4007d0:	2800      	cmp	r0, #0
  4007d2:	db0a      	blt.n	4007ea <_write+0x3e>
  4007d4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4007d6:	3c01      	subs	r4, #1
  4007d8:	d1f4      	bne.n	4007c4 <_write+0x18>
  4007da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4007de:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4007e2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4007e4:	2000      	movs	r0, #0
  4007e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4007ea:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4007ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007f2:	bf00      	nop
  4007f4:	20400948 	.word	0x20400948
  4007f8:	2040094c 	.word	0x2040094c

004007fc <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4007fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4007fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400802:	4b57      	ldr	r3, [pc, #348]	; (400960 <board_init+0x164>)
  400804:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400806:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40080a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40080e:	4b55      	ldr	r3, [pc, #340]	; (400964 <board_init+0x168>)
  400810:	2200      	movs	r2, #0
  400812:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400816:	695a      	ldr	r2, [r3, #20]
  400818:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  40081c:	615a      	str	r2, [r3, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40081e:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400822:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400826:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40082a:	f3c6 354e 	ubfx	r5, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40082e:	f006 0707 	and.w	r7, r6, #7
  400832:	3704      	adds	r7, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400834:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400838:	fab6 f086 	clz	r0, r6
    wshift  = __CLZ(ways) & 0x1f;
  40083c:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400840:	f3bf 8f4f 	dsb	sy

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400844:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  400846:	4633      	mov	r3, r6
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  400848:	fa05 f107 	lsl.w	r1, r5, r7
  40084c:	fa03 f200 	lsl.w	r2, r3, r0
  400850:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  400852:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
            } while(tmpways--);
  400856:	3b01      	subs	r3, #1
  400858:	f1b3 3fff 	cmp.w	r3, #4294967295
  40085c:	d1f6      	bne.n	40084c <board_init+0x50>
        } while(sets--);
  40085e:	3d01      	subs	r5, #1
  400860:	f1b5 3fff 	cmp.w	r5, #4294967295
  400864:	d1ef      	bne.n	400846 <board_init+0x4a>
  400866:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40086a:	4b3e      	ldr	r3, [pc, #248]	; (400964 <board_init+0x168>)
  40086c:	695a      	ldr	r2, [r3, #20]
  40086e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400872:	615a      	str	r2, [r3, #20]
  400874:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400878:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40087c:	4a3a      	ldr	r2, [pc, #232]	; (400968 <board_init+0x16c>)
  40087e:	493b      	ldr	r1, [pc, #236]	; (40096c <board_init+0x170>)
  400880:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400882:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400886:	6051      	str	r1, [r2, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400888:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40088c:	f3bf 8f6f 	isb	sy
static inline void tcm_disable(void) 
{

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400890:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400894:	f022 0201 	bic.w	r2, r2, #1
  400898:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40089c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4008a0:	f022 0201 	bic.w	r2, r2, #1
  4008a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4008a8:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4008ac:	f3bf 8f6f 	isb	sy
  4008b0:	200a      	movs	r0, #10
  4008b2:	4c2f      	ldr	r4, [pc, #188]	; (400970 <board_init+0x174>)
  4008b4:	47a0      	blx	r4
  4008b6:	200b      	movs	r0, #11
  4008b8:	47a0      	blx	r4
  4008ba:	200c      	movs	r0, #12
  4008bc:	47a0      	blx	r4
  4008be:	2010      	movs	r0, #16
  4008c0:	47a0      	blx	r4
  4008c2:	2011      	movs	r0, #17
  4008c4:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008c6:	4b2b      	ldr	r3, [pc, #172]	; (400974 <board_init+0x178>)
  4008c8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4008cc:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4008d2:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4008d4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4008d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4008dc:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4008e2:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4008e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4008e8:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  4008ea:	621a      	str	r2, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  4008ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4008f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4008f2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4008f6:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4008f8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4008fa:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4008fe:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400900:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400904:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400908:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40090c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400910:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400912:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400916:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400918:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40091a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40091e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400920:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400924:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400926:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400928:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40092c:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40092e:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400930:	4a11      	ldr	r2, [pc, #68]	; (400978 <board_init+0x17c>)
  400932:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400936:	f043 0310 	orr.w	r3, r3, #16
  40093a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40093e:	4b0f      	ldr	r3, [pc, #60]	; (40097c <board_init+0x180>)
  400940:	2210      	movs	r2, #16
  400942:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400944:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400948:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40094a:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40094c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  400950:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400952:	4311      	orrs	r1, r2
  400954:	6719      	str	r1, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  400956:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400958:	4311      	orrs	r1, r2
  40095a:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40095c:	605a      	str	r2, [r3, #4]
  40095e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400960:	400e1850 	.word	0x400e1850
  400964:	e000ed00 	.word	0xe000ed00
  400968:	400e0c00 	.word	0x400e0c00
  40096c:	5a00080c 	.word	0x5a00080c
  400970:	00400e5d 	.word	0x00400e5d
  400974:	400e1200 	.word	0x400e1200
  400978:	40088000 	.word	0x40088000
  40097c:	400e1000 	.word	0x400e1000

00400980 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400980:	b570      	push	{r4, r5, r6, lr}
  400982:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400984:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  400986:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400988:	4013      	ands	r3, r2
  40098a:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40098c:	2400      	movs	r4, #0
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  40098e:	4e1a      	ldr	r6, [pc, #104]	; (4009f8 <afec_process_callback+0x78>)
  400990:	4d1a      	ldr	r5, [pc, #104]	; (4009fc <afec_process_callback+0x7c>)
  400992:	42a8      	cmp	r0, r5
  400994:	bf14      	ite	ne
  400996:	2000      	movne	r0, #0
  400998:	2001      	moveq	r0, #1
  40099a:	0105      	lsls	r5, r0, #4

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40099c:	2c0b      	cmp	r4, #11
  40099e:	d80a      	bhi.n	4009b6 <afec_process_callback+0x36>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  4009a0:	9a01      	ldr	r2, [sp, #4]
  4009a2:	2301      	movs	r3, #1
  4009a4:	40a3      	lsls	r3, r4
  4009a6:	4213      	tst	r3, r2
  4009a8:	d020      	beq.n	4009ec <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4009aa:	192b      	adds	r3, r5, r4
  4009ac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4009b0:	b1e3      	cbz	r3, 4009ec <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  4009b2:	4798      	blx	r3
  4009b4:	e01a      	b.n	4009ec <afec_process_callback+0x6c>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4009b6:	2c0e      	cmp	r4, #14
  4009b8:	d80c      	bhi.n	4009d4 <afec_process_callback+0x54>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4009ba:	9a01      	ldr	r2, [sp, #4]
  4009bc:	f104 010c 	add.w	r1, r4, #12
  4009c0:	2301      	movs	r3, #1
  4009c2:	408b      	lsls	r3, r1
  4009c4:	4213      	tst	r3, r2
  4009c6:	d011      	beq.n	4009ec <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4009c8:	192b      	adds	r3, r5, r4
  4009ca:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4009ce:	b16b      	cbz	r3, 4009ec <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  4009d0:	4798      	blx	r3
  4009d2:	e00b      	b.n	4009ec <afec_process_callback+0x6c>
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4009d4:	9a01      	ldr	r2, [sp, #4]
  4009d6:	f104 010f 	add.w	r1, r4, #15
  4009da:	2301      	movs	r3, #1
  4009dc:	408b      	lsls	r3, r1
  4009de:	4213      	tst	r3, r2
  4009e0:	d004      	beq.n	4009ec <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4009e2:	192b      	adds	r3, r5, r4
  4009e4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4009e8:	b103      	cbz	r3, 4009ec <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  4009ea:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4009ec:	3401      	adds	r4, #1
  4009ee:	2c10      	cmp	r4, #16
  4009f0:	d1d4      	bne.n	40099c <afec_process_callback+0x1c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  4009f2:	b002      	add	sp, #8
  4009f4:	bd70      	pop	{r4, r5, r6, pc}
  4009f6:	bf00      	nop
  4009f8:	20400950 	.word	0x20400950
  4009fc:	40064000 	.word	0x40064000

00400a00 <afec_ch_set_config>:
 * \param channel The channel number
 * \param config   Configuration for the AFEC channel
 */
void afec_ch_set_config(Afec *const afec, const enum afec_channel_num channel,
		struct afec_ch_config *config)
{
  400a00:	b430      	push	{r4, r5}
	afec_ch_sanity_check(afec, channel);
	uint32_t reg = 0;

	reg = afec->AFEC_DIFFR;
  400a02:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400a04:	2301      	movs	r3, #1
  400a06:	408b      	lsls	r3, r1
  400a08:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400a0c:	7815      	ldrb	r5, [r2, #0]
  400a0e:	2d00      	cmp	r5, #0
  400a10:	bf08      	it	eq
  400a12:	2300      	moveq	r3, #0
  400a14:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  400a16:	6603      	str	r3, [r0, #96]	; 0x60

	reg = afec->AFEC_CGR;
  400a18:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  400a1a:	004d      	lsls	r5, r1, #1
  400a1c:	2103      	movs	r1, #3
  400a1e:	40a9      	lsls	r1, r5
  400a20:	ea24 0301 	bic.w	r3, r4, r1
	reg |= (config->gain) << (2 * channel);
  400a24:	7851      	ldrb	r1, [r2, #1]
  400a26:	40a9      	lsls	r1, r5
  400a28:	4319      	orrs	r1, r3
	afec->AFEC_CGR = reg;
  400a2a:	6541      	str	r1, [r0, #84]	; 0x54
}
  400a2c:	bc30      	pop	{r4, r5}
  400a2e:	4770      	bx	lr

00400a30 <afec_temp_sensor_set_config>:
{
	Assert(afec == AFEC0);

	uint32_t reg = 0;

	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  400a30:	784a      	ldrb	r2, [r1, #1]
  400a32:	780b      	ldrb	r3, [r1, #0]
  400a34:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  400a36:	6703      	str	r3, [r0, #112]	; 0x70

	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  400a38:	888a      	ldrh	r2, [r1, #4]
  400a3a:	884b      	ldrh	r3, [r1, #2]
  400a3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400a40:	6743      	str	r3, [r0, #116]	; 0x74
  400a42:	4770      	bx	lr

00400a44 <afec_get_config_defaults>:
void afec_get_config_defaults(struct afec_config *const cfg)
{
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  400a44:	2200      	movs	r2, #0
  400a46:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400a48:	4b08      	ldr	r3, [pc, #32]	; (400a6c <afec_get_config_defaults+0x28>)
  400a4a:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400a4c:	4b08      	ldr	r3, [pc, #32]	; (400a70 <afec_get_config_defaults+0x2c>)
  400a4e:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400a50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400a54:	60c3      	str	r3, [r0, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  400a56:	2302      	movs	r3, #2
  400a58:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  400a5a:	2301      	movs	r3, #1
  400a5c:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  400a5e:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400a60:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400a62:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400a64:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400a66:	7583      	strb	r3, [r0, #22]
  400a68:	4770      	bx	lr
  400a6a:	bf00      	nop
  400a6c:	11e1a300 	.word	0x11e1a300
  400a70:	005b8d80 	.word	0x005b8d80

00400a74 <afec_ch_get_config_defaults>:
void afec_ch_get_config_defaults(struct afec_ch_config *const cfg)
{
	/*Sanity check argument. */
	Assert(cfg);

	cfg->diff = false;
  400a74:	2300      	movs	r3, #0
  400a76:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400a78:	2301      	movs	r3, #1
  400a7a:	7043      	strb	r3, [r0, #1]
  400a7c:	4770      	bx	lr
  400a7e:	bf00      	nop

00400a80 <afec_temp_sensor_get_config_defaults>:
		struct afec_temp_sensor_config *const cfg)
{
	/*Sanity check argument. */
	Assert(cfg);

	cfg->rctc = false;
  400a80:	2300      	movs	r3, #0
  400a82:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  400a84:	2320      	movs	r3, #32
  400a86:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  400a88:	23ff      	movs	r3, #255	; 0xff
  400a8a:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  400a8c:	f640 73ff 	movw	r3, #4095	; 0xfff
  400a90:	8083      	strh	r3, [r0, #4]
  400a92:	4770      	bx	lr

00400a94 <afec_init>:
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400a94:	6b03      	ldr	r3, [r0, #48]	; 0x30
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400a96:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  400a9a:	d150      	bne.n	400b3e <afec_init+0xaa>
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  400a9c:	b410      	push	{r4}
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  400a9e:	2201      	movs	r2, #1
  400aa0:	6002      	str	r2, [r0, #0]
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400aa2:	7cca      	ldrb	r2, [r1, #19]
  400aa4:	2a00      	cmp	r2, #0
  400aa6:	bf18      	it	ne
  400aa8:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
  400aac:	684a      	ldr	r2, [r1, #4]
  400aae:	688c      	ldr	r4, [r1, #8]
  400ab0:	fbb2 f2f4 	udiv	r2, r2, r4
  400ab4:	3a01      	subs	r2, #1
  400ab6:	0212      	lsls	r2, r2, #8
  400ab8:	b292      	uxth	r2, r2
  400aba:	68cc      	ldr	r4, [r1, #12]
  400abc:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  400ac0:	4322      	orrs	r2, r4
  400ac2:	7c0c      	ldrb	r4, [r1, #16]
  400ac4:	0624      	lsls	r4, r4, #24
  400ac6:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
  400aca:	4322      	orrs	r2, r4
  400acc:	7c4c      	ldrb	r4, [r1, #17]
  400ace:	0724      	lsls	r4, r4, #28
  400ad0:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
  400ad4:	4322      	orrs	r2, r4
  400ad6:	4313      	orrs	r3, r2
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;
  400ad8:	6043      	str	r3, [r0, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400ada:	7d0b      	ldrb	r3, [r1, #20]
  400adc:	2b00      	cmp	r3, #0
  400ade:	bf14      	ite	ne
  400ae0:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
  400ae4:	2200      	moveq	r2, #0
  400ae6:	680b      	ldr	r3, [r1, #0]
  400ae8:	431a      	orrs	r2, r3
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  400aea:	7d4b      	ldrb	r3, [r1, #21]
  400aec:	2b00      	cmp	r3, #0
  400aee:	bf14      	ite	ne
  400af0:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
  400af4:	2300      	moveq	r3, #0
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
			(config->resolution) |
  400af6:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400af8:	6083      	str	r3, [r0, #8]
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400afa:	7d8b      	ldrb	r3, [r1, #22]
  400afc:	021b      	lsls	r3, r3, #8
  400afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400b02:	f043 030c 	orr.w	r3, r3, #12
  400b06:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
  400b0a:	4b10      	ldr	r3, [pc, #64]	; (400b4c <afec_init+0xb8>)
  400b0c:	4298      	cmp	r0, r3
  400b0e:	d109      	bne.n	400b24 <afec_init+0x90>
  400b10:	4b0f      	ldr	r3, [pc, #60]	; (400b50 <afec_init+0xbc>)
  400b12:	f103 0140 	add.w	r1, r3, #64	; 0x40
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
  400b16:	2200      	movs	r2, #0
  400b18:	f843 2f04 	str.w	r2, [r3, #4]!
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400b1c:	428b      	cmp	r3, r1
  400b1e:	d1fb      	bne.n	400b18 <afec_init+0x84>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  400b20:	2000      	movs	r0, #0
  400b22:	e00f      	b.n	400b44 <afec_init+0xb0>
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
  400b24:	4b0b      	ldr	r3, [pc, #44]	; (400b54 <afec_init+0xc0>)
  400b26:	4298      	cmp	r0, r3
  400b28:	d10b      	bne.n	400b42 <afec_init+0xae>
  400b2a:	4b0b      	ldr	r3, [pc, #44]	; (400b58 <afec_init+0xc4>)
  400b2c:	f103 0140 	add.w	r1, r3, #64	; 0x40
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
  400b30:	2200      	movs	r2, #0
  400b32:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400b36:	428b      	cmp	r3, r1
  400b38:	d1fb      	bne.n	400b32 <afec_init+0x9e>
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  400b3a:	2000      	movs	r0, #0
  400b3c:	e002      	b.n	400b44 <afec_init+0xb0>
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
  400b3e:	2019      	movs	r0, #25
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
}
  400b40:	4770      	bx	lr
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  400b42:	2000      	movs	r0, #0
}
  400b44:	f85d 4b04 	ldr.w	r4, [sp], #4
  400b48:	4770      	bx	lr
  400b4a:	bf00      	nop
  400b4c:	4003c000 	.word	0x4003c000
  400b50:	2040094c 	.word	0x2040094c
  400b54:	40064000 	.word	0x40064000
  400b58:	2040098c 	.word	0x2040098c

00400b5c <afec_enable_interrupt>:
 * \param interrupt_source Interrupts to be enabled.
 */
void afec_enable_interrupt(Afec *const afec,
		enum afec_interrupt_source interrupt_source)
{
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400b5c:	4b0c      	ldr	r3, [pc, #48]	; (400b90 <afec_enable_interrupt+0x34>)
  400b5e:	4299      	cmp	r1, r3
  400b60:	d101      	bne.n	400b66 <afec_enable_interrupt+0xa>
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  400b62:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  400b64:	4770      	bx	lr
	}

	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400b66:	290b      	cmp	r1, #11
  400b68:	d809      	bhi.n	400b7e <afec_enable_interrupt+0x22>
	  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  400b6a:	d103      	bne.n	400b74 <afec_enable_interrupt+0x18>
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  400b6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400b70:	6243      	str	r3, [r0, #36]	; 0x24
  400b72:	4770      	bx	lr
	  #else
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
	  #endif 
		} else {
			afec->AFEC_IER = 1 << interrupt_source;
  400b74:	2301      	movs	r3, #1
  400b76:	fa03 f101 	lsl.w	r1, r3, r1
  400b7a:	6241      	str	r1, [r0, #36]	; 0x24
  400b7c:	4770      	bx	lr
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  400b7e:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400b80:	bf94      	ite	ls
  400b82:	310c      	addls	r1, #12
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400b84:	310f      	addhi	r1, #15
  400b86:	2301      	movs	r3, #1
  400b88:	fa03 f101 	lsl.w	r1, r3, r1
  400b8c:	6241      	str	r1, [r0, #36]	; 0x24
  400b8e:	4770      	bx	lr
  400b90:	47000fff 	.word	0x47000fff

00400b94 <afec_set_callback>:
 * \param callback  Callback function pointer
 * \param irq_level Interrupt level
 */
void afec_set_callback(Afec *const afec, enum afec_interrupt_source source,
		afec_callback_t callback, uint8_t irq_level)
{
  400b94:	b538      	push	{r3, r4, r5, lr}
	Assert(afec);
	Assert(callback);

	uint32_t i = afec_find_inst_num(afec);
	afec_callback_pointer[i][source] = callback;
  400b96:	4c11      	ldr	r4, [pc, #68]	; (400bdc <afec_set_callback+0x48>)
  400b98:	42a0      	cmp	r0, r4
  400b9a:	bf0c      	ite	eq
  400b9c:	2410      	moveq	r4, #16
  400b9e:	2400      	movne	r4, #0
  400ba0:	440c      	add	r4, r1
  400ba2:	4d0f      	ldr	r5, [pc, #60]	; (400be0 <afec_set_callback+0x4c>)
  400ba4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  400ba8:	d00a      	beq.n	400bc0 <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400baa:	4a0e      	ldr	r2, [pc, #56]	; (400be4 <afec_set_callback+0x50>)
  400bac:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  400bb0:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400bb4:	015b      	lsls	r3, r3, #5
  400bb6:	b2db      	uxtb	r3, r3
  400bb8:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400bbc:	6014      	str	r4, [r2, #0]
  400bbe:	e009      	b.n	400bd4 <afec_set_callback+0x40>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400bc0:	4a08      	ldr	r2, [pc, #32]	; (400be4 <afec_set_callback+0x50>)
  400bc2:	f44f 7480 	mov.w	r4, #256	; 0x100
  400bc6:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400bca:	015b      	lsls	r3, r3, #5
  400bcc:	b2db      	uxtb	r3, r3
  400bce:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400bd2:	6054      	str	r4, [r2, #4]
		irq_register_handler(AFEC0_IRQn, irq_level);
	} else if (i == 1) {
		irq_register_handler(AFEC1_IRQn, irq_level);
	}
	/* Enable the specified interrupt source */
	afec_enable_interrupt(afec, source);
  400bd4:	4b04      	ldr	r3, [pc, #16]	; (400be8 <afec_set_callback+0x54>)
  400bd6:	4798      	blx	r3
  400bd8:	bd38      	pop	{r3, r4, r5, pc}
  400bda:	bf00      	nop
  400bdc:	40064000 	.word	0x40064000
  400be0:	20400950 	.word	0x20400950
  400be4:	e000e100 	.word	0xe000e100
  400be8:	00400b5d 	.word	0x00400b5d

00400bec <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400bec:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400bee:	4802      	ldr	r0, [pc, #8]	; (400bf8 <AFEC0_Handler+0xc>)
  400bf0:	4b02      	ldr	r3, [pc, #8]	; (400bfc <AFEC0_Handler+0x10>)
  400bf2:	4798      	blx	r3
  400bf4:	bd08      	pop	{r3, pc}
  400bf6:	bf00      	nop
  400bf8:	4003c000 	.word	0x4003c000
  400bfc:	00400981 	.word	0x00400981

00400c00 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400c00:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400c02:	4802      	ldr	r0, [pc, #8]	; (400c0c <AFEC1_Handler+0xc>)
  400c04:	4b02      	ldr	r3, [pc, #8]	; (400c10 <AFEC1_Handler+0x10>)
  400c06:	4798      	blx	r3
  400c08:	bd08      	pop	{r3, pc}
  400c0a:	bf00      	nop
  400c0c:	40064000 	.word	0x40064000
  400c10:	00400981 	.word	0x00400981

00400c14 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400c14:	b500      	push	{lr}
  400c16:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400c18:	4b13      	ldr	r3, [pc, #76]	; (400c68 <afec_enable+0x54>)
  400c1a:	4298      	cmp	r0, r3
  400c1c:	bf0c      	ite	eq
  400c1e:	2028      	moveq	r0, #40	; 0x28
  400c20:	201d      	movne	r0, #29
  400c22:	4b12      	ldr	r3, [pc, #72]	; (400c6c <afec_enable+0x58>)
  400c24:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400c26:	4b12      	ldr	r3, [pc, #72]	; (400c70 <afec_enable+0x5c>)
  400c28:	789b      	ldrb	r3, [r3, #2]
  400c2a:	2bff      	cmp	r3, #255	; 0xff
  400c2c:	d100      	bne.n	400c30 <afec_enable+0x1c>
  400c2e:	e7fe      	b.n	400c2e <afec_enable+0x1a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400c30:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400c34:	fab3 f383 	clz	r3, r3
  400c38:	095b      	lsrs	r3, r3, #5
  400c3a:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400c3c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400c3e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400c42:	2200      	movs	r2, #0
  400c44:	4b0b      	ldr	r3, [pc, #44]	; (400c74 <afec_enable+0x60>)
  400c46:	701a      	strb	r2, [r3, #0]
	return flags;
  400c48:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400c4a:	4a09      	ldr	r2, [pc, #36]	; (400c70 <afec_enable+0x5c>)
  400c4c:	7893      	ldrb	r3, [r2, #2]
  400c4e:	3301      	adds	r3, #1
  400c50:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400c52:	b129      	cbz	r1, 400c60 <afec_enable+0x4c>
		cpu_irq_enable();
  400c54:	2201      	movs	r2, #1
  400c56:	4b07      	ldr	r3, [pc, #28]	; (400c74 <afec_enable+0x60>)
  400c58:	701a      	strb	r2, [r3, #0]
  400c5a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400c5e:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400c60:	b003      	add	sp, #12
  400c62:	f85d fb04 	ldr.w	pc, [sp], #4
  400c66:	bf00      	nop
  400c68:	40064000 	.word	0x40064000
  400c6c:	00400e5d 	.word	0x00400e5d
  400c70:	2040093c 	.word	0x2040093c
  400c74:	20400000 	.word	0x20400000

00400c78 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400c78:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400c7a:	4770      	bx	lr

00400c7c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400c7c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400c7e:	4770      	bx	lr

00400c80 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c84:	4604      	mov	r4, r0
  400c86:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400c88:	4b0e      	ldr	r3, [pc, #56]	; (400cc4 <pio_handler_process+0x44>)
  400c8a:	4798      	blx	r3
  400c8c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400c8e:	4620      	mov	r0, r4
  400c90:	4b0d      	ldr	r3, [pc, #52]	; (400cc8 <pio_handler_process+0x48>)
  400c92:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400c94:	4005      	ands	r5, r0
  400c96:	d013      	beq.n	400cc0 <pio_handler_process+0x40>
  400c98:	4c0c      	ldr	r4, [pc, #48]	; (400ccc <pio_handler_process+0x4c>)
  400c9a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400c9e:	6823      	ldr	r3, [r4, #0]
  400ca0:	4543      	cmp	r3, r8
  400ca2:	d108      	bne.n	400cb6 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400ca4:	6861      	ldr	r1, [r4, #4]
  400ca6:	4229      	tst	r1, r5
  400ca8:	d005      	beq.n	400cb6 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400caa:	68e3      	ldr	r3, [r4, #12]
  400cac:	4640      	mov	r0, r8
  400cae:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400cb0:	6863      	ldr	r3, [r4, #4]
  400cb2:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400cb6:	42b4      	cmp	r4, r6
  400cb8:	d002      	beq.n	400cc0 <pio_handler_process+0x40>
  400cba:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400cbc:	2d00      	cmp	r5, #0
  400cbe:	d1ee      	bne.n	400c9e <pio_handler_process+0x1e>
  400cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400cc4:	00400c79 	.word	0x00400c79
  400cc8:	00400c7d 	.word	0x00400c7d
  400ccc:	20400890 	.word	0x20400890

00400cd0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400cd0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400cd2:	210a      	movs	r1, #10
  400cd4:	4801      	ldr	r0, [pc, #4]	; (400cdc <PIOA_Handler+0xc>)
  400cd6:	4b02      	ldr	r3, [pc, #8]	; (400ce0 <PIOA_Handler+0x10>)
  400cd8:	4798      	blx	r3
  400cda:	bd08      	pop	{r3, pc}
  400cdc:	400e0e00 	.word	0x400e0e00
  400ce0:	00400c81 	.word	0x00400c81

00400ce4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400ce4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400ce6:	210b      	movs	r1, #11
  400ce8:	4801      	ldr	r0, [pc, #4]	; (400cf0 <PIOB_Handler+0xc>)
  400cea:	4b02      	ldr	r3, [pc, #8]	; (400cf4 <PIOB_Handler+0x10>)
  400cec:	4798      	blx	r3
  400cee:	bd08      	pop	{r3, pc}
  400cf0:	400e1000 	.word	0x400e1000
  400cf4:	00400c81 	.word	0x00400c81

00400cf8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400cf8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400cfa:	210c      	movs	r1, #12
  400cfc:	4801      	ldr	r0, [pc, #4]	; (400d04 <PIOC_Handler+0xc>)
  400cfe:	4b02      	ldr	r3, [pc, #8]	; (400d08 <PIOC_Handler+0x10>)
  400d00:	4798      	blx	r3
  400d02:	bd08      	pop	{r3, pc}
  400d04:	400e1200 	.word	0x400e1200
  400d08:	00400c81 	.word	0x00400c81

00400d0c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400d0c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400d0e:	2110      	movs	r1, #16
  400d10:	4801      	ldr	r0, [pc, #4]	; (400d18 <PIOD_Handler+0xc>)
  400d12:	4b02      	ldr	r3, [pc, #8]	; (400d1c <PIOD_Handler+0x10>)
  400d14:	4798      	blx	r3
  400d16:	bd08      	pop	{r3, pc}
  400d18:	400e1400 	.word	0x400e1400
  400d1c:	00400c81 	.word	0x00400c81

00400d20 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400d20:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400d22:	2111      	movs	r1, #17
  400d24:	4801      	ldr	r0, [pc, #4]	; (400d2c <PIOE_Handler+0xc>)
  400d26:	4b02      	ldr	r3, [pc, #8]	; (400d30 <PIOE_Handler+0x10>)
  400d28:	4798      	blx	r3
  400d2a:	bd08      	pop	{r3, pc}
  400d2c:	400e1600 	.word	0x400e1600
  400d30:	00400c81 	.word	0x00400c81

00400d34 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400d34:	2803      	cmp	r0, #3
  400d36:	d007      	beq.n	400d48 <pmc_mck_set_division+0x14>
  400d38:	2804      	cmp	r0, #4
  400d3a:	d008      	beq.n	400d4e <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400d3c:	2802      	cmp	r0, #2
  400d3e:	bf0c      	ite	eq
  400d40:	f44f 7280 	moveq.w	r2, #256	; 0x100
  400d44:	2200      	movne	r2, #0
  400d46:	e004      	b.n	400d52 <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400d48:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  400d4c:	e001      	b.n	400d52 <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400d52:	4906      	ldr	r1, [pc, #24]	; (400d6c <pmc_mck_set_division+0x38>)
  400d54:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400d5a:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  400d5c:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400d5e:	460a      	mov	r2, r1
  400d60:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d62:	f013 0f08 	tst.w	r3, #8
  400d66:	d0fb      	beq.n	400d60 <pmc_mck_set_division+0x2c>
}
  400d68:	4770      	bx	lr
  400d6a:	bf00      	nop
  400d6c:	400e0600 	.word	0x400e0600

00400d70 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400d70:	4a18      	ldr	r2, [pc, #96]	; (400dd4 <pmc_switch_mck_to_pllack+0x64>)
  400d72:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400d78:	4318      	orrs	r0, r3
  400d7a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d7c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d7e:	f013 0f08 	tst.w	r3, #8
  400d82:	d003      	beq.n	400d8c <pmc_switch_mck_to_pllack+0x1c>
  400d84:	e009      	b.n	400d9a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400d86:	3b01      	subs	r3, #1
  400d88:	d103      	bne.n	400d92 <pmc_switch_mck_to_pllack+0x22>
  400d8a:	e01e      	b.n	400dca <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400d90:	4910      	ldr	r1, [pc, #64]	; (400dd4 <pmc_switch_mck_to_pllack+0x64>)
  400d92:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400d94:	f012 0f08 	tst.w	r2, #8
  400d98:	d0f5      	beq.n	400d86 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400d9a:	4a0e      	ldr	r2, [pc, #56]	; (400dd4 <pmc_switch_mck_to_pllack+0x64>)
  400d9c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d9e:	f023 0303 	bic.w	r3, r3, #3
  400da2:	f043 0302 	orr.w	r3, r3, #2
  400da6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400da8:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400daa:	f010 0008 	ands.w	r0, r0, #8
  400dae:	d004      	beq.n	400dba <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400db0:	2000      	movs	r0, #0
  400db2:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400db4:	3b01      	subs	r3, #1
  400db6:	d103      	bne.n	400dc0 <pmc_switch_mck_to_pllack+0x50>
  400db8:	e009      	b.n	400dce <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400dbe:	4905      	ldr	r1, [pc, #20]	; (400dd4 <pmc_switch_mck_to_pllack+0x64>)
  400dc0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400dc2:	f012 0f08 	tst.w	r2, #8
  400dc6:	d0f5      	beq.n	400db4 <pmc_switch_mck_to_pllack+0x44>
  400dc8:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400dca:	2001      	movs	r0, #1
  400dcc:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400dce:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400dd0:	4770      	bx	lr
  400dd2:	bf00      	nop
  400dd4:	400e0600 	.word	0x400e0600

00400dd8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400dd8:	b138      	cbz	r0, 400dea <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400dda:	490e      	ldr	r1, [pc, #56]	; (400e14 <pmc_switch_mainck_to_xtal+0x3c>)
  400ddc:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400dde:	4a0e      	ldr	r2, [pc, #56]	; (400e18 <pmc_switch_mainck_to_xtal+0x40>)
  400de0:	401a      	ands	r2, r3
  400de2:	4b0e      	ldr	r3, [pc, #56]	; (400e1c <pmc_switch_mainck_to_xtal+0x44>)
  400de4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400de6:	620b      	str	r3, [r1, #32]
  400de8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400dea:	480a      	ldr	r0, [pc, #40]	; (400e14 <pmc_switch_mainck_to_xtal+0x3c>)
  400dec:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400dee:	0209      	lsls	r1, r1, #8
  400df0:	b289      	uxth	r1, r1
  400df2:	4a0b      	ldr	r2, [pc, #44]	; (400e20 <pmc_switch_mainck_to_xtal+0x48>)
  400df4:	401a      	ands	r2, r3
  400df6:	4b0b      	ldr	r3, [pc, #44]	; (400e24 <pmc_switch_mainck_to_xtal+0x4c>)
  400df8:	4313      	orrs	r3, r2
  400dfa:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400dfc:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400dfe:	4602      	mov	r2, r0
  400e00:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e02:	f013 0f01 	tst.w	r3, #1
  400e06:	d0fb      	beq.n	400e00 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400e08:	4a02      	ldr	r2, [pc, #8]	; (400e14 <pmc_switch_mainck_to_xtal+0x3c>)
  400e0a:	6a11      	ldr	r1, [r2, #32]
  400e0c:	4b06      	ldr	r3, [pc, #24]	; (400e28 <pmc_switch_mainck_to_xtal+0x50>)
  400e0e:	430b      	orrs	r3, r1
  400e10:	6213      	str	r3, [r2, #32]
  400e12:	4770      	bx	lr
  400e14:	400e0600 	.word	0x400e0600
  400e18:	fec8fffc 	.word	0xfec8fffc
  400e1c:	01370002 	.word	0x01370002
  400e20:	ffc8fffc 	.word	0xffc8fffc
  400e24:	00370001 	.word	0x00370001
  400e28:	01370000 	.word	0x01370000

00400e2c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400e2c:	4b02      	ldr	r3, [pc, #8]	; (400e38 <pmc_osc_is_ready_mainck+0xc>)
  400e2e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e30:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400e34:	4770      	bx	lr
  400e36:	bf00      	nop
  400e38:	400e0600 	.word	0x400e0600

00400e3c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400e3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400e40:	4b01      	ldr	r3, [pc, #4]	; (400e48 <pmc_disable_pllack+0xc>)
  400e42:	629a      	str	r2, [r3, #40]	; 0x28
  400e44:	4770      	bx	lr
  400e46:	bf00      	nop
  400e48:	400e0600 	.word	0x400e0600

00400e4c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400e4c:	4b02      	ldr	r3, [pc, #8]	; (400e58 <pmc_is_locked_pllack+0xc>)
  400e4e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e50:	f000 0002 	and.w	r0, r0, #2
  400e54:	4770      	bx	lr
  400e56:	bf00      	nop
  400e58:	400e0600 	.word	0x400e0600

00400e5c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400e5c:	283f      	cmp	r0, #63	; 0x3f
  400e5e:	d81e      	bhi.n	400e9e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400e60:	281f      	cmp	r0, #31
  400e62:	d80c      	bhi.n	400e7e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400e64:	4b11      	ldr	r3, [pc, #68]	; (400eac <pmc_enable_periph_clk+0x50>)
  400e66:	699a      	ldr	r2, [r3, #24]
  400e68:	2301      	movs	r3, #1
  400e6a:	4083      	lsls	r3, r0
  400e6c:	4393      	bics	r3, r2
  400e6e:	d018      	beq.n	400ea2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400e70:	2301      	movs	r3, #1
  400e72:	fa03 f000 	lsl.w	r0, r3, r0
  400e76:	4b0d      	ldr	r3, [pc, #52]	; (400eac <pmc_enable_periph_clk+0x50>)
  400e78:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400e7a:	2000      	movs	r0, #0
  400e7c:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400e7e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400e80:	4b0a      	ldr	r3, [pc, #40]	; (400eac <pmc_enable_periph_clk+0x50>)
  400e82:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400e86:	2301      	movs	r3, #1
  400e88:	4083      	lsls	r3, r0
  400e8a:	4393      	bics	r3, r2
  400e8c:	d00b      	beq.n	400ea6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400e8e:	2301      	movs	r3, #1
  400e90:	fa03 f000 	lsl.w	r0, r3, r0
  400e94:	4b05      	ldr	r3, [pc, #20]	; (400eac <pmc_enable_periph_clk+0x50>)
  400e96:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  400e9a:	2000      	movs	r0, #0
  400e9c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400e9e:	2001      	movs	r0, #1
  400ea0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400ea2:	2000      	movs	r0, #0
  400ea4:	4770      	bx	lr
  400ea6:	2000      	movs	r0, #0
}
  400ea8:	4770      	bx	lr
  400eaa:	bf00      	nop
  400eac:	400e0600 	.word	0x400e0600

00400eb0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400eb0:	6943      	ldr	r3, [r0, #20]
  400eb2:	f013 0f02 	tst.w	r3, #2
  400eb6:	d002      	beq.n	400ebe <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400eb8:	61c1      	str	r1, [r0, #28]
	return 0;
  400eba:	2000      	movs	r0, #0
  400ebc:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400ebe:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400ec0:	4770      	bx	lr
  400ec2:	bf00      	nop

00400ec4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400ec4:	6943      	ldr	r3, [r0, #20]
  400ec6:	f013 0f01 	tst.w	r3, #1
  400eca:	d003      	beq.n	400ed4 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400ecc:	6983      	ldr	r3, [r0, #24]
  400ece:	700b      	strb	r3, [r1, #0]
	return 0;
  400ed0:	2000      	movs	r0, #0
  400ed2:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400ed4:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400ed6:	4770      	bx	lr

00400ed8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400ed8:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400eda:	010c      	lsls	r4, r1, #4
  400edc:	4294      	cmp	r4, r2
  400ede:	d90f      	bls.n	400f00 <usart_set_async_baudrate+0x28>
  400ee0:	e01a      	b.n	400f18 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400ee2:	6841      	ldr	r1, [r0, #4]
  400ee4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400ee8:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400eea:	0412      	lsls	r2, r2, #16
  400eec:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400ef0:	431a      	orrs	r2, r3
  400ef2:	6202      	str	r2, [r0, #32]

	return 0;
  400ef4:	2000      	movs	r0, #0
  400ef6:	e01c      	b.n	400f32 <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  400ef8:	2001      	movs	r0, #1
  400efa:	e01a      	b.n	400f32 <usart_set_async_baudrate+0x5a>
  400efc:	2001      	movs	r0, #1
  400efe:	e018      	b.n	400f32 <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400f00:	0863      	lsrs	r3, r4, #1
  400f02:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400f06:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  400f0a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400f0c:	1e5c      	subs	r4, r3, #1
  400f0e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400f12:	428c      	cmp	r4, r1
  400f14:	d9e9      	bls.n	400eea <usart_set_async_baudrate+0x12>
  400f16:	e7ef      	b.n	400ef8 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400f18:	00c9      	lsls	r1, r1, #3
  400f1a:	084b      	lsrs	r3, r1, #1
  400f1c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400f20:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400f24:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400f26:	1e5c      	subs	r4, r3, #1
  400f28:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400f2c:	428c      	cmp	r4, r1
  400f2e:	d8e5      	bhi.n	400efc <usart_set_async_baudrate+0x24>
  400f30:	e7d7      	b.n	400ee2 <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  400f32:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f36:	4770      	bx	lr

00400f38 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400f38:	4b08      	ldr	r3, [pc, #32]	; (400f5c <usart_reset+0x24>)
  400f3a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400f3e:	2300      	movs	r3, #0
  400f40:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400f42:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400f44:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400f46:	2388      	movs	r3, #136	; 0x88
  400f48:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400f4a:	2324      	movs	r3, #36	; 0x24
  400f4c:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  400f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
  400f52:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  400f54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400f58:	6003      	str	r3, [r0, #0]
  400f5a:	4770      	bx	lr
  400f5c:	55534100 	.word	0x55534100

00400f60 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400f60:	b570      	push	{r4, r5, r6, lr}
  400f62:	4605      	mov	r5, r0
  400f64:	460c      	mov	r4, r1
  400f66:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400f68:	4b0f      	ldr	r3, [pc, #60]	; (400fa8 <usart_init_rs232+0x48>)
  400f6a:	4798      	blx	r3

	ul_reg_val = 0;
  400f6c:	2200      	movs	r2, #0
  400f6e:	4b0f      	ldr	r3, [pc, #60]	; (400fac <usart_init_rs232+0x4c>)
  400f70:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400f72:	b19c      	cbz	r4, 400f9c <usart_init_rs232+0x3c>
  400f74:	4632      	mov	r2, r6
  400f76:	6821      	ldr	r1, [r4, #0]
  400f78:	4628      	mov	r0, r5
  400f7a:	4b0d      	ldr	r3, [pc, #52]	; (400fb0 <usart_init_rs232+0x50>)
  400f7c:	4798      	blx	r3
  400f7e:	4602      	mov	r2, r0
  400f80:	b970      	cbnz	r0, 400fa0 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400f82:	6861      	ldr	r1, [r4, #4]
  400f84:	68a3      	ldr	r3, [r4, #8]
  400f86:	4319      	orrs	r1, r3
  400f88:	6923      	ldr	r3, [r4, #16]
  400f8a:	4319      	orrs	r1, r3
  400f8c:	68e3      	ldr	r3, [r4, #12]
  400f8e:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400f90:	4906      	ldr	r1, [pc, #24]	; (400fac <usart_init_rs232+0x4c>)
  400f92:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  400f94:	6869      	ldr	r1, [r5, #4]
  400f96:	430b      	orrs	r3, r1
  400f98:	606b      	str	r3, [r5, #4]

	return 0;
  400f9a:	e002      	b.n	400fa2 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400f9c:	2201      	movs	r2, #1
  400f9e:	e000      	b.n	400fa2 <usart_init_rs232+0x42>
  400fa0:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  400fa2:	4610      	mov	r0, r2
  400fa4:	bd70      	pop	{r4, r5, r6, pc}
  400fa6:	bf00      	nop
  400fa8:	00400f39 	.word	0x00400f39
  400fac:	20400900 	.word	0x20400900
  400fb0:	00400ed9 	.word	0x00400ed9

00400fb4 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  400fb4:	2340      	movs	r3, #64	; 0x40
  400fb6:	6003      	str	r3, [r0, #0]
  400fb8:	4770      	bx	lr
  400fba:	bf00      	nop

00400fbc <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  400fbc:	2310      	movs	r3, #16
  400fbe:	6003      	str	r3, [r0, #0]
  400fc0:	4770      	bx	lr
  400fc2:	bf00      	nop

00400fc4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400fc4:	6943      	ldr	r3, [r0, #20]
  400fc6:	f013 0f02 	tst.w	r3, #2
  400fca:	d004      	beq.n	400fd6 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400fcc:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400fd0:	61c1      	str	r1, [r0, #28]
	return 0;
  400fd2:	2000      	movs	r0, #0
  400fd4:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400fd6:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400fd8:	4770      	bx	lr
  400fda:	bf00      	nop

00400fdc <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400fdc:	6943      	ldr	r3, [r0, #20]
  400fde:	f013 0f01 	tst.w	r3, #1
  400fe2:	d005      	beq.n	400ff0 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400fe4:	6983      	ldr	r3, [r0, #24]
  400fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400fea:	600b      	str	r3, [r1, #0]

	return 0;
  400fec:	2000      	movs	r0, #0
  400fee:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400ff0:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400ff2:	4770      	bx	lr

00400ff4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400ff4:	e7fe      	b.n	400ff4 <Dummy_Handler>
  400ff6:	bf00      	nop

00400ff8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400ff8:	b500      	push	{lr}
  400ffa:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  400ffc:	4b27      	ldr	r3, [pc, #156]	; (40109c <Reset_Handler+0xa4>)
  400ffe:	4a28      	ldr	r2, [pc, #160]	; (4010a0 <Reset_Handler+0xa8>)
  401000:	429a      	cmp	r2, r3
  401002:	d003      	beq.n	40100c <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  401004:	4b27      	ldr	r3, [pc, #156]	; (4010a4 <Reset_Handler+0xac>)
  401006:	4a25      	ldr	r2, [pc, #148]	; (40109c <Reset_Handler+0xa4>)
  401008:	429a      	cmp	r2, r3
  40100a:	d304      	bcc.n	401016 <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  40100c:	4b26      	ldr	r3, [pc, #152]	; (4010a8 <Reset_Handler+0xb0>)
  40100e:	4a27      	ldr	r2, [pc, #156]	; (4010ac <Reset_Handler+0xb4>)
  401010:	429a      	cmp	r2, r3
  401012:	d30f      	bcc.n	401034 <Reset_Handler+0x3c>
  401014:	e01a      	b.n	40104c <Reset_Handler+0x54>
  401016:	4921      	ldr	r1, [pc, #132]	; (40109c <Reset_Handler+0xa4>)
  401018:	4b25      	ldr	r3, [pc, #148]	; (4010b0 <Reset_Handler+0xb8>)
  40101a:	1a5b      	subs	r3, r3, r1
  40101c:	f023 0303 	bic.w	r3, r3, #3
  401020:	3304      	adds	r3, #4
  401022:	4a1f      	ldr	r2, [pc, #124]	; (4010a0 <Reset_Handler+0xa8>)
  401024:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  401026:	f852 0b04 	ldr.w	r0, [r2], #4
  40102a:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  40102e:	429a      	cmp	r2, r3
  401030:	d1f9      	bne.n	401026 <Reset_Handler+0x2e>
  401032:	e7eb      	b.n	40100c <Reset_Handler+0x14>
  401034:	4b1f      	ldr	r3, [pc, #124]	; (4010b4 <Reset_Handler+0xbc>)
  401036:	4a20      	ldr	r2, [pc, #128]	; (4010b8 <Reset_Handler+0xc0>)
  401038:	1ad2      	subs	r2, r2, r3
  40103a:	f022 0203 	bic.w	r2, r2, #3
  40103e:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401040:	3b04      	subs	r3, #4
                *pDest++ = 0;
  401042:	2100      	movs	r1, #0
  401044:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401048:	4293      	cmp	r3, r2
  40104a:	d1fb      	bne.n	401044 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40104c:	4a1b      	ldr	r2, [pc, #108]	; (4010bc <Reset_Handler+0xc4>)
  40104e:	4b1c      	ldr	r3, [pc, #112]	; (4010c0 <Reset_Handler+0xc8>)
  401050:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401054:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401056:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40105a:	fab3 f383 	clz	r3, r3
  40105e:	095b      	lsrs	r3, r3, #5
  401060:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401062:	b672      	cpsid	i
  401064:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401068:	2200      	movs	r2, #0
  40106a:	4b16      	ldr	r3, [pc, #88]	; (4010c4 <Reset_Handler+0xcc>)
  40106c:	701a      	strb	r2, [r3, #0]
	return flags;
  40106e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401070:	4a15      	ldr	r2, [pc, #84]	; (4010c8 <Reset_Handler+0xd0>)
  401072:	6813      	ldr	r3, [r2, #0]
  401074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401078:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40107a:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40107e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401082:	b129      	cbz	r1, 401090 <Reset_Handler+0x98>
		cpu_irq_enable();
  401084:	2201      	movs	r2, #1
  401086:	4b0f      	ldr	r3, [pc, #60]	; (4010c4 <Reset_Handler+0xcc>)
  401088:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40108a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40108e:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  401090:	4b0e      	ldr	r3, [pc, #56]	; (4010cc <Reset_Handler+0xd4>)
  401092:	4798      	blx	r3

        /* Branch to main function */
        main();
  401094:	4b0e      	ldr	r3, [pc, #56]	; (4010d0 <Reset_Handler+0xd8>)
  401096:	4798      	blx	r3
  401098:	e7fe      	b.n	401098 <Reset_Handler+0xa0>
  40109a:	bf00      	nop
  40109c:	20400000 	.word	0x20400000
  4010a0:	00404928 	.word	0x00404928
  4010a4:	2040086c 	.word	0x2040086c
  4010a8:	204009d4 	.word	0x204009d4
  4010ac:	2040086c 	.word	0x2040086c
  4010b0:	2040086b 	.word	0x2040086b
  4010b4:	20400870 	.word	0x20400870
  4010b8:	204009d7 	.word	0x204009d7
  4010bc:	e000ed00 	.word	0xe000ed00
  4010c0:	00400000 	.word	0x00400000
  4010c4:	20400000 	.word	0x20400000
  4010c8:	e000ed88 	.word	0xe000ed88
  4010cc:	00401741 	.word	0x00401741
  4010d0:	00400451 	.word	0x00400451

004010d4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4010d4:	4b3c      	ldr	r3, [pc, #240]	; (4011c8 <SystemCoreClockUpdate+0xf4>)
  4010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010d8:	f003 0303 	and.w	r3, r3, #3
  4010dc:	2b01      	cmp	r3, #1
  4010de:	d00f      	beq.n	401100 <SystemCoreClockUpdate+0x2c>
  4010e0:	b113      	cbz	r3, 4010e8 <SystemCoreClockUpdate+0x14>
  4010e2:	2b02      	cmp	r3, #2
  4010e4:	d029      	beq.n	40113a <SystemCoreClockUpdate+0x66>
  4010e6:	e057      	b.n	401198 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4010e8:	4b38      	ldr	r3, [pc, #224]	; (4011cc <SystemCoreClockUpdate+0xf8>)
  4010ea:	695b      	ldr	r3, [r3, #20]
  4010ec:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4010f0:	bf14      	ite	ne
  4010f2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4010f6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4010fa:	4b35      	ldr	r3, [pc, #212]	; (4011d0 <SystemCoreClockUpdate+0xfc>)
  4010fc:	601a      	str	r2, [r3, #0]
  4010fe:	e04b      	b.n	401198 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401100:	4b31      	ldr	r3, [pc, #196]	; (4011c8 <SystemCoreClockUpdate+0xf4>)
  401102:	6a1b      	ldr	r3, [r3, #32]
  401104:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401108:	d003      	beq.n	401112 <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40110a:	4a32      	ldr	r2, [pc, #200]	; (4011d4 <SystemCoreClockUpdate+0x100>)
  40110c:	4b30      	ldr	r3, [pc, #192]	; (4011d0 <SystemCoreClockUpdate+0xfc>)
  40110e:	601a      	str	r2, [r3, #0]
  401110:	e042      	b.n	401198 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401112:	4a31      	ldr	r2, [pc, #196]	; (4011d8 <SystemCoreClockUpdate+0x104>)
  401114:	4b2e      	ldr	r3, [pc, #184]	; (4011d0 <SystemCoreClockUpdate+0xfc>)
  401116:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401118:	4b2b      	ldr	r3, [pc, #172]	; (4011c8 <SystemCoreClockUpdate+0xf4>)
  40111a:	6a1b      	ldr	r3, [r3, #32]
  40111c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401120:	2b10      	cmp	r3, #16
  401122:	d002      	beq.n	40112a <SystemCoreClockUpdate+0x56>
  401124:	2b20      	cmp	r3, #32
  401126:	d004      	beq.n	401132 <SystemCoreClockUpdate+0x5e>
  401128:	e036      	b.n	401198 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40112a:	4a2c      	ldr	r2, [pc, #176]	; (4011dc <SystemCoreClockUpdate+0x108>)
  40112c:	4b28      	ldr	r3, [pc, #160]	; (4011d0 <SystemCoreClockUpdate+0xfc>)
  40112e:	601a      	str	r2, [r3, #0]
          break;
  401130:	e032      	b.n	401198 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  401132:	4a28      	ldr	r2, [pc, #160]	; (4011d4 <SystemCoreClockUpdate+0x100>)
  401134:	4b26      	ldr	r3, [pc, #152]	; (4011d0 <SystemCoreClockUpdate+0xfc>)
  401136:	601a      	str	r2, [r3, #0]
          break;
  401138:	e02e      	b.n	401198 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40113a:	4b23      	ldr	r3, [pc, #140]	; (4011c8 <SystemCoreClockUpdate+0xf4>)
  40113c:	6a1b      	ldr	r3, [r3, #32]
  40113e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401142:	d003      	beq.n	40114c <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401144:	4a23      	ldr	r2, [pc, #140]	; (4011d4 <SystemCoreClockUpdate+0x100>)
  401146:	4b22      	ldr	r3, [pc, #136]	; (4011d0 <SystemCoreClockUpdate+0xfc>)
  401148:	601a      	str	r2, [r3, #0]
  40114a:	e012      	b.n	401172 <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40114c:	4a22      	ldr	r2, [pc, #136]	; (4011d8 <SystemCoreClockUpdate+0x104>)
  40114e:	4b20      	ldr	r3, [pc, #128]	; (4011d0 <SystemCoreClockUpdate+0xfc>)
  401150:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401152:	4b1d      	ldr	r3, [pc, #116]	; (4011c8 <SystemCoreClockUpdate+0xf4>)
  401154:	6a1b      	ldr	r3, [r3, #32]
  401156:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40115a:	2b10      	cmp	r3, #16
  40115c:	d002      	beq.n	401164 <SystemCoreClockUpdate+0x90>
  40115e:	2b20      	cmp	r3, #32
  401160:	d004      	beq.n	40116c <SystemCoreClockUpdate+0x98>
  401162:	e006      	b.n	401172 <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  401164:	4a1d      	ldr	r2, [pc, #116]	; (4011dc <SystemCoreClockUpdate+0x108>)
  401166:	4b1a      	ldr	r3, [pc, #104]	; (4011d0 <SystemCoreClockUpdate+0xfc>)
  401168:	601a      	str	r2, [r3, #0]
          break;
  40116a:	e002      	b.n	401172 <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  40116c:	4a19      	ldr	r2, [pc, #100]	; (4011d4 <SystemCoreClockUpdate+0x100>)
  40116e:	4b18      	ldr	r3, [pc, #96]	; (4011d0 <SystemCoreClockUpdate+0xfc>)
  401170:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401172:	4b15      	ldr	r3, [pc, #84]	; (4011c8 <SystemCoreClockUpdate+0xf4>)
  401174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401176:	f003 0303 	and.w	r3, r3, #3
  40117a:	2b02      	cmp	r3, #2
  40117c:	d10c      	bne.n	401198 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40117e:	4a12      	ldr	r2, [pc, #72]	; (4011c8 <SystemCoreClockUpdate+0xf4>)
  401180:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401182:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401184:	4812      	ldr	r0, [pc, #72]	; (4011d0 <SystemCoreClockUpdate+0xfc>)
  401186:	f3c3 410a 	ubfx	r1, r3, #16, #11
  40118a:	6803      	ldr	r3, [r0, #0]
  40118c:	fb01 3303 	mla	r3, r1, r3, r3
  401190:	b2d2      	uxtb	r2, r2
  401192:	fbb3 f3f2 	udiv	r3, r3, r2
  401196:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401198:	4b0b      	ldr	r3, [pc, #44]	; (4011c8 <SystemCoreClockUpdate+0xf4>)
  40119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40119c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011a0:	2b70      	cmp	r3, #112	; 0x70
  4011a2:	d107      	bne.n	4011b4 <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  4011a4:	4a0a      	ldr	r2, [pc, #40]	; (4011d0 <SystemCoreClockUpdate+0xfc>)
  4011a6:	6813      	ldr	r3, [r2, #0]
  4011a8:	490d      	ldr	r1, [pc, #52]	; (4011e0 <SystemCoreClockUpdate+0x10c>)
  4011aa:	fba1 1303 	umull	r1, r3, r1, r3
  4011ae:	085b      	lsrs	r3, r3, #1
  4011b0:	6013      	str	r3, [r2, #0]
  4011b2:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4011b4:	4b04      	ldr	r3, [pc, #16]	; (4011c8 <SystemCoreClockUpdate+0xf4>)
  4011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011b8:	4905      	ldr	r1, [pc, #20]	; (4011d0 <SystemCoreClockUpdate+0xfc>)
  4011ba:	f3c3 1202 	ubfx	r2, r3, #4, #3
  4011be:	680b      	ldr	r3, [r1, #0]
  4011c0:	40d3      	lsrs	r3, r2
  4011c2:	600b      	str	r3, [r1, #0]
  4011c4:	4770      	bx	lr
  4011c6:	bf00      	nop
  4011c8:	400e0600 	.word	0x400e0600
  4011cc:	400e1810 	.word	0x400e1810
  4011d0:	20400004 	.word	0x20400004
  4011d4:	00b71b00 	.word	0x00b71b00
  4011d8:	003d0900 	.word	0x003d0900
  4011dc:	007a1200 	.word	0x007a1200
  4011e0:	aaaaaaab 	.word	0xaaaaaaab

004011e4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4011e4:	4b16      	ldr	r3, [pc, #88]	; (401240 <system_init_flash+0x5c>)
  4011e6:	4298      	cmp	r0, r3
  4011e8:	d804      	bhi.n	4011f4 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4011ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4011ee:	4b15      	ldr	r3, [pc, #84]	; (401244 <system_init_flash+0x60>)
  4011f0:	601a      	str	r2, [r3, #0]
  4011f2:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4011f4:	4b14      	ldr	r3, [pc, #80]	; (401248 <system_init_flash+0x64>)
  4011f6:	4298      	cmp	r0, r3
  4011f8:	d803      	bhi.n	401202 <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4011fa:	4a14      	ldr	r2, [pc, #80]	; (40124c <system_init_flash+0x68>)
  4011fc:	4b11      	ldr	r3, [pc, #68]	; (401244 <system_init_flash+0x60>)
  4011fe:	601a      	str	r2, [r3, #0]
  401200:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401202:	4b13      	ldr	r3, [pc, #76]	; (401250 <system_init_flash+0x6c>)
  401204:	4298      	cmp	r0, r3
  401206:	d803      	bhi.n	401210 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401208:	4a12      	ldr	r2, [pc, #72]	; (401254 <system_init_flash+0x70>)
  40120a:	4b0e      	ldr	r3, [pc, #56]	; (401244 <system_init_flash+0x60>)
  40120c:	601a      	str	r2, [r3, #0]
  40120e:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401210:	4b11      	ldr	r3, [pc, #68]	; (401258 <system_init_flash+0x74>)
  401212:	4298      	cmp	r0, r3
  401214:	d803      	bhi.n	40121e <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401216:	4a11      	ldr	r2, [pc, #68]	; (40125c <system_init_flash+0x78>)
  401218:	4b0a      	ldr	r3, [pc, #40]	; (401244 <system_init_flash+0x60>)
  40121a:	601a      	str	r2, [r3, #0]
  40121c:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40121e:	4b10      	ldr	r3, [pc, #64]	; (401260 <system_init_flash+0x7c>)
  401220:	4298      	cmp	r0, r3
  401222:	d804      	bhi.n	40122e <system_init_flash+0x4a>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401224:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401228:	4b06      	ldr	r3, [pc, #24]	; (401244 <system_init_flash+0x60>)
  40122a:	601a      	str	r2, [r3, #0]
  40122c:	4770      	bx	lr
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40122e:	4b0d      	ldr	r3, [pc, #52]	; (401264 <system_init_flash+0x80>)
  401230:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401232:	bf94      	ite	ls
  401234:	4a0c      	ldrls	r2, [pc, #48]	; (401268 <system_init_flash+0x84>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401236:	4a0d      	ldrhi	r2, [pc, #52]	; (40126c <system_init_flash+0x88>)
  401238:	4b02      	ldr	r3, [pc, #8]	; (401244 <system_init_flash+0x60>)
  40123a:	601a      	str	r2, [r3, #0]
  40123c:	4770      	bx	lr
  40123e:	bf00      	nop
  401240:	015ef3bf 	.word	0x015ef3bf
  401244:	400e0c00 	.word	0x400e0c00
  401248:	02bde77f 	.word	0x02bde77f
  40124c:	04000100 	.word	0x04000100
  401250:	041cdb3f 	.word	0x041cdb3f
  401254:	04000200 	.word	0x04000200
  401258:	057bceff 	.word	0x057bceff
  40125c:	04000300 	.word	0x04000300
  401260:	06dac2bf 	.word	0x06dac2bf
  401264:	0839b67f 	.word	0x0839b67f
  401268:	04000500 	.word	0x04000500
  40126c:	04000600 	.word	0x04000600

00401270 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401270:	4b09      	ldr	r3, [pc, #36]	; (401298 <_sbrk+0x28>)
  401272:	681b      	ldr	r3, [r3, #0]
  401274:	b913      	cbnz	r3, 40127c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  401276:	4a09      	ldr	r2, [pc, #36]	; (40129c <_sbrk+0x2c>)
  401278:	4b07      	ldr	r3, [pc, #28]	; (401298 <_sbrk+0x28>)
  40127a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40127c:	4b06      	ldr	r3, [pc, #24]	; (401298 <_sbrk+0x28>)
  40127e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401280:	181a      	adds	r2, r3, r0
  401282:	4907      	ldr	r1, [pc, #28]	; (4012a0 <_sbrk+0x30>)
  401284:	4291      	cmp	r1, r2
  401286:	db04      	blt.n	401292 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  401288:	4610      	mov	r0, r2
  40128a:	4a03      	ldr	r2, [pc, #12]	; (401298 <_sbrk+0x28>)
  40128c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40128e:	4618      	mov	r0, r3
  401290:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  401292:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  401296:	4770      	bx	lr
  401298:	20400904 	.word	0x20400904
  40129c:	20402bd8 	.word	0x20402bd8
  4012a0:	2045fffc 	.word	0x2045fffc

004012a4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4012a4:	f04f 30ff 	mov.w	r0, #4294967295
  4012a8:	4770      	bx	lr
  4012aa:	bf00      	nop

004012ac <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4012ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4012b0:	604b      	str	r3, [r1, #4]

	return 0;
}
  4012b2:	2000      	movs	r0, #0
  4012b4:	4770      	bx	lr
  4012b6:	bf00      	nop

004012b8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4012b8:	2001      	movs	r0, #1
  4012ba:	4770      	bx	lr

004012bc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4012bc:	2000      	movs	r0, #0
  4012be:	4770      	bx	lr

004012c0 <__aeabi_drsub>:
  4012c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4012c4:	e002      	b.n	4012cc <__adddf3>
  4012c6:	bf00      	nop

004012c8 <__aeabi_dsub>:
  4012c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004012cc <__adddf3>:
  4012cc:	b530      	push	{r4, r5, lr}
  4012ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4012d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4012d6:	ea94 0f05 	teq	r4, r5
  4012da:	bf08      	it	eq
  4012dc:	ea90 0f02 	teqeq	r0, r2
  4012e0:	bf1f      	itttt	ne
  4012e2:	ea54 0c00 	orrsne.w	ip, r4, r0
  4012e6:	ea55 0c02 	orrsne.w	ip, r5, r2
  4012ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4012ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4012f2:	f000 80e2 	beq.w	4014ba <__adddf3+0x1ee>
  4012f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4012fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4012fe:	bfb8      	it	lt
  401300:	426d      	neglt	r5, r5
  401302:	dd0c      	ble.n	40131e <__adddf3+0x52>
  401304:	442c      	add	r4, r5
  401306:	ea80 0202 	eor.w	r2, r0, r2
  40130a:	ea81 0303 	eor.w	r3, r1, r3
  40130e:	ea82 0000 	eor.w	r0, r2, r0
  401312:	ea83 0101 	eor.w	r1, r3, r1
  401316:	ea80 0202 	eor.w	r2, r0, r2
  40131a:	ea81 0303 	eor.w	r3, r1, r3
  40131e:	2d36      	cmp	r5, #54	; 0x36
  401320:	bf88      	it	hi
  401322:	bd30      	pophi	{r4, r5, pc}
  401324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401328:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40132c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  401330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  401334:	d002      	beq.n	40133c <__adddf3+0x70>
  401336:	4240      	negs	r0, r0
  401338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40133c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  401340:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  401348:	d002      	beq.n	401350 <__adddf3+0x84>
  40134a:	4252      	negs	r2, r2
  40134c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401350:	ea94 0f05 	teq	r4, r5
  401354:	f000 80a7 	beq.w	4014a6 <__adddf3+0x1da>
  401358:	f1a4 0401 	sub.w	r4, r4, #1
  40135c:	f1d5 0e20 	rsbs	lr, r5, #32
  401360:	db0d      	blt.n	40137e <__adddf3+0xb2>
  401362:	fa02 fc0e 	lsl.w	ip, r2, lr
  401366:	fa22 f205 	lsr.w	r2, r2, r5
  40136a:	1880      	adds	r0, r0, r2
  40136c:	f141 0100 	adc.w	r1, r1, #0
  401370:	fa03 f20e 	lsl.w	r2, r3, lr
  401374:	1880      	adds	r0, r0, r2
  401376:	fa43 f305 	asr.w	r3, r3, r5
  40137a:	4159      	adcs	r1, r3
  40137c:	e00e      	b.n	40139c <__adddf3+0xd0>
  40137e:	f1a5 0520 	sub.w	r5, r5, #32
  401382:	f10e 0e20 	add.w	lr, lr, #32
  401386:	2a01      	cmp	r2, #1
  401388:	fa03 fc0e 	lsl.w	ip, r3, lr
  40138c:	bf28      	it	cs
  40138e:	f04c 0c02 	orrcs.w	ip, ip, #2
  401392:	fa43 f305 	asr.w	r3, r3, r5
  401396:	18c0      	adds	r0, r0, r3
  401398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40139c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4013a0:	d507      	bpl.n	4013b2 <__adddf3+0xe6>
  4013a2:	f04f 0e00 	mov.w	lr, #0
  4013a6:	f1dc 0c00 	rsbs	ip, ip, #0
  4013aa:	eb7e 0000 	sbcs.w	r0, lr, r0
  4013ae:	eb6e 0101 	sbc.w	r1, lr, r1
  4013b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4013b6:	d31b      	bcc.n	4013f0 <__adddf3+0x124>
  4013b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4013bc:	d30c      	bcc.n	4013d8 <__adddf3+0x10c>
  4013be:	0849      	lsrs	r1, r1, #1
  4013c0:	ea5f 0030 	movs.w	r0, r0, rrx
  4013c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4013c8:	f104 0401 	add.w	r4, r4, #1
  4013cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4013d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4013d4:	f080 809a 	bcs.w	40150c <__adddf3+0x240>
  4013d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4013dc:	bf08      	it	eq
  4013de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4013e2:	f150 0000 	adcs.w	r0, r0, #0
  4013e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4013ea:	ea41 0105 	orr.w	r1, r1, r5
  4013ee:	bd30      	pop	{r4, r5, pc}
  4013f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4013f4:	4140      	adcs	r0, r0
  4013f6:	eb41 0101 	adc.w	r1, r1, r1
  4013fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4013fe:	f1a4 0401 	sub.w	r4, r4, #1
  401402:	d1e9      	bne.n	4013d8 <__adddf3+0x10c>
  401404:	f091 0f00 	teq	r1, #0
  401408:	bf04      	itt	eq
  40140a:	4601      	moveq	r1, r0
  40140c:	2000      	moveq	r0, #0
  40140e:	fab1 f381 	clz	r3, r1
  401412:	bf08      	it	eq
  401414:	3320      	addeq	r3, #32
  401416:	f1a3 030b 	sub.w	r3, r3, #11
  40141a:	f1b3 0220 	subs.w	r2, r3, #32
  40141e:	da0c      	bge.n	40143a <__adddf3+0x16e>
  401420:	320c      	adds	r2, #12
  401422:	dd08      	ble.n	401436 <__adddf3+0x16a>
  401424:	f102 0c14 	add.w	ip, r2, #20
  401428:	f1c2 020c 	rsb	r2, r2, #12
  40142c:	fa01 f00c 	lsl.w	r0, r1, ip
  401430:	fa21 f102 	lsr.w	r1, r1, r2
  401434:	e00c      	b.n	401450 <__adddf3+0x184>
  401436:	f102 0214 	add.w	r2, r2, #20
  40143a:	bfd8      	it	le
  40143c:	f1c2 0c20 	rsble	ip, r2, #32
  401440:	fa01 f102 	lsl.w	r1, r1, r2
  401444:	fa20 fc0c 	lsr.w	ip, r0, ip
  401448:	bfdc      	itt	le
  40144a:	ea41 010c 	orrle.w	r1, r1, ip
  40144e:	4090      	lslle	r0, r2
  401450:	1ae4      	subs	r4, r4, r3
  401452:	bfa2      	ittt	ge
  401454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  401458:	4329      	orrge	r1, r5
  40145a:	bd30      	popge	{r4, r5, pc}
  40145c:	ea6f 0404 	mvn.w	r4, r4
  401460:	3c1f      	subs	r4, #31
  401462:	da1c      	bge.n	40149e <__adddf3+0x1d2>
  401464:	340c      	adds	r4, #12
  401466:	dc0e      	bgt.n	401486 <__adddf3+0x1ba>
  401468:	f104 0414 	add.w	r4, r4, #20
  40146c:	f1c4 0220 	rsb	r2, r4, #32
  401470:	fa20 f004 	lsr.w	r0, r0, r4
  401474:	fa01 f302 	lsl.w	r3, r1, r2
  401478:	ea40 0003 	orr.w	r0, r0, r3
  40147c:	fa21 f304 	lsr.w	r3, r1, r4
  401480:	ea45 0103 	orr.w	r1, r5, r3
  401484:	bd30      	pop	{r4, r5, pc}
  401486:	f1c4 040c 	rsb	r4, r4, #12
  40148a:	f1c4 0220 	rsb	r2, r4, #32
  40148e:	fa20 f002 	lsr.w	r0, r0, r2
  401492:	fa01 f304 	lsl.w	r3, r1, r4
  401496:	ea40 0003 	orr.w	r0, r0, r3
  40149a:	4629      	mov	r1, r5
  40149c:	bd30      	pop	{r4, r5, pc}
  40149e:	fa21 f004 	lsr.w	r0, r1, r4
  4014a2:	4629      	mov	r1, r5
  4014a4:	bd30      	pop	{r4, r5, pc}
  4014a6:	f094 0f00 	teq	r4, #0
  4014aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4014ae:	bf06      	itte	eq
  4014b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4014b4:	3401      	addeq	r4, #1
  4014b6:	3d01      	subne	r5, #1
  4014b8:	e74e      	b.n	401358 <__adddf3+0x8c>
  4014ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4014be:	bf18      	it	ne
  4014c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4014c4:	d029      	beq.n	40151a <__adddf3+0x24e>
  4014c6:	ea94 0f05 	teq	r4, r5
  4014ca:	bf08      	it	eq
  4014cc:	ea90 0f02 	teqeq	r0, r2
  4014d0:	d005      	beq.n	4014de <__adddf3+0x212>
  4014d2:	ea54 0c00 	orrs.w	ip, r4, r0
  4014d6:	bf04      	itt	eq
  4014d8:	4619      	moveq	r1, r3
  4014da:	4610      	moveq	r0, r2
  4014dc:	bd30      	pop	{r4, r5, pc}
  4014de:	ea91 0f03 	teq	r1, r3
  4014e2:	bf1e      	ittt	ne
  4014e4:	2100      	movne	r1, #0
  4014e6:	2000      	movne	r0, #0
  4014e8:	bd30      	popne	{r4, r5, pc}
  4014ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4014ee:	d105      	bne.n	4014fc <__adddf3+0x230>
  4014f0:	0040      	lsls	r0, r0, #1
  4014f2:	4149      	adcs	r1, r1
  4014f4:	bf28      	it	cs
  4014f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4014fa:	bd30      	pop	{r4, r5, pc}
  4014fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  401500:	bf3c      	itt	cc
  401502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  401506:	bd30      	popcc	{r4, r5, pc}
  401508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40150c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  401510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401514:	f04f 0000 	mov.w	r0, #0
  401518:	bd30      	pop	{r4, r5, pc}
  40151a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40151e:	bf1a      	itte	ne
  401520:	4619      	movne	r1, r3
  401522:	4610      	movne	r0, r2
  401524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  401528:	bf1c      	itt	ne
  40152a:	460b      	movne	r3, r1
  40152c:	4602      	movne	r2, r0
  40152e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401532:	bf06      	itte	eq
  401534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  401538:	ea91 0f03 	teqeq	r1, r3
  40153c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  401540:	bd30      	pop	{r4, r5, pc}
  401542:	bf00      	nop

00401544 <__aeabi_ui2d>:
  401544:	f090 0f00 	teq	r0, #0
  401548:	bf04      	itt	eq
  40154a:	2100      	moveq	r1, #0
  40154c:	4770      	bxeq	lr
  40154e:	b530      	push	{r4, r5, lr}
  401550:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401554:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401558:	f04f 0500 	mov.w	r5, #0
  40155c:	f04f 0100 	mov.w	r1, #0
  401560:	e750      	b.n	401404 <__adddf3+0x138>
  401562:	bf00      	nop

00401564 <__aeabi_i2d>:
  401564:	f090 0f00 	teq	r0, #0
  401568:	bf04      	itt	eq
  40156a:	2100      	moveq	r1, #0
  40156c:	4770      	bxeq	lr
  40156e:	b530      	push	{r4, r5, lr}
  401570:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401574:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40157c:	bf48      	it	mi
  40157e:	4240      	negmi	r0, r0
  401580:	f04f 0100 	mov.w	r1, #0
  401584:	e73e      	b.n	401404 <__adddf3+0x138>
  401586:	bf00      	nop

00401588 <__aeabi_f2d>:
  401588:	0042      	lsls	r2, r0, #1
  40158a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40158e:	ea4f 0131 	mov.w	r1, r1, rrx
  401592:	ea4f 7002 	mov.w	r0, r2, lsl #28
  401596:	bf1f      	itttt	ne
  401598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40159c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4015a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4015a4:	4770      	bxne	lr
  4015a6:	f092 0f00 	teq	r2, #0
  4015aa:	bf14      	ite	ne
  4015ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4015b0:	4770      	bxeq	lr
  4015b2:	b530      	push	{r4, r5, lr}
  4015b4:	f44f 7460 	mov.w	r4, #896	; 0x380
  4015b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4015bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4015c0:	e720      	b.n	401404 <__adddf3+0x138>
  4015c2:	bf00      	nop

004015c4 <__aeabi_ul2d>:
  4015c4:	ea50 0201 	orrs.w	r2, r0, r1
  4015c8:	bf08      	it	eq
  4015ca:	4770      	bxeq	lr
  4015cc:	b530      	push	{r4, r5, lr}
  4015ce:	f04f 0500 	mov.w	r5, #0
  4015d2:	e00a      	b.n	4015ea <__aeabi_l2d+0x16>

004015d4 <__aeabi_l2d>:
  4015d4:	ea50 0201 	orrs.w	r2, r0, r1
  4015d8:	bf08      	it	eq
  4015da:	4770      	bxeq	lr
  4015dc:	b530      	push	{r4, r5, lr}
  4015de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4015e2:	d502      	bpl.n	4015ea <__aeabi_l2d+0x16>
  4015e4:	4240      	negs	r0, r0
  4015e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4015ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4015ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4015f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4015f6:	f43f aedc 	beq.w	4013b2 <__adddf3+0xe6>
  4015fa:	f04f 0203 	mov.w	r2, #3
  4015fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401602:	bf18      	it	ne
  401604:	3203      	addne	r2, #3
  401606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40160a:	bf18      	it	ne
  40160c:	3203      	addne	r2, #3
  40160e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  401612:	f1c2 0320 	rsb	r3, r2, #32
  401616:	fa00 fc03 	lsl.w	ip, r0, r3
  40161a:	fa20 f002 	lsr.w	r0, r0, r2
  40161e:	fa01 fe03 	lsl.w	lr, r1, r3
  401622:	ea40 000e 	orr.w	r0, r0, lr
  401626:	fa21 f102 	lsr.w	r1, r1, r2
  40162a:	4414      	add	r4, r2
  40162c:	e6c1      	b.n	4013b2 <__adddf3+0xe6>
  40162e:	bf00      	nop

00401630 <__gedf2>:
  401630:	f04f 3cff 	mov.w	ip, #4294967295
  401634:	e006      	b.n	401644 <__cmpdf2+0x4>
  401636:	bf00      	nop

00401638 <__ledf2>:
  401638:	f04f 0c01 	mov.w	ip, #1
  40163c:	e002      	b.n	401644 <__cmpdf2+0x4>
  40163e:	bf00      	nop

00401640 <__cmpdf2>:
  401640:	f04f 0c01 	mov.w	ip, #1
  401644:	f84d cd04 	str.w	ip, [sp, #-4]!
  401648:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40164c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  401650:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  401654:	bf18      	it	ne
  401656:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40165a:	d01b      	beq.n	401694 <__cmpdf2+0x54>
  40165c:	b001      	add	sp, #4
  40165e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  401662:	bf0c      	ite	eq
  401664:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  401668:	ea91 0f03 	teqne	r1, r3
  40166c:	bf02      	ittt	eq
  40166e:	ea90 0f02 	teqeq	r0, r2
  401672:	2000      	moveq	r0, #0
  401674:	4770      	bxeq	lr
  401676:	f110 0f00 	cmn.w	r0, #0
  40167a:	ea91 0f03 	teq	r1, r3
  40167e:	bf58      	it	pl
  401680:	4299      	cmppl	r1, r3
  401682:	bf08      	it	eq
  401684:	4290      	cmpeq	r0, r2
  401686:	bf2c      	ite	cs
  401688:	17d8      	asrcs	r0, r3, #31
  40168a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40168e:	f040 0001 	orr.w	r0, r0, #1
  401692:	4770      	bx	lr
  401694:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  401698:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40169c:	d102      	bne.n	4016a4 <__cmpdf2+0x64>
  40169e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4016a2:	d107      	bne.n	4016b4 <__cmpdf2+0x74>
  4016a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4016a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4016ac:	d1d6      	bne.n	40165c <__cmpdf2+0x1c>
  4016ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4016b2:	d0d3      	beq.n	40165c <__cmpdf2+0x1c>
  4016b4:	f85d 0b04 	ldr.w	r0, [sp], #4
  4016b8:	4770      	bx	lr
  4016ba:	bf00      	nop

004016bc <__aeabi_cdrcmple>:
  4016bc:	4684      	mov	ip, r0
  4016be:	4610      	mov	r0, r2
  4016c0:	4662      	mov	r2, ip
  4016c2:	468c      	mov	ip, r1
  4016c4:	4619      	mov	r1, r3
  4016c6:	4663      	mov	r3, ip
  4016c8:	e000      	b.n	4016cc <__aeabi_cdcmpeq>
  4016ca:	bf00      	nop

004016cc <__aeabi_cdcmpeq>:
  4016cc:	b501      	push	{r0, lr}
  4016ce:	f7ff ffb7 	bl	401640 <__cmpdf2>
  4016d2:	2800      	cmp	r0, #0
  4016d4:	bf48      	it	mi
  4016d6:	f110 0f00 	cmnmi.w	r0, #0
  4016da:	bd01      	pop	{r0, pc}

004016dc <__aeabi_dcmpeq>:
  4016dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4016e0:	f7ff fff4 	bl	4016cc <__aeabi_cdcmpeq>
  4016e4:	bf0c      	ite	eq
  4016e6:	2001      	moveq	r0, #1
  4016e8:	2000      	movne	r0, #0
  4016ea:	f85d fb08 	ldr.w	pc, [sp], #8
  4016ee:	bf00      	nop

004016f0 <__aeabi_dcmplt>:
  4016f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4016f4:	f7ff ffea 	bl	4016cc <__aeabi_cdcmpeq>
  4016f8:	bf34      	ite	cc
  4016fa:	2001      	movcc	r0, #1
  4016fc:	2000      	movcs	r0, #0
  4016fe:	f85d fb08 	ldr.w	pc, [sp], #8
  401702:	bf00      	nop

00401704 <__aeabi_dcmple>:
  401704:	f84d ed08 	str.w	lr, [sp, #-8]!
  401708:	f7ff ffe0 	bl	4016cc <__aeabi_cdcmpeq>
  40170c:	bf94      	ite	ls
  40170e:	2001      	movls	r0, #1
  401710:	2000      	movhi	r0, #0
  401712:	f85d fb08 	ldr.w	pc, [sp], #8
  401716:	bf00      	nop

00401718 <__aeabi_dcmpge>:
  401718:	f84d ed08 	str.w	lr, [sp, #-8]!
  40171c:	f7ff ffce 	bl	4016bc <__aeabi_cdrcmple>
  401720:	bf94      	ite	ls
  401722:	2001      	movls	r0, #1
  401724:	2000      	movhi	r0, #0
  401726:	f85d fb08 	ldr.w	pc, [sp], #8
  40172a:	bf00      	nop

0040172c <__aeabi_dcmpgt>:
  40172c:	f84d ed08 	str.w	lr, [sp, #-8]!
  401730:	f7ff ffc4 	bl	4016bc <__aeabi_cdrcmple>
  401734:	bf34      	ite	cc
  401736:	2001      	movcc	r0, #1
  401738:	2000      	movcs	r0, #0
  40173a:	f85d fb08 	ldr.w	pc, [sp], #8
  40173e:	bf00      	nop

00401740 <__libc_init_array>:
  401740:	b570      	push	{r4, r5, r6, lr}
  401742:	4e0f      	ldr	r6, [pc, #60]	; (401780 <__libc_init_array+0x40>)
  401744:	4d0f      	ldr	r5, [pc, #60]	; (401784 <__libc_init_array+0x44>)
  401746:	1b76      	subs	r6, r6, r5
  401748:	10b6      	asrs	r6, r6, #2
  40174a:	bf18      	it	ne
  40174c:	2400      	movne	r4, #0
  40174e:	d005      	beq.n	40175c <__libc_init_array+0x1c>
  401750:	3401      	adds	r4, #1
  401752:	f855 3b04 	ldr.w	r3, [r5], #4
  401756:	4798      	blx	r3
  401758:	42a6      	cmp	r6, r4
  40175a:	d1f9      	bne.n	401750 <__libc_init_array+0x10>
  40175c:	4e0a      	ldr	r6, [pc, #40]	; (401788 <__libc_init_array+0x48>)
  40175e:	4d0b      	ldr	r5, [pc, #44]	; (40178c <__libc_init_array+0x4c>)
  401760:	1b76      	subs	r6, r6, r5
  401762:	f003 f8cb 	bl	4048fc <_init>
  401766:	10b6      	asrs	r6, r6, #2
  401768:	bf18      	it	ne
  40176a:	2400      	movne	r4, #0
  40176c:	d006      	beq.n	40177c <__libc_init_array+0x3c>
  40176e:	3401      	adds	r4, #1
  401770:	f855 3b04 	ldr.w	r3, [r5], #4
  401774:	4798      	blx	r3
  401776:	42a6      	cmp	r6, r4
  401778:	d1f9      	bne.n	40176e <__libc_init_array+0x2e>
  40177a:	bd70      	pop	{r4, r5, r6, pc}
  40177c:	bd70      	pop	{r4, r5, r6, pc}
  40177e:	bf00      	nop
  401780:	00404908 	.word	0x00404908
  401784:	00404908 	.word	0x00404908
  401788:	00404910 	.word	0x00404910
  40178c:	00404908 	.word	0x00404908

00401790 <iprintf>:
  401790:	b40f      	push	{r0, r1, r2, r3}
  401792:	b500      	push	{lr}
  401794:	4907      	ldr	r1, [pc, #28]	; (4017b4 <iprintf+0x24>)
  401796:	b083      	sub	sp, #12
  401798:	ab04      	add	r3, sp, #16
  40179a:	6808      	ldr	r0, [r1, #0]
  40179c:	f853 2b04 	ldr.w	r2, [r3], #4
  4017a0:	6881      	ldr	r1, [r0, #8]
  4017a2:	9301      	str	r3, [sp, #4]
  4017a4:	f000 f9f6 	bl	401b94 <_vfiprintf_r>
  4017a8:	b003      	add	sp, #12
  4017aa:	f85d eb04 	ldr.w	lr, [sp], #4
  4017ae:	b004      	add	sp, #16
  4017b0:	4770      	bx	lr
  4017b2:	bf00      	nop
  4017b4:	20400430 	.word	0x20400430

004017b8 <memset>:
  4017b8:	b470      	push	{r4, r5, r6}
  4017ba:	0784      	lsls	r4, r0, #30
  4017bc:	d046      	beq.n	40184c <memset+0x94>
  4017be:	1e54      	subs	r4, r2, #1
  4017c0:	2a00      	cmp	r2, #0
  4017c2:	d041      	beq.n	401848 <memset+0x90>
  4017c4:	b2cd      	uxtb	r5, r1
  4017c6:	4603      	mov	r3, r0
  4017c8:	e002      	b.n	4017d0 <memset+0x18>
  4017ca:	1e62      	subs	r2, r4, #1
  4017cc:	b3e4      	cbz	r4, 401848 <memset+0x90>
  4017ce:	4614      	mov	r4, r2
  4017d0:	f803 5b01 	strb.w	r5, [r3], #1
  4017d4:	079a      	lsls	r2, r3, #30
  4017d6:	d1f8      	bne.n	4017ca <memset+0x12>
  4017d8:	2c03      	cmp	r4, #3
  4017da:	d92e      	bls.n	40183a <memset+0x82>
  4017dc:	b2cd      	uxtb	r5, r1
  4017de:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4017e2:	2c0f      	cmp	r4, #15
  4017e4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4017e8:	d919      	bls.n	40181e <memset+0x66>
  4017ea:	f103 0210 	add.w	r2, r3, #16
  4017ee:	4626      	mov	r6, r4
  4017f0:	3e10      	subs	r6, #16
  4017f2:	2e0f      	cmp	r6, #15
  4017f4:	f842 5c10 	str.w	r5, [r2, #-16]
  4017f8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4017fc:	f842 5c08 	str.w	r5, [r2, #-8]
  401800:	f842 5c04 	str.w	r5, [r2, #-4]
  401804:	f102 0210 	add.w	r2, r2, #16
  401808:	d8f2      	bhi.n	4017f0 <memset+0x38>
  40180a:	f1a4 0210 	sub.w	r2, r4, #16
  40180e:	f022 020f 	bic.w	r2, r2, #15
  401812:	f004 040f 	and.w	r4, r4, #15
  401816:	3210      	adds	r2, #16
  401818:	2c03      	cmp	r4, #3
  40181a:	4413      	add	r3, r2
  40181c:	d90d      	bls.n	40183a <memset+0x82>
  40181e:	461e      	mov	r6, r3
  401820:	4622      	mov	r2, r4
  401822:	3a04      	subs	r2, #4
  401824:	2a03      	cmp	r2, #3
  401826:	f846 5b04 	str.w	r5, [r6], #4
  40182a:	d8fa      	bhi.n	401822 <memset+0x6a>
  40182c:	1f22      	subs	r2, r4, #4
  40182e:	f022 0203 	bic.w	r2, r2, #3
  401832:	3204      	adds	r2, #4
  401834:	4413      	add	r3, r2
  401836:	f004 0403 	and.w	r4, r4, #3
  40183a:	b12c      	cbz	r4, 401848 <memset+0x90>
  40183c:	b2c9      	uxtb	r1, r1
  40183e:	441c      	add	r4, r3
  401840:	f803 1b01 	strb.w	r1, [r3], #1
  401844:	42a3      	cmp	r3, r4
  401846:	d1fb      	bne.n	401840 <memset+0x88>
  401848:	bc70      	pop	{r4, r5, r6}
  40184a:	4770      	bx	lr
  40184c:	4614      	mov	r4, r2
  40184e:	4603      	mov	r3, r0
  401850:	e7c2      	b.n	4017d8 <memset+0x20>
  401852:	bf00      	nop

00401854 <_puts_r>:
  401854:	b5f0      	push	{r4, r5, r6, r7, lr}
  401856:	4605      	mov	r5, r0
  401858:	b089      	sub	sp, #36	; 0x24
  40185a:	4608      	mov	r0, r1
  40185c:	460c      	mov	r4, r1
  40185e:	f000 f8ef 	bl	401a40 <strlen>
  401862:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401864:	4f14      	ldr	r7, [pc, #80]	; (4018b8 <_puts_r+0x64>)
  401866:	9404      	str	r4, [sp, #16]
  401868:	2601      	movs	r6, #1
  40186a:	1c44      	adds	r4, r0, #1
  40186c:	a904      	add	r1, sp, #16
  40186e:	2202      	movs	r2, #2
  401870:	9403      	str	r4, [sp, #12]
  401872:	9005      	str	r0, [sp, #20]
  401874:	68ac      	ldr	r4, [r5, #8]
  401876:	9706      	str	r7, [sp, #24]
  401878:	9607      	str	r6, [sp, #28]
  40187a:	9101      	str	r1, [sp, #4]
  40187c:	9202      	str	r2, [sp, #8]
  40187e:	b1b3      	cbz	r3, 4018ae <_puts_r+0x5a>
  401880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401884:	049a      	lsls	r2, r3, #18
  401886:	d406      	bmi.n	401896 <_puts_r+0x42>
  401888:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40188a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40188e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  401892:	81a3      	strh	r3, [r4, #12]
  401894:	6662      	str	r2, [r4, #100]	; 0x64
  401896:	4621      	mov	r1, r4
  401898:	4628      	mov	r0, r5
  40189a:	aa01      	add	r2, sp, #4
  40189c:	f001 fc0c 	bl	4030b8 <__sfvwrite_r>
  4018a0:	2800      	cmp	r0, #0
  4018a2:	bf14      	ite	ne
  4018a4:	f04f 30ff 	movne.w	r0, #4294967295
  4018a8:	200a      	moveq	r0, #10
  4018aa:	b009      	add	sp, #36	; 0x24
  4018ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4018ae:	4628      	mov	r0, r5
  4018b0:	f001 fa50 	bl	402d54 <__sinit>
  4018b4:	e7e4      	b.n	401880 <_puts_r+0x2c>
  4018b6:	bf00      	nop
  4018b8:	004048a8 	.word	0x004048a8

004018bc <puts>:
  4018bc:	4b02      	ldr	r3, [pc, #8]	; (4018c8 <puts+0xc>)
  4018be:	4601      	mov	r1, r0
  4018c0:	6818      	ldr	r0, [r3, #0]
  4018c2:	f7ff bfc7 	b.w	401854 <_puts_r>
  4018c6:	bf00      	nop
  4018c8:	20400430 	.word	0x20400430

004018cc <setbuf>:
  4018cc:	2900      	cmp	r1, #0
  4018ce:	bf0c      	ite	eq
  4018d0:	2202      	moveq	r2, #2
  4018d2:	2200      	movne	r2, #0
  4018d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4018d8:	f000 b800 	b.w	4018dc <setvbuf>

004018dc <setvbuf>:
  4018dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4018e0:	4c51      	ldr	r4, [pc, #324]	; (401a28 <setvbuf+0x14c>)
  4018e2:	6825      	ldr	r5, [r4, #0]
  4018e4:	b083      	sub	sp, #12
  4018e6:	4604      	mov	r4, r0
  4018e8:	460f      	mov	r7, r1
  4018ea:	4690      	mov	r8, r2
  4018ec:	461e      	mov	r6, r3
  4018ee:	b115      	cbz	r5, 4018f6 <setvbuf+0x1a>
  4018f0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4018f2:	2b00      	cmp	r3, #0
  4018f4:	d079      	beq.n	4019ea <setvbuf+0x10e>
  4018f6:	f1b8 0f02 	cmp.w	r8, #2
  4018fa:	d004      	beq.n	401906 <setvbuf+0x2a>
  4018fc:	f1b8 0f01 	cmp.w	r8, #1
  401900:	d87f      	bhi.n	401a02 <setvbuf+0x126>
  401902:	2e00      	cmp	r6, #0
  401904:	db7d      	blt.n	401a02 <setvbuf+0x126>
  401906:	4621      	mov	r1, r4
  401908:	4628      	mov	r0, r5
  40190a:	f001 f98f 	bl	402c2c <_fflush_r>
  40190e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401910:	b141      	cbz	r1, 401924 <setvbuf+0x48>
  401912:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401916:	4299      	cmp	r1, r3
  401918:	d002      	beq.n	401920 <setvbuf+0x44>
  40191a:	4628      	mov	r0, r5
  40191c:	f001 fae4 	bl	402ee8 <_free_r>
  401920:	2300      	movs	r3, #0
  401922:	6323      	str	r3, [r4, #48]	; 0x30
  401924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401928:	2200      	movs	r2, #0
  40192a:	61a2      	str	r2, [r4, #24]
  40192c:	6062      	str	r2, [r4, #4]
  40192e:	061a      	lsls	r2, r3, #24
  401930:	d454      	bmi.n	4019dc <setvbuf+0x100>
  401932:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401936:	f023 0303 	bic.w	r3, r3, #3
  40193a:	f1b8 0f02 	cmp.w	r8, #2
  40193e:	81a3      	strh	r3, [r4, #12]
  401940:	d039      	beq.n	4019b6 <setvbuf+0xda>
  401942:	ab01      	add	r3, sp, #4
  401944:	466a      	mov	r2, sp
  401946:	4621      	mov	r1, r4
  401948:	4628      	mov	r0, r5
  40194a:	f001 fd6b 	bl	403424 <__swhatbuf_r>
  40194e:	89a3      	ldrh	r3, [r4, #12]
  401950:	4318      	orrs	r0, r3
  401952:	81a0      	strh	r0, [r4, #12]
  401954:	b326      	cbz	r6, 4019a0 <setvbuf+0xc4>
  401956:	b327      	cbz	r7, 4019a2 <setvbuf+0xc6>
  401958:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40195a:	2b00      	cmp	r3, #0
  40195c:	d04d      	beq.n	4019fa <setvbuf+0x11e>
  40195e:	9b00      	ldr	r3, [sp, #0]
  401960:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  401964:	6027      	str	r7, [r4, #0]
  401966:	429e      	cmp	r6, r3
  401968:	bf1c      	itt	ne
  40196a:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  40196e:	81a0      	strhne	r0, [r4, #12]
  401970:	f1b8 0f01 	cmp.w	r8, #1
  401974:	bf08      	it	eq
  401976:	f040 0001 	orreq.w	r0, r0, #1
  40197a:	b283      	uxth	r3, r0
  40197c:	bf08      	it	eq
  40197e:	81a0      	strheq	r0, [r4, #12]
  401980:	f003 0008 	and.w	r0, r3, #8
  401984:	b280      	uxth	r0, r0
  401986:	6127      	str	r7, [r4, #16]
  401988:	6166      	str	r6, [r4, #20]
  40198a:	b318      	cbz	r0, 4019d4 <setvbuf+0xf8>
  40198c:	f013 0001 	ands.w	r0, r3, #1
  401990:	d02f      	beq.n	4019f2 <setvbuf+0x116>
  401992:	2000      	movs	r0, #0
  401994:	4276      	negs	r6, r6
  401996:	61a6      	str	r6, [r4, #24]
  401998:	60a0      	str	r0, [r4, #8]
  40199a:	b003      	add	sp, #12
  40199c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4019a0:	9e00      	ldr	r6, [sp, #0]
  4019a2:	4630      	mov	r0, r6
  4019a4:	f001 fdb2 	bl	40350c <malloc>
  4019a8:	4607      	mov	r7, r0
  4019aa:	b368      	cbz	r0, 401a08 <setvbuf+0x12c>
  4019ac:	89a3      	ldrh	r3, [r4, #12]
  4019ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4019b2:	81a3      	strh	r3, [r4, #12]
  4019b4:	e7d0      	b.n	401958 <setvbuf+0x7c>
  4019b6:	2000      	movs	r0, #0
  4019b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4019bc:	f043 0302 	orr.w	r3, r3, #2
  4019c0:	2500      	movs	r5, #0
  4019c2:	2101      	movs	r1, #1
  4019c4:	81a3      	strh	r3, [r4, #12]
  4019c6:	60a5      	str	r5, [r4, #8]
  4019c8:	6022      	str	r2, [r4, #0]
  4019ca:	6122      	str	r2, [r4, #16]
  4019cc:	6161      	str	r1, [r4, #20]
  4019ce:	b003      	add	sp, #12
  4019d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4019d4:	60a0      	str	r0, [r4, #8]
  4019d6:	b003      	add	sp, #12
  4019d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4019dc:	6921      	ldr	r1, [r4, #16]
  4019de:	4628      	mov	r0, r5
  4019e0:	f001 fa82 	bl	402ee8 <_free_r>
  4019e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4019e8:	e7a3      	b.n	401932 <setvbuf+0x56>
  4019ea:	4628      	mov	r0, r5
  4019ec:	f001 f9b2 	bl	402d54 <__sinit>
  4019f0:	e781      	b.n	4018f6 <setvbuf+0x1a>
  4019f2:	60a6      	str	r6, [r4, #8]
  4019f4:	b003      	add	sp, #12
  4019f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4019fa:	4628      	mov	r0, r5
  4019fc:	f001 f9aa 	bl	402d54 <__sinit>
  401a00:	e7ad      	b.n	40195e <setvbuf+0x82>
  401a02:	f04f 30ff 	mov.w	r0, #4294967295
  401a06:	e7e2      	b.n	4019ce <setvbuf+0xf2>
  401a08:	f8dd 9000 	ldr.w	r9, [sp]
  401a0c:	45b1      	cmp	r9, r6
  401a0e:	d006      	beq.n	401a1e <setvbuf+0x142>
  401a10:	4648      	mov	r0, r9
  401a12:	f001 fd7b 	bl	40350c <malloc>
  401a16:	4607      	mov	r7, r0
  401a18:	b108      	cbz	r0, 401a1e <setvbuf+0x142>
  401a1a:	464e      	mov	r6, r9
  401a1c:	e7c6      	b.n	4019ac <setvbuf+0xd0>
  401a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401a22:	f04f 30ff 	mov.w	r0, #4294967295
  401a26:	e7c7      	b.n	4019b8 <setvbuf+0xdc>
  401a28:	20400430 	.word	0x20400430
	...

00401a40 <strlen>:
  401a40:	f890 f000 	pld	[r0]
  401a44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401a48:	f020 0107 	bic.w	r1, r0, #7
  401a4c:	f06f 0c00 	mvn.w	ip, #0
  401a50:	f010 0407 	ands.w	r4, r0, #7
  401a54:	f891 f020 	pld	[r1, #32]
  401a58:	f040 8049 	bne.w	401aee <strlen+0xae>
  401a5c:	f04f 0400 	mov.w	r4, #0
  401a60:	f06f 0007 	mvn.w	r0, #7
  401a64:	e9d1 2300 	ldrd	r2, r3, [r1]
  401a68:	f891 f040 	pld	[r1, #64]	; 0x40
  401a6c:	f100 0008 	add.w	r0, r0, #8
  401a70:	fa82 f24c 	uadd8	r2, r2, ip
  401a74:	faa4 f28c 	sel	r2, r4, ip
  401a78:	fa83 f34c 	uadd8	r3, r3, ip
  401a7c:	faa2 f38c 	sel	r3, r2, ip
  401a80:	bb4b      	cbnz	r3, 401ad6 <strlen+0x96>
  401a82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401a86:	fa82 f24c 	uadd8	r2, r2, ip
  401a8a:	f100 0008 	add.w	r0, r0, #8
  401a8e:	faa4 f28c 	sel	r2, r4, ip
  401a92:	fa83 f34c 	uadd8	r3, r3, ip
  401a96:	faa2 f38c 	sel	r3, r2, ip
  401a9a:	b9e3      	cbnz	r3, 401ad6 <strlen+0x96>
  401a9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  401aa0:	fa82 f24c 	uadd8	r2, r2, ip
  401aa4:	f100 0008 	add.w	r0, r0, #8
  401aa8:	faa4 f28c 	sel	r2, r4, ip
  401aac:	fa83 f34c 	uadd8	r3, r3, ip
  401ab0:	faa2 f38c 	sel	r3, r2, ip
  401ab4:	b97b      	cbnz	r3, 401ad6 <strlen+0x96>
  401ab6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  401aba:	f101 0120 	add.w	r1, r1, #32
  401abe:	fa82 f24c 	uadd8	r2, r2, ip
  401ac2:	f100 0008 	add.w	r0, r0, #8
  401ac6:	faa4 f28c 	sel	r2, r4, ip
  401aca:	fa83 f34c 	uadd8	r3, r3, ip
  401ace:	faa2 f38c 	sel	r3, r2, ip
  401ad2:	2b00      	cmp	r3, #0
  401ad4:	d0c6      	beq.n	401a64 <strlen+0x24>
  401ad6:	2a00      	cmp	r2, #0
  401ad8:	bf04      	itt	eq
  401ada:	3004      	addeq	r0, #4
  401adc:	461a      	moveq	r2, r3
  401ade:	ba12      	rev	r2, r2
  401ae0:	fab2 f282 	clz	r2, r2
  401ae4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401ae8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  401aec:	4770      	bx	lr
  401aee:	e9d1 2300 	ldrd	r2, r3, [r1]
  401af2:	f004 0503 	and.w	r5, r4, #3
  401af6:	f1c4 0000 	rsb	r0, r4, #0
  401afa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  401afe:	f014 0f04 	tst.w	r4, #4
  401b02:	f891 f040 	pld	[r1, #64]	; 0x40
  401b06:	fa0c f505 	lsl.w	r5, ip, r5
  401b0a:	ea62 0205 	orn	r2, r2, r5
  401b0e:	bf1c      	itt	ne
  401b10:	ea63 0305 	ornne	r3, r3, r5
  401b14:	4662      	movne	r2, ip
  401b16:	f04f 0400 	mov.w	r4, #0
  401b1a:	e7a9      	b.n	401a70 <strlen+0x30>

00401b1c <__sprint_r.part.0>:
  401b1c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401b1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401b22:	049c      	lsls	r4, r3, #18
  401b24:	4692      	mov	sl, r2
  401b26:	d52c      	bpl.n	401b82 <__sprint_r.part.0+0x66>
  401b28:	6893      	ldr	r3, [r2, #8]
  401b2a:	6812      	ldr	r2, [r2, #0]
  401b2c:	b33b      	cbz	r3, 401b7e <__sprint_r.part.0+0x62>
  401b2e:	460f      	mov	r7, r1
  401b30:	4680      	mov	r8, r0
  401b32:	f102 0908 	add.w	r9, r2, #8
  401b36:	e919 0060 	ldmdb	r9, {r5, r6}
  401b3a:	08b6      	lsrs	r6, r6, #2
  401b3c:	d017      	beq.n	401b6e <__sprint_r.part.0+0x52>
  401b3e:	3d04      	subs	r5, #4
  401b40:	2400      	movs	r4, #0
  401b42:	e001      	b.n	401b48 <__sprint_r.part.0+0x2c>
  401b44:	42a6      	cmp	r6, r4
  401b46:	d010      	beq.n	401b6a <__sprint_r.part.0+0x4e>
  401b48:	463a      	mov	r2, r7
  401b4a:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401b4e:	4640      	mov	r0, r8
  401b50:	f001 f96a 	bl	402e28 <_fputwc_r>
  401b54:	1c43      	adds	r3, r0, #1
  401b56:	f104 0401 	add.w	r4, r4, #1
  401b5a:	d1f3      	bne.n	401b44 <__sprint_r.part.0+0x28>
  401b5c:	2300      	movs	r3, #0
  401b5e:	f8ca 3008 	str.w	r3, [sl, #8]
  401b62:	f8ca 3004 	str.w	r3, [sl, #4]
  401b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401b6a:	f8da 3008 	ldr.w	r3, [sl, #8]
  401b6e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  401b72:	f8ca 3008 	str.w	r3, [sl, #8]
  401b76:	f109 0908 	add.w	r9, r9, #8
  401b7a:	2b00      	cmp	r3, #0
  401b7c:	d1db      	bne.n	401b36 <__sprint_r.part.0+0x1a>
  401b7e:	2000      	movs	r0, #0
  401b80:	e7ec      	b.n	401b5c <__sprint_r.part.0+0x40>
  401b82:	f001 fa99 	bl	4030b8 <__sfvwrite_r>
  401b86:	2300      	movs	r3, #0
  401b88:	f8ca 3008 	str.w	r3, [sl, #8]
  401b8c:	f8ca 3004 	str.w	r3, [sl, #4]
  401b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00401b94 <_vfiprintf_r>:
  401b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b98:	b0ab      	sub	sp, #172	; 0xac
  401b9a:	461c      	mov	r4, r3
  401b9c:	9100      	str	r1, [sp, #0]
  401b9e:	4690      	mov	r8, r2
  401ba0:	9304      	str	r3, [sp, #16]
  401ba2:	9005      	str	r0, [sp, #20]
  401ba4:	b118      	cbz	r0, 401bae <_vfiprintf_r+0x1a>
  401ba6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401ba8:	2b00      	cmp	r3, #0
  401baa:	f000 80de 	beq.w	401d6a <_vfiprintf_r+0x1d6>
  401bae:	9800      	ldr	r0, [sp, #0]
  401bb0:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  401bb4:	b28a      	uxth	r2, r1
  401bb6:	0495      	lsls	r5, r2, #18
  401bb8:	d407      	bmi.n	401bca <_vfiprintf_r+0x36>
  401bba:	6e43      	ldr	r3, [r0, #100]	; 0x64
  401bbc:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  401bc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401bc4:	8182      	strh	r2, [r0, #12]
  401bc6:	6643      	str	r3, [r0, #100]	; 0x64
  401bc8:	b292      	uxth	r2, r2
  401bca:	0711      	lsls	r1, r2, #28
  401bcc:	f140 80b1 	bpl.w	401d32 <_vfiprintf_r+0x19e>
  401bd0:	9b00      	ldr	r3, [sp, #0]
  401bd2:	691b      	ldr	r3, [r3, #16]
  401bd4:	2b00      	cmp	r3, #0
  401bd6:	f000 80ac 	beq.w	401d32 <_vfiprintf_r+0x19e>
  401bda:	f002 021a 	and.w	r2, r2, #26
  401bde:	2a0a      	cmp	r2, #10
  401be0:	f000 80b5 	beq.w	401d4e <_vfiprintf_r+0x1ba>
  401be4:	2300      	movs	r3, #0
  401be6:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  401bea:	9302      	str	r3, [sp, #8]
  401bec:	930f      	str	r3, [sp, #60]	; 0x3c
  401bee:	930e      	str	r3, [sp, #56]	; 0x38
  401bf0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  401bf4:	46da      	mov	sl, fp
  401bf6:	f898 3000 	ldrb.w	r3, [r8]
  401bfa:	4644      	mov	r4, r8
  401bfc:	b1fb      	cbz	r3, 401c3e <_vfiprintf_r+0xaa>
  401bfe:	2b25      	cmp	r3, #37	; 0x25
  401c00:	d102      	bne.n	401c08 <_vfiprintf_r+0x74>
  401c02:	e01c      	b.n	401c3e <_vfiprintf_r+0xaa>
  401c04:	2b25      	cmp	r3, #37	; 0x25
  401c06:	d003      	beq.n	401c10 <_vfiprintf_r+0x7c>
  401c08:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401c0c:	2b00      	cmp	r3, #0
  401c0e:	d1f9      	bne.n	401c04 <_vfiprintf_r+0x70>
  401c10:	ebc8 0504 	rsb	r5, r8, r4
  401c14:	b19d      	cbz	r5, 401c3e <_vfiprintf_r+0xaa>
  401c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401c18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401c1a:	f8ca 8000 	str.w	r8, [sl]
  401c1e:	3301      	adds	r3, #1
  401c20:	442a      	add	r2, r5
  401c22:	2b07      	cmp	r3, #7
  401c24:	f8ca 5004 	str.w	r5, [sl, #4]
  401c28:	920f      	str	r2, [sp, #60]	; 0x3c
  401c2a:	930e      	str	r3, [sp, #56]	; 0x38
  401c2c:	dd7b      	ble.n	401d26 <_vfiprintf_r+0x192>
  401c2e:	2a00      	cmp	r2, #0
  401c30:	f040 8528 	bne.w	402684 <_vfiprintf_r+0xaf0>
  401c34:	9b02      	ldr	r3, [sp, #8]
  401c36:	920e      	str	r2, [sp, #56]	; 0x38
  401c38:	442b      	add	r3, r5
  401c3a:	46da      	mov	sl, fp
  401c3c:	9302      	str	r3, [sp, #8]
  401c3e:	7823      	ldrb	r3, [r4, #0]
  401c40:	2b00      	cmp	r3, #0
  401c42:	f000 843e 	beq.w	4024c2 <_vfiprintf_r+0x92e>
  401c46:	2100      	movs	r1, #0
  401c48:	f04f 0300 	mov.w	r3, #0
  401c4c:	f04f 32ff 	mov.w	r2, #4294967295
  401c50:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401c54:	f104 0801 	add.w	r8, r4, #1
  401c58:	7863      	ldrb	r3, [r4, #1]
  401c5a:	9201      	str	r2, [sp, #4]
  401c5c:	4608      	mov	r0, r1
  401c5e:	460e      	mov	r6, r1
  401c60:	460c      	mov	r4, r1
  401c62:	f108 0801 	add.w	r8, r8, #1
  401c66:	f1a3 0220 	sub.w	r2, r3, #32
  401c6a:	2a58      	cmp	r2, #88	; 0x58
  401c6c:	f200 8393 	bhi.w	402396 <_vfiprintf_r+0x802>
  401c70:	e8df f012 	tbh	[pc, r2, lsl #1]
  401c74:	03910346 	.word	0x03910346
  401c78:	034e0391 	.word	0x034e0391
  401c7c:	03910391 	.word	0x03910391
  401c80:	03910391 	.word	0x03910391
  401c84:	03910391 	.word	0x03910391
  401c88:	02670289 	.word	0x02670289
  401c8c:	00800391 	.word	0x00800391
  401c90:	0391026c 	.word	0x0391026c
  401c94:	025901c6 	.word	0x025901c6
  401c98:	02590259 	.word	0x02590259
  401c9c:	02590259 	.word	0x02590259
  401ca0:	02590259 	.word	0x02590259
  401ca4:	02590259 	.word	0x02590259
  401ca8:	03910391 	.word	0x03910391
  401cac:	03910391 	.word	0x03910391
  401cb0:	03910391 	.word	0x03910391
  401cb4:	03910391 	.word	0x03910391
  401cb8:	03910391 	.word	0x03910391
  401cbc:	039101cb 	.word	0x039101cb
  401cc0:	03910391 	.word	0x03910391
  401cc4:	03910391 	.word	0x03910391
  401cc8:	03910391 	.word	0x03910391
  401ccc:	03910391 	.word	0x03910391
  401cd0:	02140391 	.word	0x02140391
  401cd4:	03910391 	.word	0x03910391
  401cd8:	03910391 	.word	0x03910391
  401cdc:	02ee0391 	.word	0x02ee0391
  401ce0:	03910391 	.word	0x03910391
  401ce4:	03910311 	.word	0x03910311
  401ce8:	03910391 	.word	0x03910391
  401cec:	03910391 	.word	0x03910391
  401cf0:	03910391 	.word	0x03910391
  401cf4:	03910391 	.word	0x03910391
  401cf8:	03340391 	.word	0x03340391
  401cfc:	0391038a 	.word	0x0391038a
  401d00:	03910391 	.word	0x03910391
  401d04:	038a0367 	.word	0x038a0367
  401d08:	03910391 	.word	0x03910391
  401d0c:	0391036c 	.word	0x0391036c
  401d10:	02950379 	.word	0x02950379
  401d14:	02e90085 	.word	0x02e90085
  401d18:	029b0391 	.word	0x029b0391
  401d1c:	02ba0391 	.word	0x02ba0391
  401d20:	03910391 	.word	0x03910391
  401d24:	0353      	.short	0x0353
  401d26:	f10a 0a08 	add.w	sl, sl, #8
  401d2a:	9b02      	ldr	r3, [sp, #8]
  401d2c:	442b      	add	r3, r5
  401d2e:	9302      	str	r3, [sp, #8]
  401d30:	e785      	b.n	401c3e <_vfiprintf_r+0xaa>
  401d32:	9900      	ldr	r1, [sp, #0]
  401d34:	9805      	ldr	r0, [sp, #20]
  401d36:	f000 fe61 	bl	4029fc <__swsetup_r>
  401d3a:	2800      	cmp	r0, #0
  401d3c:	f040 8558 	bne.w	4027f0 <_vfiprintf_r+0xc5c>
  401d40:	9b00      	ldr	r3, [sp, #0]
  401d42:	899a      	ldrh	r2, [r3, #12]
  401d44:	f002 021a 	and.w	r2, r2, #26
  401d48:	2a0a      	cmp	r2, #10
  401d4a:	f47f af4b 	bne.w	401be4 <_vfiprintf_r+0x50>
  401d4e:	9900      	ldr	r1, [sp, #0]
  401d50:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  401d54:	2b00      	cmp	r3, #0
  401d56:	f6ff af45 	blt.w	401be4 <_vfiprintf_r+0x50>
  401d5a:	4623      	mov	r3, r4
  401d5c:	4642      	mov	r2, r8
  401d5e:	9805      	ldr	r0, [sp, #20]
  401d60:	f000 fe16 	bl	402990 <__sbprintf>
  401d64:	b02b      	add	sp, #172	; 0xac
  401d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d6a:	f000 fff3 	bl	402d54 <__sinit>
  401d6e:	e71e      	b.n	401bae <_vfiprintf_r+0x1a>
  401d70:	4264      	negs	r4, r4
  401d72:	9304      	str	r3, [sp, #16]
  401d74:	f046 0604 	orr.w	r6, r6, #4
  401d78:	f898 3000 	ldrb.w	r3, [r8]
  401d7c:	e771      	b.n	401c62 <_vfiprintf_r+0xce>
  401d7e:	2130      	movs	r1, #48	; 0x30
  401d80:	9804      	ldr	r0, [sp, #16]
  401d82:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  401d86:	9901      	ldr	r1, [sp, #4]
  401d88:	9406      	str	r4, [sp, #24]
  401d8a:	f04f 0300 	mov.w	r3, #0
  401d8e:	2278      	movs	r2, #120	; 0x78
  401d90:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401d94:	2900      	cmp	r1, #0
  401d96:	4603      	mov	r3, r0
  401d98:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  401d9c:	6804      	ldr	r4, [r0, #0]
  401d9e:	f103 0304 	add.w	r3, r3, #4
  401da2:	f04f 0500 	mov.w	r5, #0
  401da6:	f046 0202 	orr.w	r2, r6, #2
  401daa:	f2c0 8525 	blt.w	4027f8 <_vfiprintf_r+0xc64>
  401dae:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401db2:	ea54 0205 	orrs.w	r2, r4, r5
  401db6:	f046 0602 	orr.w	r6, r6, #2
  401dba:	9304      	str	r3, [sp, #16]
  401dbc:	f040 84bf 	bne.w	40273e <_vfiprintf_r+0xbaa>
  401dc0:	48b3      	ldr	r0, [pc, #716]	; (402090 <_vfiprintf_r+0x4fc>)
  401dc2:	9b01      	ldr	r3, [sp, #4]
  401dc4:	2b00      	cmp	r3, #0
  401dc6:	f040 841c 	bne.w	402602 <_vfiprintf_r+0xa6e>
  401dca:	4699      	mov	r9, r3
  401dcc:	2300      	movs	r3, #0
  401dce:	9301      	str	r3, [sp, #4]
  401dd0:	9303      	str	r3, [sp, #12]
  401dd2:	465f      	mov	r7, fp
  401dd4:	9b01      	ldr	r3, [sp, #4]
  401dd6:	9a03      	ldr	r2, [sp, #12]
  401dd8:	4293      	cmp	r3, r2
  401dda:	bfb8      	it	lt
  401ddc:	4613      	movlt	r3, r2
  401dde:	461d      	mov	r5, r3
  401de0:	f1b9 0f00 	cmp.w	r9, #0
  401de4:	d000      	beq.n	401de8 <_vfiprintf_r+0x254>
  401de6:	3501      	adds	r5, #1
  401de8:	f016 0302 	ands.w	r3, r6, #2
  401dec:	9307      	str	r3, [sp, #28]
  401dee:	bf18      	it	ne
  401df0:	3502      	addne	r5, #2
  401df2:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  401df6:	9308      	str	r3, [sp, #32]
  401df8:	f040 82f1 	bne.w	4023de <_vfiprintf_r+0x84a>
  401dfc:	9b06      	ldr	r3, [sp, #24]
  401dfe:	1b5c      	subs	r4, r3, r5
  401e00:	2c00      	cmp	r4, #0
  401e02:	f340 82ec 	ble.w	4023de <_vfiprintf_r+0x84a>
  401e06:	2c10      	cmp	r4, #16
  401e08:	f340 8556 	ble.w	4028b8 <_vfiprintf_r+0xd24>
  401e0c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 402094 <_vfiprintf_r+0x500>
  401e10:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  401e14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401e16:	46d4      	mov	ip, sl
  401e18:	2310      	movs	r3, #16
  401e1a:	46c2      	mov	sl, r8
  401e1c:	4670      	mov	r0, lr
  401e1e:	46a8      	mov	r8, r5
  401e20:	464d      	mov	r5, r9
  401e22:	f8dd 9014 	ldr.w	r9, [sp, #20]
  401e26:	e007      	b.n	401e38 <_vfiprintf_r+0x2a4>
  401e28:	f100 0e02 	add.w	lr, r0, #2
  401e2c:	f10c 0c08 	add.w	ip, ip, #8
  401e30:	4608      	mov	r0, r1
  401e32:	3c10      	subs	r4, #16
  401e34:	2c10      	cmp	r4, #16
  401e36:	dd13      	ble.n	401e60 <_vfiprintf_r+0x2cc>
  401e38:	1c41      	adds	r1, r0, #1
  401e3a:	3210      	adds	r2, #16
  401e3c:	2907      	cmp	r1, #7
  401e3e:	920f      	str	r2, [sp, #60]	; 0x3c
  401e40:	f8cc 5000 	str.w	r5, [ip]
  401e44:	f8cc 3004 	str.w	r3, [ip, #4]
  401e48:	910e      	str	r1, [sp, #56]	; 0x38
  401e4a:	dded      	ble.n	401e28 <_vfiprintf_r+0x294>
  401e4c:	2a00      	cmp	r2, #0
  401e4e:	f040 82b7 	bne.w	4023c0 <_vfiprintf_r+0x82c>
  401e52:	3c10      	subs	r4, #16
  401e54:	2c10      	cmp	r4, #16
  401e56:	4610      	mov	r0, r2
  401e58:	f04f 0e01 	mov.w	lr, #1
  401e5c:	46dc      	mov	ip, fp
  401e5e:	dceb      	bgt.n	401e38 <_vfiprintf_r+0x2a4>
  401e60:	46a9      	mov	r9, r5
  401e62:	4670      	mov	r0, lr
  401e64:	4645      	mov	r5, r8
  401e66:	46d0      	mov	r8, sl
  401e68:	46e2      	mov	sl, ip
  401e6a:	4422      	add	r2, r4
  401e6c:	2807      	cmp	r0, #7
  401e6e:	920f      	str	r2, [sp, #60]	; 0x3c
  401e70:	f8ca 9000 	str.w	r9, [sl]
  401e74:	f8ca 4004 	str.w	r4, [sl, #4]
  401e78:	900e      	str	r0, [sp, #56]	; 0x38
  401e7a:	f300 8375 	bgt.w	402568 <_vfiprintf_r+0x9d4>
  401e7e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401e82:	f10a 0a08 	add.w	sl, sl, #8
  401e86:	f100 0e01 	add.w	lr, r0, #1
  401e8a:	2b00      	cmp	r3, #0
  401e8c:	f040 82b0 	bne.w	4023f0 <_vfiprintf_r+0x85c>
  401e90:	9b07      	ldr	r3, [sp, #28]
  401e92:	2b00      	cmp	r3, #0
  401e94:	f000 82c3 	beq.w	40241e <_vfiprintf_r+0x88a>
  401e98:	3202      	adds	r2, #2
  401e9a:	a90c      	add	r1, sp, #48	; 0x30
  401e9c:	2302      	movs	r3, #2
  401e9e:	f1be 0f07 	cmp.w	lr, #7
  401ea2:	920f      	str	r2, [sp, #60]	; 0x3c
  401ea4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401ea8:	e88a 000a 	stmia.w	sl, {r1, r3}
  401eac:	f340 8378 	ble.w	4025a0 <_vfiprintf_r+0xa0c>
  401eb0:	2a00      	cmp	r2, #0
  401eb2:	f040 840a 	bne.w	4026ca <_vfiprintf_r+0xb36>
  401eb6:	9b08      	ldr	r3, [sp, #32]
  401eb8:	2b80      	cmp	r3, #128	; 0x80
  401eba:	f04f 0e01 	mov.w	lr, #1
  401ebe:	4610      	mov	r0, r2
  401ec0:	46da      	mov	sl, fp
  401ec2:	f040 82b0 	bne.w	402426 <_vfiprintf_r+0x892>
  401ec6:	9b06      	ldr	r3, [sp, #24]
  401ec8:	1b5c      	subs	r4, r3, r5
  401eca:	2c00      	cmp	r4, #0
  401ecc:	f340 82ab 	ble.w	402426 <_vfiprintf_r+0x892>
  401ed0:	2c10      	cmp	r4, #16
  401ed2:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 402098 <_vfiprintf_r+0x504>
  401ed6:	f340 850b 	ble.w	4028f0 <_vfiprintf_r+0xd5c>
  401eda:	46d6      	mov	lr, sl
  401edc:	2310      	movs	r3, #16
  401ede:	46c2      	mov	sl, r8
  401ee0:	46a8      	mov	r8, r5
  401ee2:	464d      	mov	r5, r9
  401ee4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  401ee8:	e007      	b.n	401efa <_vfiprintf_r+0x366>
  401eea:	f100 0c02 	add.w	ip, r0, #2
  401eee:	f10e 0e08 	add.w	lr, lr, #8
  401ef2:	4608      	mov	r0, r1
  401ef4:	3c10      	subs	r4, #16
  401ef6:	2c10      	cmp	r4, #16
  401ef8:	dd13      	ble.n	401f22 <_vfiprintf_r+0x38e>
  401efa:	1c41      	adds	r1, r0, #1
  401efc:	3210      	adds	r2, #16
  401efe:	2907      	cmp	r1, #7
  401f00:	920f      	str	r2, [sp, #60]	; 0x3c
  401f02:	f8ce 5000 	str.w	r5, [lr]
  401f06:	f8ce 3004 	str.w	r3, [lr, #4]
  401f0a:	910e      	str	r1, [sp, #56]	; 0x38
  401f0c:	dded      	ble.n	401eea <_vfiprintf_r+0x356>
  401f0e:	2a00      	cmp	r2, #0
  401f10:	f040 8315 	bne.w	40253e <_vfiprintf_r+0x9aa>
  401f14:	3c10      	subs	r4, #16
  401f16:	2c10      	cmp	r4, #16
  401f18:	f04f 0c01 	mov.w	ip, #1
  401f1c:	4610      	mov	r0, r2
  401f1e:	46de      	mov	lr, fp
  401f20:	dceb      	bgt.n	401efa <_vfiprintf_r+0x366>
  401f22:	46a9      	mov	r9, r5
  401f24:	4645      	mov	r5, r8
  401f26:	46d0      	mov	r8, sl
  401f28:	46f2      	mov	sl, lr
  401f2a:	4422      	add	r2, r4
  401f2c:	f1bc 0f07 	cmp.w	ip, #7
  401f30:	920f      	str	r2, [sp, #60]	; 0x3c
  401f32:	f8ca 9000 	str.w	r9, [sl]
  401f36:	f8ca 4004 	str.w	r4, [sl, #4]
  401f3a:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  401f3e:	f300 83d2 	bgt.w	4026e6 <_vfiprintf_r+0xb52>
  401f42:	9b01      	ldr	r3, [sp, #4]
  401f44:	9903      	ldr	r1, [sp, #12]
  401f46:	1a5c      	subs	r4, r3, r1
  401f48:	2c00      	cmp	r4, #0
  401f4a:	f10a 0a08 	add.w	sl, sl, #8
  401f4e:	f10c 0e01 	add.w	lr, ip, #1
  401f52:	4660      	mov	r0, ip
  401f54:	f300 826d 	bgt.w	402432 <_vfiprintf_r+0x89e>
  401f58:	9903      	ldr	r1, [sp, #12]
  401f5a:	f8ca 7000 	str.w	r7, [sl]
  401f5e:	440a      	add	r2, r1
  401f60:	f1be 0f07 	cmp.w	lr, #7
  401f64:	920f      	str	r2, [sp, #60]	; 0x3c
  401f66:	f8ca 1004 	str.w	r1, [sl, #4]
  401f6a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401f6e:	f340 82ce 	ble.w	40250e <_vfiprintf_r+0x97a>
  401f72:	2a00      	cmp	r2, #0
  401f74:	f040 833a 	bne.w	4025ec <_vfiprintf_r+0xa58>
  401f78:	0770      	lsls	r0, r6, #29
  401f7a:	920e      	str	r2, [sp, #56]	; 0x38
  401f7c:	d538      	bpl.n	401ff0 <_vfiprintf_r+0x45c>
  401f7e:	9b06      	ldr	r3, [sp, #24]
  401f80:	1b5c      	subs	r4, r3, r5
  401f82:	2c00      	cmp	r4, #0
  401f84:	dd34      	ble.n	401ff0 <_vfiprintf_r+0x45c>
  401f86:	46da      	mov	sl, fp
  401f88:	2c10      	cmp	r4, #16
  401f8a:	f340 84ab 	ble.w	4028e4 <_vfiprintf_r+0xd50>
  401f8e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 402094 <_vfiprintf_r+0x500>
  401f92:	990e      	ldr	r1, [sp, #56]	; 0x38
  401f94:	464f      	mov	r7, r9
  401f96:	2610      	movs	r6, #16
  401f98:	f8dd 9014 	ldr.w	r9, [sp, #20]
  401f9c:	e006      	b.n	401fac <_vfiprintf_r+0x418>
  401f9e:	1c88      	adds	r0, r1, #2
  401fa0:	f10a 0a08 	add.w	sl, sl, #8
  401fa4:	4619      	mov	r1, r3
  401fa6:	3c10      	subs	r4, #16
  401fa8:	2c10      	cmp	r4, #16
  401faa:	dd13      	ble.n	401fd4 <_vfiprintf_r+0x440>
  401fac:	1c4b      	adds	r3, r1, #1
  401fae:	3210      	adds	r2, #16
  401fb0:	2b07      	cmp	r3, #7
  401fb2:	920f      	str	r2, [sp, #60]	; 0x3c
  401fb4:	f8ca 7000 	str.w	r7, [sl]
  401fb8:	f8ca 6004 	str.w	r6, [sl, #4]
  401fbc:	930e      	str	r3, [sp, #56]	; 0x38
  401fbe:	ddee      	ble.n	401f9e <_vfiprintf_r+0x40a>
  401fc0:	2a00      	cmp	r2, #0
  401fc2:	f040 828e 	bne.w	4024e2 <_vfiprintf_r+0x94e>
  401fc6:	3c10      	subs	r4, #16
  401fc8:	2c10      	cmp	r4, #16
  401fca:	f04f 0001 	mov.w	r0, #1
  401fce:	4611      	mov	r1, r2
  401fd0:	46da      	mov	sl, fp
  401fd2:	dceb      	bgt.n	401fac <_vfiprintf_r+0x418>
  401fd4:	46b9      	mov	r9, r7
  401fd6:	4422      	add	r2, r4
  401fd8:	2807      	cmp	r0, #7
  401fda:	920f      	str	r2, [sp, #60]	; 0x3c
  401fdc:	f8ca 9000 	str.w	r9, [sl]
  401fe0:	f8ca 4004 	str.w	r4, [sl, #4]
  401fe4:	900e      	str	r0, [sp, #56]	; 0x38
  401fe6:	f340 829b 	ble.w	402520 <_vfiprintf_r+0x98c>
  401fea:	2a00      	cmp	r2, #0
  401fec:	f040 8425 	bne.w	40283a <_vfiprintf_r+0xca6>
  401ff0:	9b02      	ldr	r3, [sp, #8]
  401ff2:	9a06      	ldr	r2, [sp, #24]
  401ff4:	42aa      	cmp	r2, r5
  401ff6:	bfac      	ite	ge
  401ff8:	189b      	addge	r3, r3, r2
  401ffa:	195b      	addlt	r3, r3, r5
  401ffc:	9302      	str	r3, [sp, #8]
  401ffe:	e299      	b.n	402534 <_vfiprintf_r+0x9a0>
  402000:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  402004:	f898 3000 	ldrb.w	r3, [r8]
  402008:	e62b      	b.n	401c62 <_vfiprintf_r+0xce>
  40200a:	9406      	str	r4, [sp, #24]
  40200c:	2900      	cmp	r1, #0
  40200e:	f040 84af 	bne.w	402970 <_vfiprintf_r+0xddc>
  402012:	f046 0610 	orr.w	r6, r6, #16
  402016:	06b3      	lsls	r3, r6, #26
  402018:	f140 8312 	bpl.w	402640 <_vfiprintf_r+0xaac>
  40201c:	9904      	ldr	r1, [sp, #16]
  40201e:	3107      	adds	r1, #7
  402020:	f021 0107 	bic.w	r1, r1, #7
  402024:	e9d1 2300 	ldrd	r2, r3, [r1]
  402028:	3108      	adds	r1, #8
  40202a:	9104      	str	r1, [sp, #16]
  40202c:	4614      	mov	r4, r2
  40202e:	461d      	mov	r5, r3
  402030:	2a00      	cmp	r2, #0
  402032:	f173 0300 	sbcs.w	r3, r3, #0
  402036:	f2c0 8386 	blt.w	402746 <_vfiprintf_r+0xbb2>
  40203a:	9b01      	ldr	r3, [sp, #4]
  40203c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  402040:	2b00      	cmp	r3, #0
  402042:	f2c0 831a 	blt.w	40267a <_vfiprintf_r+0xae6>
  402046:	ea54 0305 	orrs.w	r3, r4, r5
  40204a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40204e:	f000 80ed 	beq.w	40222c <_vfiprintf_r+0x698>
  402052:	2d00      	cmp	r5, #0
  402054:	bf08      	it	eq
  402056:	2c0a      	cmpeq	r4, #10
  402058:	f0c0 80ed 	bcc.w	402236 <_vfiprintf_r+0x6a2>
  40205c:	465f      	mov	r7, fp
  40205e:	4620      	mov	r0, r4
  402060:	4629      	mov	r1, r5
  402062:	220a      	movs	r2, #10
  402064:	2300      	movs	r3, #0
  402066:	f002 fa47 	bl	4044f8 <__aeabi_uldivmod>
  40206a:	3230      	adds	r2, #48	; 0x30
  40206c:	f807 2d01 	strb.w	r2, [r7, #-1]!
  402070:	4620      	mov	r0, r4
  402072:	4629      	mov	r1, r5
  402074:	2300      	movs	r3, #0
  402076:	220a      	movs	r2, #10
  402078:	f002 fa3e 	bl	4044f8 <__aeabi_uldivmod>
  40207c:	4604      	mov	r4, r0
  40207e:	460d      	mov	r5, r1
  402080:	ea54 0305 	orrs.w	r3, r4, r5
  402084:	d1eb      	bne.n	40205e <_vfiprintf_r+0x4ca>
  402086:	ebc7 030b 	rsb	r3, r7, fp
  40208a:	9303      	str	r3, [sp, #12]
  40208c:	e6a2      	b.n	401dd4 <_vfiprintf_r+0x240>
  40208e:	bf00      	nop
  402090:	004048d0 	.word	0x004048d0
  402094:	004048ec 	.word	0x004048ec
  402098:	004048ac 	.word	0x004048ac
  40209c:	9406      	str	r4, [sp, #24]
  40209e:	2900      	cmp	r1, #0
  4020a0:	f040 8462 	bne.w	402968 <_vfiprintf_r+0xdd4>
  4020a4:	f046 0610 	orr.w	r6, r6, #16
  4020a8:	f016 0320 	ands.w	r3, r6, #32
  4020ac:	f000 82ae 	beq.w	40260c <_vfiprintf_r+0xa78>
  4020b0:	9b04      	ldr	r3, [sp, #16]
  4020b2:	3307      	adds	r3, #7
  4020b4:	f023 0307 	bic.w	r3, r3, #7
  4020b8:	f04f 0200 	mov.w	r2, #0
  4020bc:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  4020c0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4020c4:	f103 0208 	add.w	r2, r3, #8
  4020c8:	9b01      	ldr	r3, [sp, #4]
  4020ca:	9204      	str	r2, [sp, #16]
  4020cc:	2b00      	cmp	r3, #0
  4020ce:	f2c0 8174 	blt.w	4023ba <_vfiprintf_r+0x826>
  4020d2:	ea54 0305 	orrs.w	r3, r4, r5
  4020d6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4020da:	f040 816e 	bne.w	4023ba <_vfiprintf_r+0x826>
  4020de:	9b01      	ldr	r3, [sp, #4]
  4020e0:	2b00      	cmp	r3, #0
  4020e2:	f000 8430 	beq.w	402946 <_vfiprintf_r+0xdb2>
  4020e6:	f04f 0900 	mov.w	r9, #0
  4020ea:	2400      	movs	r4, #0
  4020ec:	2500      	movs	r5, #0
  4020ee:	465f      	mov	r7, fp
  4020f0:	08e2      	lsrs	r2, r4, #3
  4020f2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4020f6:	08e9      	lsrs	r1, r5, #3
  4020f8:	f004 0307 	and.w	r3, r4, #7
  4020fc:	460d      	mov	r5, r1
  4020fe:	4614      	mov	r4, r2
  402100:	3330      	adds	r3, #48	; 0x30
  402102:	ea54 0205 	orrs.w	r2, r4, r5
  402106:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40210a:	d1f1      	bne.n	4020f0 <_vfiprintf_r+0x55c>
  40210c:	07f4      	lsls	r4, r6, #31
  40210e:	d5ba      	bpl.n	402086 <_vfiprintf_r+0x4f2>
  402110:	2b30      	cmp	r3, #48	; 0x30
  402112:	d0b8      	beq.n	402086 <_vfiprintf_r+0x4f2>
  402114:	2230      	movs	r2, #48	; 0x30
  402116:	1e7b      	subs	r3, r7, #1
  402118:	f807 2c01 	strb.w	r2, [r7, #-1]
  40211c:	ebc3 020b 	rsb	r2, r3, fp
  402120:	9203      	str	r2, [sp, #12]
  402122:	461f      	mov	r7, r3
  402124:	e656      	b.n	401dd4 <_vfiprintf_r+0x240>
  402126:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40212a:	2400      	movs	r4, #0
  40212c:	f818 3b01 	ldrb.w	r3, [r8], #1
  402130:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402134:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  402138:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40213c:	2a09      	cmp	r2, #9
  40213e:	d9f5      	bls.n	40212c <_vfiprintf_r+0x598>
  402140:	e591      	b.n	401c66 <_vfiprintf_r+0xd2>
  402142:	f898 3000 	ldrb.w	r3, [r8]
  402146:	2101      	movs	r1, #1
  402148:	202b      	movs	r0, #43	; 0x2b
  40214a:	e58a      	b.n	401c62 <_vfiprintf_r+0xce>
  40214c:	f898 3000 	ldrb.w	r3, [r8]
  402150:	2b2a      	cmp	r3, #42	; 0x2a
  402152:	f108 0501 	add.w	r5, r8, #1
  402156:	f000 83dd 	beq.w	402914 <_vfiprintf_r+0xd80>
  40215a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40215e:	2a09      	cmp	r2, #9
  402160:	46a8      	mov	r8, r5
  402162:	bf98      	it	ls
  402164:	2500      	movls	r5, #0
  402166:	f200 83ce 	bhi.w	402906 <_vfiprintf_r+0xd72>
  40216a:	f818 3b01 	ldrb.w	r3, [r8], #1
  40216e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  402172:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  402176:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40217a:	2a09      	cmp	r2, #9
  40217c:	d9f5      	bls.n	40216a <_vfiprintf_r+0x5d6>
  40217e:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  402182:	9201      	str	r2, [sp, #4]
  402184:	e56f      	b.n	401c66 <_vfiprintf_r+0xd2>
  402186:	9a04      	ldr	r2, [sp, #16]
  402188:	6814      	ldr	r4, [r2, #0]
  40218a:	4613      	mov	r3, r2
  40218c:	2c00      	cmp	r4, #0
  40218e:	f103 0304 	add.w	r3, r3, #4
  402192:	f6ff aded 	blt.w	401d70 <_vfiprintf_r+0x1dc>
  402196:	9304      	str	r3, [sp, #16]
  402198:	f898 3000 	ldrb.w	r3, [r8]
  40219c:	e561      	b.n	401c62 <_vfiprintf_r+0xce>
  40219e:	9406      	str	r4, [sp, #24]
  4021a0:	2900      	cmp	r1, #0
  4021a2:	d081      	beq.n	4020a8 <_vfiprintf_r+0x514>
  4021a4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4021a8:	e77e      	b.n	4020a8 <_vfiprintf_r+0x514>
  4021aa:	9a04      	ldr	r2, [sp, #16]
  4021ac:	9406      	str	r4, [sp, #24]
  4021ae:	6817      	ldr	r7, [r2, #0]
  4021b0:	f04f 0300 	mov.w	r3, #0
  4021b4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4021b8:	1d14      	adds	r4, r2, #4
  4021ba:	9b01      	ldr	r3, [sp, #4]
  4021bc:	2f00      	cmp	r7, #0
  4021be:	f000 8386 	beq.w	4028ce <_vfiprintf_r+0xd3a>
  4021c2:	2b00      	cmp	r3, #0
  4021c4:	f2c0 835f 	blt.w	402886 <_vfiprintf_r+0xcf2>
  4021c8:	461a      	mov	r2, r3
  4021ca:	2100      	movs	r1, #0
  4021cc:	4638      	mov	r0, r7
  4021ce:	f001 fc5f 	bl	403a90 <memchr>
  4021d2:	2800      	cmp	r0, #0
  4021d4:	f000 838f 	beq.w	4028f6 <_vfiprintf_r+0xd62>
  4021d8:	1bc3      	subs	r3, r0, r7
  4021da:	9303      	str	r3, [sp, #12]
  4021dc:	2300      	movs	r3, #0
  4021de:	9404      	str	r4, [sp, #16]
  4021e0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4021e4:	9301      	str	r3, [sp, #4]
  4021e6:	e5f5      	b.n	401dd4 <_vfiprintf_r+0x240>
  4021e8:	9406      	str	r4, [sp, #24]
  4021ea:	2900      	cmp	r1, #0
  4021ec:	f040 83b9 	bne.w	402962 <_vfiprintf_r+0xdce>
  4021f0:	f016 0920 	ands.w	r9, r6, #32
  4021f4:	d135      	bne.n	402262 <_vfiprintf_r+0x6ce>
  4021f6:	f016 0310 	ands.w	r3, r6, #16
  4021fa:	d103      	bne.n	402204 <_vfiprintf_r+0x670>
  4021fc:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  402200:	f040 832a 	bne.w	402858 <_vfiprintf_r+0xcc4>
  402204:	9a04      	ldr	r2, [sp, #16]
  402206:	4613      	mov	r3, r2
  402208:	6814      	ldr	r4, [r2, #0]
  40220a:	9a01      	ldr	r2, [sp, #4]
  40220c:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402210:	2a00      	cmp	r2, #0
  402212:	f103 0304 	add.w	r3, r3, #4
  402216:	f04f 0500 	mov.w	r5, #0
  40221a:	f2c0 8332 	blt.w	402882 <_vfiprintf_r+0xcee>
  40221e:	ea54 0205 	orrs.w	r2, r4, r5
  402222:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402226:	9304      	str	r3, [sp, #16]
  402228:	f47f af13 	bne.w	402052 <_vfiprintf_r+0x4be>
  40222c:	9b01      	ldr	r3, [sp, #4]
  40222e:	2b00      	cmp	r3, #0
  402230:	f43f adcc 	beq.w	401dcc <_vfiprintf_r+0x238>
  402234:	2400      	movs	r4, #0
  402236:	af2a      	add	r7, sp, #168	; 0xa8
  402238:	3430      	adds	r4, #48	; 0x30
  40223a:	f807 4d41 	strb.w	r4, [r7, #-65]!
  40223e:	ebc7 030b 	rsb	r3, r7, fp
  402242:	9303      	str	r3, [sp, #12]
  402244:	e5c6      	b.n	401dd4 <_vfiprintf_r+0x240>
  402246:	f046 0620 	orr.w	r6, r6, #32
  40224a:	f898 3000 	ldrb.w	r3, [r8]
  40224e:	e508      	b.n	401c62 <_vfiprintf_r+0xce>
  402250:	9406      	str	r4, [sp, #24]
  402252:	2900      	cmp	r1, #0
  402254:	f040 836e 	bne.w	402934 <_vfiprintf_r+0xda0>
  402258:	f046 0610 	orr.w	r6, r6, #16
  40225c:	f016 0920 	ands.w	r9, r6, #32
  402260:	d0c9      	beq.n	4021f6 <_vfiprintf_r+0x662>
  402262:	9b04      	ldr	r3, [sp, #16]
  402264:	3307      	adds	r3, #7
  402266:	f023 0307 	bic.w	r3, r3, #7
  40226a:	f04f 0200 	mov.w	r2, #0
  40226e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  402272:	e9d3 4500 	ldrd	r4, r5, [r3]
  402276:	f103 0208 	add.w	r2, r3, #8
  40227a:	9b01      	ldr	r3, [sp, #4]
  40227c:	9204      	str	r2, [sp, #16]
  40227e:	2b00      	cmp	r3, #0
  402280:	f2c0 81f9 	blt.w	402676 <_vfiprintf_r+0xae2>
  402284:	ea54 0305 	orrs.w	r3, r4, r5
  402288:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40228c:	f04f 0900 	mov.w	r9, #0
  402290:	f47f aedf 	bne.w	402052 <_vfiprintf_r+0x4be>
  402294:	e7ca      	b.n	40222c <_vfiprintf_r+0x698>
  402296:	9406      	str	r4, [sp, #24]
  402298:	2900      	cmp	r1, #0
  40229a:	f040 8351 	bne.w	402940 <_vfiprintf_r+0xdac>
  40229e:	06b2      	lsls	r2, r6, #26
  4022a0:	48ae      	ldr	r0, [pc, #696]	; (40255c <_vfiprintf_r+0x9c8>)
  4022a2:	d541      	bpl.n	402328 <_vfiprintf_r+0x794>
  4022a4:	9a04      	ldr	r2, [sp, #16]
  4022a6:	3207      	adds	r2, #7
  4022a8:	f022 0207 	bic.w	r2, r2, #7
  4022ac:	e9d2 4500 	ldrd	r4, r5, [r2]
  4022b0:	f102 0108 	add.w	r1, r2, #8
  4022b4:	9104      	str	r1, [sp, #16]
  4022b6:	f016 0901 	ands.w	r9, r6, #1
  4022ba:	f000 8177 	beq.w	4025ac <_vfiprintf_r+0xa18>
  4022be:	ea54 0205 	orrs.w	r2, r4, r5
  4022c2:	f040 8226 	bne.w	402712 <_vfiprintf_r+0xb7e>
  4022c6:	f04f 0300 	mov.w	r3, #0
  4022ca:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4022ce:	9b01      	ldr	r3, [sp, #4]
  4022d0:	2b00      	cmp	r3, #0
  4022d2:	f2c0 8196 	blt.w	402602 <_vfiprintf_r+0xa6e>
  4022d6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4022da:	e572      	b.n	401dc2 <_vfiprintf_r+0x22e>
  4022dc:	9a04      	ldr	r2, [sp, #16]
  4022de:	9406      	str	r4, [sp, #24]
  4022e0:	6813      	ldr	r3, [r2, #0]
  4022e2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  4022e6:	4613      	mov	r3, r2
  4022e8:	f04f 0100 	mov.w	r1, #0
  4022ec:	2501      	movs	r5, #1
  4022ee:	3304      	adds	r3, #4
  4022f0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4022f4:	9304      	str	r3, [sp, #16]
  4022f6:	9503      	str	r5, [sp, #12]
  4022f8:	af10      	add	r7, sp, #64	; 0x40
  4022fa:	2300      	movs	r3, #0
  4022fc:	9301      	str	r3, [sp, #4]
  4022fe:	e573      	b.n	401de8 <_vfiprintf_r+0x254>
  402300:	f898 3000 	ldrb.w	r3, [r8]
  402304:	2800      	cmp	r0, #0
  402306:	f47f acac 	bne.w	401c62 <_vfiprintf_r+0xce>
  40230a:	2101      	movs	r1, #1
  40230c:	2020      	movs	r0, #32
  40230e:	e4a8      	b.n	401c62 <_vfiprintf_r+0xce>
  402310:	f046 0601 	orr.w	r6, r6, #1
  402314:	f898 3000 	ldrb.w	r3, [r8]
  402318:	e4a3      	b.n	401c62 <_vfiprintf_r+0xce>
  40231a:	9406      	str	r4, [sp, #24]
  40231c:	2900      	cmp	r1, #0
  40231e:	f040 830c 	bne.w	40293a <_vfiprintf_r+0xda6>
  402322:	06b2      	lsls	r2, r6, #26
  402324:	488e      	ldr	r0, [pc, #568]	; (402560 <_vfiprintf_r+0x9cc>)
  402326:	d4bd      	bmi.n	4022a4 <_vfiprintf_r+0x710>
  402328:	9904      	ldr	r1, [sp, #16]
  40232a:	06f7      	lsls	r7, r6, #27
  40232c:	460a      	mov	r2, r1
  40232e:	f100 819d 	bmi.w	40266c <_vfiprintf_r+0xad8>
  402332:	0675      	lsls	r5, r6, #25
  402334:	f140 819a 	bpl.w	40266c <_vfiprintf_r+0xad8>
  402338:	3204      	adds	r2, #4
  40233a:	880c      	ldrh	r4, [r1, #0]
  40233c:	9204      	str	r2, [sp, #16]
  40233e:	2500      	movs	r5, #0
  402340:	e7b9      	b.n	4022b6 <_vfiprintf_r+0x722>
  402342:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  402346:	f898 3000 	ldrb.w	r3, [r8]
  40234a:	e48a      	b.n	401c62 <_vfiprintf_r+0xce>
  40234c:	f898 3000 	ldrb.w	r3, [r8]
  402350:	2b6c      	cmp	r3, #108	; 0x6c
  402352:	bf03      	ittte	eq
  402354:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  402358:	f046 0620 	orreq.w	r6, r6, #32
  40235c:	f108 0801 	addeq.w	r8, r8, #1
  402360:	f046 0610 	orrne.w	r6, r6, #16
  402364:	e47d      	b.n	401c62 <_vfiprintf_r+0xce>
  402366:	2900      	cmp	r1, #0
  402368:	f040 8309 	bne.w	40297e <_vfiprintf_r+0xdea>
  40236c:	06b4      	lsls	r4, r6, #26
  40236e:	f140 821c 	bpl.w	4027aa <_vfiprintf_r+0xc16>
  402372:	9a04      	ldr	r2, [sp, #16]
  402374:	9902      	ldr	r1, [sp, #8]
  402376:	6813      	ldr	r3, [r2, #0]
  402378:	17cd      	asrs	r5, r1, #31
  40237a:	4608      	mov	r0, r1
  40237c:	3204      	adds	r2, #4
  40237e:	4629      	mov	r1, r5
  402380:	9204      	str	r2, [sp, #16]
  402382:	e9c3 0100 	strd	r0, r1, [r3]
  402386:	e436      	b.n	401bf6 <_vfiprintf_r+0x62>
  402388:	9406      	str	r4, [sp, #24]
  40238a:	2900      	cmp	r1, #0
  40238c:	f43f ae43 	beq.w	402016 <_vfiprintf_r+0x482>
  402390:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402394:	e63f      	b.n	402016 <_vfiprintf_r+0x482>
  402396:	9406      	str	r4, [sp, #24]
  402398:	2900      	cmp	r1, #0
  40239a:	f040 82ed 	bne.w	402978 <_vfiprintf_r+0xde4>
  40239e:	2b00      	cmp	r3, #0
  4023a0:	f000 808f 	beq.w	4024c2 <_vfiprintf_r+0x92e>
  4023a4:	2501      	movs	r5, #1
  4023a6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  4023aa:	f04f 0300 	mov.w	r3, #0
  4023ae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4023b2:	9503      	str	r5, [sp, #12]
  4023b4:	af10      	add	r7, sp, #64	; 0x40
  4023b6:	e7a0      	b.n	4022fa <_vfiprintf_r+0x766>
  4023b8:	9304      	str	r3, [sp, #16]
  4023ba:	f04f 0900 	mov.w	r9, #0
  4023be:	e696      	b.n	4020ee <_vfiprintf_r+0x55a>
  4023c0:	aa0d      	add	r2, sp, #52	; 0x34
  4023c2:	9900      	ldr	r1, [sp, #0]
  4023c4:	9309      	str	r3, [sp, #36]	; 0x24
  4023c6:	4648      	mov	r0, r9
  4023c8:	f7ff fba8 	bl	401b1c <__sprint_r.part.0>
  4023cc:	2800      	cmp	r0, #0
  4023ce:	d17f      	bne.n	4024d0 <_vfiprintf_r+0x93c>
  4023d0:	980e      	ldr	r0, [sp, #56]	; 0x38
  4023d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4023d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4023d6:	f100 0e01 	add.w	lr, r0, #1
  4023da:	46dc      	mov	ip, fp
  4023dc:	e529      	b.n	401e32 <_vfiprintf_r+0x29e>
  4023de:	980e      	ldr	r0, [sp, #56]	; 0x38
  4023e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4023e2:	f100 0e01 	add.w	lr, r0, #1
  4023e6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4023ea:	2b00      	cmp	r3, #0
  4023ec:	f43f ad50 	beq.w	401e90 <_vfiprintf_r+0x2fc>
  4023f0:	3201      	adds	r2, #1
  4023f2:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  4023f6:	2301      	movs	r3, #1
  4023f8:	f1be 0f07 	cmp.w	lr, #7
  4023fc:	920f      	str	r2, [sp, #60]	; 0x3c
  4023fe:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  402402:	e88a 000a 	stmia.w	sl, {r1, r3}
  402406:	f340 80bf 	ble.w	402588 <_vfiprintf_r+0x9f4>
  40240a:	2a00      	cmp	r2, #0
  40240c:	f040 814e 	bne.w	4026ac <_vfiprintf_r+0xb18>
  402410:	9907      	ldr	r1, [sp, #28]
  402412:	2900      	cmp	r1, #0
  402414:	f040 80be 	bne.w	402594 <_vfiprintf_r+0xa00>
  402418:	469e      	mov	lr, r3
  40241a:	4610      	mov	r0, r2
  40241c:	46da      	mov	sl, fp
  40241e:	9b08      	ldr	r3, [sp, #32]
  402420:	2b80      	cmp	r3, #128	; 0x80
  402422:	f43f ad50 	beq.w	401ec6 <_vfiprintf_r+0x332>
  402426:	9b01      	ldr	r3, [sp, #4]
  402428:	9903      	ldr	r1, [sp, #12]
  40242a:	1a5c      	subs	r4, r3, r1
  40242c:	2c00      	cmp	r4, #0
  40242e:	f77f ad93 	ble.w	401f58 <_vfiprintf_r+0x3c4>
  402432:	2c10      	cmp	r4, #16
  402434:	f8df 912c 	ldr.w	r9, [pc, #300]	; 402564 <_vfiprintf_r+0x9d0>
  402438:	dd25      	ble.n	402486 <_vfiprintf_r+0x8f2>
  40243a:	46d4      	mov	ip, sl
  40243c:	2310      	movs	r3, #16
  40243e:	46c2      	mov	sl, r8
  402440:	46a8      	mov	r8, r5
  402442:	464d      	mov	r5, r9
  402444:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402448:	e007      	b.n	40245a <_vfiprintf_r+0x8c6>
  40244a:	f100 0e02 	add.w	lr, r0, #2
  40244e:	f10c 0c08 	add.w	ip, ip, #8
  402452:	4608      	mov	r0, r1
  402454:	3c10      	subs	r4, #16
  402456:	2c10      	cmp	r4, #16
  402458:	dd11      	ble.n	40247e <_vfiprintf_r+0x8ea>
  40245a:	1c41      	adds	r1, r0, #1
  40245c:	3210      	adds	r2, #16
  40245e:	2907      	cmp	r1, #7
  402460:	920f      	str	r2, [sp, #60]	; 0x3c
  402462:	f8cc 5000 	str.w	r5, [ip]
  402466:	f8cc 3004 	str.w	r3, [ip, #4]
  40246a:	910e      	str	r1, [sp, #56]	; 0x38
  40246c:	dded      	ble.n	40244a <_vfiprintf_r+0x8b6>
  40246e:	b9d2      	cbnz	r2, 4024a6 <_vfiprintf_r+0x912>
  402470:	3c10      	subs	r4, #16
  402472:	2c10      	cmp	r4, #16
  402474:	f04f 0e01 	mov.w	lr, #1
  402478:	4610      	mov	r0, r2
  40247a:	46dc      	mov	ip, fp
  40247c:	dced      	bgt.n	40245a <_vfiprintf_r+0x8c6>
  40247e:	46a9      	mov	r9, r5
  402480:	4645      	mov	r5, r8
  402482:	46d0      	mov	r8, sl
  402484:	46e2      	mov	sl, ip
  402486:	4422      	add	r2, r4
  402488:	f1be 0f07 	cmp.w	lr, #7
  40248c:	920f      	str	r2, [sp, #60]	; 0x3c
  40248e:	f8ca 9000 	str.w	r9, [sl]
  402492:	f8ca 4004 	str.w	r4, [sl, #4]
  402496:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40249a:	dc2e      	bgt.n	4024fa <_vfiprintf_r+0x966>
  40249c:	f10a 0a08 	add.w	sl, sl, #8
  4024a0:	f10e 0e01 	add.w	lr, lr, #1
  4024a4:	e558      	b.n	401f58 <_vfiprintf_r+0x3c4>
  4024a6:	aa0d      	add	r2, sp, #52	; 0x34
  4024a8:	9900      	ldr	r1, [sp, #0]
  4024aa:	9301      	str	r3, [sp, #4]
  4024ac:	4648      	mov	r0, r9
  4024ae:	f7ff fb35 	bl	401b1c <__sprint_r.part.0>
  4024b2:	b968      	cbnz	r0, 4024d0 <_vfiprintf_r+0x93c>
  4024b4:	980e      	ldr	r0, [sp, #56]	; 0x38
  4024b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4024b8:	9b01      	ldr	r3, [sp, #4]
  4024ba:	f100 0e01 	add.w	lr, r0, #1
  4024be:	46dc      	mov	ip, fp
  4024c0:	e7c8      	b.n	402454 <_vfiprintf_r+0x8c0>
  4024c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4024c4:	b123      	cbz	r3, 4024d0 <_vfiprintf_r+0x93c>
  4024c6:	9805      	ldr	r0, [sp, #20]
  4024c8:	9900      	ldr	r1, [sp, #0]
  4024ca:	aa0d      	add	r2, sp, #52	; 0x34
  4024cc:	f7ff fb26 	bl	401b1c <__sprint_r.part.0>
  4024d0:	9b00      	ldr	r3, [sp, #0]
  4024d2:	899b      	ldrh	r3, [r3, #12]
  4024d4:	065a      	lsls	r2, r3, #25
  4024d6:	f100 818b 	bmi.w	4027f0 <_vfiprintf_r+0xc5c>
  4024da:	9802      	ldr	r0, [sp, #8]
  4024dc:	b02b      	add	sp, #172	; 0xac
  4024de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4024e2:	aa0d      	add	r2, sp, #52	; 0x34
  4024e4:	9900      	ldr	r1, [sp, #0]
  4024e6:	4648      	mov	r0, r9
  4024e8:	f7ff fb18 	bl	401b1c <__sprint_r.part.0>
  4024ec:	2800      	cmp	r0, #0
  4024ee:	d1ef      	bne.n	4024d0 <_vfiprintf_r+0x93c>
  4024f0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4024f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4024f4:	1c48      	adds	r0, r1, #1
  4024f6:	46da      	mov	sl, fp
  4024f8:	e555      	b.n	401fa6 <_vfiprintf_r+0x412>
  4024fa:	2a00      	cmp	r2, #0
  4024fc:	f040 80fb 	bne.w	4026f6 <_vfiprintf_r+0xb62>
  402500:	9a03      	ldr	r2, [sp, #12]
  402502:	921b      	str	r2, [sp, #108]	; 0x6c
  402504:	2301      	movs	r3, #1
  402506:	920f      	str	r2, [sp, #60]	; 0x3c
  402508:	971a      	str	r7, [sp, #104]	; 0x68
  40250a:	930e      	str	r3, [sp, #56]	; 0x38
  40250c:	46da      	mov	sl, fp
  40250e:	f10a 0a08 	add.w	sl, sl, #8
  402512:	0771      	lsls	r1, r6, #29
  402514:	d504      	bpl.n	402520 <_vfiprintf_r+0x98c>
  402516:	9b06      	ldr	r3, [sp, #24]
  402518:	1b5c      	subs	r4, r3, r5
  40251a:	2c00      	cmp	r4, #0
  40251c:	f73f ad34 	bgt.w	401f88 <_vfiprintf_r+0x3f4>
  402520:	9b02      	ldr	r3, [sp, #8]
  402522:	9906      	ldr	r1, [sp, #24]
  402524:	42a9      	cmp	r1, r5
  402526:	bfac      	ite	ge
  402528:	185b      	addge	r3, r3, r1
  40252a:	195b      	addlt	r3, r3, r5
  40252c:	9302      	str	r3, [sp, #8]
  40252e:	2a00      	cmp	r2, #0
  402530:	f040 80b3 	bne.w	40269a <_vfiprintf_r+0xb06>
  402534:	2300      	movs	r3, #0
  402536:	930e      	str	r3, [sp, #56]	; 0x38
  402538:	46da      	mov	sl, fp
  40253a:	f7ff bb5c 	b.w	401bf6 <_vfiprintf_r+0x62>
  40253e:	aa0d      	add	r2, sp, #52	; 0x34
  402540:	9900      	ldr	r1, [sp, #0]
  402542:	9307      	str	r3, [sp, #28]
  402544:	4648      	mov	r0, r9
  402546:	f7ff fae9 	bl	401b1c <__sprint_r.part.0>
  40254a:	2800      	cmp	r0, #0
  40254c:	d1c0      	bne.n	4024d0 <_vfiprintf_r+0x93c>
  40254e:	980e      	ldr	r0, [sp, #56]	; 0x38
  402550:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402552:	9b07      	ldr	r3, [sp, #28]
  402554:	f100 0c01 	add.w	ip, r0, #1
  402558:	46de      	mov	lr, fp
  40255a:	e4cb      	b.n	401ef4 <_vfiprintf_r+0x360>
  40255c:	004048bc 	.word	0x004048bc
  402560:	004048d0 	.word	0x004048d0
  402564:	004048ac 	.word	0x004048ac
  402568:	2a00      	cmp	r2, #0
  40256a:	f040 8133 	bne.w	4027d4 <_vfiprintf_r+0xc40>
  40256e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  402572:	2b00      	cmp	r3, #0
  402574:	f000 80f5 	beq.w	402762 <_vfiprintf_r+0xbce>
  402578:	2301      	movs	r3, #1
  40257a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40257e:	461a      	mov	r2, r3
  402580:	931b      	str	r3, [sp, #108]	; 0x6c
  402582:	469e      	mov	lr, r3
  402584:	911a      	str	r1, [sp, #104]	; 0x68
  402586:	46da      	mov	sl, fp
  402588:	4670      	mov	r0, lr
  40258a:	f10a 0a08 	add.w	sl, sl, #8
  40258e:	f10e 0e01 	add.w	lr, lr, #1
  402592:	e47d      	b.n	401e90 <_vfiprintf_r+0x2fc>
  402594:	a90c      	add	r1, sp, #48	; 0x30
  402596:	2202      	movs	r2, #2
  402598:	469e      	mov	lr, r3
  40259a:	911a      	str	r1, [sp, #104]	; 0x68
  40259c:	921b      	str	r2, [sp, #108]	; 0x6c
  40259e:	46da      	mov	sl, fp
  4025a0:	4670      	mov	r0, lr
  4025a2:	f10a 0a08 	add.w	sl, sl, #8
  4025a6:	f10e 0e01 	add.w	lr, lr, #1
  4025aa:	e738      	b.n	40241e <_vfiprintf_r+0x88a>
  4025ac:	9b01      	ldr	r3, [sp, #4]
  4025ae:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4025b2:	2b00      	cmp	r3, #0
  4025b4:	f2c0 812a 	blt.w	40280c <_vfiprintf_r+0xc78>
  4025b8:	ea54 0305 	orrs.w	r3, r4, r5
  4025bc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4025c0:	f43f abff 	beq.w	401dc2 <_vfiprintf_r+0x22e>
  4025c4:	465f      	mov	r7, fp
  4025c6:	0923      	lsrs	r3, r4, #4
  4025c8:	f004 010f 	and.w	r1, r4, #15
  4025cc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4025d0:	092a      	lsrs	r2, r5, #4
  4025d2:	461c      	mov	r4, r3
  4025d4:	4615      	mov	r5, r2
  4025d6:	5c43      	ldrb	r3, [r0, r1]
  4025d8:	f807 3d01 	strb.w	r3, [r7, #-1]!
  4025dc:	ea54 0305 	orrs.w	r3, r4, r5
  4025e0:	d1f1      	bne.n	4025c6 <_vfiprintf_r+0xa32>
  4025e2:	ebc7 030b 	rsb	r3, r7, fp
  4025e6:	9303      	str	r3, [sp, #12]
  4025e8:	f7ff bbf4 	b.w	401dd4 <_vfiprintf_r+0x240>
  4025ec:	aa0d      	add	r2, sp, #52	; 0x34
  4025ee:	9900      	ldr	r1, [sp, #0]
  4025f0:	9805      	ldr	r0, [sp, #20]
  4025f2:	f7ff fa93 	bl	401b1c <__sprint_r.part.0>
  4025f6:	2800      	cmp	r0, #0
  4025f8:	f47f af6a 	bne.w	4024d0 <_vfiprintf_r+0x93c>
  4025fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4025fe:	46da      	mov	sl, fp
  402600:	e787      	b.n	402512 <_vfiprintf_r+0x97e>
  402602:	f04f 0900 	mov.w	r9, #0
  402606:	2400      	movs	r4, #0
  402608:	2500      	movs	r5, #0
  40260a:	e7db      	b.n	4025c4 <_vfiprintf_r+0xa30>
  40260c:	f016 0210 	ands.w	r2, r6, #16
  402610:	f000 80b2 	beq.w	402778 <_vfiprintf_r+0xbe4>
  402614:	9904      	ldr	r1, [sp, #16]
  402616:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40261a:	460a      	mov	r2, r1
  40261c:	680c      	ldr	r4, [r1, #0]
  40261e:	9901      	ldr	r1, [sp, #4]
  402620:	2900      	cmp	r1, #0
  402622:	f102 0204 	add.w	r2, r2, #4
  402626:	f04f 0500 	mov.w	r5, #0
  40262a:	f2c0 8159 	blt.w	4028e0 <_vfiprintf_r+0xd4c>
  40262e:	ea54 0105 	orrs.w	r1, r4, r5
  402632:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402636:	9204      	str	r2, [sp, #16]
  402638:	f43f ad51 	beq.w	4020de <_vfiprintf_r+0x54a>
  40263c:	4699      	mov	r9, r3
  40263e:	e556      	b.n	4020ee <_vfiprintf_r+0x55a>
  402640:	06f7      	lsls	r7, r6, #27
  402642:	d40a      	bmi.n	40265a <_vfiprintf_r+0xac6>
  402644:	0675      	lsls	r5, r6, #25
  402646:	d508      	bpl.n	40265a <_vfiprintf_r+0xac6>
  402648:	9904      	ldr	r1, [sp, #16]
  40264a:	f9b1 4000 	ldrsh.w	r4, [r1]
  40264e:	3104      	adds	r1, #4
  402650:	17e5      	asrs	r5, r4, #31
  402652:	4622      	mov	r2, r4
  402654:	462b      	mov	r3, r5
  402656:	9104      	str	r1, [sp, #16]
  402658:	e4ea      	b.n	402030 <_vfiprintf_r+0x49c>
  40265a:	9a04      	ldr	r2, [sp, #16]
  40265c:	6814      	ldr	r4, [r2, #0]
  40265e:	4613      	mov	r3, r2
  402660:	3304      	adds	r3, #4
  402662:	17e5      	asrs	r5, r4, #31
  402664:	9304      	str	r3, [sp, #16]
  402666:	4622      	mov	r2, r4
  402668:	462b      	mov	r3, r5
  40266a:	e4e1      	b.n	402030 <_vfiprintf_r+0x49c>
  40266c:	6814      	ldr	r4, [r2, #0]
  40266e:	3204      	adds	r2, #4
  402670:	9204      	str	r2, [sp, #16]
  402672:	2500      	movs	r5, #0
  402674:	e61f      	b.n	4022b6 <_vfiprintf_r+0x722>
  402676:	f04f 0900 	mov.w	r9, #0
  40267a:	ea54 0305 	orrs.w	r3, r4, r5
  40267e:	f47f ace8 	bne.w	402052 <_vfiprintf_r+0x4be>
  402682:	e5d8      	b.n	402236 <_vfiprintf_r+0x6a2>
  402684:	aa0d      	add	r2, sp, #52	; 0x34
  402686:	9900      	ldr	r1, [sp, #0]
  402688:	9805      	ldr	r0, [sp, #20]
  40268a:	f7ff fa47 	bl	401b1c <__sprint_r.part.0>
  40268e:	2800      	cmp	r0, #0
  402690:	f47f af1e 	bne.w	4024d0 <_vfiprintf_r+0x93c>
  402694:	46da      	mov	sl, fp
  402696:	f7ff bb48 	b.w	401d2a <_vfiprintf_r+0x196>
  40269a:	aa0d      	add	r2, sp, #52	; 0x34
  40269c:	9900      	ldr	r1, [sp, #0]
  40269e:	9805      	ldr	r0, [sp, #20]
  4026a0:	f7ff fa3c 	bl	401b1c <__sprint_r.part.0>
  4026a4:	2800      	cmp	r0, #0
  4026a6:	f43f af45 	beq.w	402534 <_vfiprintf_r+0x9a0>
  4026aa:	e711      	b.n	4024d0 <_vfiprintf_r+0x93c>
  4026ac:	aa0d      	add	r2, sp, #52	; 0x34
  4026ae:	9900      	ldr	r1, [sp, #0]
  4026b0:	9805      	ldr	r0, [sp, #20]
  4026b2:	f7ff fa33 	bl	401b1c <__sprint_r.part.0>
  4026b6:	2800      	cmp	r0, #0
  4026b8:	f47f af0a 	bne.w	4024d0 <_vfiprintf_r+0x93c>
  4026bc:	980e      	ldr	r0, [sp, #56]	; 0x38
  4026be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4026c0:	f100 0e01 	add.w	lr, r0, #1
  4026c4:	46da      	mov	sl, fp
  4026c6:	f7ff bbe3 	b.w	401e90 <_vfiprintf_r+0x2fc>
  4026ca:	aa0d      	add	r2, sp, #52	; 0x34
  4026cc:	9900      	ldr	r1, [sp, #0]
  4026ce:	9805      	ldr	r0, [sp, #20]
  4026d0:	f7ff fa24 	bl	401b1c <__sprint_r.part.0>
  4026d4:	2800      	cmp	r0, #0
  4026d6:	f47f aefb 	bne.w	4024d0 <_vfiprintf_r+0x93c>
  4026da:	980e      	ldr	r0, [sp, #56]	; 0x38
  4026dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4026de:	f100 0e01 	add.w	lr, r0, #1
  4026e2:	46da      	mov	sl, fp
  4026e4:	e69b      	b.n	40241e <_vfiprintf_r+0x88a>
  4026e6:	2a00      	cmp	r2, #0
  4026e8:	f040 80d8 	bne.w	40289c <_vfiprintf_r+0xd08>
  4026ec:	f04f 0e01 	mov.w	lr, #1
  4026f0:	4610      	mov	r0, r2
  4026f2:	46da      	mov	sl, fp
  4026f4:	e697      	b.n	402426 <_vfiprintf_r+0x892>
  4026f6:	aa0d      	add	r2, sp, #52	; 0x34
  4026f8:	9900      	ldr	r1, [sp, #0]
  4026fa:	9805      	ldr	r0, [sp, #20]
  4026fc:	f7ff fa0e 	bl	401b1c <__sprint_r.part.0>
  402700:	2800      	cmp	r0, #0
  402702:	f47f aee5 	bne.w	4024d0 <_vfiprintf_r+0x93c>
  402706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402708:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40270a:	f103 0e01 	add.w	lr, r3, #1
  40270e:	46da      	mov	sl, fp
  402710:	e422      	b.n	401f58 <_vfiprintf_r+0x3c4>
  402712:	2230      	movs	r2, #48	; 0x30
  402714:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  402718:	9a01      	ldr	r2, [sp, #4]
  40271a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40271e:	2a00      	cmp	r2, #0
  402720:	f04f 0300 	mov.w	r3, #0
  402724:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402728:	f046 0302 	orr.w	r3, r6, #2
  40272c:	f2c0 80cb 	blt.w	4028c6 <_vfiprintf_r+0xd32>
  402730:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402734:	f046 0602 	orr.w	r6, r6, #2
  402738:	f04f 0900 	mov.w	r9, #0
  40273c:	e742      	b.n	4025c4 <_vfiprintf_r+0xa30>
  40273e:	f04f 0900 	mov.w	r9, #0
  402742:	4890      	ldr	r0, [pc, #576]	; (402984 <_vfiprintf_r+0xdf0>)
  402744:	e73e      	b.n	4025c4 <_vfiprintf_r+0xa30>
  402746:	9b01      	ldr	r3, [sp, #4]
  402748:	4264      	negs	r4, r4
  40274a:	f04f 092d 	mov.w	r9, #45	; 0x2d
  40274e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  402752:	2b00      	cmp	r3, #0
  402754:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402758:	f6ff ac7b 	blt.w	402052 <_vfiprintf_r+0x4be>
  40275c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402760:	e477      	b.n	402052 <_vfiprintf_r+0x4be>
  402762:	9b07      	ldr	r3, [sp, #28]
  402764:	2b00      	cmp	r3, #0
  402766:	d072      	beq.n	40284e <_vfiprintf_r+0xcba>
  402768:	ab0c      	add	r3, sp, #48	; 0x30
  40276a:	2202      	movs	r2, #2
  40276c:	931a      	str	r3, [sp, #104]	; 0x68
  40276e:	921b      	str	r2, [sp, #108]	; 0x6c
  402770:	f04f 0e01 	mov.w	lr, #1
  402774:	46da      	mov	sl, fp
  402776:	e713      	b.n	4025a0 <_vfiprintf_r+0xa0c>
  402778:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  40277c:	d048      	beq.n	402810 <_vfiprintf_r+0xc7c>
  40277e:	9904      	ldr	r1, [sp, #16]
  402780:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  402784:	460b      	mov	r3, r1
  402786:	880c      	ldrh	r4, [r1, #0]
  402788:	9901      	ldr	r1, [sp, #4]
  40278a:	2900      	cmp	r1, #0
  40278c:	f103 0304 	add.w	r3, r3, #4
  402790:	f04f 0500 	mov.w	r5, #0
  402794:	f6ff ae10 	blt.w	4023b8 <_vfiprintf_r+0x824>
  402798:	ea54 0105 	orrs.w	r1, r4, r5
  40279c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4027a0:	9304      	str	r3, [sp, #16]
  4027a2:	f43f ac9c 	beq.w	4020de <_vfiprintf_r+0x54a>
  4027a6:	4691      	mov	r9, r2
  4027a8:	e4a1      	b.n	4020ee <_vfiprintf_r+0x55a>
  4027aa:	06f0      	lsls	r0, r6, #27
  4027ac:	d40a      	bmi.n	4027c4 <_vfiprintf_r+0xc30>
  4027ae:	0671      	lsls	r1, r6, #25
  4027b0:	d508      	bpl.n	4027c4 <_vfiprintf_r+0xc30>
  4027b2:	9a04      	ldr	r2, [sp, #16]
  4027b4:	6813      	ldr	r3, [r2, #0]
  4027b6:	3204      	adds	r2, #4
  4027b8:	9204      	str	r2, [sp, #16]
  4027ba:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  4027be:	801a      	strh	r2, [r3, #0]
  4027c0:	f7ff ba19 	b.w	401bf6 <_vfiprintf_r+0x62>
  4027c4:	9a04      	ldr	r2, [sp, #16]
  4027c6:	6813      	ldr	r3, [r2, #0]
  4027c8:	3204      	adds	r2, #4
  4027ca:	9204      	str	r2, [sp, #16]
  4027cc:	9a02      	ldr	r2, [sp, #8]
  4027ce:	601a      	str	r2, [r3, #0]
  4027d0:	f7ff ba11 	b.w	401bf6 <_vfiprintf_r+0x62>
  4027d4:	aa0d      	add	r2, sp, #52	; 0x34
  4027d6:	9900      	ldr	r1, [sp, #0]
  4027d8:	9805      	ldr	r0, [sp, #20]
  4027da:	f7ff f99f 	bl	401b1c <__sprint_r.part.0>
  4027de:	2800      	cmp	r0, #0
  4027e0:	f47f ae76 	bne.w	4024d0 <_vfiprintf_r+0x93c>
  4027e4:	980e      	ldr	r0, [sp, #56]	; 0x38
  4027e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4027e8:	f100 0e01 	add.w	lr, r0, #1
  4027ec:	46da      	mov	sl, fp
  4027ee:	e5fa      	b.n	4023e6 <_vfiprintf_r+0x852>
  4027f0:	f04f 30ff 	mov.w	r0, #4294967295
  4027f4:	f7ff bab6 	b.w	401d64 <_vfiprintf_r+0x1d0>
  4027f8:	4862      	ldr	r0, [pc, #392]	; (402984 <_vfiprintf_r+0xdf0>)
  4027fa:	4616      	mov	r6, r2
  4027fc:	ea54 0205 	orrs.w	r2, r4, r5
  402800:	9304      	str	r3, [sp, #16]
  402802:	f04f 0900 	mov.w	r9, #0
  402806:	f47f aedd 	bne.w	4025c4 <_vfiprintf_r+0xa30>
  40280a:	e6fc      	b.n	402606 <_vfiprintf_r+0xa72>
  40280c:	9b04      	ldr	r3, [sp, #16]
  40280e:	e7f5      	b.n	4027fc <_vfiprintf_r+0xc68>
  402810:	9a04      	ldr	r2, [sp, #16]
  402812:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402816:	4613      	mov	r3, r2
  402818:	6814      	ldr	r4, [r2, #0]
  40281a:	9a01      	ldr	r2, [sp, #4]
  40281c:	2a00      	cmp	r2, #0
  40281e:	f103 0304 	add.w	r3, r3, #4
  402822:	f04f 0500 	mov.w	r5, #0
  402826:	f6ff adc7 	blt.w	4023b8 <_vfiprintf_r+0x824>
  40282a:	ea54 0205 	orrs.w	r2, r4, r5
  40282e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402832:	9304      	str	r3, [sp, #16]
  402834:	f47f ac5b 	bne.w	4020ee <_vfiprintf_r+0x55a>
  402838:	e451      	b.n	4020de <_vfiprintf_r+0x54a>
  40283a:	aa0d      	add	r2, sp, #52	; 0x34
  40283c:	9900      	ldr	r1, [sp, #0]
  40283e:	9805      	ldr	r0, [sp, #20]
  402840:	f7ff f96c 	bl	401b1c <__sprint_r.part.0>
  402844:	2800      	cmp	r0, #0
  402846:	f47f ae43 	bne.w	4024d0 <_vfiprintf_r+0x93c>
  40284a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40284c:	e668      	b.n	402520 <_vfiprintf_r+0x98c>
  40284e:	4610      	mov	r0, r2
  402850:	f04f 0e01 	mov.w	lr, #1
  402854:	46da      	mov	sl, fp
  402856:	e5e6      	b.n	402426 <_vfiprintf_r+0x892>
  402858:	9904      	ldr	r1, [sp, #16]
  40285a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40285e:	460a      	mov	r2, r1
  402860:	880c      	ldrh	r4, [r1, #0]
  402862:	9901      	ldr	r1, [sp, #4]
  402864:	2900      	cmp	r1, #0
  402866:	f102 0204 	add.w	r2, r2, #4
  40286a:	f04f 0500 	mov.w	r5, #0
  40286e:	db4e      	blt.n	40290e <_vfiprintf_r+0xd7a>
  402870:	ea54 0105 	orrs.w	r1, r4, r5
  402874:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402878:	9204      	str	r2, [sp, #16]
  40287a:	4699      	mov	r9, r3
  40287c:	f47f abe9 	bne.w	402052 <_vfiprintf_r+0x4be>
  402880:	e4d4      	b.n	40222c <_vfiprintf_r+0x698>
  402882:	9304      	str	r3, [sp, #16]
  402884:	e6f9      	b.n	40267a <_vfiprintf_r+0xae6>
  402886:	4638      	mov	r0, r7
  402888:	9404      	str	r4, [sp, #16]
  40288a:	f7ff f8d9 	bl	401a40 <strlen>
  40288e:	2300      	movs	r3, #0
  402890:	9003      	str	r0, [sp, #12]
  402892:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  402896:	9301      	str	r3, [sp, #4]
  402898:	f7ff ba9c 	b.w	401dd4 <_vfiprintf_r+0x240>
  40289c:	aa0d      	add	r2, sp, #52	; 0x34
  40289e:	9900      	ldr	r1, [sp, #0]
  4028a0:	9805      	ldr	r0, [sp, #20]
  4028a2:	f7ff f93b 	bl	401b1c <__sprint_r.part.0>
  4028a6:	2800      	cmp	r0, #0
  4028a8:	f47f ae12 	bne.w	4024d0 <_vfiprintf_r+0x93c>
  4028ac:	980e      	ldr	r0, [sp, #56]	; 0x38
  4028ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4028b0:	f100 0e01 	add.w	lr, r0, #1
  4028b4:	46da      	mov	sl, fp
  4028b6:	e5b6      	b.n	402426 <_vfiprintf_r+0x892>
  4028b8:	980e      	ldr	r0, [sp, #56]	; 0x38
  4028ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4028bc:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 40298c <_vfiprintf_r+0xdf8>
  4028c0:	3001      	adds	r0, #1
  4028c2:	f7ff bad2 	b.w	401e6a <_vfiprintf_r+0x2d6>
  4028c6:	461e      	mov	r6, r3
  4028c8:	f04f 0900 	mov.w	r9, #0
  4028cc:	e67a      	b.n	4025c4 <_vfiprintf_r+0xa30>
  4028ce:	2b06      	cmp	r3, #6
  4028d0:	bf28      	it	cs
  4028d2:	2306      	movcs	r3, #6
  4028d4:	9303      	str	r3, [sp, #12]
  4028d6:	9404      	str	r4, [sp, #16]
  4028d8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  4028dc:	4f2a      	ldr	r7, [pc, #168]	; (402988 <_vfiprintf_r+0xdf4>)
  4028de:	e50c      	b.n	4022fa <_vfiprintf_r+0x766>
  4028e0:	9204      	str	r2, [sp, #16]
  4028e2:	e56a      	b.n	4023ba <_vfiprintf_r+0x826>
  4028e4:	980e      	ldr	r0, [sp, #56]	; 0x38
  4028e6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40298c <_vfiprintf_r+0xdf8>
  4028ea:	3001      	adds	r0, #1
  4028ec:	f7ff bb73 	b.w	401fd6 <_vfiprintf_r+0x442>
  4028f0:	46f4      	mov	ip, lr
  4028f2:	f7ff bb1a 	b.w	401f2a <_vfiprintf_r+0x396>
  4028f6:	9b01      	ldr	r3, [sp, #4]
  4028f8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4028fc:	9303      	str	r3, [sp, #12]
  4028fe:	9404      	str	r4, [sp, #16]
  402900:	9001      	str	r0, [sp, #4]
  402902:	f7ff ba67 	b.w	401dd4 <_vfiprintf_r+0x240>
  402906:	2200      	movs	r2, #0
  402908:	9201      	str	r2, [sp, #4]
  40290a:	f7ff b9ac 	b.w	401c66 <_vfiprintf_r+0xd2>
  40290e:	9204      	str	r2, [sp, #16]
  402910:	4699      	mov	r9, r3
  402912:	e6b2      	b.n	40267a <_vfiprintf_r+0xae6>
  402914:	9a04      	ldr	r2, [sp, #16]
  402916:	6813      	ldr	r3, [r2, #0]
  402918:	9301      	str	r3, [sp, #4]
  40291a:	3204      	adds	r2, #4
  40291c:	2b00      	cmp	r3, #0
  40291e:	9204      	str	r2, [sp, #16]
  402920:	f898 3001 	ldrb.w	r3, [r8, #1]
  402924:	46a8      	mov	r8, r5
  402926:	f6bf a99c 	bge.w	401c62 <_vfiprintf_r+0xce>
  40292a:	f04f 32ff 	mov.w	r2, #4294967295
  40292e:	9201      	str	r2, [sp, #4]
  402930:	f7ff b997 	b.w	401c62 <_vfiprintf_r+0xce>
  402934:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402938:	e48e      	b.n	402258 <_vfiprintf_r+0x6c4>
  40293a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40293e:	e4f0      	b.n	402322 <_vfiprintf_r+0x78e>
  402940:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402944:	e4ab      	b.n	40229e <_vfiprintf_r+0x70a>
  402946:	4699      	mov	r9, r3
  402948:	07f3      	lsls	r3, r6, #31
  40294a:	d505      	bpl.n	402958 <_vfiprintf_r+0xdc4>
  40294c:	af2a      	add	r7, sp, #168	; 0xa8
  40294e:	2330      	movs	r3, #48	; 0x30
  402950:	f807 3d41 	strb.w	r3, [r7, #-65]!
  402954:	f7ff bb97 	b.w	402086 <_vfiprintf_r+0x4f2>
  402958:	9b01      	ldr	r3, [sp, #4]
  40295a:	9303      	str	r3, [sp, #12]
  40295c:	465f      	mov	r7, fp
  40295e:	f7ff ba39 	b.w	401dd4 <_vfiprintf_r+0x240>
  402962:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402966:	e443      	b.n	4021f0 <_vfiprintf_r+0x65c>
  402968:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40296c:	f7ff bb9a 	b.w	4020a4 <_vfiprintf_r+0x510>
  402970:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402974:	f7ff bb4d 	b.w	402012 <_vfiprintf_r+0x47e>
  402978:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40297c:	e50f      	b.n	40239e <_vfiprintf_r+0x80a>
  40297e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402982:	e4f3      	b.n	40236c <_vfiprintf_r+0x7d8>
  402984:	004048d0 	.word	0x004048d0
  402988:	004048e4 	.word	0x004048e4
  40298c:	004048ec 	.word	0x004048ec

00402990 <__sbprintf>:
  402990:	b5f0      	push	{r4, r5, r6, r7, lr}
  402992:	460c      	mov	r4, r1
  402994:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  402998:	8989      	ldrh	r1, [r1, #12]
  40299a:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40299c:	89e5      	ldrh	r5, [r4, #14]
  40299e:	9619      	str	r6, [sp, #100]	; 0x64
  4029a0:	f021 0102 	bic.w	r1, r1, #2
  4029a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4029a6:	f8ad 500e 	strh.w	r5, [sp, #14]
  4029aa:	2500      	movs	r5, #0
  4029ac:	69e7      	ldr	r7, [r4, #28]
  4029ae:	f8ad 100c 	strh.w	r1, [sp, #12]
  4029b2:	9609      	str	r6, [sp, #36]	; 0x24
  4029b4:	9506      	str	r5, [sp, #24]
  4029b6:	ae1a      	add	r6, sp, #104	; 0x68
  4029b8:	f44f 6580 	mov.w	r5, #1024	; 0x400
  4029bc:	4669      	mov	r1, sp
  4029be:	9600      	str	r6, [sp, #0]
  4029c0:	9604      	str	r6, [sp, #16]
  4029c2:	9502      	str	r5, [sp, #8]
  4029c4:	9505      	str	r5, [sp, #20]
  4029c6:	9707      	str	r7, [sp, #28]
  4029c8:	4606      	mov	r6, r0
  4029ca:	f7ff f8e3 	bl	401b94 <_vfiprintf_r>
  4029ce:	1e05      	subs	r5, r0, #0
  4029d0:	db07      	blt.n	4029e2 <__sbprintf+0x52>
  4029d2:	4630      	mov	r0, r6
  4029d4:	4669      	mov	r1, sp
  4029d6:	f000 f929 	bl	402c2c <_fflush_r>
  4029da:	2800      	cmp	r0, #0
  4029dc:	bf18      	it	ne
  4029de:	f04f 35ff 	movne.w	r5, #4294967295
  4029e2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4029e6:	065b      	lsls	r3, r3, #25
  4029e8:	d503      	bpl.n	4029f2 <__sbprintf+0x62>
  4029ea:	89a3      	ldrh	r3, [r4, #12]
  4029ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4029f0:	81a3      	strh	r3, [r4, #12]
  4029f2:	4628      	mov	r0, r5
  4029f4:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  4029f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4029fa:	bf00      	nop

004029fc <__swsetup_r>:
  4029fc:	b538      	push	{r3, r4, r5, lr}
  4029fe:	4b30      	ldr	r3, [pc, #192]	; (402ac0 <__swsetup_r+0xc4>)
  402a00:	681b      	ldr	r3, [r3, #0]
  402a02:	4605      	mov	r5, r0
  402a04:	460c      	mov	r4, r1
  402a06:	b113      	cbz	r3, 402a0e <__swsetup_r+0x12>
  402a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402a0a:	2a00      	cmp	r2, #0
  402a0c:	d038      	beq.n	402a80 <__swsetup_r+0x84>
  402a0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402a12:	b293      	uxth	r3, r2
  402a14:	0718      	lsls	r0, r3, #28
  402a16:	d50c      	bpl.n	402a32 <__swsetup_r+0x36>
  402a18:	6920      	ldr	r0, [r4, #16]
  402a1a:	b1a8      	cbz	r0, 402a48 <__swsetup_r+0x4c>
  402a1c:	f013 0201 	ands.w	r2, r3, #1
  402a20:	d01e      	beq.n	402a60 <__swsetup_r+0x64>
  402a22:	6963      	ldr	r3, [r4, #20]
  402a24:	2200      	movs	r2, #0
  402a26:	425b      	negs	r3, r3
  402a28:	61a3      	str	r3, [r4, #24]
  402a2a:	60a2      	str	r2, [r4, #8]
  402a2c:	b1f0      	cbz	r0, 402a6c <__swsetup_r+0x70>
  402a2e:	2000      	movs	r0, #0
  402a30:	bd38      	pop	{r3, r4, r5, pc}
  402a32:	06d9      	lsls	r1, r3, #27
  402a34:	d53c      	bpl.n	402ab0 <__swsetup_r+0xb4>
  402a36:	0758      	lsls	r0, r3, #29
  402a38:	d426      	bmi.n	402a88 <__swsetup_r+0x8c>
  402a3a:	6920      	ldr	r0, [r4, #16]
  402a3c:	f042 0308 	orr.w	r3, r2, #8
  402a40:	81a3      	strh	r3, [r4, #12]
  402a42:	b29b      	uxth	r3, r3
  402a44:	2800      	cmp	r0, #0
  402a46:	d1e9      	bne.n	402a1c <__swsetup_r+0x20>
  402a48:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402a4c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402a50:	d0e4      	beq.n	402a1c <__swsetup_r+0x20>
  402a52:	4628      	mov	r0, r5
  402a54:	4621      	mov	r1, r4
  402a56:	f000 fd15 	bl	403484 <__smakebuf_r>
  402a5a:	89a3      	ldrh	r3, [r4, #12]
  402a5c:	6920      	ldr	r0, [r4, #16]
  402a5e:	e7dd      	b.n	402a1c <__swsetup_r+0x20>
  402a60:	0799      	lsls	r1, r3, #30
  402a62:	bf58      	it	pl
  402a64:	6962      	ldrpl	r2, [r4, #20]
  402a66:	60a2      	str	r2, [r4, #8]
  402a68:	2800      	cmp	r0, #0
  402a6a:	d1e0      	bne.n	402a2e <__swsetup_r+0x32>
  402a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402a70:	061a      	lsls	r2, r3, #24
  402a72:	d5dd      	bpl.n	402a30 <__swsetup_r+0x34>
  402a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402a78:	81a3      	strh	r3, [r4, #12]
  402a7a:	f04f 30ff 	mov.w	r0, #4294967295
  402a7e:	bd38      	pop	{r3, r4, r5, pc}
  402a80:	4618      	mov	r0, r3
  402a82:	f000 f967 	bl	402d54 <__sinit>
  402a86:	e7c2      	b.n	402a0e <__swsetup_r+0x12>
  402a88:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402a8a:	b151      	cbz	r1, 402aa2 <__swsetup_r+0xa6>
  402a8c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402a90:	4299      	cmp	r1, r3
  402a92:	d004      	beq.n	402a9e <__swsetup_r+0xa2>
  402a94:	4628      	mov	r0, r5
  402a96:	f000 fa27 	bl	402ee8 <_free_r>
  402a9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402a9e:	2300      	movs	r3, #0
  402aa0:	6323      	str	r3, [r4, #48]	; 0x30
  402aa2:	2300      	movs	r3, #0
  402aa4:	6920      	ldr	r0, [r4, #16]
  402aa6:	6063      	str	r3, [r4, #4]
  402aa8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402aac:	6020      	str	r0, [r4, #0]
  402aae:	e7c5      	b.n	402a3c <__swsetup_r+0x40>
  402ab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402ab4:	2309      	movs	r3, #9
  402ab6:	602b      	str	r3, [r5, #0]
  402ab8:	f04f 30ff 	mov.w	r0, #4294967295
  402abc:	81a2      	strh	r2, [r4, #12]
  402abe:	bd38      	pop	{r3, r4, r5, pc}
  402ac0:	20400430 	.word	0x20400430

00402ac4 <register_fini>:
  402ac4:	4b02      	ldr	r3, [pc, #8]	; (402ad0 <register_fini+0xc>)
  402ac6:	b113      	cbz	r3, 402ace <register_fini+0xa>
  402ac8:	4802      	ldr	r0, [pc, #8]	; (402ad4 <register_fini+0x10>)
  402aca:	f000 b805 	b.w	402ad8 <atexit>
  402ace:	4770      	bx	lr
  402ad0:	00000000 	.word	0x00000000
  402ad4:	00402d69 	.word	0x00402d69

00402ad8 <atexit>:
  402ad8:	2300      	movs	r3, #0
  402ada:	4601      	mov	r1, r0
  402adc:	461a      	mov	r2, r3
  402ade:	4618      	mov	r0, r3
  402ae0:	f001 bc12 	b.w	404308 <__register_exitproc>

00402ae4 <__sflush_r>:
  402ae4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402ae8:	b29a      	uxth	r2, r3
  402aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402aee:	460d      	mov	r5, r1
  402af0:	0711      	lsls	r1, r2, #28
  402af2:	4680      	mov	r8, r0
  402af4:	d43c      	bmi.n	402b70 <__sflush_r+0x8c>
  402af6:	686a      	ldr	r2, [r5, #4]
  402af8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402afc:	2a00      	cmp	r2, #0
  402afe:	81ab      	strh	r3, [r5, #12]
  402b00:	dd73      	ble.n	402bea <__sflush_r+0x106>
  402b02:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402b04:	2c00      	cmp	r4, #0
  402b06:	d04b      	beq.n	402ba0 <__sflush_r+0xbc>
  402b08:	b29b      	uxth	r3, r3
  402b0a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  402b0e:	2100      	movs	r1, #0
  402b10:	b292      	uxth	r2, r2
  402b12:	f8d8 6000 	ldr.w	r6, [r8]
  402b16:	f8c8 1000 	str.w	r1, [r8]
  402b1a:	2a00      	cmp	r2, #0
  402b1c:	d069      	beq.n	402bf2 <__sflush_r+0x10e>
  402b1e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402b20:	075f      	lsls	r7, r3, #29
  402b22:	d505      	bpl.n	402b30 <__sflush_r+0x4c>
  402b24:	6869      	ldr	r1, [r5, #4]
  402b26:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402b28:	1a52      	subs	r2, r2, r1
  402b2a:	b10b      	cbz	r3, 402b30 <__sflush_r+0x4c>
  402b2c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402b2e:	1ad2      	subs	r2, r2, r3
  402b30:	2300      	movs	r3, #0
  402b32:	69e9      	ldr	r1, [r5, #28]
  402b34:	4640      	mov	r0, r8
  402b36:	47a0      	blx	r4
  402b38:	1c44      	adds	r4, r0, #1
  402b3a:	d03c      	beq.n	402bb6 <__sflush_r+0xd2>
  402b3c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402b40:	692a      	ldr	r2, [r5, #16]
  402b42:	602a      	str	r2, [r5, #0]
  402b44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402b48:	2200      	movs	r2, #0
  402b4a:	81ab      	strh	r3, [r5, #12]
  402b4c:	04db      	lsls	r3, r3, #19
  402b4e:	606a      	str	r2, [r5, #4]
  402b50:	d449      	bmi.n	402be6 <__sflush_r+0x102>
  402b52:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402b54:	f8c8 6000 	str.w	r6, [r8]
  402b58:	b311      	cbz	r1, 402ba0 <__sflush_r+0xbc>
  402b5a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402b5e:	4299      	cmp	r1, r3
  402b60:	d002      	beq.n	402b68 <__sflush_r+0x84>
  402b62:	4640      	mov	r0, r8
  402b64:	f000 f9c0 	bl	402ee8 <_free_r>
  402b68:	2000      	movs	r0, #0
  402b6a:	6328      	str	r0, [r5, #48]	; 0x30
  402b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402b70:	692e      	ldr	r6, [r5, #16]
  402b72:	b1ae      	cbz	r6, 402ba0 <__sflush_r+0xbc>
  402b74:	682c      	ldr	r4, [r5, #0]
  402b76:	602e      	str	r6, [r5, #0]
  402b78:	0790      	lsls	r0, r2, #30
  402b7a:	bf0c      	ite	eq
  402b7c:	696b      	ldreq	r3, [r5, #20]
  402b7e:	2300      	movne	r3, #0
  402b80:	1ba4      	subs	r4, r4, r6
  402b82:	60ab      	str	r3, [r5, #8]
  402b84:	e00a      	b.n	402b9c <__sflush_r+0xb8>
  402b86:	4623      	mov	r3, r4
  402b88:	4632      	mov	r2, r6
  402b8a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402b8c:	69e9      	ldr	r1, [r5, #28]
  402b8e:	4640      	mov	r0, r8
  402b90:	47b8      	blx	r7
  402b92:	2800      	cmp	r0, #0
  402b94:	eba4 0400 	sub.w	r4, r4, r0
  402b98:	4406      	add	r6, r0
  402b9a:	dd04      	ble.n	402ba6 <__sflush_r+0xc2>
  402b9c:	2c00      	cmp	r4, #0
  402b9e:	dcf2      	bgt.n	402b86 <__sflush_r+0xa2>
  402ba0:	2000      	movs	r0, #0
  402ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402ba6:	89ab      	ldrh	r3, [r5, #12]
  402ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402bac:	81ab      	strh	r3, [r5, #12]
  402bae:	f04f 30ff 	mov.w	r0, #4294967295
  402bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402bb6:	f8d8 2000 	ldr.w	r2, [r8]
  402bba:	2a1d      	cmp	r2, #29
  402bbc:	d8f3      	bhi.n	402ba6 <__sflush_r+0xc2>
  402bbe:	4b1a      	ldr	r3, [pc, #104]	; (402c28 <__sflush_r+0x144>)
  402bc0:	40d3      	lsrs	r3, r2
  402bc2:	f003 0301 	and.w	r3, r3, #1
  402bc6:	f083 0401 	eor.w	r4, r3, #1
  402bca:	2b00      	cmp	r3, #0
  402bcc:	d0eb      	beq.n	402ba6 <__sflush_r+0xc2>
  402bce:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402bd2:	6929      	ldr	r1, [r5, #16]
  402bd4:	6029      	str	r1, [r5, #0]
  402bd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402bda:	04d9      	lsls	r1, r3, #19
  402bdc:	606c      	str	r4, [r5, #4]
  402bde:	81ab      	strh	r3, [r5, #12]
  402be0:	d5b7      	bpl.n	402b52 <__sflush_r+0x6e>
  402be2:	2a00      	cmp	r2, #0
  402be4:	d1b5      	bne.n	402b52 <__sflush_r+0x6e>
  402be6:	6528      	str	r0, [r5, #80]	; 0x50
  402be8:	e7b3      	b.n	402b52 <__sflush_r+0x6e>
  402bea:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402bec:	2a00      	cmp	r2, #0
  402bee:	dc88      	bgt.n	402b02 <__sflush_r+0x1e>
  402bf0:	e7d6      	b.n	402ba0 <__sflush_r+0xbc>
  402bf2:	2301      	movs	r3, #1
  402bf4:	69e9      	ldr	r1, [r5, #28]
  402bf6:	4640      	mov	r0, r8
  402bf8:	47a0      	blx	r4
  402bfa:	1c43      	adds	r3, r0, #1
  402bfc:	4602      	mov	r2, r0
  402bfe:	d002      	beq.n	402c06 <__sflush_r+0x122>
  402c00:	89ab      	ldrh	r3, [r5, #12]
  402c02:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402c04:	e78c      	b.n	402b20 <__sflush_r+0x3c>
  402c06:	f8d8 3000 	ldr.w	r3, [r8]
  402c0a:	2b00      	cmp	r3, #0
  402c0c:	d0f8      	beq.n	402c00 <__sflush_r+0x11c>
  402c0e:	2b1d      	cmp	r3, #29
  402c10:	d001      	beq.n	402c16 <__sflush_r+0x132>
  402c12:	2b16      	cmp	r3, #22
  402c14:	d102      	bne.n	402c1c <__sflush_r+0x138>
  402c16:	f8c8 6000 	str.w	r6, [r8]
  402c1a:	e7c1      	b.n	402ba0 <__sflush_r+0xbc>
  402c1c:	89ab      	ldrh	r3, [r5, #12]
  402c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402c22:	81ab      	strh	r3, [r5, #12]
  402c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c28:	20400001 	.word	0x20400001

00402c2c <_fflush_r>:
  402c2c:	b510      	push	{r4, lr}
  402c2e:	4604      	mov	r4, r0
  402c30:	b082      	sub	sp, #8
  402c32:	b108      	cbz	r0, 402c38 <_fflush_r+0xc>
  402c34:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402c36:	b153      	cbz	r3, 402c4e <_fflush_r+0x22>
  402c38:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  402c3c:	b908      	cbnz	r0, 402c42 <_fflush_r+0x16>
  402c3e:	b002      	add	sp, #8
  402c40:	bd10      	pop	{r4, pc}
  402c42:	4620      	mov	r0, r4
  402c44:	b002      	add	sp, #8
  402c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402c4a:	f7ff bf4b 	b.w	402ae4 <__sflush_r>
  402c4e:	9101      	str	r1, [sp, #4]
  402c50:	f000 f880 	bl	402d54 <__sinit>
  402c54:	9901      	ldr	r1, [sp, #4]
  402c56:	e7ef      	b.n	402c38 <_fflush_r+0xc>

00402c58 <_cleanup_r>:
  402c58:	4901      	ldr	r1, [pc, #4]	; (402c60 <_cleanup_r+0x8>)
  402c5a:	f000 bbaf 	b.w	4033bc <_fwalk_reent>
  402c5e:	bf00      	nop
  402c60:	004043d1 	.word	0x004043d1

00402c64 <__sinit.part.1>:
  402c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c68:	4b35      	ldr	r3, [pc, #212]	; (402d40 <__sinit.part.1+0xdc>)
  402c6a:	6845      	ldr	r5, [r0, #4]
  402c6c:	63c3      	str	r3, [r0, #60]	; 0x3c
  402c6e:	2400      	movs	r4, #0
  402c70:	4607      	mov	r7, r0
  402c72:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  402c76:	2304      	movs	r3, #4
  402c78:	2103      	movs	r1, #3
  402c7a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  402c7e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  402c82:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  402c86:	b083      	sub	sp, #12
  402c88:	602c      	str	r4, [r5, #0]
  402c8a:	606c      	str	r4, [r5, #4]
  402c8c:	60ac      	str	r4, [r5, #8]
  402c8e:	666c      	str	r4, [r5, #100]	; 0x64
  402c90:	81ec      	strh	r4, [r5, #14]
  402c92:	612c      	str	r4, [r5, #16]
  402c94:	616c      	str	r4, [r5, #20]
  402c96:	61ac      	str	r4, [r5, #24]
  402c98:	81ab      	strh	r3, [r5, #12]
  402c9a:	4621      	mov	r1, r4
  402c9c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402ca0:	2208      	movs	r2, #8
  402ca2:	f7fe fd89 	bl	4017b8 <memset>
  402ca6:	68be      	ldr	r6, [r7, #8]
  402ca8:	f8df b098 	ldr.w	fp, [pc, #152]	; 402d44 <__sinit.part.1+0xe0>
  402cac:	f8df a098 	ldr.w	sl, [pc, #152]	; 402d48 <__sinit.part.1+0xe4>
  402cb0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 402d4c <__sinit.part.1+0xe8>
  402cb4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 402d50 <__sinit.part.1+0xec>
  402cb8:	f8c5 b020 	str.w	fp, [r5, #32]
  402cbc:	2301      	movs	r3, #1
  402cbe:	2209      	movs	r2, #9
  402cc0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402cc4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402cc8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  402ccc:	61ed      	str	r5, [r5, #28]
  402cce:	4621      	mov	r1, r4
  402cd0:	81f3      	strh	r3, [r6, #14]
  402cd2:	81b2      	strh	r2, [r6, #12]
  402cd4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  402cd8:	6034      	str	r4, [r6, #0]
  402cda:	6074      	str	r4, [r6, #4]
  402cdc:	60b4      	str	r4, [r6, #8]
  402cde:	6674      	str	r4, [r6, #100]	; 0x64
  402ce0:	6134      	str	r4, [r6, #16]
  402ce2:	6174      	str	r4, [r6, #20]
  402ce4:	61b4      	str	r4, [r6, #24]
  402ce6:	2208      	movs	r2, #8
  402ce8:	9301      	str	r3, [sp, #4]
  402cea:	f7fe fd65 	bl	4017b8 <memset>
  402cee:	68fd      	ldr	r5, [r7, #12]
  402cf0:	61f6      	str	r6, [r6, #28]
  402cf2:	2012      	movs	r0, #18
  402cf4:	2202      	movs	r2, #2
  402cf6:	f8c6 b020 	str.w	fp, [r6, #32]
  402cfa:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  402cfe:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  402d02:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  402d06:	4621      	mov	r1, r4
  402d08:	81a8      	strh	r0, [r5, #12]
  402d0a:	81ea      	strh	r2, [r5, #14]
  402d0c:	602c      	str	r4, [r5, #0]
  402d0e:	606c      	str	r4, [r5, #4]
  402d10:	60ac      	str	r4, [r5, #8]
  402d12:	666c      	str	r4, [r5, #100]	; 0x64
  402d14:	612c      	str	r4, [r5, #16]
  402d16:	616c      	str	r4, [r5, #20]
  402d18:	61ac      	str	r4, [r5, #24]
  402d1a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402d1e:	2208      	movs	r2, #8
  402d20:	f7fe fd4a 	bl	4017b8 <memset>
  402d24:	9b01      	ldr	r3, [sp, #4]
  402d26:	61ed      	str	r5, [r5, #28]
  402d28:	f8c5 b020 	str.w	fp, [r5, #32]
  402d2c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402d30:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402d34:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  402d38:	63bb      	str	r3, [r7, #56]	; 0x38
  402d3a:	b003      	add	sp, #12
  402d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d40:	00402c59 	.word	0x00402c59
  402d44:	00404139 	.word	0x00404139
  402d48:	0040415d 	.word	0x0040415d
  402d4c:	00404199 	.word	0x00404199
  402d50:	004041b9 	.word	0x004041b9

00402d54 <__sinit>:
  402d54:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402d56:	b103      	cbz	r3, 402d5a <__sinit+0x6>
  402d58:	4770      	bx	lr
  402d5a:	f7ff bf83 	b.w	402c64 <__sinit.part.1>
  402d5e:	bf00      	nop

00402d60 <__sfp_lock_acquire>:
  402d60:	4770      	bx	lr
  402d62:	bf00      	nop

00402d64 <__sfp_lock_release>:
  402d64:	4770      	bx	lr
  402d66:	bf00      	nop

00402d68 <__libc_fini_array>:
  402d68:	b538      	push	{r3, r4, r5, lr}
  402d6a:	4d07      	ldr	r5, [pc, #28]	; (402d88 <__libc_fini_array+0x20>)
  402d6c:	4c07      	ldr	r4, [pc, #28]	; (402d8c <__libc_fini_array+0x24>)
  402d6e:	1b2c      	subs	r4, r5, r4
  402d70:	10a4      	asrs	r4, r4, #2
  402d72:	d005      	beq.n	402d80 <__libc_fini_array+0x18>
  402d74:	3c01      	subs	r4, #1
  402d76:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  402d7a:	4798      	blx	r3
  402d7c:	2c00      	cmp	r4, #0
  402d7e:	d1f9      	bne.n	402d74 <__libc_fini_array+0xc>
  402d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402d84:	f001 bdc4 	b.w	404910 <_fini>
  402d88:	00404920 	.word	0x00404920
  402d8c:	0040491c 	.word	0x0040491c

00402d90 <__fputwc>:
  402d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402d94:	b082      	sub	sp, #8
  402d96:	4680      	mov	r8, r0
  402d98:	4689      	mov	r9, r1
  402d9a:	4614      	mov	r4, r2
  402d9c:	f000 fb3c 	bl	403418 <__locale_mb_cur_max>
  402da0:	2801      	cmp	r0, #1
  402da2:	d033      	beq.n	402e0c <__fputwc+0x7c>
  402da4:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402da8:	464a      	mov	r2, r9
  402daa:	a901      	add	r1, sp, #4
  402dac:	4640      	mov	r0, r8
  402dae:	f001 fa5d 	bl	40426c <_wcrtomb_r>
  402db2:	f1b0 3fff 	cmp.w	r0, #4294967295
  402db6:	4682      	mov	sl, r0
  402db8:	d021      	beq.n	402dfe <__fputwc+0x6e>
  402dba:	b388      	cbz	r0, 402e20 <__fputwc+0x90>
  402dbc:	f89d 6004 	ldrb.w	r6, [sp, #4]
  402dc0:	2500      	movs	r5, #0
  402dc2:	e008      	b.n	402dd6 <__fputwc+0x46>
  402dc4:	6823      	ldr	r3, [r4, #0]
  402dc6:	1c5a      	adds	r2, r3, #1
  402dc8:	6022      	str	r2, [r4, #0]
  402dca:	701e      	strb	r6, [r3, #0]
  402dcc:	3501      	adds	r5, #1
  402dce:	4555      	cmp	r5, sl
  402dd0:	d226      	bcs.n	402e20 <__fputwc+0x90>
  402dd2:	ab01      	add	r3, sp, #4
  402dd4:	5d5e      	ldrb	r6, [r3, r5]
  402dd6:	68a3      	ldr	r3, [r4, #8]
  402dd8:	3b01      	subs	r3, #1
  402dda:	2b00      	cmp	r3, #0
  402ddc:	60a3      	str	r3, [r4, #8]
  402dde:	daf1      	bge.n	402dc4 <__fputwc+0x34>
  402de0:	69a7      	ldr	r7, [r4, #24]
  402de2:	42bb      	cmp	r3, r7
  402de4:	4631      	mov	r1, r6
  402de6:	4622      	mov	r2, r4
  402de8:	4640      	mov	r0, r8
  402dea:	db01      	blt.n	402df0 <__fputwc+0x60>
  402dec:	2e0a      	cmp	r6, #10
  402dee:	d1e9      	bne.n	402dc4 <__fputwc+0x34>
  402df0:	f001 f9e6 	bl	4041c0 <__swbuf_r>
  402df4:	1c43      	adds	r3, r0, #1
  402df6:	d1e9      	bne.n	402dcc <__fputwc+0x3c>
  402df8:	b002      	add	sp, #8
  402dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402dfe:	89a3      	ldrh	r3, [r4, #12]
  402e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402e04:	81a3      	strh	r3, [r4, #12]
  402e06:	b002      	add	sp, #8
  402e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402e0c:	f109 33ff 	add.w	r3, r9, #4294967295
  402e10:	2bfe      	cmp	r3, #254	; 0xfe
  402e12:	d8c7      	bhi.n	402da4 <__fputwc+0x14>
  402e14:	fa5f f689 	uxtb.w	r6, r9
  402e18:	4682      	mov	sl, r0
  402e1a:	f88d 6004 	strb.w	r6, [sp, #4]
  402e1e:	e7cf      	b.n	402dc0 <__fputwc+0x30>
  402e20:	4648      	mov	r0, r9
  402e22:	b002      	add	sp, #8
  402e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402e28 <_fputwc_r>:
  402e28:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402e2c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  402e30:	d10a      	bne.n	402e48 <_fputwc_r+0x20>
  402e32:	b410      	push	{r4}
  402e34:	6e54      	ldr	r4, [r2, #100]	; 0x64
  402e36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402e3a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  402e3e:	6654      	str	r4, [r2, #100]	; 0x64
  402e40:	8193      	strh	r3, [r2, #12]
  402e42:	bc10      	pop	{r4}
  402e44:	f7ff bfa4 	b.w	402d90 <__fputwc>
  402e48:	f7ff bfa2 	b.w	402d90 <__fputwc>

00402e4c <_malloc_trim_r>:
  402e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402e4e:	4f23      	ldr	r7, [pc, #140]	; (402edc <_malloc_trim_r+0x90>)
  402e50:	460c      	mov	r4, r1
  402e52:	4606      	mov	r6, r0
  402e54:	f000 ff6a 	bl	403d2c <__malloc_lock>
  402e58:	68bb      	ldr	r3, [r7, #8]
  402e5a:	685d      	ldr	r5, [r3, #4]
  402e5c:	f025 0503 	bic.w	r5, r5, #3
  402e60:	1b29      	subs	r1, r5, r4
  402e62:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  402e66:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402e6a:	f021 010f 	bic.w	r1, r1, #15
  402e6e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402e72:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402e76:	db07      	blt.n	402e88 <_malloc_trim_r+0x3c>
  402e78:	2100      	movs	r1, #0
  402e7a:	4630      	mov	r0, r6
  402e7c:	f001 f94a 	bl	404114 <_sbrk_r>
  402e80:	68bb      	ldr	r3, [r7, #8]
  402e82:	442b      	add	r3, r5
  402e84:	4298      	cmp	r0, r3
  402e86:	d004      	beq.n	402e92 <_malloc_trim_r+0x46>
  402e88:	4630      	mov	r0, r6
  402e8a:	f000 ff51 	bl	403d30 <__malloc_unlock>
  402e8e:	2000      	movs	r0, #0
  402e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402e92:	4261      	negs	r1, r4
  402e94:	4630      	mov	r0, r6
  402e96:	f001 f93d 	bl	404114 <_sbrk_r>
  402e9a:	3001      	adds	r0, #1
  402e9c:	d00d      	beq.n	402eba <_malloc_trim_r+0x6e>
  402e9e:	4b10      	ldr	r3, [pc, #64]	; (402ee0 <_malloc_trim_r+0x94>)
  402ea0:	68ba      	ldr	r2, [r7, #8]
  402ea2:	6819      	ldr	r1, [r3, #0]
  402ea4:	1b2d      	subs	r5, r5, r4
  402ea6:	f045 0501 	orr.w	r5, r5, #1
  402eaa:	4630      	mov	r0, r6
  402eac:	1b09      	subs	r1, r1, r4
  402eae:	6055      	str	r5, [r2, #4]
  402eb0:	6019      	str	r1, [r3, #0]
  402eb2:	f000 ff3d 	bl	403d30 <__malloc_unlock>
  402eb6:	2001      	movs	r0, #1
  402eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402eba:	2100      	movs	r1, #0
  402ebc:	4630      	mov	r0, r6
  402ebe:	f001 f929 	bl	404114 <_sbrk_r>
  402ec2:	68ba      	ldr	r2, [r7, #8]
  402ec4:	1a83      	subs	r3, r0, r2
  402ec6:	2b0f      	cmp	r3, #15
  402ec8:	ddde      	ble.n	402e88 <_malloc_trim_r+0x3c>
  402eca:	4c06      	ldr	r4, [pc, #24]	; (402ee4 <_malloc_trim_r+0x98>)
  402ecc:	4904      	ldr	r1, [pc, #16]	; (402ee0 <_malloc_trim_r+0x94>)
  402ece:	6824      	ldr	r4, [r4, #0]
  402ed0:	f043 0301 	orr.w	r3, r3, #1
  402ed4:	1b00      	subs	r0, r0, r4
  402ed6:	6053      	str	r3, [r2, #4]
  402ed8:	6008      	str	r0, [r1, #0]
  402eda:	e7d5      	b.n	402e88 <_malloc_trim_r+0x3c>
  402edc:	20400458 	.word	0x20400458
  402ee0:	20400914 	.word	0x20400914
  402ee4:	20400864 	.word	0x20400864

00402ee8 <_free_r>:
  402ee8:	2900      	cmp	r1, #0
  402eea:	d045      	beq.n	402f78 <_free_r+0x90>
  402eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402ef0:	460d      	mov	r5, r1
  402ef2:	4680      	mov	r8, r0
  402ef4:	f000 ff1a 	bl	403d2c <__malloc_lock>
  402ef8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402efc:	496a      	ldr	r1, [pc, #424]	; (4030a8 <_free_r+0x1c0>)
  402efe:	f027 0301 	bic.w	r3, r7, #1
  402f02:	f1a5 0408 	sub.w	r4, r5, #8
  402f06:	18e2      	adds	r2, r4, r3
  402f08:	688e      	ldr	r6, [r1, #8]
  402f0a:	6850      	ldr	r0, [r2, #4]
  402f0c:	42b2      	cmp	r2, r6
  402f0e:	f020 0003 	bic.w	r0, r0, #3
  402f12:	d062      	beq.n	402fda <_free_r+0xf2>
  402f14:	07fe      	lsls	r6, r7, #31
  402f16:	6050      	str	r0, [r2, #4]
  402f18:	d40b      	bmi.n	402f32 <_free_r+0x4a>
  402f1a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402f1e:	1be4      	subs	r4, r4, r7
  402f20:	f101 0e08 	add.w	lr, r1, #8
  402f24:	68a5      	ldr	r5, [r4, #8]
  402f26:	4575      	cmp	r5, lr
  402f28:	443b      	add	r3, r7
  402f2a:	d06f      	beq.n	40300c <_free_r+0x124>
  402f2c:	68e7      	ldr	r7, [r4, #12]
  402f2e:	60ef      	str	r7, [r5, #12]
  402f30:	60bd      	str	r5, [r7, #8]
  402f32:	1815      	adds	r5, r2, r0
  402f34:	686d      	ldr	r5, [r5, #4]
  402f36:	07ed      	lsls	r5, r5, #31
  402f38:	d542      	bpl.n	402fc0 <_free_r+0xd8>
  402f3a:	f043 0201 	orr.w	r2, r3, #1
  402f3e:	6062      	str	r2, [r4, #4]
  402f40:	50e3      	str	r3, [r4, r3]
  402f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402f46:	d218      	bcs.n	402f7a <_free_r+0x92>
  402f48:	08db      	lsrs	r3, r3, #3
  402f4a:	1c5a      	adds	r2, r3, #1
  402f4c:	684d      	ldr	r5, [r1, #4]
  402f4e:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  402f52:	60a7      	str	r7, [r4, #8]
  402f54:	2001      	movs	r0, #1
  402f56:	109b      	asrs	r3, r3, #2
  402f58:	fa00 f303 	lsl.w	r3, r0, r3
  402f5c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  402f60:	431d      	orrs	r5, r3
  402f62:	3808      	subs	r0, #8
  402f64:	60e0      	str	r0, [r4, #12]
  402f66:	604d      	str	r5, [r1, #4]
  402f68:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  402f6c:	60fc      	str	r4, [r7, #12]
  402f6e:	4640      	mov	r0, r8
  402f70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402f74:	f000 bedc 	b.w	403d30 <__malloc_unlock>
  402f78:	4770      	bx	lr
  402f7a:	0a5a      	lsrs	r2, r3, #9
  402f7c:	2a04      	cmp	r2, #4
  402f7e:	d853      	bhi.n	403028 <_free_r+0x140>
  402f80:	099a      	lsrs	r2, r3, #6
  402f82:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402f86:	007f      	lsls	r7, r7, #1
  402f88:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402f8c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  402f90:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  402f94:	4944      	ldr	r1, [pc, #272]	; (4030a8 <_free_r+0x1c0>)
  402f96:	3808      	subs	r0, #8
  402f98:	4290      	cmp	r0, r2
  402f9a:	d04d      	beq.n	403038 <_free_r+0x150>
  402f9c:	6851      	ldr	r1, [r2, #4]
  402f9e:	f021 0103 	bic.w	r1, r1, #3
  402fa2:	428b      	cmp	r3, r1
  402fa4:	d202      	bcs.n	402fac <_free_r+0xc4>
  402fa6:	6892      	ldr	r2, [r2, #8]
  402fa8:	4290      	cmp	r0, r2
  402faa:	d1f7      	bne.n	402f9c <_free_r+0xb4>
  402fac:	68d0      	ldr	r0, [r2, #12]
  402fae:	60e0      	str	r0, [r4, #12]
  402fb0:	60a2      	str	r2, [r4, #8]
  402fb2:	6084      	str	r4, [r0, #8]
  402fb4:	60d4      	str	r4, [r2, #12]
  402fb6:	4640      	mov	r0, r8
  402fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402fbc:	f000 beb8 	b.w	403d30 <__malloc_unlock>
  402fc0:	6895      	ldr	r5, [r2, #8]
  402fc2:	4f3a      	ldr	r7, [pc, #232]	; (4030ac <_free_r+0x1c4>)
  402fc4:	42bd      	cmp	r5, r7
  402fc6:	4403      	add	r3, r0
  402fc8:	d03f      	beq.n	40304a <_free_r+0x162>
  402fca:	68d0      	ldr	r0, [r2, #12]
  402fcc:	60e8      	str	r0, [r5, #12]
  402fce:	f043 0201 	orr.w	r2, r3, #1
  402fd2:	6085      	str	r5, [r0, #8]
  402fd4:	6062      	str	r2, [r4, #4]
  402fd6:	50e3      	str	r3, [r4, r3]
  402fd8:	e7b3      	b.n	402f42 <_free_r+0x5a>
  402fda:	07ff      	lsls	r7, r7, #31
  402fdc:	4403      	add	r3, r0
  402fde:	d407      	bmi.n	402ff0 <_free_r+0x108>
  402fe0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402fe4:	1aa4      	subs	r4, r4, r2
  402fe6:	4413      	add	r3, r2
  402fe8:	68a0      	ldr	r0, [r4, #8]
  402fea:	68e2      	ldr	r2, [r4, #12]
  402fec:	60c2      	str	r2, [r0, #12]
  402fee:	6090      	str	r0, [r2, #8]
  402ff0:	4a2f      	ldr	r2, [pc, #188]	; (4030b0 <_free_r+0x1c8>)
  402ff2:	6812      	ldr	r2, [r2, #0]
  402ff4:	f043 0001 	orr.w	r0, r3, #1
  402ff8:	4293      	cmp	r3, r2
  402ffa:	6060      	str	r0, [r4, #4]
  402ffc:	608c      	str	r4, [r1, #8]
  402ffe:	d3b6      	bcc.n	402f6e <_free_r+0x86>
  403000:	4b2c      	ldr	r3, [pc, #176]	; (4030b4 <_free_r+0x1cc>)
  403002:	4640      	mov	r0, r8
  403004:	6819      	ldr	r1, [r3, #0]
  403006:	f7ff ff21 	bl	402e4c <_malloc_trim_r>
  40300a:	e7b0      	b.n	402f6e <_free_r+0x86>
  40300c:	1811      	adds	r1, r2, r0
  40300e:	6849      	ldr	r1, [r1, #4]
  403010:	07c9      	lsls	r1, r1, #31
  403012:	d444      	bmi.n	40309e <_free_r+0x1b6>
  403014:	6891      	ldr	r1, [r2, #8]
  403016:	68d2      	ldr	r2, [r2, #12]
  403018:	60ca      	str	r2, [r1, #12]
  40301a:	4403      	add	r3, r0
  40301c:	f043 0001 	orr.w	r0, r3, #1
  403020:	6091      	str	r1, [r2, #8]
  403022:	6060      	str	r0, [r4, #4]
  403024:	50e3      	str	r3, [r4, r3]
  403026:	e7a2      	b.n	402f6e <_free_r+0x86>
  403028:	2a14      	cmp	r2, #20
  40302a:	d817      	bhi.n	40305c <_free_r+0x174>
  40302c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403030:	007f      	lsls	r7, r7, #1
  403032:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  403036:	e7a9      	b.n	402f8c <_free_r+0xa4>
  403038:	10aa      	asrs	r2, r5, #2
  40303a:	684b      	ldr	r3, [r1, #4]
  40303c:	2501      	movs	r5, #1
  40303e:	fa05 f202 	lsl.w	r2, r5, r2
  403042:	4313      	orrs	r3, r2
  403044:	604b      	str	r3, [r1, #4]
  403046:	4602      	mov	r2, r0
  403048:	e7b1      	b.n	402fae <_free_r+0xc6>
  40304a:	f043 0201 	orr.w	r2, r3, #1
  40304e:	614c      	str	r4, [r1, #20]
  403050:	610c      	str	r4, [r1, #16]
  403052:	60e5      	str	r5, [r4, #12]
  403054:	60a5      	str	r5, [r4, #8]
  403056:	6062      	str	r2, [r4, #4]
  403058:	50e3      	str	r3, [r4, r3]
  40305a:	e788      	b.n	402f6e <_free_r+0x86>
  40305c:	2a54      	cmp	r2, #84	; 0x54
  40305e:	d806      	bhi.n	40306e <_free_r+0x186>
  403060:	0b1a      	lsrs	r2, r3, #12
  403062:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  403066:	007f      	lsls	r7, r7, #1
  403068:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40306c:	e78e      	b.n	402f8c <_free_r+0xa4>
  40306e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403072:	d806      	bhi.n	403082 <_free_r+0x19a>
  403074:	0bda      	lsrs	r2, r3, #15
  403076:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40307a:	007f      	lsls	r7, r7, #1
  40307c:	f102 0577 	add.w	r5, r2, #119	; 0x77
  403080:	e784      	b.n	402f8c <_free_r+0xa4>
  403082:	f240 5054 	movw	r0, #1364	; 0x554
  403086:	4282      	cmp	r2, r0
  403088:	d806      	bhi.n	403098 <_free_r+0x1b0>
  40308a:	0c9a      	lsrs	r2, r3, #18
  40308c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  403090:	007f      	lsls	r7, r7, #1
  403092:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  403096:	e779      	b.n	402f8c <_free_r+0xa4>
  403098:	27fe      	movs	r7, #254	; 0xfe
  40309a:	257e      	movs	r5, #126	; 0x7e
  40309c:	e776      	b.n	402f8c <_free_r+0xa4>
  40309e:	f043 0201 	orr.w	r2, r3, #1
  4030a2:	6062      	str	r2, [r4, #4]
  4030a4:	50e3      	str	r3, [r4, r3]
  4030a6:	e762      	b.n	402f6e <_free_r+0x86>
  4030a8:	20400458 	.word	0x20400458
  4030ac:	20400460 	.word	0x20400460
  4030b0:	20400860 	.word	0x20400860
  4030b4:	20400910 	.word	0x20400910

004030b8 <__sfvwrite_r>:
  4030b8:	6893      	ldr	r3, [r2, #8]
  4030ba:	2b00      	cmp	r3, #0
  4030bc:	d076      	beq.n	4031ac <__sfvwrite_r+0xf4>
  4030be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4030c2:	898b      	ldrh	r3, [r1, #12]
  4030c4:	b085      	sub	sp, #20
  4030c6:	460c      	mov	r4, r1
  4030c8:	0719      	lsls	r1, r3, #28
  4030ca:	9001      	str	r0, [sp, #4]
  4030cc:	4616      	mov	r6, r2
  4030ce:	d529      	bpl.n	403124 <__sfvwrite_r+0x6c>
  4030d0:	6922      	ldr	r2, [r4, #16]
  4030d2:	b33a      	cbz	r2, 403124 <__sfvwrite_r+0x6c>
  4030d4:	f003 0802 	and.w	r8, r3, #2
  4030d8:	fa1f f088 	uxth.w	r0, r8
  4030dc:	6835      	ldr	r5, [r6, #0]
  4030de:	2800      	cmp	r0, #0
  4030e0:	d02f      	beq.n	403142 <__sfvwrite_r+0x8a>
  4030e2:	f04f 0900 	mov.w	r9, #0
  4030e6:	4fb4      	ldr	r7, [pc, #720]	; (4033b8 <__sfvwrite_r+0x300>)
  4030e8:	46c8      	mov	r8, r9
  4030ea:	46b2      	mov	sl, r6
  4030ec:	45b8      	cmp	r8, r7
  4030ee:	4643      	mov	r3, r8
  4030f0:	464a      	mov	r2, r9
  4030f2:	bf28      	it	cs
  4030f4:	463b      	movcs	r3, r7
  4030f6:	9801      	ldr	r0, [sp, #4]
  4030f8:	f1b8 0f00 	cmp.w	r8, #0
  4030fc:	d050      	beq.n	4031a0 <__sfvwrite_r+0xe8>
  4030fe:	69e1      	ldr	r1, [r4, #28]
  403100:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403102:	47b0      	blx	r6
  403104:	2800      	cmp	r0, #0
  403106:	dd71      	ble.n	4031ec <__sfvwrite_r+0x134>
  403108:	f8da 3008 	ldr.w	r3, [sl, #8]
  40310c:	1a1b      	subs	r3, r3, r0
  40310e:	4481      	add	r9, r0
  403110:	ebc0 0808 	rsb	r8, r0, r8
  403114:	f8ca 3008 	str.w	r3, [sl, #8]
  403118:	2b00      	cmp	r3, #0
  40311a:	d1e7      	bne.n	4030ec <__sfvwrite_r+0x34>
  40311c:	2000      	movs	r0, #0
  40311e:	b005      	add	sp, #20
  403120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403124:	4621      	mov	r1, r4
  403126:	9801      	ldr	r0, [sp, #4]
  403128:	f7ff fc68 	bl	4029fc <__swsetup_r>
  40312c:	2800      	cmp	r0, #0
  40312e:	f040 813a 	bne.w	4033a6 <__sfvwrite_r+0x2ee>
  403132:	89a3      	ldrh	r3, [r4, #12]
  403134:	6835      	ldr	r5, [r6, #0]
  403136:	f003 0802 	and.w	r8, r3, #2
  40313a:	fa1f f088 	uxth.w	r0, r8
  40313e:	2800      	cmp	r0, #0
  403140:	d1cf      	bne.n	4030e2 <__sfvwrite_r+0x2a>
  403142:	f013 0901 	ands.w	r9, r3, #1
  403146:	d15b      	bne.n	403200 <__sfvwrite_r+0x148>
  403148:	464f      	mov	r7, r9
  40314a:	9602      	str	r6, [sp, #8]
  40314c:	b31f      	cbz	r7, 403196 <__sfvwrite_r+0xde>
  40314e:	059a      	lsls	r2, r3, #22
  403150:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403154:	d52c      	bpl.n	4031b0 <__sfvwrite_r+0xf8>
  403156:	4547      	cmp	r7, r8
  403158:	46c2      	mov	sl, r8
  40315a:	f0c0 80a4 	bcc.w	4032a6 <__sfvwrite_r+0x1ee>
  40315e:	f413 6f90 	tst.w	r3, #1152	; 0x480
  403162:	f040 80b1 	bne.w	4032c8 <__sfvwrite_r+0x210>
  403166:	6820      	ldr	r0, [r4, #0]
  403168:	4652      	mov	r2, sl
  40316a:	4649      	mov	r1, r9
  40316c:	f000 fd7a 	bl	403c64 <memmove>
  403170:	68a0      	ldr	r0, [r4, #8]
  403172:	6823      	ldr	r3, [r4, #0]
  403174:	ebc8 0000 	rsb	r0, r8, r0
  403178:	4453      	add	r3, sl
  40317a:	60a0      	str	r0, [r4, #8]
  40317c:	6023      	str	r3, [r4, #0]
  40317e:	4638      	mov	r0, r7
  403180:	9a02      	ldr	r2, [sp, #8]
  403182:	6893      	ldr	r3, [r2, #8]
  403184:	1a1b      	subs	r3, r3, r0
  403186:	4481      	add	r9, r0
  403188:	1a3f      	subs	r7, r7, r0
  40318a:	6093      	str	r3, [r2, #8]
  40318c:	2b00      	cmp	r3, #0
  40318e:	d0c5      	beq.n	40311c <__sfvwrite_r+0x64>
  403190:	89a3      	ldrh	r3, [r4, #12]
  403192:	2f00      	cmp	r7, #0
  403194:	d1db      	bne.n	40314e <__sfvwrite_r+0x96>
  403196:	f8d5 9000 	ldr.w	r9, [r5]
  40319a:	686f      	ldr	r7, [r5, #4]
  40319c:	3508      	adds	r5, #8
  40319e:	e7d5      	b.n	40314c <__sfvwrite_r+0x94>
  4031a0:	f8d5 9000 	ldr.w	r9, [r5]
  4031a4:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4031a8:	3508      	adds	r5, #8
  4031aa:	e79f      	b.n	4030ec <__sfvwrite_r+0x34>
  4031ac:	2000      	movs	r0, #0
  4031ae:	4770      	bx	lr
  4031b0:	6820      	ldr	r0, [r4, #0]
  4031b2:	6923      	ldr	r3, [r4, #16]
  4031b4:	4298      	cmp	r0, r3
  4031b6:	d803      	bhi.n	4031c0 <__sfvwrite_r+0x108>
  4031b8:	6961      	ldr	r1, [r4, #20]
  4031ba:	428f      	cmp	r7, r1
  4031bc:	f080 80b7 	bcs.w	40332e <__sfvwrite_r+0x276>
  4031c0:	45b8      	cmp	r8, r7
  4031c2:	bf28      	it	cs
  4031c4:	46b8      	movcs	r8, r7
  4031c6:	4642      	mov	r2, r8
  4031c8:	4649      	mov	r1, r9
  4031ca:	f000 fd4b 	bl	403c64 <memmove>
  4031ce:	68a3      	ldr	r3, [r4, #8]
  4031d0:	6822      	ldr	r2, [r4, #0]
  4031d2:	ebc8 0303 	rsb	r3, r8, r3
  4031d6:	4442      	add	r2, r8
  4031d8:	60a3      	str	r3, [r4, #8]
  4031da:	6022      	str	r2, [r4, #0]
  4031dc:	2b00      	cmp	r3, #0
  4031de:	d149      	bne.n	403274 <__sfvwrite_r+0x1bc>
  4031e0:	4621      	mov	r1, r4
  4031e2:	9801      	ldr	r0, [sp, #4]
  4031e4:	f7ff fd22 	bl	402c2c <_fflush_r>
  4031e8:	2800      	cmp	r0, #0
  4031ea:	d043      	beq.n	403274 <__sfvwrite_r+0x1bc>
  4031ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4031f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4031f4:	f04f 30ff 	mov.w	r0, #4294967295
  4031f8:	81a3      	strh	r3, [r4, #12]
  4031fa:	b005      	add	sp, #20
  4031fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403200:	4680      	mov	r8, r0
  403202:	9002      	str	r0, [sp, #8]
  403204:	4682      	mov	sl, r0
  403206:	4681      	mov	r9, r0
  403208:	f1b9 0f00 	cmp.w	r9, #0
  40320c:	d02a      	beq.n	403264 <__sfvwrite_r+0x1ac>
  40320e:	9b02      	ldr	r3, [sp, #8]
  403210:	2b00      	cmp	r3, #0
  403212:	d04c      	beq.n	4032ae <__sfvwrite_r+0x1f6>
  403214:	6820      	ldr	r0, [r4, #0]
  403216:	6923      	ldr	r3, [r4, #16]
  403218:	6962      	ldr	r2, [r4, #20]
  40321a:	45c8      	cmp	r8, r9
  40321c:	46c3      	mov	fp, r8
  40321e:	bf28      	it	cs
  403220:	46cb      	movcs	fp, r9
  403222:	4298      	cmp	r0, r3
  403224:	465f      	mov	r7, fp
  403226:	d904      	bls.n	403232 <__sfvwrite_r+0x17a>
  403228:	68a3      	ldr	r3, [r4, #8]
  40322a:	4413      	add	r3, r2
  40322c:	459b      	cmp	fp, r3
  40322e:	f300 8090 	bgt.w	403352 <__sfvwrite_r+0x29a>
  403232:	4593      	cmp	fp, r2
  403234:	db20      	blt.n	403278 <__sfvwrite_r+0x1c0>
  403236:	4613      	mov	r3, r2
  403238:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40323a:	69e1      	ldr	r1, [r4, #28]
  40323c:	9801      	ldr	r0, [sp, #4]
  40323e:	4652      	mov	r2, sl
  403240:	47b8      	blx	r7
  403242:	1e07      	subs	r7, r0, #0
  403244:	ddd2      	ble.n	4031ec <__sfvwrite_r+0x134>
  403246:	ebb8 0807 	subs.w	r8, r8, r7
  40324a:	d023      	beq.n	403294 <__sfvwrite_r+0x1dc>
  40324c:	68b3      	ldr	r3, [r6, #8]
  40324e:	1bdb      	subs	r3, r3, r7
  403250:	44ba      	add	sl, r7
  403252:	ebc7 0909 	rsb	r9, r7, r9
  403256:	60b3      	str	r3, [r6, #8]
  403258:	2b00      	cmp	r3, #0
  40325a:	f43f af5f 	beq.w	40311c <__sfvwrite_r+0x64>
  40325e:	f1b9 0f00 	cmp.w	r9, #0
  403262:	d1d4      	bne.n	40320e <__sfvwrite_r+0x156>
  403264:	2300      	movs	r3, #0
  403266:	f8d5 a000 	ldr.w	sl, [r5]
  40326a:	f8d5 9004 	ldr.w	r9, [r5, #4]
  40326e:	9302      	str	r3, [sp, #8]
  403270:	3508      	adds	r5, #8
  403272:	e7c9      	b.n	403208 <__sfvwrite_r+0x150>
  403274:	4640      	mov	r0, r8
  403276:	e783      	b.n	403180 <__sfvwrite_r+0xc8>
  403278:	465a      	mov	r2, fp
  40327a:	4651      	mov	r1, sl
  40327c:	f000 fcf2 	bl	403c64 <memmove>
  403280:	68a2      	ldr	r2, [r4, #8]
  403282:	6823      	ldr	r3, [r4, #0]
  403284:	ebcb 0202 	rsb	r2, fp, r2
  403288:	445b      	add	r3, fp
  40328a:	ebb8 0807 	subs.w	r8, r8, r7
  40328e:	60a2      	str	r2, [r4, #8]
  403290:	6023      	str	r3, [r4, #0]
  403292:	d1db      	bne.n	40324c <__sfvwrite_r+0x194>
  403294:	4621      	mov	r1, r4
  403296:	9801      	ldr	r0, [sp, #4]
  403298:	f7ff fcc8 	bl	402c2c <_fflush_r>
  40329c:	2800      	cmp	r0, #0
  40329e:	d1a5      	bne.n	4031ec <__sfvwrite_r+0x134>
  4032a0:	f8cd 8008 	str.w	r8, [sp, #8]
  4032a4:	e7d2      	b.n	40324c <__sfvwrite_r+0x194>
  4032a6:	6820      	ldr	r0, [r4, #0]
  4032a8:	46b8      	mov	r8, r7
  4032aa:	46ba      	mov	sl, r7
  4032ac:	e75c      	b.n	403168 <__sfvwrite_r+0xb0>
  4032ae:	464a      	mov	r2, r9
  4032b0:	210a      	movs	r1, #10
  4032b2:	4650      	mov	r0, sl
  4032b4:	f000 fbec 	bl	403a90 <memchr>
  4032b8:	2800      	cmp	r0, #0
  4032ba:	d06f      	beq.n	40339c <__sfvwrite_r+0x2e4>
  4032bc:	3001      	adds	r0, #1
  4032be:	2301      	movs	r3, #1
  4032c0:	ebca 0800 	rsb	r8, sl, r0
  4032c4:	9302      	str	r3, [sp, #8]
  4032c6:	e7a5      	b.n	403214 <__sfvwrite_r+0x15c>
  4032c8:	6962      	ldr	r2, [r4, #20]
  4032ca:	6820      	ldr	r0, [r4, #0]
  4032cc:	6921      	ldr	r1, [r4, #16]
  4032ce:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4032d2:	ebc1 0a00 	rsb	sl, r1, r0
  4032d6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4032da:	f10a 0001 	add.w	r0, sl, #1
  4032de:	ea4f 0868 	mov.w	r8, r8, asr #1
  4032e2:	4438      	add	r0, r7
  4032e4:	4540      	cmp	r0, r8
  4032e6:	4642      	mov	r2, r8
  4032e8:	bf84      	itt	hi
  4032ea:	4680      	movhi	r8, r0
  4032ec:	4642      	movhi	r2, r8
  4032ee:	055b      	lsls	r3, r3, #21
  4032f0:	d542      	bpl.n	403378 <__sfvwrite_r+0x2c0>
  4032f2:	4611      	mov	r1, r2
  4032f4:	9801      	ldr	r0, [sp, #4]
  4032f6:	f000 f911 	bl	40351c <_malloc_r>
  4032fa:	4683      	mov	fp, r0
  4032fc:	2800      	cmp	r0, #0
  4032fe:	d055      	beq.n	4033ac <__sfvwrite_r+0x2f4>
  403300:	4652      	mov	r2, sl
  403302:	6921      	ldr	r1, [r4, #16]
  403304:	f000 fc14 	bl	403b30 <memcpy>
  403308:	89a3      	ldrh	r3, [r4, #12]
  40330a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40330e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403312:	81a3      	strh	r3, [r4, #12]
  403314:	ebca 0308 	rsb	r3, sl, r8
  403318:	eb0b 000a 	add.w	r0, fp, sl
  40331c:	f8c4 8014 	str.w	r8, [r4, #20]
  403320:	f8c4 b010 	str.w	fp, [r4, #16]
  403324:	6020      	str	r0, [r4, #0]
  403326:	60a3      	str	r3, [r4, #8]
  403328:	46b8      	mov	r8, r7
  40332a:	46ba      	mov	sl, r7
  40332c:	e71c      	b.n	403168 <__sfvwrite_r+0xb0>
  40332e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  403332:	42bb      	cmp	r3, r7
  403334:	bf28      	it	cs
  403336:	463b      	movcs	r3, r7
  403338:	464a      	mov	r2, r9
  40333a:	fb93 f3f1 	sdiv	r3, r3, r1
  40333e:	9801      	ldr	r0, [sp, #4]
  403340:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403342:	fb01 f303 	mul.w	r3, r1, r3
  403346:	69e1      	ldr	r1, [r4, #28]
  403348:	47b0      	blx	r6
  40334a:	2800      	cmp	r0, #0
  40334c:	f73f af18 	bgt.w	403180 <__sfvwrite_r+0xc8>
  403350:	e74c      	b.n	4031ec <__sfvwrite_r+0x134>
  403352:	461a      	mov	r2, r3
  403354:	4651      	mov	r1, sl
  403356:	9303      	str	r3, [sp, #12]
  403358:	f000 fc84 	bl	403c64 <memmove>
  40335c:	6822      	ldr	r2, [r4, #0]
  40335e:	9b03      	ldr	r3, [sp, #12]
  403360:	9801      	ldr	r0, [sp, #4]
  403362:	441a      	add	r2, r3
  403364:	6022      	str	r2, [r4, #0]
  403366:	4621      	mov	r1, r4
  403368:	f7ff fc60 	bl	402c2c <_fflush_r>
  40336c:	9b03      	ldr	r3, [sp, #12]
  40336e:	2800      	cmp	r0, #0
  403370:	f47f af3c 	bne.w	4031ec <__sfvwrite_r+0x134>
  403374:	461f      	mov	r7, r3
  403376:	e766      	b.n	403246 <__sfvwrite_r+0x18e>
  403378:	9801      	ldr	r0, [sp, #4]
  40337a:	f000 fcdb 	bl	403d34 <_realloc_r>
  40337e:	4683      	mov	fp, r0
  403380:	2800      	cmp	r0, #0
  403382:	d1c7      	bne.n	403314 <__sfvwrite_r+0x25c>
  403384:	9d01      	ldr	r5, [sp, #4]
  403386:	6921      	ldr	r1, [r4, #16]
  403388:	4628      	mov	r0, r5
  40338a:	f7ff fdad 	bl	402ee8 <_free_r>
  40338e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403392:	220c      	movs	r2, #12
  403394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403398:	602a      	str	r2, [r5, #0]
  40339a:	e729      	b.n	4031f0 <__sfvwrite_r+0x138>
  40339c:	2301      	movs	r3, #1
  40339e:	f109 0801 	add.w	r8, r9, #1
  4033a2:	9302      	str	r3, [sp, #8]
  4033a4:	e736      	b.n	403214 <__sfvwrite_r+0x15c>
  4033a6:	f04f 30ff 	mov.w	r0, #4294967295
  4033aa:	e6b8      	b.n	40311e <__sfvwrite_r+0x66>
  4033ac:	9a01      	ldr	r2, [sp, #4]
  4033ae:	230c      	movs	r3, #12
  4033b0:	6013      	str	r3, [r2, #0]
  4033b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4033b6:	e71b      	b.n	4031f0 <__sfvwrite_r+0x138>
  4033b8:	7ffffc00 	.word	0x7ffffc00

004033bc <_fwalk_reent>:
  4033bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4033c0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4033c4:	d01f      	beq.n	403406 <_fwalk_reent+0x4a>
  4033c6:	4688      	mov	r8, r1
  4033c8:	4606      	mov	r6, r0
  4033ca:	f04f 0900 	mov.w	r9, #0
  4033ce:	687d      	ldr	r5, [r7, #4]
  4033d0:	68bc      	ldr	r4, [r7, #8]
  4033d2:	3d01      	subs	r5, #1
  4033d4:	d411      	bmi.n	4033fa <_fwalk_reent+0x3e>
  4033d6:	89a3      	ldrh	r3, [r4, #12]
  4033d8:	2b01      	cmp	r3, #1
  4033da:	f105 35ff 	add.w	r5, r5, #4294967295
  4033de:	d908      	bls.n	4033f2 <_fwalk_reent+0x36>
  4033e0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4033e4:	3301      	adds	r3, #1
  4033e6:	4621      	mov	r1, r4
  4033e8:	4630      	mov	r0, r6
  4033ea:	d002      	beq.n	4033f2 <_fwalk_reent+0x36>
  4033ec:	47c0      	blx	r8
  4033ee:	ea49 0900 	orr.w	r9, r9, r0
  4033f2:	1c6b      	adds	r3, r5, #1
  4033f4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4033f8:	d1ed      	bne.n	4033d6 <_fwalk_reent+0x1a>
  4033fa:	683f      	ldr	r7, [r7, #0]
  4033fc:	2f00      	cmp	r7, #0
  4033fe:	d1e6      	bne.n	4033ce <_fwalk_reent+0x12>
  403400:	4648      	mov	r0, r9
  403402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403406:	46b9      	mov	r9, r7
  403408:	4648      	mov	r0, r9
  40340a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40340e:	bf00      	nop

00403410 <__locale_charset>:
  403410:	4800      	ldr	r0, [pc, #0]	; (403414 <__locale_charset+0x4>)
  403412:	4770      	bx	lr
  403414:	20400434 	.word	0x20400434

00403418 <__locale_mb_cur_max>:
  403418:	4b01      	ldr	r3, [pc, #4]	; (403420 <__locale_mb_cur_max+0x8>)
  40341a:	6818      	ldr	r0, [r3, #0]
  40341c:	4770      	bx	lr
  40341e:	bf00      	nop
  403420:	20400454 	.word	0x20400454

00403424 <__swhatbuf_r>:
  403424:	b570      	push	{r4, r5, r6, lr}
  403426:	460d      	mov	r5, r1
  403428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40342c:	2900      	cmp	r1, #0
  40342e:	b090      	sub	sp, #64	; 0x40
  403430:	4614      	mov	r4, r2
  403432:	461e      	mov	r6, r3
  403434:	db14      	blt.n	403460 <__swhatbuf_r+0x3c>
  403436:	aa01      	add	r2, sp, #4
  403438:	f001 f80c 	bl	404454 <_fstat_r>
  40343c:	2800      	cmp	r0, #0
  40343e:	db0f      	blt.n	403460 <__swhatbuf_r+0x3c>
  403440:	9a02      	ldr	r2, [sp, #8]
  403442:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403446:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40344a:	fab2 f282 	clz	r2, r2
  40344e:	0952      	lsrs	r2, r2, #5
  403450:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403454:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403458:	6032      	str	r2, [r6, #0]
  40345a:	6023      	str	r3, [r4, #0]
  40345c:	b010      	add	sp, #64	; 0x40
  40345e:	bd70      	pop	{r4, r5, r6, pc}
  403460:	89a8      	ldrh	r0, [r5, #12]
  403462:	f000 0080 	and.w	r0, r0, #128	; 0x80
  403466:	b282      	uxth	r2, r0
  403468:	2000      	movs	r0, #0
  40346a:	6030      	str	r0, [r6, #0]
  40346c:	b11a      	cbz	r2, 403476 <__swhatbuf_r+0x52>
  40346e:	2340      	movs	r3, #64	; 0x40
  403470:	6023      	str	r3, [r4, #0]
  403472:	b010      	add	sp, #64	; 0x40
  403474:	bd70      	pop	{r4, r5, r6, pc}
  403476:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40347a:	4610      	mov	r0, r2
  40347c:	6023      	str	r3, [r4, #0]
  40347e:	b010      	add	sp, #64	; 0x40
  403480:	bd70      	pop	{r4, r5, r6, pc}
  403482:	bf00      	nop

00403484 <__smakebuf_r>:
  403484:	898a      	ldrh	r2, [r1, #12]
  403486:	0792      	lsls	r2, r2, #30
  403488:	460b      	mov	r3, r1
  40348a:	d506      	bpl.n	40349a <__smakebuf_r+0x16>
  40348c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  403490:	2101      	movs	r1, #1
  403492:	601a      	str	r2, [r3, #0]
  403494:	611a      	str	r2, [r3, #16]
  403496:	6159      	str	r1, [r3, #20]
  403498:	4770      	bx	lr
  40349a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40349c:	b083      	sub	sp, #12
  40349e:	ab01      	add	r3, sp, #4
  4034a0:	466a      	mov	r2, sp
  4034a2:	460c      	mov	r4, r1
  4034a4:	4605      	mov	r5, r0
  4034a6:	f7ff ffbd 	bl	403424 <__swhatbuf_r>
  4034aa:	9900      	ldr	r1, [sp, #0]
  4034ac:	4606      	mov	r6, r0
  4034ae:	4628      	mov	r0, r5
  4034b0:	f000 f834 	bl	40351c <_malloc_r>
  4034b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4034b8:	b1d0      	cbz	r0, 4034f0 <__smakebuf_r+0x6c>
  4034ba:	9a01      	ldr	r2, [sp, #4]
  4034bc:	4f12      	ldr	r7, [pc, #72]	; (403508 <__smakebuf_r+0x84>)
  4034be:	9900      	ldr	r1, [sp, #0]
  4034c0:	63ef      	str	r7, [r5, #60]	; 0x3c
  4034c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4034c6:	81a3      	strh	r3, [r4, #12]
  4034c8:	6020      	str	r0, [r4, #0]
  4034ca:	6120      	str	r0, [r4, #16]
  4034cc:	6161      	str	r1, [r4, #20]
  4034ce:	b91a      	cbnz	r2, 4034d8 <__smakebuf_r+0x54>
  4034d0:	4333      	orrs	r3, r6
  4034d2:	81a3      	strh	r3, [r4, #12]
  4034d4:	b003      	add	sp, #12
  4034d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4034d8:	4628      	mov	r0, r5
  4034da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4034de:	f000 ffcd 	bl	40447c <_isatty_r>
  4034e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4034e6:	2800      	cmp	r0, #0
  4034e8:	d0f2      	beq.n	4034d0 <__smakebuf_r+0x4c>
  4034ea:	f043 0301 	orr.w	r3, r3, #1
  4034ee:	e7ef      	b.n	4034d0 <__smakebuf_r+0x4c>
  4034f0:	059a      	lsls	r2, r3, #22
  4034f2:	d4ef      	bmi.n	4034d4 <__smakebuf_r+0x50>
  4034f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4034f8:	f043 0302 	orr.w	r3, r3, #2
  4034fc:	2101      	movs	r1, #1
  4034fe:	81a3      	strh	r3, [r4, #12]
  403500:	6022      	str	r2, [r4, #0]
  403502:	6122      	str	r2, [r4, #16]
  403504:	6161      	str	r1, [r4, #20]
  403506:	e7e5      	b.n	4034d4 <__smakebuf_r+0x50>
  403508:	00402c59 	.word	0x00402c59

0040350c <malloc>:
  40350c:	4b02      	ldr	r3, [pc, #8]	; (403518 <malloc+0xc>)
  40350e:	4601      	mov	r1, r0
  403510:	6818      	ldr	r0, [r3, #0]
  403512:	f000 b803 	b.w	40351c <_malloc_r>
  403516:	bf00      	nop
  403518:	20400430 	.word	0x20400430

0040351c <_malloc_r>:
  40351c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403520:	f101 050b 	add.w	r5, r1, #11
  403524:	2d16      	cmp	r5, #22
  403526:	b083      	sub	sp, #12
  403528:	4606      	mov	r6, r0
  40352a:	f240 809f 	bls.w	40366c <_malloc_r+0x150>
  40352e:	f035 0507 	bics.w	r5, r5, #7
  403532:	f100 80bf 	bmi.w	4036b4 <_malloc_r+0x198>
  403536:	42a9      	cmp	r1, r5
  403538:	f200 80bc 	bhi.w	4036b4 <_malloc_r+0x198>
  40353c:	f000 fbf6 	bl	403d2c <__malloc_lock>
  403540:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  403544:	f0c0 829c 	bcc.w	403a80 <_malloc_r+0x564>
  403548:	0a6b      	lsrs	r3, r5, #9
  40354a:	f000 80ba 	beq.w	4036c2 <_malloc_r+0x1a6>
  40354e:	2b04      	cmp	r3, #4
  403550:	f200 8183 	bhi.w	40385a <_malloc_r+0x33e>
  403554:	09a8      	lsrs	r0, r5, #6
  403556:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  40355a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40355e:	3038      	adds	r0, #56	; 0x38
  403560:	4fc4      	ldr	r7, [pc, #784]	; (403874 <_malloc_r+0x358>)
  403562:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  403566:	f1a3 0108 	sub.w	r1, r3, #8
  40356a:	685c      	ldr	r4, [r3, #4]
  40356c:	42a1      	cmp	r1, r4
  40356e:	d107      	bne.n	403580 <_malloc_r+0x64>
  403570:	e0ac      	b.n	4036cc <_malloc_r+0x1b0>
  403572:	2a00      	cmp	r2, #0
  403574:	f280 80ac 	bge.w	4036d0 <_malloc_r+0x1b4>
  403578:	68e4      	ldr	r4, [r4, #12]
  40357a:	42a1      	cmp	r1, r4
  40357c:	f000 80a6 	beq.w	4036cc <_malloc_r+0x1b0>
  403580:	6863      	ldr	r3, [r4, #4]
  403582:	f023 0303 	bic.w	r3, r3, #3
  403586:	1b5a      	subs	r2, r3, r5
  403588:	2a0f      	cmp	r2, #15
  40358a:	ddf2      	ble.n	403572 <_malloc_r+0x56>
  40358c:	49b9      	ldr	r1, [pc, #740]	; (403874 <_malloc_r+0x358>)
  40358e:	693c      	ldr	r4, [r7, #16]
  403590:	f101 0e08 	add.w	lr, r1, #8
  403594:	4574      	cmp	r4, lr
  403596:	f000 81b3 	beq.w	403900 <_malloc_r+0x3e4>
  40359a:	6863      	ldr	r3, [r4, #4]
  40359c:	f023 0303 	bic.w	r3, r3, #3
  4035a0:	1b5a      	subs	r2, r3, r5
  4035a2:	2a0f      	cmp	r2, #15
  4035a4:	f300 8199 	bgt.w	4038da <_malloc_r+0x3be>
  4035a8:	2a00      	cmp	r2, #0
  4035aa:	f8c1 e014 	str.w	lr, [r1, #20]
  4035ae:	f8c1 e010 	str.w	lr, [r1, #16]
  4035b2:	f280 809e 	bge.w	4036f2 <_malloc_r+0x1d6>
  4035b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4035ba:	f080 8167 	bcs.w	40388c <_malloc_r+0x370>
  4035be:	08db      	lsrs	r3, r3, #3
  4035c0:	f103 0c01 	add.w	ip, r3, #1
  4035c4:	2201      	movs	r2, #1
  4035c6:	109b      	asrs	r3, r3, #2
  4035c8:	fa02 f303 	lsl.w	r3, r2, r3
  4035cc:	684a      	ldr	r2, [r1, #4]
  4035ce:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  4035d2:	f8c4 8008 	str.w	r8, [r4, #8]
  4035d6:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  4035da:	431a      	orrs	r2, r3
  4035dc:	f1a9 0308 	sub.w	r3, r9, #8
  4035e0:	60e3      	str	r3, [r4, #12]
  4035e2:	604a      	str	r2, [r1, #4]
  4035e4:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  4035e8:	f8c8 400c 	str.w	r4, [r8, #12]
  4035ec:	1083      	asrs	r3, r0, #2
  4035ee:	2401      	movs	r4, #1
  4035f0:	409c      	lsls	r4, r3
  4035f2:	4294      	cmp	r4, r2
  4035f4:	f200 808a 	bhi.w	40370c <_malloc_r+0x1f0>
  4035f8:	4214      	tst	r4, r2
  4035fa:	d106      	bne.n	40360a <_malloc_r+0xee>
  4035fc:	f020 0003 	bic.w	r0, r0, #3
  403600:	0064      	lsls	r4, r4, #1
  403602:	4214      	tst	r4, r2
  403604:	f100 0004 	add.w	r0, r0, #4
  403608:	d0fa      	beq.n	403600 <_malloc_r+0xe4>
  40360a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40360e:	46cc      	mov	ip, r9
  403610:	4680      	mov	r8, r0
  403612:	f8dc 100c 	ldr.w	r1, [ip, #12]
  403616:	458c      	cmp	ip, r1
  403618:	d107      	bne.n	40362a <_malloc_r+0x10e>
  40361a:	e173      	b.n	403904 <_malloc_r+0x3e8>
  40361c:	2a00      	cmp	r2, #0
  40361e:	f280 8181 	bge.w	403924 <_malloc_r+0x408>
  403622:	68c9      	ldr	r1, [r1, #12]
  403624:	458c      	cmp	ip, r1
  403626:	f000 816d 	beq.w	403904 <_malloc_r+0x3e8>
  40362a:	684b      	ldr	r3, [r1, #4]
  40362c:	f023 0303 	bic.w	r3, r3, #3
  403630:	1b5a      	subs	r2, r3, r5
  403632:	2a0f      	cmp	r2, #15
  403634:	ddf2      	ble.n	40361c <_malloc_r+0x100>
  403636:	460c      	mov	r4, r1
  403638:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40363c:	f854 8f08 	ldr.w	r8, [r4, #8]!
  403640:	194b      	adds	r3, r1, r5
  403642:	f045 0501 	orr.w	r5, r5, #1
  403646:	604d      	str	r5, [r1, #4]
  403648:	f042 0101 	orr.w	r1, r2, #1
  40364c:	f8c8 c00c 	str.w	ip, [r8, #12]
  403650:	4630      	mov	r0, r6
  403652:	f8cc 8008 	str.w	r8, [ip, #8]
  403656:	617b      	str	r3, [r7, #20]
  403658:	613b      	str	r3, [r7, #16]
  40365a:	f8c3 e00c 	str.w	lr, [r3, #12]
  40365e:	f8c3 e008 	str.w	lr, [r3, #8]
  403662:	6059      	str	r1, [r3, #4]
  403664:	509a      	str	r2, [r3, r2]
  403666:	f000 fb63 	bl	403d30 <__malloc_unlock>
  40366a:	e01f      	b.n	4036ac <_malloc_r+0x190>
  40366c:	2910      	cmp	r1, #16
  40366e:	d821      	bhi.n	4036b4 <_malloc_r+0x198>
  403670:	f000 fb5c 	bl	403d2c <__malloc_lock>
  403674:	2510      	movs	r5, #16
  403676:	2306      	movs	r3, #6
  403678:	2002      	movs	r0, #2
  40367a:	4f7e      	ldr	r7, [pc, #504]	; (403874 <_malloc_r+0x358>)
  40367c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  403680:	f1a3 0208 	sub.w	r2, r3, #8
  403684:	685c      	ldr	r4, [r3, #4]
  403686:	4294      	cmp	r4, r2
  403688:	f000 8145 	beq.w	403916 <_malloc_r+0x3fa>
  40368c:	6863      	ldr	r3, [r4, #4]
  40368e:	68e1      	ldr	r1, [r4, #12]
  403690:	68a5      	ldr	r5, [r4, #8]
  403692:	f023 0303 	bic.w	r3, r3, #3
  403696:	4423      	add	r3, r4
  403698:	4630      	mov	r0, r6
  40369a:	685a      	ldr	r2, [r3, #4]
  40369c:	60e9      	str	r1, [r5, #12]
  40369e:	f042 0201 	orr.w	r2, r2, #1
  4036a2:	608d      	str	r5, [r1, #8]
  4036a4:	605a      	str	r2, [r3, #4]
  4036a6:	f000 fb43 	bl	403d30 <__malloc_unlock>
  4036aa:	3408      	adds	r4, #8
  4036ac:	4620      	mov	r0, r4
  4036ae:	b003      	add	sp, #12
  4036b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4036b4:	2400      	movs	r4, #0
  4036b6:	230c      	movs	r3, #12
  4036b8:	4620      	mov	r0, r4
  4036ba:	6033      	str	r3, [r6, #0]
  4036bc:	b003      	add	sp, #12
  4036be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4036c2:	2380      	movs	r3, #128	; 0x80
  4036c4:	f04f 0e40 	mov.w	lr, #64	; 0x40
  4036c8:	203f      	movs	r0, #63	; 0x3f
  4036ca:	e749      	b.n	403560 <_malloc_r+0x44>
  4036cc:	4670      	mov	r0, lr
  4036ce:	e75d      	b.n	40358c <_malloc_r+0x70>
  4036d0:	4423      	add	r3, r4
  4036d2:	68e1      	ldr	r1, [r4, #12]
  4036d4:	685a      	ldr	r2, [r3, #4]
  4036d6:	68a5      	ldr	r5, [r4, #8]
  4036d8:	f042 0201 	orr.w	r2, r2, #1
  4036dc:	60e9      	str	r1, [r5, #12]
  4036de:	4630      	mov	r0, r6
  4036e0:	608d      	str	r5, [r1, #8]
  4036e2:	605a      	str	r2, [r3, #4]
  4036e4:	f000 fb24 	bl	403d30 <__malloc_unlock>
  4036e8:	3408      	adds	r4, #8
  4036ea:	4620      	mov	r0, r4
  4036ec:	b003      	add	sp, #12
  4036ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4036f2:	4423      	add	r3, r4
  4036f4:	4630      	mov	r0, r6
  4036f6:	685a      	ldr	r2, [r3, #4]
  4036f8:	f042 0201 	orr.w	r2, r2, #1
  4036fc:	605a      	str	r2, [r3, #4]
  4036fe:	f000 fb17 	bl	403d30 <__malloc_unlock>
  403702:	3408      	adds	r4, #8
  403704:	4620      	mov	r0, r4
  403706:	b003      	add	sp, #12
  403708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40370c:	68bc      	ldr	r4, [r7, #8]
  40370e:	6863      	ldr	r3, [r4, #4]
  403710:	f023 0803 	bic.w	r8, r3, #3
  403714:	45a8      	cmp	r8, r5
  403716:	d304      	bcc.n	403722 <_malloc_r+0x206>
  403718:	ebc5 0308 	rsb	r3, r5, r8
  40371c:	2b0f      	cmp	r3, #15
  40371e:	f300 808c 	bgt.w	40383a <_malloc_r+0x31e>
  403722:	4b55      	ldr	r3, [pc, #340]	; (403878 <_malloc_r+0x35c>)
  403724:	f8df 9160 	ldr.w	r9, [pc, #352]	; 403888 <_malloc_r+0x36c>
  403728:	681a      	ldr	r2, [r3, #0]
  40372a:	f8d9 3000 	ldr.w	r3, [r9]
  40372e:	3301      	adds	r3, #1
  403730:	442a      	add	r2, r5
  403732:	eb04 0a08 	add.w	sl, r4, r8
  403736:	f000 8160 	beq.w	4039fa <_malloc_r+0x4de>
  40373a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  40373e:	320f      	adds	r2, #15
  403740:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  403744:	f022 020f 	bic.w	r2, r2, #15
  403748:	4611      	mov	r1, r2
  40374a:	4630      	mov	r0, r6
  40374c:	9201      	str	r2, [sp, #4]
  40374e:	f000 fce1 	bl	404114 <_sbrk_r>
  403752:	f1b0 3fff 	cmp.w	r0, #4294967295
  403756:	4683      	mov	fp, r0
  403758:	9a01      	ldr	r2, [sp, #4]
  40375a:	f000 8158 	beq.w	403a0e <_malloc_r+0x4f2>
  40375e:	4582      	cmp	sl, r0
  403760:	f200 80fc 	bhi.w	40395c <_malloc_r+0x440>
  403764:	4b45      	ldr	r3, [pc, #276]	; (40387c <_malloc_r+0x360>)
  403766:	6819      	ldr	r1, [r3, #0]
  403768:	45da      	cmp	sl, fp
  40376a:	4411      	add	r1, r2
  40376c:	6019      	str	r1, [r3, #0]
  40376e:	f000 8153 	beq.w	403a18 <_malloc_r+0x4fc>
  403772:	f8d9 0000 	ldr.w	r0, [r9]
  403776:	f8df e110 	ldr.w	lr, [pc, #272]	; 403888 <_malloc_r+0x36c>
  40377a:	3001      	adds	r0, #1
  40377c:	bf1b      	ittet	ne
  40377e:	ebca 0a0b 	rsbne	sl, sl, fp
  403782:	4451      	addne	r1, sl
  403784:	f8ce b000 	streq.w	fp, [lr]
  403788:	6019      	strne	r1, [r3, #0]
  40378a:	f01b 0107 	ands.w	r1, fp, #7
  40378e:	f000 8117 	beq.w	4039c0 <_malloc_r+0x4a4>
  403792:	f1c1 0008 	rsb	r0, r1, #8
  403796:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40379a:	4483      	add	fp, r0
  40379c:	3108      	adds	r1, #8
  40379e:	445a      	add	r2, fp
  4037a0:	f3c2 020b 	ubfx	r2, r2, #0, #12
  4037a4:	ebc2 0901 	rsb	r9, r2, r1
  4037a8:	4649      	mov	r1, r9
  4037aa:	4630      	mov	r0, r6
  4037ac:	9301      	str	r3, [sp, #4]
  4037ae:	f000 fcb1 	bl	404114 <_sbrk_r>
  4037b2:	1c43      	adds	r3, r0, #1
  4037b4:	9b01      	ldr	r3, [sp, #4]
  4037b6:	f000 813f 	beq.w	403a38 <_malloc_r+0x51c>
  4037ba:	ebcb 0200 	rsb	r2, fp, r0
  4037be:	444a      	add	r2, r9
  4037c0:	f042 0201 	orr.w	r2, r2, #1
  4037c4:	6819      	ldr	r1, [r3, #0]
  4037c6:	f8c7 b008 	str.w	fp, [r7, #8]
  4037ca:	4449      	add	r1, r9
  4037cc:	42bc      	cmp	r4, r7
  4037ce:	f8cb 2004 	str.w	r2, [fp, #4]
  4037d2:	6019      	str	r1, [r3, #0]
  4037d4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40387c <_malloc_r+0x360>
  4037d8:	d016      	beq.n	403808 <_malloc_r+0x2ec>
  4037da:	f1b8 0f0f 	cmp.w	r8, #15
  4037de:	f240 80fd 	bls.w	4039dc <_malloc_r+0x4c0>
  4037e2:	6862      	ldr	r2, [r4, #4]
  4037e4:	f1a8 030c 	sub.w	r3, r8, #12
  4037e8:	f023 0307 	bic.w	r3, r3, #7
  4037ec:	18e0      	adds	r0, r4, r3
  4037ee:	f002 0201 	and.w	r2, r2, #1
  4037f2:	f04f 0e05 	mov.w	lr, #5
  4037f6:	431a      	orrs	r2, r3
  4037f8:	2b0f      	cmp	r3, #15
  4037fa:	6062      	str	r2, [r4, #4]
  4037fc:	f8c0 e004 	str.w	lr, [r0, #4]
  403800:	f8c0 e008 	str.w	lr, [r0, #8]
  403804:	f200 811c 	bhi.w	403a40 <_malloc_r+0x524>
  403808:	4b1d      	ldr	r3, [pc, #116]	; (403880 <_malloc_r+0x364>)
  40380a:	68bc      	ldr	r4, [r7, #8]
  40380c:	681a      	ldr	r2, [r3, #0]
  40380e:	4291      	cmp	r1, r2
  403810:	bf88      	it	hi
  403812:	6019      	strhi	r1, [r3, #0]
  403814:	4b1b      	ldr	r3, [pc, #108]	; (403884 <_malloc_r+0x368>)
  403816:	681a      	ldr	r2, [r3, #0]
  403818:	4291      	cmp	r1, r2
  40381a:	6862      	ldr	r2, [r4, #4]
  40381c:	bf88      	it	hi
  40381e:	6019      	strhi	r1, [r3, #0]
  403820:	f022 0203 	bic.w	r2, r2, #3
  403824:	4295      	cmp	r5, r2
  403826:	eba2 0305 	sub.w	r3, r2, r5
  40382a:	d801      	bhi.n	403830 <_malloc_r+0x314>
  40382c:	2b0f      	cmp	r3, #15
  40382e:	dc04      	bgt.n	40383a <_malloc_r+0x31e>
  403830:	4630      	mov	r0, r6
  403832:	f000 fa7d 	bl	403d30 <__malloc_unlock>
  403836:	2400      	movs	r4, #0
  403838:	e738      	b.n	4036ac <_malloc_r+0x190>
  40383a:	1962      	adds	r2, r4, r5
  40383c:	f043 0301 	orr.w	r3, r3, #1
  403840:	f045 0501 	orr.w	r5, r5, #1
  403844:	6065      	str	r5, [r4, #4]
  403846:	4630      	mov	r0, r6
  403848:	60ba      	str	r2, [r7, #8]
  40384a:	6053      	str	r3, [r2, #4]
  40384c:	f000 fa70 	bl	403d30 <__malloc_unlock>
  403850:	3408      	adds	r4, #8
  403852:	4620      	mov	r0, r4
  403854:	b003      	add	sp, #12
  403856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40385a:	2b14      	cmp	r3, #20
  40385c:	d971      	bls.n	403942 <_malloc_r+0x426>
  40385e:	2b54      	cmp	r3, #84	; 0x54
  403860:	f200 80a4 	bhi.w	4039ac <_malloc_r+0x490>
  403864:	0b28      	lsrs	r0, r5, #12
  403866:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  40386a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40386e:	306e      	adds	r0, #110	; 0x6e
  403870:	e676      	b.n	403560 <_malloc_r+0x44>
  403872:	bf00      	nop
  403874:	20400458 	.word	0x20400458
  403878:	20400910 	.word	0x20400910
  40387c:	20400914 	.word	0x20400914
  403880:	2040090c 	.word	0x2040090c
  403884:	20400908 	.word	0x20400908
  403888:	20400864 	.word	0x20400864
  40388c:	0a5a      	lsrs	r2, r3, #9
  40388e:	2a04      	cmp	r2, #4
  403890:	d95e      	bls.n	403950 <_malloc_r+0x434>
  403892:	2a14      	cmp	r2, #20
  403894:	f200 80b3 	bhi.w	4039fe <_malloc_r+0x4e2>
  403898:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40389c:	0049      	lsls	r1, r1, #1
  40389e:	325b      	adds	r2, #91	; 0x5b
  4038a0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  4038a4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  4038a8:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 403a88 <_malloc_r+0x56c>
  4038ac:	f1ac 0c08 	sub.w	ip, ip, #8
  4038b0:	458c      	cmp	ip, r1
  4038b2:	f000 8088 	beq.w	4039c6 <_malloc_r+0x4aa>
  4038b6:	684a      	ldr	r2, [r1, #4]
  4038b8:	f022 0203 	bic.w	r2, r2, #3
  4038bc:	4293      	cmp	r3, r2
  4038be:	d202      	bcs.n	4038c6 <_malloc_r+0x3aa>
  4038c0:	6889      	ldr	r1, [r1, #8]
  4038c2:	458c      	cmp	ip, r1
  4038c4:	d1f7      	bne.n	4038b6 <_malloc_r+0x39a>
  4038c6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4038ca:	687a      	ldr	r2, [r7, #4]
  4038cc:	f8c4 c00c 	str.w	ip, [r4, #12]
  4038d0:	60a1      	str	r1, [r4, #8]
  4038d2:	f8cc 4008 	str.w	r4, [ip, #8]
  4038d6:	60cc      	str	r4, [r1, #12]
  4038d8:	e688      	b.n	4035ec <_malloc_r+0xd0>
  4038da:	1963      	adds	r3, r4, r5
  4038dc:	f042 0701 	orr.w	r7, r2, #1
  4038e0:	f045 0501 	orr.w	r5, r5, #1
  4038e4:	6065      	str	r5, [r4, #4]
  4038e6:	4630      	mov	r0, r6
  4038e8:	614b      	str	r3, [r1, #20]
  4038ea:	610b      	str	r3, [r1, #16]
  4038ec:	f8c3 e00c 	str.w	lr, [r3, #12]
  4038f0:	f8c3 e008 	str.w	lr, [r3, #8]
  4038f4:	605f      	str	r7, [r3, #4]
  4038f6:	509a      	str	r2, [r3, r2]
  4038f8:	3408      	adds	r4, #8
  4038fa:	f000 fa19 	bl	403d30 <__malloc_unlock>
  4038fe:	e6d5      	b.n	4036ac <_malloc_r+0x190>
  403900:	684a      	ldr	r2, [r1, #4]
  403902:	e673      	b.n	4035ec <_malloc_r+0xd0>
  403904:	f108 0801 	add.w	r8, r8, #1
  403908:	f018 0f03 	tst.w	r8, #3
  40390c:	f10c 0c08 	add.w	ip, ip, #8
  403910:	f47f ae7f 	bne.w	403612 <_malloc_r+0xf6>
  403914:	e030      	b.n	403978 <_malloc_r+0x45c>
  403916:	68dc      	ldr	r4, [r3, #12]
  403918:	42a3      	cmp	r3, r4
  40391a:	bf08      	it	eq
  40391c:	3002      	addeq	r0, #2
  40391e:	f43f ae35 	beq.w	40358c <_malloc_r+0x70>
  403922:	e6b3      	b.n	40368c <_malloc_r+0x170>
  403924:	440b      	add	r3, r1
  403926:	460c      	mov	r4, r1
  403928:	685a      	ldr	r2, [r3, #4]
  40392a:	68c9      	ldr	r1, [r1, #12]
  40392c:	f854 5f08 	ldr.w	r5, [r4, #8]!
  403930:	f042 0201 	orr.w	r2, r2, #1
  403934:	605a      	str	r2, [r3, #4]
  403936:	4630      	mov	r0, r6
  403938:	60e9      	str	r1, [r5, #12]
  40393a:	608d      	str	r5, [r1, #8]
  40393c:	f000 f9f8 	bl	403d30 <__malloc_unlock>
  403940:	e6b4      	b.n	4036ac <_malloc_r+0x190>
  403942:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  403946:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  40394a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40394e:	e607      	b.n	403560 <_malloc_r+0x44>
  403950:	099a      	lsrs	r2, r3, #6
  403952:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403956:	0049      	lsls	r1, r1, #1
  403958:	3238      	adds	r2, #56	; 0x38
  40395a:	e7a1      	b.n	4038a0 <_malloc_r+0x384>
  40395c:	42bc      	cmp	r4, r7
  40395e:	4b4a      	ldr	r3, [pc, #296]	; (403a88 <_malloc_r+0x56c>)
  403960:	f43f af00 	beq.w	403764 <_malloc_r+0x248>
  403964:	689c      	ldr	r4, [r3, #8]
  403966:	6862      	ldr	r2, [r4, #4]
  403968:	f022 0203 	bic.w	r2, r2, #3
  40396c:	e75a      	b.n	403824 <_malloc_r+0x308>
  40396e:	f859 3908 	ldr.w	r3, [r9], #-8
  403972:	4599      	cmp	r9, r3
  403974:	f040 8082 	bne.w	403a7c <_malloc_r+0x560>
  403978:	f010 0f03 	tst.w	r0, #3
  40397c:	f100 30ff 	add.w	r0, r0, #4294967295
  403980:	d1f5      	bne.n	40396e <_malloc_r+0x452>
  403982:	687b      	ldr	r3, [r7, #4]
  403984:	ea23 0304 	bic.w	r3, r3, r4
  403988:	607b      	str	r3, [r7, #4]
  40398a:	0064      	lsls	r4, r4, #1
  40398c:	429c      	cmp	r4, r3
  40398e:	f63f aebd 	bhi.w	40370c <_malloc_r+0x1f0>
  403992:	2c00      	cmp	r4, #0
  403994:	f43f aeba 	beq.w	40370c <_malloc_r+0x1f0>
  403998:	421c      	tst	r4, r3
  40399a:	4640      	mov	r0, r8
  40399c:	f47f ae35 	bne.w	40360a <_malloc_r+0xee>
  4039a0:	0064      	lsls	r4, r4, #1
  4039a2:	421c      	tst	r4, r3
  4039a4:	f100 0004 	add.w	r0, r0, #4
  4039a8:	d0fa      	beq.n	4039a0 <_malloc_r+0x484>
  4039aa:	e62e      	b.n	40360a <_malloc_r+0xee>
  4039ac:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4039b0:	d818      	bhi.n	4039e4 <_malloc_r+0x4c8>
  4039b2:	0be8      	lsrs	r0, r5, #15
  4039b4:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  4039b8:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4039bc:	3077      	adds	r0, #119	; 0x77
  4039be:	e5cf      	b.n	403560 <_malloc_r+0x44>
  4039c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4039c4:	e6eb      	b.n	40379e <_malloc_r+0x282>
  4039c6:	2101      	movs	r1, #1
  4039c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4039cc:	1092      	asrs	r2, r2, #2
  4039ce:	fa01 f202 	lsl.w	r2, r1, r2
  4039d2:	431a      	orrs	r2, r3
  4039d4:	f8c8 2004 	str.w	r2, [r8, #4]
  4039d8:	4661      	mov	r1, ip
  4039da:	e777      	b.n	4038cc <_malloc_r+0x3b0>
  4039dc:	2301      	movs	r3, #1
  4039de:	f8cb 3004 	str.w	r3, [fp, #4]
  4039e2:	e725      	b.n	403830 <_malloc_r+0x314>
  4039e4:	f240 5254 	movw	r2, #1364	; 0x554
  4039e8:	4293      	cmp	r3, r2
  4039ea:	d820      	bhi.n	403a2e <_malloc_r+0x512>
  4039ec:	0ca8      	lsrs	r0, r5, #18
  4039ee:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  4039f2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4039f6:	307c      	adds	r0, #124	; 0x7c
  4039f8:	e5b2      	b.n	403560 <_malloc_r+0x44>
  4039fa:	3210      	adds	r2, #16
  4039fc:	e6a4      	b.n	403748 <_malloc_r+0x22c>
  4039fe:	2a54      	cmp	r2, #84	; 0x54
  403a00:	d826      	bhi.n	403a50 <_malloc_r+0x534>
  403a02:	0b1a      	lsrs	r2, r3, #12
  403a04:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403a08:	0049      	lsls	r1, r1, #1
  403a0a:	326e      	adds	r2, #110	; 0x6e
  403a0c:	e748      	b.n	4038a0 <_malloc_r+0x384>
  403a0e:	68bc      	ldr	r4, [r7, #8]
  403a10:	6862      	ldr	r2, [r4, #4]
  403a12:	f022 0203 	bic.w	r2, r2, #3
  403a16:	e705      	b.n	403824 <_malloc_r+0x308>
  403a18:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403a1c:	2800      	cmp	r0, #0
  403a1e:	f47f aea8 	bne.w	403772 <_malloc_r+0x256>
  403a22:	4442      	add	r2, r8
  403a24:	68bb      	ldr	r3, [r7, #8]
  403a26:	f042 0201 	orr.w	r2, r2, #1
  403a2a:	605a      	str	r2, [r3, #4]
  403a2c:	e6ec      	b.n	403808 <_malloc_r+0x2ec>
  403a2e:	23fe      	movs	r3, #254	; 0xfe
  403a30:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  403a34:	207e      	movs	r0, #126	; 0x7e
  403a36:	e593      	b.n	403560 <_malloc_r+0x44>
  403a38:	2201      	movs	r2, #1
  403a3a:	f04f 0900 	mov.w	r9, #0
  403a3e:	e6c1      	b.n	4037c4 <_malloc_r+0x2a8>
  403a40:	f104 0108 	add.w	r1, r4, #8
  403a44:	4630      	mov	r0, r6
  403a46:	f7ff fa4f 	bl	402ee8 <_free_r>
  403a4a:	f8d9 1000 	ldr.w	r1, [r9]
  403a4e:	e6db      	b.n	403808 <_malloc_r+0x2ec>
  403a50:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403a54:	d805      	bhi.n	403a62 <_malloc_r+0x546>
  403a56:	0bda      	lsrs	r2, r3, #15
  403a58:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403a5c:	0049      	lsls	r1, r1, #1
  403a5e:	3277      	adds	r2, #119	; 0x77
  403a60:	e71e      	b.n	4038a0 <_malloc_r+0x384>
  403a62:	f240 5154 	movw	r1, #1364	; 0x554
  403a66:	428a      	cmp	r2, r1
  403a68:	d805      	bhi.n	403a76 <_malloc_r+0x55a>
  403a6a:	0c9a      	lsrs	r2, r3, #18
  403a6c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403a70:	0049      	lsls	r1, r1, #1
  403a72:	327c      	adds	r2, #124	; 0x7c
  403a74:	e714      	b.n	4038a0 <_malloc_r+0x384>
  403a76:	21fe      	movs	r1, #254	; 0xfe
  403a78:	227e      	movs	r2, #126	; 0x7e
  403a7a:	e711      	b.n	4038a0 <_malloc_r+0x384>
  403a7c:	687b      	ldr	r3, [r7, #4]
  403a7e:	e784      	b.n	40398a <_malloc_r+0x46e>
  403a80:	08e8      	lsrs	r0, r5, #3
  403a82:	1c43      	adds	r3, r0, #1
  403a84:	005b      	lsls	r3, r3, #1
  403a86:	e5f8      	b.n	40367a <_malloc_r+0x15e>
  403a88:	20400458 	.word	0x20400458
  403a8c:	00000000 	.word	0x00000000

00403a90 <memchr>:
  403a90:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403a94:	2a10      	cmp	r2, #16
  403a96:	db2b      	blt.n	403af0 <memchr+0x60>
  403a98:	f010 0f07 	tst.w	r0, #7
  403a9c:	d008      	beq.n	403ab0 <memchr+0x20>
  403a9e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403aa2:	3a01      	subs	r2, #1
  403aa4:	428b      	cmp	r3, r1
  403aa6:	d02d      	beq.n	403b04 <memchr+0x74>
  403aa8:	f010 0f07 	tst.w	r0, #7
  403aac:	b342      	cbz	r2, 403b00 <memchr+0x70>
  403aae:	d1f6      	bne.n	403a9e <memchr+0xe>
  403ab0:	b4f0      	push	{r4, r5, r6, r7}
  403ab2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403ab6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  403aba:	f022 0407 	bic.w	r4, r2, #7
  403abe:	f07f 0700 	mvns.w	r7, #0
  403ac2:	2300      	movs	r3, #0
  403ac4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403ac8:	3c08      	subs	r4, #8
  403aca:	ea85 0501 	eor.w	r5, r5, r1
  403ace:	ea86 0601 	eor.w	r6, r6, r1
  403ad2:	fa85 f547 	uadd8	r5, r5, r7
  403ad6:	faa3 f587 	sel	r5, r3, r7
  403ada:	fa86 f647 	uadd8	r6, r6, r7
  403ade:	faa5 f687 	sel	r6, r5, r7
  403ae2:	b98e      	cbnz	r6, 403b08 <memchr+0x78>
  403ae4:	d1ee      	bne.n	403ac4 <memchr+0x34>
  403ae6:	bcf0      	pop	{r4, r5, r6, r7}
  403ae8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403aec:	f002 0207 	and.w	r2, r2, #7
  403af0:	b132      	cbz	r2, 403b00 <memchr+0x70>
  403af2:	f810 3b01 	ldrb.w	r3, [r0], #1
  403af6:	3a01      	subs	r2, #1
  403af8:	ea83 0301 	eor.w	r3, r3, r1
  403afc:	b113      	cbz	r3, 403b04 <memchr+0x74>
  403afe:	d1f8      	bne.n	403af2 <memchr+0x62>
  403b00:	2000      	movs	r0, #0
  403b02:	4770      	bx	lr
  403b04:	3801      	subs	r0, #1
  403b06:	4770      	bx	lr
  403b08:	2d00      	cmp	r5, #0
  403b0a:	bf06      	itte	eq
  403b0c:	4635      	moveq	r5, r6
  403b0e:	3803      	subeq	r0, #3
  403b10:	3807      	subne	r0, #7
  403b12:	f015 0f01 	tst.w	r5, #1
  403b16:	d107      	bne.n	403b28 <memchr+0x98>
  403b18:	3001      	adds	r0, #1
  403b1a:	f415 7f80 	tst.w	r5, #256	; 0x100
  403b1e:	bf02      	ittt	eq
  403b20:	3001      	addeq	r0, #1
  403b22:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403b26:	3001      	addeq	r0, #1
  403b28:	bcf0      	pop	{r4, r5, r6, r7}
  403b2a:	3801      	subs	r0, #1
  403b2c:	4770      	bx	lr
  403b2e:	bf00      	nop

00403b30 <memcpy>:
  403b30:	4684      	mov	ip, r0
  403b32:	ea41 0300 	orr.w	r3, r1, r0
  403b36:	f013 0303 	ands.w	r3, r3, #3
  403b3a:	d16d      	bne.n	403c18 <memcpy+0xe8>
  403b3c:	3a40      	subs	r2, #64	; 0x40
  403b3e:	d341      	bcc.n	403bc4 <memcpy+0x94>
  403b40:	f851 3b04 	ldr.w	r3, [r1], #4
  403b44:	f840 3b04 	str.w	r3, [r0], #4
  403b48:	f851 3b04 	ldr.w	r3, [r1], #4
  403b4c:	f840 3b04 	str.w	r3, [r0], #4
  403b50:	f851 3b04 	ldr.w	r3, [r1], #4
  403b54:	f840 3b04 	str.w	r3, [r0], #4
  403b58:	f851 3b04 	ldr.w	r3, [r1], #4
  403b5c:	f840 3b04 	str.w	r3, [r0], #4
  403b60:	f851 3b04 	ldr.w	r3, [r1], #4
  403b64:	f840 3b04 	str.w	r3, [r0], #4
  403b68:	f851 3b04 	ldr.w	r3, [r1], #4
  403b6c:	f840 3b04 	str.w	r3, [r0], #4
  403b70:	f851 3b04 	ldr.w	r3, [r1], #4
  403b74:	f840 3b04 	str.w	r3, [r0], #4
  403b78:	f851 3b04 	ldr.w	r3, [r1], #4
  403b7c:	f840 3b04 	str.w	r3, [r0], #4
  403b80:	f851 3b04 	ldr.w	r3, [r1], #4
  403b84:	f840 3b04 	str.w	r3, [r0], #4
  403b88:	f851 3b04 	ldr.w	r3, [r1], #4
  403b8c:	f840 3b04 	str.w	r3, [r0], #4
  403b90:	f851 3b04 	ldr.w	r3, [r1], #4
  403b94:	f840 3b04 	str.w	r3, [r0], #4
  403b98:	f851 3b04 	ldr.w	r3, [r1], #4
  403b9c:	f840 3b04 	str.w	r3, [r0], #4
  403ba0:	f851 3b04 	ldr.w	r3, [r1], #4
  403ba4:	f840 3b04 	str.w	r3, [r0], #4
  403ba8:	f851 3b04 	ldr.w	r3, [r1], #4
  403bac:	f840 3b04 	str.w	r3, [r0], #4
  403bb0:	f851 3b04 	ldr.w	r3, [r1], #4
  403bb4:	f840 3b04 	str.w	r3, [r0], #4
  403bb8:	f851 3b04 	ldr.w	r3, [r1], #4
  403bbc:	f840 3b04 	str.w	r3, [r0], #4
  403bc0:	3a40      	subs	r2, #64	; 0x40
  403bc2:	d2bd      	bcs.n	403b40 <memcpy+0x10>
  403bc4:	3230      	adds	r2, #48	; 0x30
  403bc6:	d311      	bcc.n	403bec <memcpy+0xbc>
  403bc8:	f851 3b04 	ldr.w	r3, [r1], #4
  403bcc:	f840 3b04 	str.w	r3, [r0], #4
  403bd0:	f851 3b04 	ldr.w	r3, [r1], #4
  403bd4:	f840 3b04 	str.w	r3, [r0], #4
  403bd8:	f851 3b04 	ldr.w	r3, [r1], #4
  403bdc:	f840 3b04 	str.w	r3, [r0], #4
  403be0:	f851 3b04 	ldr.w	r3, [r1], #4
  403be4:	f840 3b04 	str.w	r3, [r0], #4
  403be8:	3a10      	subs	r2, #16
  403bea:	d2ed      	bcs.n	403bc8 <memcpy+0x98>
  403bec:	320c      	adds	r2, #12
  403bee:	d305      	bcc.n	403bfc <memcpy+0xcc>
  403bf0:	f851 3b04 	ldr.w	r3, [r1], #4
  403bf4:	f840 3b04 	str.w	r3, [r0], #4
  403bf8:	3a04      	subs	r2, #4
  403bfa:	d2f9      	bcs.n	403bf0 <memcpy+0xc0>
  403bfc:	3204      	adds	r2, #4
  403bfe:	d008      	beq.n	403c12 <memcpy+0xe2>
  403c00:	07d2      	lsls	r2, r2, #31
  403c02:	bf1c      	itt	ne
  403c04:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403c08:	f800 3b01 	strbne.w	r3, [r0], #1
  403c0c:	d301      	bcc.n	403c12 <memcpy+0xe2>
  403c0e:	880b      	ldrh	r3, [r1, #0]
  403c10:	8003      	strh	r3, [r0, #0]
  403c12:	4660      	mov	r0, ip
  403c14:	4770      	bx	lr
  403c16:	bf00      	nop
  403c18:	2a08      	cmp	r2, #8
  403c1a:	d313      	bcc.n	403c44 <memcpy+0x114>
  403c1c:	078b      	lsls	r3, r1, #30
  403c1e:	d08d      	beq.n	403b3c <memcpy+0xc>
  403c20:	f010 0303 	ands.w	r3, r0, #3
  403c24:	d08a      	beq.n	403b3c <memcpy+0xc>
  403c26:	f1c3 0304 	rsb	r3, r3, #4
  403c2a:	1ad2      	subs	r2, r2, r3
  403c2c:	07db      	lsls	r3, r3, #31
  403c2e:	bf1c      	itt	ne
  403c30:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403c34:	f800 3b01 	strbne.w	r3, [r0], #1
  403c38:	d380      	bcc.n	403b3c <memcpy+0xc>
  403c3a:	f831 3b02 	ldrh.w	r3, [r1], #2
  403c3e:	f820 3b02 	strh.w	r3, [r0], #2
  403c42:	e77b      	b.n	403b3c <memcpy+0xc>
  403c44:	3a04      	subs	r2, #4
  403c46:	d3d9      	bcc.n	403bfc <memcpy+0xcc>
  403c48:	3a01      	subs	r2, #1
  403c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
  403c4e:	f800 3b01 	strb.w	r3, [r0], #1
  403c52:	d2f9      	bcs.n	403c48 <memcpy+0x118>
  403c54:	780b      	ldrb	r3, [r1, #0]
  403c56:	7003      	strb	r3, [r0, #0]
  403c58:	784b      	ldrb	r3, [r1, #1]
  403c5a:	7043      	strb	r3, [r0, #1]
  403c5c:	788b      	ldrb	r3, [r1, #2]
  403c5e:	7083      	strb	r3, [r0, #2]
  403c60:	4660      	mov	r0, ip
  403c62:	4770      	bx	lr

00403c64 <memmove>:
  403c64:	4288      	cmp	r0, r1
  403c66:	b5f0      	push	{r4, r5, r6, r7, lr}
  403c68:	d90d      	bls.n	403c86 <memmove+0x22>
  403c6a:	188b      	adds	r3, r1, r2
  403c6c:	4298      	cmp	r0, r3
  403c6e:	d20a      	bcs.n	403c86 <memmove+0x22>
  403c70:	1881      	adds	r1, r0, r2
  403c72:	2a00      	cmp	r2, #0
  403c74:	d051      	beq.n	403d1a <memmove+0xb6>
  403c76:	1a9a      	subs	r2, r3, r2
  403c78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403c7c:	f801 4d01 	strb.w	r4, [r1, #-1]!
  403c80:	4293      	cmp	r3, r2
  403c82:	d1f9      	bne.n	403c78 <memmove+0x14>
  403c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403c86:	2a0f      	cmp	r2, #15
  403c88:	d948      	bls.n	403d1c <memmove+0xb8>
  403c8a:	ea41 0300 	orr.w	r3, r1, r0
  403c8e:	079b      	lsls	r3, r3, #30
  403c90:	d146      	bne.n	403d20 <memmove+0xbc>
  403c92:	f100 0410 	add.w	r4, r0, #16
  403c96:	f101 0310 	add.w	r3, r1, #16
  403c9a:	4615      	mov	r5, r2
  403c9c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403ca0:	f844 6c10 	str.w	r6, [r4, #-16]
  403ca4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403ca8:	f844 6c0c 	str.w	r6, [r4, #-12]
  403cac:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403cb0:	f844 6c08 	str.w	r6, [r4, #-8]
  403cb4:	3d10      	subs	r5, #16
  403cb6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  403cba:	f844 6c04 	str.w	r6, [r4, #-4]
  403cbe:	2d0f      	cmp	r5, #15
  403cc0:	f103 0310 	add.w	r3, r3, #16
  403cc4:	f104 0410 	add.w	r4, r4, #16
  403cc8:	d8e8      	bhi.n	403c9c <memmove+0x38>
  403cca:	f1a2 0310 	sub.w	r3, r2, #16
  403cce:	f023 030f 	bic.w	r3, r3, #15
  403cd2:	f002 0e0f 	and.w	lr, r2, #15
  403cd6:	3310      	adds	r3, #16
  403cd8:	f1be 0f03 	cmp.w	lr, #3
  403cdc:	4419      	add	r1, r3
  403cde:	4403      	add	r3, r0
  403ce0:	d921      	bls.n	403d26 <memmove+0xc2>
  403ce2:	1f1e      	subs	r6, r3, #4
  403ce4:	460d      	mov	r5, r1
  403ce6:	4674      	mov	r4, lr
  403ce8:	3c04      	subs	r4, #4
  403cea:	f855 7b04 	ldr.w	r7, [r5], #4
  403cee:	f846 7f04 	str.w	r7, [r6, #4]!
  403cf2:	2c03      	cmp	r4, #3
  403cf4:	d8f8      	bhi.n	403ce8 <memmove+0x84>
  403cf6:	f1ae 0404 	sub.w	r4, lr, #4
  403cfa:	f024 0403 	bic.w	r4, r4, #3
  403cfe:	3404      	adds	r4, #4
  403d00:	4423      	add	r3, r4
  403d02:	4421      	add	r1, r4
  403d04:	f002 0203 	and.w	r2, r2, #3
  403d08:	b162      	cbz	r2, 403d24 <memmove+0xc0>
  403d0a:	3b01      	subs	r3, #1
  403d0c:	440a      	add	r2, r1
  403d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403d12:	f803 4f01 	strb.w	r4, [r3, #1]!
  403d16:	428a      	cmp	r2, r1
  403d18:	d1f9      	bne.n	403d0e <memmove+0xaa>
  403d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403d1c:	4603      	mov	r3, r0
  403d1e:	e7f3      	b.n	403d08 <memmove+0xa4>
  403d20:	4603      	mov	r3, r0
  403d22:	e7f2      	b.n	403d0a <memmove+0xa6>
  403d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403d26:	4672      	mov	r2, lr
  403d28:	e7ee      	b.n	403d08 <memmove+0xa4>
  403d2a:	bf00      	nop

00403d2c <__malloc_lock>:
  403d2c:	4770      	bx	lr
  403d2e:	bf00      	nop

00403d30 <__malloc_unlock>:
  403d30:	4770      	bx	lr
  403d32:	bf00      	nop

00403d34 <_realloc_r>:
  403d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403d38:	4617      	mov	r7, r2
  403d3a:	b083      	sub	sp, #12
  403d3c:	2900      	cmp	r1, #0
  403d3e:	f000 80c1 	beq.w	403ec4 <_realloc_r+0x190>
  403d42:	460e      	mov	r6, r1
  403d44:	4681      	mov	r9, r0
  403d46:	f107 050b 	add.w	r5, r7, #11
  403d4a:	f7ff ffef 	bl	403d2c <__malloc_lock>
  403d4e:	f856 ec04 	ldr.w	lr, [r6, #-4]
  403d52:	2d16      	cmp	r5, #22
  403d54:	f02e 0403 	bic.w	r4, lr, #3
  403d58:	f1a6 0808 	sub.w	r8, r6, #8
  403d5c:	d840      	bhi.n	403de0 <_realloc_r+0xac>
  403d5e:	2210      	movs	r2, #16
  403d60:	4615      	mov	r5, r2
  403d62:	42af      	cmp	r7, r5
  403d64:	d841      	bhi.n	403dea <_realloc_r+0xb6>
  403d66:	4294      	cmp	r4, r2
  403d68:	da75      	bge.n	403e56 <_realloc_r+0x122>
  403d6a:	4bc9      	ldr	r3, [pc, #804]	; (404090 <_realloc_r+0x35c>)
  403d6c:	6899      	ldr	r1, [r3, #8]
  403d6e:	eb08 0004 	add.w	r0, r8, r4
  403d72:	4288      	cmp	r0, r1
  403d74:	6841      	ldr	r1, [r0, #4]
  403d76:	f000 80d9 	beq.w	403f2c <_realloc_r+0x1f8>
  403d7a:	f021 0301 	bic.w	r3, r1, #1
  403d7e:	4403      	add	r3, r0
  403d80:	685b      	ldr	r3, [r3, #4]
  403d82:	07db      	lsls	r3, r3, #31
  403d84:	d57d      	bpl.n	403e82 <_realloc_r+0x14e>
  403d86:	f01e 0f01 	tst.w	lr, #1
  403d8a:	d035      	beq.n	403df8 <_realloc_r+0xc4>
  403d8c:	4639      	mov	r1, r7
  403d8e:	4648      	mov	r0, r9
  403d90:	f7ff fbc4 	bl	40351c <_malloc_r>
  403d94:	4607      	mov	r7, r0
  403d96:	b1e0      	cbz	r0, 403dd2 <_realloc_r+0x9e>
  403d98:	f856 3c04 	ldr.w	r3, [r6, #-4]
  403d9c:	f023 0301 	bic.w	r3, r3, #1
  403da0:	4443      	add	r3, r8
  403da2:	f1a0 0208 	sub.w	r2, r0, #8
  403da6:	429a      	cmp	r2, r3
  403da8:	f000 8144 	beq.w	404034 <_realloc_r+0x300>
  403dac:	1f22      	subs	r2, r4, #4
  403dae:	2a24      	cmp	r2, #36	; 0x24
  403db0:	f200 8131 	bhi.w	404016 <_realloc_r+0x2e2>
  403db4:	2a13      	cmp	r2, #19
  403db6:	f200 8104 	bhi.w	403fc2 <_realloc_r+0x28e>
  403dba:	4603      	mov	r3, r0
  403dbc:	4632      	mov	r2, r6
  403dbe:	6811      	ldr	r1, [r2, #0]
  403dc0:	6019      	str	r1, [r3, #0]
  403dc2:	6851      	ldr	r1, [r2, #4]
  403dc4:	6059      	str	r1, [r3, #4]
  403dc6:	6892      	ldr	r2, [r2, #8]
  403dc8:	609a      	str	r2, [r3, #8]
  403dca:	4631      	mov	r1, r6
  403dcc:	4648      	mov	r0, r9
  403dce:	f7ff f88b 	bl	402ee8 <_free_r>
  403dd2:	4648      	mov	r0, r9
  403dd4:	f7ff ffac 	bl	403d30 <__malloc_unlock>
  403dd8:	4638      	mov	r0, r7
  403dda:	b003      	add	sp, #12
  403ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403de0:	f025 0507 	bic.w	r5, r5, #7
  403de4:	2d00      	cmp	r5, #0
  403de6:	462a      	mov	r2, r5
  403de8:	dabb      	bge.n	403d62 <_realloc_r+0x2e>
  403dea:	230c      	movs	r3, #12
  403dec:	2000      	movs	r0, #0
  403dee:	f8c9 3000 	str.w	r3, [r9]
  403df2:	b003      	add	sp, #12
  403df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403df8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  403dfc:	ebc3 0a08 	rsb	sl, r3, r8
  403e00:	f8da 3004 	ldr.w	r3, [sl, #4]
  403e04:	f023 0c03 	bic.w	ip, r3, #3
  403e08:	eb04 030c 	add.w	r3, r4, ip
  403e0c:	4293      	cmp	r3, r2
  403e0e:	dbbd      	blt.n	403d8c <_realloc_r+0x58>
  403e10:	4657      	mov	r7, sl
  403e12:	f8da 100c 	ldr.w	r1, [sl, #12]
  403e16:	f857 0f08 	ldr.w	r0, [r7, #8]!
  403e1a:	1f22      	subs	r2, r4, #4
  403e1c:	2a24      	cmp	r2, #36	; 0x24
  403e1e:	60c1      	str	r1, [r0, #12]
  403e20:	6088      	str	r0, [r1, #8]
  403e22:	f200 8117 	bhi.w	404054 <_realloc_r+0x320>
  403e26:	2a13      	cmp	r2, #19
  403e28:	f240 8112 	bls.w	404050 <_realloc_r+0x31c>
  403e2c:	6831      	ldr	r1, [r6, #0]
  403e2e:	f8ca 1008 	str.w	r1, [sl, #8]
  403e32:	6871      	ldr	r1, [r6, #4]
  403e34:	f8ca 100c 	str.w	r1, [sl, #12]
  403e38:	2a1b      	cmp	r2, #27
  403e3a:	f200 812b 	bhi.w	404094 <_realloc_r+0x360>
  403e3e:	3608      	adds	r6, #8
  403e40:	f10a 0210 	add.w	r2, sl, #16
  403e44:	6831      	ldr	r1, [r6, #0]
  403e46:	6011      	str	r1, [r2, #0]
  403e48:	6871      	ldr	r1, [r6, #4]
  403e4a:	6051      	str	r1, [r2, #4]
  403e4c:	68b1      	ldr	r1, [r6, #8]
  403e4e:	6091      	str	r1, [r2, #8]
  403e50:	463e      	mov	r6, r7
  403e52:	461c      	mov	r4, r3
  403e54:	46d0      	mov	r8, sl
  403e56:	1b63      	subs	r3, r4, r5
  403e58:	2b0f      	cmp	r3, #15
  403e5a:	d81d      	bhi.n	403e98 <_realloc_r+0x164>
  403e5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  403e60:	f003 0301 	and.w	r3, r3, #1
  403e64:	4323      	orrs	r3, r4
  403e66:	4444      	add	r4, r8
  403e68:	f8c8 3004 	str.w	r3, [r8, #4]
  403e6c:	6863      	ldr	r3, [r4, #4]
  403e6e:	f043 0301 	orr.w	r3, r3, #1
  403e72:	6063      	str	r3, [r4, #4]
  403e74:	4648      	mov	r0, r9
  403e76:	f7ff ff5b 	bl	403d30 <__malloc_unlock>
  403e7a:	4630      	mov	r0, r6
  403e7c:	b003      	add	sp, #12
  403e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e82:	f021 0103 	bic.w	r1, r1, #3
  403e86:	4421      	add	r1, r4
  403e88:	4291      	cmp	r1, r2
  403e8a:	db21      	blt.n	403ed0 <_realloc_r+0x19c>
  403e8c:	68c3      	ldr	r3, [r0, #12]
  403e8e:	6882      	ldr	r2, [r0, #8]
  403e90:	460c      	mov	r4, r1
  403e92:	60d3      	str	r3, [r2, #12]
  403e94:	609a      	str	r2, [r3, #8]
  403e96:	e7de      	b.n	403e56 <_realloc_r+0x122>
  403e98:	f8d8 2004 	ldr.w	r2, [r8, #4]
  403e9c:	eb08 0105 	add.w	r1, r8, r5
  403ea0:	f002 0201 	and.w	r2, r2, #1
  403ea4:	4315      	orrs	r5, r2
  403ea6:	f043 0201 	orr.w	r2, r3, #1
  403eaa:	440b      	add	r3, r1
  403eac:	f8c8 5004 	str.w	r5, [r8, #4]
  403eb0:	604a      	str	r2, [r1, #4]
  403eb2:	685a      	ldr	r2, [r3, #4]
  403eb4:	f042 0201 	orr.w	r2, r2, #1
  403eb8:	3108      	adds	r1, #8
  403eba:	605a      	str	r2, [r3, #4]
  403ebc:	4648      	mov	r0, r9
  403ebe:	f7ff f813 	bl	402ee8 <_free_r>
  403ec2:	e7d7      	b.n	403e74 <_realloc_r+0x140>
  403ec4:	4611      	mov	r1, r2
  403ec6:	b003      	add	sp, #12
  403ec8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403ecc:	f7ff bb26 	b.w	40351c <_malloc_r>
  403ed0:	f01e 0f01 	tst.w	lr, #1
  403ed4:	f47f af5a 	bne.w	403d8c <_realloc_r+0x58>
  403ed8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  403edc:	ebc3 0a08 	rsb	sl, r3, r8
  403ee0:	f8da 3004 	ldr.w	r3, [sl, #4]
  403ee4:	f023 0c03 	bic.w	ip, r3, #3
  403ee8:	eb01 0e0c 	add.w	lr, r1, ip
  403eec:	4596      	cmp	lr, r2
  403eee:	db8b      	blt.n	403e08 <_realloc_r+0xd4>
  403ef0:	68c3      	ldr	r3, [r0, #12]
  403ef2:	6882      	ldr	r2, [r0, #8]
  403ef4:	4657      	mov	r7, sl
  403ef6:	60d3      	str	r3, [r2, #12]
  403ef8:	609a      	str	r2, [r3, #8]
  403efa:	f857 1f08 	ldr.w	r1, [r7, #8]!
  403efe:	f8da 300c 	ldr.w	r3, [sl, #12]
  403f02:	60cb      	str	r3, [r1, #12]
  403f04:	1f22      	subs	r2, r4, #4
  403f06:	2a24      	cmp	r2, #36	; 0x24
  403f08:	6099      	str	r1, [r3, #8]
  403f0a:	f200 8099 	bhi.w	404040 <_realloc_r+0x30c>
  403f0e:	2a13      	cmp	r2, #19
  403f10:	d962      	bls.n	403fd8 <_realloc_r+0x2a4>
  403f12:	6833      	ldr	r3, [r6, #0]
  403f14:	f8ca 3008 	str.w	r3, [sl, #8]
  403f18:	6873      	ldr	r3, [r6, #4]
  403f1a:	f8ca 300c 	str.w	r3, [sl, #12]
  403f1e:	2a1b      	cmp	r2, #27
  403f20:	f200 80a0 	bhi.w	404064 <_realloc_r+0x330>
  403f24:	3608      	adds	r6, #8
  403f26:	f10a 0310 	add.w	r3, sl, #16
  403f2a:	e056      	b.n	403fda <_realloc_r+0x2a6>
  403f2c:	f021 0b03 	bic.w	fp, r1, #3
  403f30:	44a3      	add	fp, r4
  403f32:	f105 0010 	add.w	r0, r5, #16
  403f36:	4583      	cmp	fp, r0
  403f38:	da59      	bge.n	403fee <_realloc_r+0x2ba>
  403f3a:	f01e 0f01 	tst.w	lr, #1
  403f3e:	f47f af25 	bne.w	403d8c <_realloc_r+0x58>
  403f42:	f856 1c08 	ldr.w	r1, [r6, #-8]
  403f46:	ebc1 0a08 	rsb	sl, r1, r8
  403f4a:	f8da 1004 	ldr.w	r1, [sl, #4]
  403f4e:	f021 0c03 	bic.w	ip, r1, #3
  403f52:	44e3      	add	fp, ip
  403f54:	4558      	cmp	r0, fp
  403f56:	f73f af57 	bgt.w	403e08 <_realloc_r+0xd4>
  403f5a:	4657      	mov	r7, sl
  403f5c:	f8da 100c 	ldr.w	r1, [sl, #12]
  403f60:	f857 0f08 	ldr.w	r0, [r7, #8]!
  403f64:	1f22      	subs	r2, r4, #4
  403f66:	2a24      	cmp	r2, #36	; 0x24
  403f68:	60c1      	str	r1, [r0, #12]
  403f6a:	6088      	str	r0, [r1, #8]
  403f6c:	f200 80b4 	bhi.w	4040d8 <_realloc_r+0x3a4>
  403f70:	2a13      	cmp	r2, #19
  403f72:	f240 80a5 	bls.w	4040c0 <_realloc_r+0x38c>
  403f76:	6831      	ldr	r1, [r6, #0]
  403f78:	f8ca 1008 	str.w	r1, [sl, #8]
  403f7c:	6871      	ldr	r1, [r6, #4]
  403f7e:	f8ca 100c 	str.w	r1, [sl, #12]
  403f82:	2a1b      	cmp	r2, #27
  403f84:	f200 80af 	bhi.w	4040e6 <_realloc_r+0x3b2>
  403f88:	3608      	adds	r6, #8
  403f8a:	f10a 0210 	add.w	r2, sl, #16
  403f8e:	6831      	ldr	r1, [r6, #0]
  403f90:	6011      	str	r1, [r2, #0]
  403f92:	6871      	ldr	r1, [r6, #4]
  403f94:	6051      	str	r1, [r2, #4]
  403f96:	68b1      	ldr	r1, [r6, #8]
  403f98:	6091      	str	r1, [r2, #8]
  403f9a:	eb0a 0105 	add.w	r1, sl, r5
  403f9e:	ebc5 020b 	rsb	r2, r5, fp
  403fa2:	f042 0201 	orr.w	r2, r2, #1
  403fa6:	6099      	str	r1, [r3, #8]
  403fa8:	604a      	str	r2, [r1, #4]
  403faa:	f8da 3004 	ldr.w	r3, [sl, #4]
  403fae:	f003 0301 	and.w	r3, r3, #1
  403fb2:	431d      	orrs	r5, r3
  403fb4:	4648      	mov	r0, r9
  403fb6:	f8ca 5004 	str.w	r5, [sl, #4]
  403fba:	f7ff feb9 	bl	403d30 <__malloc_unlock>
  403fbe:	4638      	mov	r0, r7
  403fc0:	e75c      	b.n	403e7c <_realloc_r+0x148>
  403fc2:	6833      	ldr	r3, [r6, #0]
  403fc4:	6003      	str	r3, [r0, #0]
  403fc6:	6873      	ldr	r3, [r6, #4]
  403fc8:	6043      	str	r3, [r0, #4]
  403fca:	2a1b      	cmp	r2, #27
  403fcc:	d827      	bhi.n	40401e <_realloc_r+0x2ea>
  403fce:	f100 0308 	add.w	r3, r0, #8
  403fd2:	f106 0208 	add.w	r2, r6, #8
  403fd6:	e6f2      	b.n	403dbe <_realloc_r+0x8a>
  403fd8:	463b      	mov	r3, r7
  403fda:	6832      	ldr	r2, [r6, #0]
  403fdc:	601a      	str	r2, [r3, #0]
  403fde:	6872      	ldr	r2, [r6, #4]
  403fe0:	605a      	str	r2, [r3, #4]
  403fe2:	68b2      	ldr	r2, [r6, #8]
  403fe4:	609a      	str	r2, [r3, #8]
  403fe6:	463e      	mov	r6, r7
  403fe8:	4674      	mov	r4, lr
  403fea:	46d0      	mov	r8, sl
  403fec:	e733      	b.n	403e56 <_realloc_r+0x122>
  403fee:	eb08 0105 	add.w	r1, r8, r5
  403ff2:	ebc5 0b0b 	rsb	fp, r5, fp
  403ff6:	f04b 0201 	orr.w	r2, fp, #1
  403ffa:	6099      	str	r1, [r3, #8]
  403ffc:	604a      	str	r2, [r1, #4]
  403ffe:	f856 3c04 	ldr.w	r3, [r6, #-4]
  404002:	f003 0301 	and.w	r3, r3, #1
  404006:	431d      	orrs	r5, r3
  404008:	4648      	mov	r0, r9
  40400a:	f846 5c04 	str.w	r5, [r6, #-4]
  40400e:	f7ff fe8f 	bl	403d30 <__malloc_unlock>
  404012:	4630      	mov	r0, r6
  404014:	e732      	b.n	403e7c <_realloc_r+0x148>
  404016:	4631      	mov	r1, r6
  404018:	f7ff fe24 	bl	403c64 <memmove>
  40401c:	e6d5      	b.n	403dca <_realloc_r+0x96>
  40401e:	68b3      	ldr	r3, [r6, #8]
  404020:	6083      	str	r3, [r0, #8]
  404022:	68f3      	ldr	r3, [r6, #12]
  404024:	60c3      	str	r3, [r0, #12]
  404026:	2a24      	cmp	r2, #36	; 0x24
  404028:	d028      	beq.n	40407c <_realloc_r+0x348>
  40402a:	f100 0310 	add.w	r3, r0, #16
  40402e:	f106 0210 	add.w	r2, r6, #16
  404032:	e6c4      	b.n	403dbe <_realloc_r+0x8a>
  404034:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404038:	f023 0303 	bic.w	r3, r3, #3
  40403c:	441c      	add	r4, r3
  40403e:	e70a      	b.n	403e56 <_realloc_r+0x122>
  404040:	4631      	mov	r1, r6
  404042:	4638      	mov	r0, r7
  404044:	4674      	mov	r4, lr
  404046:	46d0      	mov	r8, sl
  404048:	f7ff fe0c 	bl	403c64 <memmove>
  40404c:	463e      	mov	r6, r7
  40404e:	e702      	b.n	403e56 <_realloc_r+0x122>
  404050:	463a      	mov	r2, r7
  404052:	e6f7      	b.n	403e44 <_realloc_r+0x110>
  404054:	4631      	mov	r1, r6
  404056:	4638      	mov	r0, r7
  404058:	461c      	mov	r4, r3
  40405a:	46d0      	mov	r8, sl
  40405c:	f7ff fe02 	bl	403c64 <memmove>
  404060:	463e      	mov	r6, r7
  404062:	e6f8      	b.n	403e56 <_realloc_r+0x122>
  404064:	68b3      	ldr	r3, [r6, #8]
  404066:	f8ca 3010 	str.w	r3, [sl, #16]
  40406a:	68f3      	ldr	r3, [r6, #12]
  40406c:	f8ca 3014 	str.w	r3, [sl, #20]
  404070:	2a24      	cmp	r2, #36	; 0x24
  404072:	d01b      	beq.n	4040ac <_realloc_r+0x378>
  404074:	3610      	adds	r6, #16
  404076:	f10a 0318 	add.w	r3, sl, #24
  40407a:	e7ae      	b.n	403fda <_realloc_r+0x2a6>
  40407c:	6933      	ldr	r3, [r6, #16]
  40407e:	6103      	str	r3, [r0, #16]
  404080:	6973      	ldr	r3, [r6, #20]
  404082:	6143      	str	r3, [r0, #20]
  404084:	f106 0218 	add.w	r2, r6, #24
  404088:	f100 0318 	add.w	r3, r0, #24
  40408c:	e697      	b.n	403dbe <_realloc_r+0x8a>
  40408e:	bf00      	nop
  404090:	20400458 	.word	0x20400458
  404094:	68b1      	ldr	r1, [r6, #8]
  404096:	f8ca 1010 	str.w	r1, [sl, #16]
  40409a:	68f1      	ldr	r1, [r6, #12]
  40409c:	f8ca 1014 	str.w	r1, [sl, #20]
  4040a0:	2a24      	cmp	r2, #36	; 0x24
  4040a2:	d00f      	beq.n	4040c4 <_realloc_r+0x390>
  4040a4:	3610      	adds	r6, #16
  4040a6:	f10a 0218 	add.w	r2, sl, #24
  4040aa:	e6cb      	b.n	403e44 <_realloc_r+0x110>
  4040ac:	6933      	ldr	r3, [r6, #16]
  4040ae:	f8ca 3018 	str.w	r3, [sl, #24]
  4040b2:	6973      	ldr	r3, [r6, #20]
  4040b4:	f8ca 301c 	str.w	r3, [sl, #28]
  4040b8:	3618      	adds	r6, #24
  4040ba:	f10a 0320 	add.w	r3, sl, #32
  4040be:	e78c      	b.n	403fda <_realloc_r+0x2a6>
  4040c0:	463a      	mov	r2, r7
  4040c2:	e764      	b.n	403f8e <_realloc_r+0x25a>
  4040c4:	6932      	ldr	r2, [r6, #16]
  4040c6:	f8ca 2018 	str.w	r2, [sl, #24]
  4040ca:	6972      	ldr	r2, [r6, #20]
  4040cc:	f8ca 201c 	str.w	r2, [sl, #28]
  4040d0:	3618      	adds	r6, #24
  4040d2:	f10a 0220 	add.w	r2, sl, #32
  4040d6:	e6b5      	b.n	403e44 <_realloc_r+0x110>
  4040d8:	4631      	mov	r1, r6
  4040da:	4638      	mov	r0, r7
  4040dc:	9301      	str	r3, [sp, #4]
  4040de:	f7ff fdc1 	bl	403c64 <memmove>
  4040e2:	9b01      	ldr	r3, [sp, #4]
  4040e4:	e759      	b.n	403f9a <_realloc_r+0x266>
  4040e6:	68b1      	ldr	r1, [r6, #8]
  4040e8:	f8ca 1010 	str.w	r1, [sl, #16]
  4040ec:	68f1      	ldr	r1, [r6, #12]
  4040ee:	f8ca 1014 	str.w	r1, [sl, #20]
  4040f2:	2a24      	cmp	r2, #36	; 0x24
  4040f4:	d003      	beq.n	4040fe <_realloc_r+0x3ca>
  4040f6:	3610      	adds	r6, #16
  4040f8:	f10a 0218 	add.w	r2, sl, #24
  4040fc:	e747      	b.n	403f8e <_realloc_r+0x25a>
  4040fe:	6932      	ldr	r2, [r6, #16]
  404100:	f8ca 2018 	str.w	r2, [sl, #24]
  404104:	6972      	ldr	r2, [r6, #20]
  404106:	f8ca 201c 	str.w	r2, [sl, #28]
  40410a:	3618      	adds	r6, #24
  40410c:	f10a 0220 	add.w	r2, sl, #32
  404110:	e73d      	b.n	403f8e <_realloc_r+0x25a>
  404112:	bf00      	nop

00404114 <_sbrk_r>:
  404114:	b538      	push	{r3, r4, r5, lr}
  404116:	4c07      	ldr	r4, [pc, #28]	; (404134 <_sbrk_r+0x20>)
  404118:	2300      	movs	r3, #0
  40411a:	4605      	mov	r5, r0
  40411c:	4608      	mov	r0, r1
  40411e:	6023      	str	r3, [r4, #0]
  404120:	f7fd f8a6 	bl	401270 <_sbrk>
  404124:	1c43      	adds	r3, r0, #1
  404126:	d000      	beq.n	40412a <_sbrk_r+0x16>
  404128:	bd38      	pop	{r3, r4, r5, pc}
  40412a:	6823      	ldr	r3, [r4, #0]
  40412c:	2b00      	cmp	r3, #0
  40412e:	d0fb      	beq.n	404128 <_sbrk_r+0x14>
  404130:	602b      	str	r3, [r5, #0]
  404132:	bd38      	pop	{r3, r4, r5, pc}
  404134:	204009d0 	.word	0x204009d0

00404138 <__sread>:
  404138:	b510      	push	{r4, lr}
  40413a:	460c      	mov	r4, r1
  40413c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404140:	f000 f9c4 	bl	4044cc <_read_r>
  404144:	2800      	cmp	r0, #0
  404146:	db03      	blt.n	404150 <__sread+0x18>
  404148:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40414a:	4403      	add	r3, r0
  40414c:	6523      	str	r3, [r4, #80]	; 0x50
  40414e:	bd10      	pop	{r4, pc}
  404150:	89a3      	ldrh	r3, [r4, #12]
  404152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404156:	81a3      	strh	r3, [r4, #12]
  404158:	bd10      	pop	{r4, pc}
  40415a:	bf00      	nop

0040415c <__swrite>:
  40415c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404160:	4616      	mov	r6, r2
  404162:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  404166:	461f      	mov	r7, r3
  404168:	05d3      	lsls	r3, r2, #23
  40416a:	460c      	mov	r4, r1
  40416c:	4605      	mov	r5, r0
  40416e:	d507      	bpl.n	404180 <__swrite+0x24>
  404170:	2200      	movs	r2, #0
  404172:	2302      	movs	r3, #2
  404174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404178:	f000 f992 	bl	4044a0 <_lseek_r>
  40417c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404184:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404188:	81a2      	strh	r2, [r4, #12]
  40418a:	463b      	mov	r3, r7
  40418c:	4632      	mov	r2, r6
  40418e:	4628      	mov	r0, r5
  404190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404194:	f000 b8a2 	b.w	4042dc <_write_r>

00404198 <__sseek>:
  404198:	b510      	push	{r4, lr}
  40419a:	460c      	mov	r4, r1
  40419c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4041a0:	f000 f97e 	bl	4044a0 <_lseek_r>
  4041a4:	89a3      	ldrh	r3, [r4, #12]
  4041a6:	1c42      	adds	r2, r0, #1
  4041a8:	bf0e      	itee	eq
  4041aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4041ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4041b2:	6520      	strne	r0, [r4, #80]	; 0x50
  4041b4:	81a3      	strh	r3, [r4, #12]
  4041b6:	bd10      	pop	{r4, pc}

004041b8 <__sclose>:
  4041b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4041bc:	f000 b8f6 	b.w	4043ac <_close_r>

004041c0 <__swbuf_r>:
  4041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4041c2:	460e      	mov	r6, r1
  4041c4:	4614      	mov	r4, r2
  4041c6:	4607      	mov	r7, r0
  4041c8:	b110      	cbz	r0, 4041d0 <__swbuf_r+0x10>
  4041ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4041cc:	2b00      	cmp	r3, #0
  4041ce:	d04a      	beq.n	404266 <__swbuf_r+0xa6>
  4041d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4041d4:	69a3      	ldr	r3, [r4, #24]
  4041d6:	60a3      	str	r3, [r4, #8]
  4041d8:	b291      	uxth	r1, r2
  4041da:	0708      	lsls	r0, r1, #28
  4041dc:	d538      	bpl.n	404250 <__swbuf_r+0x90>
  4041de:	6923      	ldr	r3, [r4, #16]
  4041e0:	2b00      	cmp	r3, #0
  4041e2:	d035      	beq.n	404250 <__swbuf_r+0x90>
  4041e4:	0489      	lsls	r1, r1, #18
  4041e6:	b2f5      	uxtb	r5, r6
  4041e8:	d515      	bpl.n	404216 <__swbuf_r+0x56>
  4041ea:	6822      	ldr	r2, [r4, #0]
  4041ec:	6961      	ldr	r1, [r4, #20]
  4041ee:	1ad3      	subs	r3, r2, r3
  4041f0:	428b      	cmp	r3, r1
  4041f2:	da1c      	bge.n	40422e <__swbuf_r+0x6e>
  4041f4:	3301      	adds	r3, #1
  4041f6:	68a1      	ldr	r1, [r4, #8]
  4041f8:	1c50      	adds	r0, r2, #1
  4041fa:	3901      	subs	r1, #1
  4041fc:	60a1      	str	r1, [r4, #8]
  4041fe:	6020      	str	r0, [r4, #0]
  404200:	7016      	strb	r6, [r2, #0]
  404202:	6962      	ldr	r2, [r4, #20]
  404204:	429a      	cmp	r2, r3
  404206:	d01a      	beq.n	40423e <__swbuf_r+0x7e>
  404208:	89a3      	ldrh	r3, [r4, #12]
  40420a:	07db      	lsls	r3, r3, #31
  40420c:	d501      	bpl.n	404212 <__swbuf_r+0x52>
  40420e:	2d0a      	cmp	r5, #10
  404210:	d015      	beq.n	40423e <__swbuf_r+0x7e>
  404212:	4628      	mov	r0, r5
  404214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404216:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40421c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  404220:	81a2      	strh	r2, [r4, #12]
  404222:	6822      	ldr	r2, [r4, #0]
  404224:	6661      	str	r1, [r4, #100]	; 0x64
  404226:	6961      	ldr	r1, [r4, #20]
  404228:	1ad3      	subs	r3, r2, r3
  40422a:	428b      	cmp	r3, r1
  40422c:	dbe2      	blt.n	4041f4 <__swbuf_r+0x34>
  40422e:	4621      	mov	r1, r4
  404230:	4638      	mov	r0, r7
  404232:	f7fe fcfb 	bl	402c2c <_fflush_r>
  404236:	b940      	cbnz	r0, 40424a <__swbuf_r+0x8a>
  404238:	6822      	ldr	r2, [r4, #0]
  40423a:	2301      	movs	r3, #1
  40423c:	e7db      	b.n	4041f6 <__swbuf_r+0x36>
  40423e:	4621      	mov	r1, r4
  404240:	4638      	mov	r0, r7
  404242:	f7fe fcf3 	bl	402c2c <_fflush_r>
  404246:	2800      	cmp	r0, #0
  404248:	d0e3      	beq.n	404212 <__swbuf_r+0x52>
  40424a:	f04f 30ff 	mov.w	r0, #4294967295
  40424e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404250:	4621      	mov	r1, r4
  404252:	4638      	mov	r0, r7
  404254:	f7fe fbd2 	bl	4029fc <__swsetup_r>
  404258:	2800      	cmp	r0, #0
  40425a:	d1f6      	bne.n	40424a <__swbuf_r+0x8a>
  40425c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404260:	6923      	ldr	r3, [r4, #16]
  404262:	b291      	uxth	r1, r2
  404264:	e7be      	b.n	4041e4 <__swbuf_r+0x24>
  404266:	f7fe fd75 	bl	402d54 <__sinit>
  40426a:	e7b1      	b.n	4041d0 <__swbuf_r+0x10>

0040426c <_wcrtomb_r>:
  40426c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404270:	4605      	mov	r5, r0
  404272:	b086      	sub	sp, #24
  404274:	461e      	mov	r6, r3
  404276:	460c      	mov	r4, r1
  404278:	b1a1      	cbz	r1, 4042a4 <_wcrtomb_r+0x38>
  40427a:	4b10      	ldr	r3, [pc, #64]	; (4042bc <_wcrtomb_r+0x50>)
  40427c:	4617      	mov	r7, r2
  40427e:	f8d3 8000 	ldr.w	r8, [r3]
  404282:	f7ff f8c5 	bl	403410 <__locale_charset>
  404286:	9600      	str	r6, [sp, #0]
  404288:	4603      	mov	r3, r0
  40428a:	463a      	mov	r2, r7
  40428c:	4621      	mov	r1, r4
  40428e:	4628      	mov	r0, r5
  404290:	47c0      	blx	r8
  404292:	1c43      	adds	r3, r0, #1
  404294:	d103      	bne.n	40429e <_wcrtomb_r+0x32>
  404296:	2200      	movs	r2, #0
  404298:	238a      	movs	r3, #138	; 0x8a
  40429a:	6032      	str	r2, [r6, #0]
  40429c:	602b      	str	r3, [r5, #0]
  40429e:	b006      	add	sp, #24
  4042a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4042a4:	4b05      	ldr	r3, [pc, #20]	; (4042bc <_wcrtomb_r+0x50>)
  4042a6:	681f      	ldr	r7, [r3, #0]
  4042a8:	f7ff f8b2 	bl	403410 <__locale_charset>
  4042ac:	9600      	str	r6, [sp, #0]
  4042ae:	4603      	mov	r3, r0
  4042b0:	4622      	mov	r2, r4
  4042b2:	a903      	add	r1, sp, #12
  4042b4:	4628      	mov	r0, r5
  4042b6:	47b8      	blx	r7
  4042b8:	e7eb      	b.n	404292 <_wcrtomb_r+0x26>
  4042ba:	bf00      	nop
  4042bc:	20400868 	.word	0x20400868

004042c0 <__ascii_wctomb>:
  4042c0:	b121      	cbz	r1, 4042cc <__ascii_wctomb+0xc>
  4042c2:	2aff      	cmp	r2, #255	; 0xff
  4042c4:	d804      	bhi.n	4042d0 <__ascii_wctomb+0x10>
  4042c6:	700a      	strb	r2, [r1, #0]
  4042c8:	2001      	movs	r0, #1
  4042ca:	4770      	bx	lr
  4042cc:	4608      	mov	r0, r1
  4042ce:	4770      	bx	lr
  4042d0:	238a      	movs	r3, #138	; 0x8a
  4042d2:	6003      	str	r3, [r0, #0]
  4042d4:	f04f 30ff 	mov.w	r0, #4294967295
  4042d8:	4770      	bx	lr
  4042da:	bf00      	nop

004042dc <_write_r>:
  4042dc:	b570      	push	{r4, r5, r6, lr}
  4042de:	460d      	mov	r5, r1
  4042e0:	4c08      	ldr	r4, [pc, #32]	; (404304 <_write_r+0x28>)
  4042e2:	4611      	mov	r1, r2
  4042e4:	4606      	mov	r6, r0
  4042e6:	461a      	mov	r2, r3
  4042e8:	4628      	mov	r0, r5
  4042ea:	2300      	movs	r3, #0
  4042ec:	6023      	str	r3, [r4, #0]
  4042ee:	f7fc fa5d 	bl	4007ac <_write>
  4042f2:	1c43      	adds	r3, r0, #1
  4042f4:	d000      	beq.n	4042f8 <_write_r+0x1c>
  4042f6:	bd70      	pop	{r4, r5, r6, pc}
  4042f8:	6823      	ldr	r3, [r4, #0]
  4042fa:	2b00      	cmp	r3, #0
  4042fc:	d0fb      	beq.n	4042f6 <_write_r+0x1a>
  4042fe:	6033      	str	r3, [r6, #0]
  404300:	bd70      	pop	{r4, r5, r6, pc}
  404302:	bf00      	nop
  404304:	204009d0 	.word	0x204009d0

00404308 <__register_exitproc>:
  404308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40430c:	4c25      	ldr	r4, [pc, #148]	; (4043a4 <__register_exitproc+0x9c>)
  40430e:	6825      	ldr	r5, [r4, #0]
  404310:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  404314:	4606      	mov	r6, r0
  404316:	4688      	mov	r8, r1
  404318:	4692      	mov	sl, r2
  40431a:	4699      	mov	r9, r3
  40431c:	b3c4      	cbz	r4, 404390 <__register_exitproc+0x88>
  40431e:	6860      	ldr	r0, [r4, #4]
  404320:	281f      	cmp	r0, #31
  404322:	dc17      	bgt.n	404354 <__register_exitproc+0x4c>
  404324:	1c43      	adds	r3, r0, #1
  404326:	b176      	cbz	r6, 404346 <__register_exitproc+0x3e>
  404328:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40432c:	2201      	movs	r2, #1
  40432e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  404332:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  404336:	4082      	lsls	r2, r0
  404338:	4311      	orrs	r1, r2
  40433a:	2e02      	cmp	r6, #2
  40433c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  404340:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  404344:	d01e      	beq.n	404384 <__register_exitproc+0x7c>
  404346:	3002      	adds	r0, #2
  404348:	6063      	str	r3, [r4, #4]
  40434a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40434e:	2000      	movs	r0, #0
  404350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404354:	4b14      	ldr	r3, [pc, #80]	; (4043a8 <__register_exitproc+0xa0>)
  404356:	b303      	cbz	r3, 40439a <__register_exitproc+0x92>
  404358:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40435c:	f7ff f8d6 	bl	40350c <malloc>
  404360:	4604      	mov	r4, r0
  404362:	b1d0      	cbz	r0, 40439a <__register_exitproc+0x92>
  404364:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  404368:	2700      	movs	r7, #0
  40436a:	e880 0088 	stmia.w	r0, {r3, r7}
  40436e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404372:	4638      	mov	r0, r7
  404374:	2301      	movs	r3, #1
  404376:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40437a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40437e:	2e00      	cmp	r6, #0
  404380:	d0e1      	beq.n	404346 <__register_exitproc+0x3e>
  404382:	e7d1      	b.n	404328 <__register_exitproc+0x20>
  404384:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  404388:	430a      	orrs	r2, r1
  40438a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40438e:	e7da      	b.n	404346 <__register_exitproc+0x3e>
  404390:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  404394:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404398:	e7c1      	b.n	40431e <__register_exitproc+0x16>
  40439a:	f04f 30ff 	mov.w	r0, #4294967295
  40439e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4043a2:	bf00      	nop
  4043a4:	004048a4 	.word	0x004048a4
  4043a8:	0040350d 	.word	0x0040350d

004043ac <_close_r>:
  4043ac:	b538      	push	{r3, r4, r5, lr}
  4043ae:	4c07      	ldr	r4, [pc, #28]	; (4043cc <_close_r+0x20>)
  4043b0:	2300      	movs	r3, #0
  4043b2:	4605      	mov	r5, r0
  4043b4:	4608      	mov	r0, r1
  4043b6:	6023      	str	r3, [r4, #0]
  4043b8:	f7fc ff74 	bl	4012a4 <_close>
  4043bc:	1c43      	adds	r3, r0, #1
  4043be:	d000      	beq.n	4043c2 <_close_r+0x16>
  4043c0:	bd38      	pop	{r3, r4, r5, pc}
  4043c2:	6823      	ldr	r3, [r4, #0]
  4043c4:	2b00      	cmp	r3, #0
  4043c6:	d0fb      	beq.n	4043c0 <_close_r+0x14>
  4043c8:	602b      	str	r3, [r5, #0]
  4043ca:	bd38      	pop	{r3, r4, r5, pc}
  4043cc:	204009d0 	.word	0x204009d0

004043d0 <_fclose_r>:
  4043d0:	2900      	cmp	r1, #0
  4043d2:	d03d      	beq.n	404450 <_fclose_r+0x80>
  4043d4:	b570      	push	{r4, r5, r6, lr}
  4043d6:	4605      	mov	r5, r0
  4043d8:	460c      	mov	r4, r1
  4043da:	b108      	cbz	r0, 4043e0 <_fclose_r+0x10>
  4043dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4043de:	b37b      	cbz	r3, 404440 <_fclose_r+0x70>
  4043e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4043e4:	b90b      	cbnz	r3, 4043ea <_fclose_r+0x1a>
  4043e6:	2000      	movs	r0, #0
  4043e8:	bd70      	pop	{r4, r5, r6, pc}
  4043ea:	4621      	mov	r1, r4
  4043ec:	4628      	mov	r0, r5
  4043ee:	f7fe fb79 	bl	402ae4 <__sflush_r>
  4043f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4043f4:	4606      	mov	r6, r0
  4043f6:	b133      	cbz	r3, 404406 <_fclose_r+0x36>
  4043f8:	69e1      	ldr	r1, [r4, #28]
  4043fa:	4628      	mov	r0, r5
  4043fc:	4798      	blx	r3
  4043fe:	2800      	cmp	r0, #0
  404400:	bfb8      	it	lt
  404402:	f04f 36ff 	movlt.w	r6, #4294967295
  404406:	89a3      	ldrh	r3, [r4, #12]
  404408:	061b      	lsls	r3, r3, #24
  40440a:	d41c      	bmi.n	404446 <_fclose_r+0x76>
  40440c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40440e:	b141      	cbz	r1, 404422 <_fclose_r+0x52>
  404410:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404414:	4299      	cmp	r1, r3
  404416:	d002      	beq.n	40441e <_fclose_r+0x4e>
  404418:	4628      	mov	r0, r5
  40441a:	f7fe fd65 	bl	402ee8 <_free_r>
  40441e:	2300      	movs	r3, #0
  404420:	6323      	str	r3, [r4, #48]	; 0x30
  404422:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404424:	b121      	cbz	r1, 404430 <_fclose_r+0x60>
  404426:	4628      	mov	r0, r5
  404428:	f7fe fd5e 	bl	402ee8 <_free_r>
  40442c:	2300      	movs	r3, #0
  40442e:	6463      	str	r3, [r4, #68]	; 0x44
  404430:	f7fe fc96 	bl	402d60 <__sfp_lock_acquire>
  404434:	2300      	movs	r3, #0
  404436:	81a3      	strh	r3, [r4, #12]
  404438:	f7fe fc94 	bl	402d64 <__sfp_lock_release>
  40443c:	4630      	mov	r0, r6
  40443e:	bd70      	pop	{r4, r5, r6, pc}
  404440:	f7fe fc88 	bl	402d54 <__sinit>
  404444:	e7cc      	b.n	4043e0 <_fclose_r+0x10>
  404446:	6921      	ldr	r1, [r4, #16]
  404448:	4628      	mov	r0, r5
  40444a:	f7fe fd4d 	bl	402ee8 <_free_r>
  40444e:	e7dd      	b.n	40440c <_fclose_r+0x3c>
  404450:	2000      	movs	r0, #0
  404452:	4770      	bx	lr

00404454 <_fstat_r>:
  404454:	b538      	push	{r3, r4, r5, lr}
  404456:	460b      	mov	r3, r1
  404458:	4c07      	ldr	r4, [pc, #28]	; (404478 <_fstat_r+0x24>)
  40445a:	4605      	mov	r5, r0
  40445c:	4611      	mov	r1, r2
  40445e:	4618      	mov	r0, r3
  404460:	2300      	movs	r3, #0
  404462:	6023      	str	r3, [r4, #0]
  404464:	f7fc ff22 	bl	4012ac <_fstat>
  404468:	1c43      	adds	r3, r0, #1
  40446a:	d000      	beq.n	40446e <_fstat_r+0x1a>
  40446c:	bd38      	pop	{r3, r4, r5, pc}
  40446e:	6823      	ldr	r3, [r4, #0]
  404470:	2b00      	cmp	r3, #0
  404472:	d0fb      	beq.n	40446c <_fstat_r+0x18>
  404474:	602b      	str	r3, [r5, #0]
  404476:	bd38      	pop	{r3, r4, r5, pc}
  404478:	204009d0 	.word	0x204009d0

0040447c <_isatty_r>:
  40447c:	b538      	push	{r3, r4, r5, lr}
  40447e:	4c07      	ldr	r4, [pc, #28]	; (40449c <_isatty_r+0x20>)
  404480:	2300      	movs	r3, #0
  404482:	4605      	mov	r5, r0
  404484:	4608      	mov	r0, r1
  404486:	6023      	str	r3, [r4, #0]
  404488:	f7fc ff16 	bl	4012b8 <_isatty>
  40448c:	1c43      	adds	r3, r0, #1
  40448e:	d000      	beq.n	404492 <_isatty_r+0x16>
  404490:	bd38      	pop	{r3, r4, r5, pc}
  404492:	6823      	ldr	r3, [r4, #0]
  404494:	2b00      	cmp	r3, #0
  404496:	d0fb      	beq.n	404490 <_isatty_r+0x14>
  404498:	602b      	str	r3, [r5, #0]
  40449a:	bd38      	pop	{r3, r4, r5, pc}
  40449c:	204009d0 	.word	0x204009d0

004044a0 <_lseek_r>:
  4044a0:	b570      	push	{r4, r5, r6, lr}
  4044a2:	460d      	mov	r5, r1
  4044a4:	4c08      	ldr	r4, [pc, #32]	; (4044c8 <_lseek_r+0x28>)
  4044a6:	4611      	mov	r1, r2
  4044a8:	4606      	mov	r6, r0
  4044aa:	461a      	mov	r2, r3
  4044ac:	4628      	mov	r0, r5
  4044ae:	2300      	movs	r3, #0
  4044b0:	6023      	str	r3, [r4, #0]
  4044b2:	f7fc ff03 	bl	4012bc <_lseek>
  4044b6:	1c43      	adds	r3, r0, #1
  4044b8:	d000      	beq.n	4044bc <_lseek_r+0x1c>
  4044ba:	bd70      	pop	{r4, r5, r6, pc}
  4044bc:	6823      	ldr	r3, [r4, #0]
  4044be:	2b00      	cmp	r3, #0
  4044c0:	d0fb      	beq.n	4044ba <_lseek_r+0x1a>
  4044c2:	6033      	str	r3, [r6, #0]
  4044c4:	bd70      	pop	{r4, r5, r6, pc}
  4044c6:	bf00      	nop
  4044c8:	204009d0 	.word	0x204009d0

004044cc <_read_r>:
  4044cc:	b570      	push	{r4, r5, r6, lr}
  4044ce:	460d      	mov	r5, r1
  4044d0:	4c08      	ldr	r4, [pc, #32]	; (4044f4 <_read_r+0x28>)
  4044d2:	4611      	mov	r1, r2
  4044d4:	4606      	mov	r6, r0
  4044d6:	461a      	mov	r2, r3
  4044d8:	4628      	mov	r0, r5
  4044da:	2300      	movs	r3, #0
  4044dc:	6023      	str	r3, [r4, #0]
  4044de:	f7fc f947 	bl	400770 <_read>
  4044e2:	1c43      	adds	r3, r0, #1
  4044e4:	d000      	beq.n	4044e8 <_read_r+0x1c>
  4044e6:	bd70      	pop	{r4, r5, r6, pc}
  4044e8:	6823      	ldr	r3, [r4, #0]
  4044ea:	2b00      	cmp	r3, #0
  4044ec:	d0fb      	beq.n	4044e6 <_read_r+0x1a>
  4044ee:	6033      	str	r3, [r6, #0]
  4044f0:	bd70      	pop	{r4, r5, r6, pc}
  4044f2:	bf00      	nop
  4044f4:	204009d0 	.word	0x204009d0

004044f8 <__aeabi_uldivmod>:
  4044f8:	b953      	cbnz	r3, 404510 <__aeabi_uldivmod+0x18>
  4044fa:	b94a      	cbnz	r2, 404510 <__aeabi_uldivmod+0x18>
  4044fc:	2900      	cmp	r1, #0
  4044fe:	bf08      	it	eq
  404500:	2800      	cmpeq	r0, #0
  404502:	bf1c      	itt	ne
  404504:	f04f 31ff 	movne.w	r1, #4294967295
  404508:	f04f 30ff 	movne.w	r0, #4294967295
  40450c:	f000 b97e 	b.w	40480c <__aeabi_idiv0>
  404510:	f1ad 0c08 	sub.w	ip, sp, #8
  404514:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404518:	f000 f806 	bl	404528 <__udivmoddi4>
  40451c:	f8dd e004 	ldr.w	lr, [sp, #4]
  404520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404524:	b004      	add	sp, #16
  404526:	4770      	bx	lr

00404528 <__udivmoddi4>:
  404528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40452c:	468c      	mov	ip, r1
  40452e:	460e      	mov	r6, r1
  404530:	4604      	mov	r4, r0
  404532:	9d08      	ldr	r5, [sp, #32]
  404534:	2b00      	cmp	r3, #0
  404536:	d150      	bne.n	4045da <__udivmoddi4+0xb2>
  404538:	428a      	cmp	r2, r1
  40453a:	4617      	mov	r7, r2
  40453c:	d96c      	bls.n	404618 <__udivmoddi4+0xf0>
  40453e:	fab2 fe82 	clz	lr, r2
  404542:	f1be 0f00 	cmp.w	lr, #0
  404546:	d00b      	beq.n	404560 <__udivmoddi4+0x38>
  404548:	f1ce 0420 	rsb	r4, lr, #32
  40454c:	fa20 f404 	lsr.w	r4, r0, r4
  404550:	fa01 f60e 	lsl.w	r6, r1, lr
  404554:	ea44 0c06 	orr.w	ip, r4, r6
  404558:	fa02 f70e 	lsl.w	r7, r2, lr
  40455c:	fa00 f40e 	lsl.w	r4, r0, lr
  404560:	ea4f 4917 	mov.w	r9, r7, lsr #16
  404564:	0c22      	lsrs	r2, r4, #16
  404566:	fbbc f0f9 	udiv	r0, ip, r9
  40456a:	fa1f f887 	uxth.w	r8, r7
  40456e:	fb09 c610 	mls	r6, r9, r0, ip
  404572:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  404576:	fb00 f308 	mul.w	r3, r0, r8
  40457a:	42b3      	cmp	r3, r6
  40457c:	d909      	bls.n	404592 <__udivmoddi4+0x6a>
  40457e:	19f6      	adds	r6, r6, r7
  404580:	f100 32ff 	add.w	r2, r0, #4294967295
  404584:	f080 8122 	bcs.w	4047cc <__udivmoddi4+0x2a4>
  404588:	42b3      	cmp	r3, r6
  40458a:	f240 811f 	bls.w	4047cc <__udivmoddi4+0x2a4>
  40458e:	3802      	subs	r0, #2
  404590:	443e      	add	r6, r7
  404592:	1af6      	subs	r6, r6, r3
  404594:	b2a2      	uxth	r2, r4
  404596:	fbb6 f3f9 	udiv	r3, r6, r9
  40459a:	fb09 6613 	mls	r6, r9, r3, r6
  40459e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4045a2:	fb03 f808 	mul.w	r8, r3, r8
  4045a6:	45a0      	cmp	r8, r4
  4045a8:	d909      	bls.n	4045be <__udivmoddi4+0x96>
  4045aa:	19e4      	adds	r4, r4, r7
  4045ac:	f103 32ff 	add.w	r2, r3, #4294967295
  4045b0:	f080 810a 	bcs.w	4047c8 <__udivmoddi4+0x2a0>
  4045b4:	45a0      	cmp	r8, r4
  4045b6:	f240 8107 	bls.w	4047c8 <__udivmoddi4+0x2a0>
  4045ba:	3b02      	subs	r3, #2
  4045bc:	443c      	add	r4, r7
  4045be:	ebc8 0404 	rsb	r4, r8, r4
  4045c2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4045c6:	2100      	movs	r1, #0
  4045c8:	2d00      	cmp	r5, #0
  4045ca:	d062      	beq.n	404692 <__udivmoddi4+0x16a>
  4045cc:	fa24 f40e 	lsr.w	r4, r4, lr
  4045d0:	2300      	movs	r3, #0
  4045d2:	602c      	str	r4, [r5, #0]
  4045d4:	606b      	str	r3, [r5, #4]
  4045d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4045da:	428b      	cmp	r3, r1
  4045dc:	d907      	bls.n	4045ee <__udivmoddi4+0xc6>
  4045de:	2d00      	cmp	r5, #0
  4045e0:	d055      	beq.n	40468e <__udivmoddi4+0x166>
  4045e2:	2100      	movs	r1, #0
  4045e4:	e885 0041 	stmia.w	r5, {r0, r6}
  4045e8:	4608      	mov	r0, r1
  4045ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4045ee:	fab3 f183 	clz	r1, r3
  4045f2:	2900      	cmp	r1, #0
  4045f4:	f040 8090 	bne.w	404718 <__udivmoddi4+0x1f0>
  4045f8:	42b3      	cmp	r3, r6
  4045fa:	d302      	bcc.n	404602 <__udivmoddi4+0xda>
  4045fc:	4282      	cmp	r2, r0
  4045fe:	f200 80f8 	bhi.w	4047f2 <__udivmoddi4+0x2ca>
  404602:	1a84      	subs	r4, r0, r2
  404604:	eb66 0603 	sbc.w	r6, r6, r3
  404608:	2001      	movs	r0, #1
  40460a:	46b4      	mov	ip, r6
  40460c:	2d00      	cmp	r5, #0
  40460e:	d040      	beq.n	404692 <__udivmoddi4+0x16a>
  404610:	e885 1010 	stmia.w	r5, {r4, ip}
  404614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404618:	b912      	cbnz	r2, 404620 <__udivmoddi4+0xf8>
  40461a:	2701      	movs	r7, #1
  40461c:	fbb7 f7f2 	udiv	r7, r7, r2
  404620:	fab7 fe87 	clz	lr, r7
  404624:	f1be 0f00 	cmp.w	lr, #0
  404628:	d135      	bne.n	404696 <__udivmoddi4+0x16e>
  40462a:	1bf3      	subs	r3, r6, r7
  40462c:	ea4f 4817 	mov.w	r8, r7, lsr #16
  404630:	fa1f fc87 	uxth.w	ip, r7
  404634:	2101      	movs	r1, #1
  404636:	fbb3 f0f8 	udiv	r0, r3, r8
  40463a:	0c22      	lsrs	r2, r4, #16
  40463c:	fb08 3610 	mls	r6, r8, r0, r3
  404640:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  404644:	fb0c f300 	mul.w	r3, ip, r0
  404648:	42b3      	cmp	r3, r6
  40464a:	d907      	bls.n	40465c <__udivmoddi4+0x134>
  40464c:	19f6      	adds	r6, r6, r7
  40464e:	f100 32ff 	add.w	r2, r0, #4294967295
  404652:	d202      	bcs.n	40465a <__udivmoddi4+0x132>
  404654:	42b3      	cmp	r3, r6
  404656:	f200 80ce 	bhi.w	4047f6 <__udivmoddi4+0x2ce>
  40465a:	4610      	mov	r0, r2
  40465c:	1af6      	subs	r6, r6, r3
  40465e:	b2a2      	uxth	r2, r4
  404660:	fbb6 f3f8 	udiv	r3, r6, r8
  404664:	fb08 6613 	mls	r6, r8, r3, r6
  404668:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40466c:	fb0c fc03 	mul.w	ip, ip, r3
  404670:	45a4      	cmp	ip, r4
  404672:	d907      	bls.n	404684 <__udivmoddi4+0x15c>
  404674:	19e4      	adds	r4, r4, r7
  404676:	f103 32ff 	add.w	r2, r3, #4294967295
  40467a:	d202      	bcs.n	404682 <__udivmoddi4+0x15a>
  40467c:	45a4      	cmp	ip, r4
  40467e:	f200 80b5 	bhi.w	4047ec <__udivmoddi4+0x2c4>
  404682:	4613      	mov	r3, r2
  404684:	ebcc 0404 	rsb	r4, ip, r4
  404688:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40468c:	e79c      	b.n	4045c8 <__udivmoddi4+0xa0>
  40468e:	4629      	mov	r1, r5
  404690:	4628      	mov	r0, r5
  404692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404696:	f1ce 0120 	rsb	r1, lr, #32
  40469a:	fa06 f30e 	lsl.w	r3, r6, lr
  40469e:	fa07 f70e 	lsl.w	r7, r7, lr
  4046a2:	fa20 f901 	lsr.w	r9, r0, r1
  4046a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
  4046aa:	40ce      	lsrs	r6, r1
  4046ac:	ea49 0903 	orr.w	r9, r9, r3
  4046b0:	fbb6 faf8 	udiv	sl, r6, r8
  4046b4:	ea4f 4419 	mov.w	r4, r9, lsr #16
  4046b8:	fb08 661a 	mls	r6, r8, sl, r6
  4046bc:	fa1f fc87 	uxth.w	ip, r7
  4046c0:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  4046c4:	fb0a f20c 	mul.w	r2, sl, ip
  4046c8:	429a      	cmp	r2, r3
  4046ca:	fa00 f40e 	lsl.w	r4, r0, lr
  4046ce:	d90a      	bls.n	4046e6 <__udivmoddi4+0x1be>
  4046d0:	19db      	adds	r3, r3, r7
  4046d2:	f10a 31ff 	add.w	r1, sl, #4294967295
  4046d6:	f080 8087 	bcs.w	4047e8 <__udivmoddi4+0x2c0>
  4046da:	429a      	cmp	r2, r3
  4046dc:	f240 8084 	bls.w	4047e8 <__udivmoddi4+0x2c0>
  4046e0:	f1aa 0a02 	sub.w	sl, sl, #2
  4046e4:	443b      	add	r3, r7
  4046e6:	1a9b      	subs	r3, r3, r2
  4046e8:	fa1f f989 	uxth.w	r9, r9
  4046ec:	fbb3 f1f8 	udiv	r1, r3, r8
  4046f0:	fb08 3311 	mls	r3, r8, r1, r3
  4046f4:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  4046f8:	fb01 f60c 	mul.w	r6, r1, ip
  4046fc:	429e      	cmp	r6, r3
  4046fe:	d907      	bls.n	404710 <__udivmoddi4+0x1e8>
  404700:	19db      	adds	r3, r3, r7
  404702:	f101 32ff 	add.w	r2, r1, #4294967295
  404706:	d26b      	bcs.n	4047e0 <__udivmoddi4+0x2b8>
  404708:	429e      	cmp	r6, r3
  40470a:	d969      	bls.n	4047e0 <__udivmoddi4+0x2b8>
  40470c:	3902      	subs	r1, #2
  40470e:	443b      	add	r3, r7
  404710:	1b9b      	subs	r3, r3, r6
  404712:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  404716:	e78e      	b.n	404636 <__udivmoddi4+0x10e>
  404718:	f1c1 0e20 	rsb	lr, r1, #32
  40471c:	fa22 f40e 	lsr.w	r4, r2, lr
  404720:	408b      	lsls	r3, r1
  404722:	4323      	orrs	r3, r4
  404724:	fa20 f70e 	lsr.w	r7, r0, lr
  404728:	fa06 f401 	lsl.w	r4, r6, r1
  40472c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404730:	fa26 f60e 	lsr.w	r6, r6, lr
  404734:	433c      	orrs	r4, r7
  404736:	fbb6 f9fc 	udiv	r9, r6, ip
  40473a:	0c27      	lsrs	r7, r4, #16
  40473c:	fb0c 6619 	mls	r6, ip, r9, r6
  404740:	fa1f f883 	uxth.w	r8, r3
  404744:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  404748:	fb09 f708 	mul.w	r7, r9, r8
  40474c:	42b7      	cmp	r7, r6
  40474e:	fa02 f201 	lsl.w	r2, r2, r1
  404752:	fa00 fa01 	lsl.w	sl, r0, r1
  404756:	d908      	bls.n	40476a <__udivmoddi4+0x242>
  404758:	18f6      	adds	r6, r6, r3
  40475a:	f109 30ff 	add.w	r0, r9, #4294967295
  40475e:	d241      	bcs.n	4047e4 <__udivmoddi4+0x2bc>
  404760:	42b7      	cmp	r7, r6
  404762:	d93f      	bls.n	4047e4 <__udivmoddi4+0x2bc>
  404764:	f1a9 0902 	sub.w	r9, r9, #2
  404768:	441e      	add	r6, r3
  40476a:	1bf6      	subs	r6, r6, r7
  40476c:	b2a0      	uxth	r0, r4
  40476e:	fbb6 f4fc 	udiv	r4, r6, ip
  404772:	fb0c 6614 	mls	r6, ip, r4, r6
  404776:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  40477a:	fb04 f808 	mul.w	r8, r4, r8
  40477e:	45b8      	cmp	r8, r7
  404780:	d907      	bls.n	404792 <__udivmoddi4+0x26a>
  404782:	18ff      	adds	r7, r7, r3
  404784:	f104 30ff 	add.w	r0, r4, #4294967295
  404788:	d228      	bcs.n	4047dc <__udivmoddi4+0x2b4>
  40478a:	45b8      	cmp	r8, r7
  40478c:	d926      	bls.n	4047dc <__udivmoddi4+0x2b4>
  40478e:	3c02      	subs	r4, #2
  404790:	441f      	add	r7, r3
  404792:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  404796:	ebc8 0707 	rsb	r7, r8, r7
  40479a:	fba0 8902 	umull	r8, r9, r0, r2
  40479e:	454f      	cmp	r7, r9
  4047a0:	4644      	mov	r4, r8
  4047a2:	464e      	mov	r6, r9
  4047a4:	d314      	bcc.n	4047d0 <__udivmoddi4+0x2a8>
  4047a6:	d029      	beq.n	4047fc <__udivmoddi4+0x2d4>
  4047a8:	b365      	cbz	r5, 404804 <__udivmoddi4+0x2dc>
  4047aa:	ebba 0304 	subs.w	r3, sl, r4
  4047ae:	eb67 0706 	sbc.w	r7, r7, r6
  4047b2:	fa07 fe0e 	lsl.w	lr, r7, lr
  4047b6:	40cb      	lsrs	r3, r1
  4047b8:	40cf      	lsrs	r7, r1
  4047ba:	ea4e 0303 	orr.w	r3, lr, r3
  4047be:	e885 0088 	stmia.w	r5, {r3, r7}
  4047c2:	2100      	movs	r1, #0
  4047c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4047c8:	4613      	mov	r3, r2
  4047ca:	e6f8      	b.n	4045be <__udivmoddi4+0x96>
  4047cc:	4610      	mov	r0, r2
  4047ce:	e6e0      	b.n	404592 <__udivmoddi4+0x6a>
  4047d0:	ebb8 0402 	subs.w	r4, r8, r2
  4047d4:	eb69 0603 	sbc.w	r6, r9, r3
  4047d8:	3801      	subs	r0, #1
  4047da:	e7e5      	b.n	4047a8 <__udivmoddi4+0x280>
  4047dc:	4604      	mov	r4, r0
  4047de:	e7d8      	b.n	404792 <__udivmoddi4+0x26a>
  4047e0:	4611      	mov	r1, r2
  4047e2:	e795      	b.n	404710 <__udivmoddi4+0x1e8>
  4047e4:	4681      	mov	r9, r0
  4047e6:	e7c0      	b.n	40476a <__udivmoddi4+0x242>
  4047e8:	468a      	mov	sl, r1
  4047ea:	e77c      	b.n	4046e6 <__udivmoddi4+0x1be>
  4047ec:	3b02      	subs	r3, #2
  4047ee:	443c      	add	r4, r7
  4047f0:	e748      	b.n	404684 <__udivmoddi4+0x15c>
  4047f2:	4608      	mov	r0, r1
  4047f4:	e70a      	b.n	40460c <__udivmoddi4+0xe4>
  4047f6:	3802      	subs	r0, #2
  4047f8:	443e      	add	r6, r7
  4047fa:	e72f      	b.n	40465c <__udivmoddi4+0x134>
  4047fc:	45c2      	cmp	sl, r8
  4047fe:	d3e7      	bcc.n	4047d0 <__udivmoddi4+0x2a8>
  404800:	463e      	mov	r6, r7
  404802:	e7d1      	b.n	4047a8 <__udivmoddi4+0x280>
  404804:	4629      	mov	r1, r5
  404806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40480a:	bf00      	nop

0040480c <__aeabi_idiv0>:
  40480c:	4770      	bx	lr
  40480e:	bf00      	nop
  404810:	41202d2d 	.word	0x41202d2d
  404814:	20434546 	.word	0x20434546
  404818:	706d6554 	.word	0x706d6554
  40481c:	74617265 	.word	0x74617265
  404820:	20657275 	.word	0x20657275
  404824:	736e6553 	.word	0x736e6553
  404828:	4520726f 	.word	0x4520726f
  40482c:	706d6178 	.word	0x706d6178
  404830:	2d20656c 	.word	0x2d20656c
  404834:	2d0a0d2d 	.word	0x2d0a0d2d
  404838:	4153202d 	.word	0x4153202d
  40483c:	3037454d 	.word	0x3037454d
  404840:	4c50582d 	.word	0x4c50582d
  404844:	2d2d2044 	.word	0x2d2d2044
  404848:	2d2d0a0d 	.word	0x2d2d0a0d
  40484c:	6d6f4320 	.word	0x6d6f4320
  404850:	656c6970 	.word	0x656c6970
  404854:	44203a64 	.word	0x44203a64
  404858:	20206365 	.word	0x20206365
  40485c:	30322038 	.word	0x30322038
  404860:	31203731 	.word	0x31203731
  404864:	30333a35 	.word	0x30333a35
  404868:	2031333a 	.word	0x2031333a
  40486c:	000d2d2d 	.word	0x000d2d2d
  404870:	504d4554 	.word	0x504d4554
  404874:	54415245 	.word	0x54415245
  404878:	20415255 	.word	0x20415255
  40487c:	6425203a 	.word	0x6425203a
  404880:	0a0d2020 	.word	0x0a0d2020
  404884:	00000000 	.word	0x00000000
  404888:	0a203120 	.word	0x0a203120
  40488c:	00000000 	.word	0x00000000
  404890:	0a203220 	.word	0x0a203220
  404894:	00000000 	.word	0x00000000
  404898:	0a203320 	.word	0x0a203320
  40489c:	00000000 	.word	0x00000000
  4048a0:	00000043 	.word	0x00000043

004048a4 <_global_impure_ptr>:
  4048a4:	20400008 0000000a                       ..@ ....

004048ac <zeroes.6993>:
  4048ac:	30303030 30303030 30303030 30303030     0000000000000000
  4048bc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  4048cc:	00000000 33323130 37363534 62613938     ....0123456789ab
  4048dc:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

004048ec <blanks.6992>:
  4048ec:	20202020 20202020 20202020 20202020                     

004048fc <_init>:
  4048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4048fe:	bf00      	nop
  404900:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404902:	bc08      	pop	{r3}
  404904:	469e      	mov	lr, r3
  404906:	4770      	bx	lr

00404908 <__init_array_start>:
  404908:	00402ac5 	.word	0x00402ac5

0040490c <__frame_dummy_init_array_entry>:
  40490c:	00400165                                e.@.

00404910 <_fini>:
  404910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404912:	bf00      	nop
  404914:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404916:	bc08      	pop	{r3}
  404918:	469e      	mov	lr, r3
  40491a:	4770      	bx	lr

0040491c <__fini_array_start>:
  40491c:	00400141 	.word	0x00400141
