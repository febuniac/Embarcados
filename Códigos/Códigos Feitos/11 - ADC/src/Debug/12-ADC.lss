
12-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000049c4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004049c4  004049c4  000149c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000884  20400000  004049cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000016c  20400884  00405250  00020884  2**2
                  ALLOC
  4 .stack        00002000  204009f0  004053bc  00020884  2**0
                  ALLOC
  5 .heap         00000200  204029f0  004073bc  00020884  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020884  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000208b2  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000e65f  00000000  00000000  0002090b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002416  00000000  00000000  0002ef6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000054f4  00000000  00000000  00031380  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b50  00000000  00000000  00036874  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b28  00000000  00000000  000373c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001f433  00000000  00000000  00037eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c37f  00000000  00000000  0005731f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008bf55  00000000  00000000  0006369e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002490  00000000  00000000  000ef5f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	204029f0 	.word	0x204029f0
  400004:	00401071 	.word	0x00401071
  400008:	0040106d 	.word	0x0040106d
  40000c:	0040106d 	.word	0x0040106d
  400010:	0040106d 	.word	0x0040106d
  400014:	0040106d 	.word	0x0040106d
  400018:	0040106d 	.word	0x0040106d
	...
  40002c:	0040106d 	.word	0x0040106d
  400030:	0040106d 	.word	0x0040106d
  400034:	00000000 	.word	0x00000000
  400038:	0040106d 	.word	0x0040106d
  40003c:	0040106d 	.word	0x0040106d
  400040:	0040106d 	.word	0x0040106d
  400044:	0040106d 	.word	0x0040106d
  400048:	0040106d 	.word	0x0040106d
  40004c:	0040106d 	.word	0x0040106d
  400050:	0040106d 	.word	0x0040106d
  400054:	0040106d 	.word	0x0040106d
  400058:	0040106d 	.word	0x0040106d
  40005c:	0040106d 	.word	0x0040106d
  400060:	0040106d 	.word	0x0040106d
  400064:	00000000 	.word	0x00000000
  400068:	00400d49 	.word	0x00400d49
  40006c:	00400d5d 	.word	0x00400d5d
  400070:	00400d71 	.word	0x00400d71
  400074:	0040106d 	.word	0x0040106d
  400078:	0040106d 	.word	0x0040106d
  40007c:	0040106d 	.word	0x0040106d
  400080:	00400d85 	.word	0x00400d85
  400084:	00400d99 	.word	0x00400d99
  400088:	0040106d 	.word	0x0040106d
  40008c:	0040106d 	.word	0x0040106d
  400090:	0040106d 	.word	0x0040106d
  400094:	0040106d 	.word	0x0040106d
  400098:	0040106d 	.word	0x0040106d
  40009c:	0040106d 	.word	0x0040106d
  4000a0:	00400425 	.word	0x00400425
  4000a4:	0040106d 	.word	0x0040106d
  4000a8:	0040106d 	.word	0x0040106d
  4000ac:	0040106d 	.word	0x0040106d
  4000b0:	0040106d 	.word	0x0040106d
  4000b4:	00400c65 	.word	0x00400c65
  4000b8:	0040106d 	.word	0x0040106d
  4000bc:	0040106d 	.word	0x0040106d
  4000c0:	0040106d 	.word	0x0040106d
  4000c4:	0040106d 	.word	0x0040106d
  4000c8:	0040106d 	.word	0x0040106d
  4000cc:	0040106d 	.word	0x0040106d
  4000d0:	00000000 	.word	0x00000000
  4000d4:	0040106d 	.word	0x0040106d
  4000d8:	00000000 	.word	0x00000000
  4000dc:	0040106d 	.word	0x0040106d
  4000e0:	00400c79 	.word	0x00400c79
  4000e4:	0040106d 	.word	0x0040106d
  4000e8:	0040106d 	.word	0x0040106d
  4000ec:	0040106d 	.word	0x0040106d
  4000f0:	0040106d 	.word	0x0040106d
  4000f4:	0040106d 	.word	0x0040106d
  4000f8:	0040106d 	.word	0x0040106d
  4000fc:	0040106d 	.word	0x0040106d
  400100:	0040106d 	.word	0x0040106d
  400104:	0040106d 	.word	0x0040106d
  400108:	0040106d 	.word	0x0040106d
  40010c:	0040106d 	.word	0x0040106d
  400110:	0040106d 	.word	0x0040106d
	...
  400120:	0040106d 	.word	0x0040106d
  400124:	0040106d 	.word	0x0040106d
  400128:	0040106d 	.word	0x0040106d
  40012c:	0040106d 	.word	0x0040106d
  400130:	0040106d 	.word	0x0040106d
  400134:	00000000 	.word	0x00000000
  400138:	0040106d 	.word	0x0040106d
  40013c:	0040106d 	.word	0x0040106d

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400884 	.word	0x20400884
  40015c:	00000000 	.word	0x00000000
  400160:	004049cc 	.word	0x004049cc

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400888 	.word	0x20400888
  400190:	004049cc 	.word	0x004049cc
  400194:	004049cc 	.word	0x004049cc
  400198:	00000000 	.word	0x00000000

0040019c <convert_adc_to_temp>:
  /*
   * According to datasheet, The output voltage VT = 0.72V at 27C
   * and the temperature slope dVT/dT = 2.33 mV/C
   */
  ul_temp = (ul_vol - 720)  * 100 / 233 + 27;
  return(ul_temp);
  40019c:	f640 43e4 	movw	r3, #3300	; 0xce4
  4001a0:	fb03 f000 	mul.w	r0, r3, r0
  4001a4:	4b0a      	ldr	r3, [pc, #40]	; (4001d0 <convert_adc_to_temp+0x34>)
  4001a6:	fba3 2300 	umull	r2, r3, r3, r0
  4001aa:	1ac0      	subs	r0, r0, r3
  4001ac:	eb03 0350 	add.w	r3, r3, r0, lsr #1
  4001b0:	0adb      	lsrs	r3, r3, #11
  4001b2:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
  4001b6:	2064      	movs	r0, #100	; 0x64
  4001b8:	fb00 f303 	mul.w	r3, r0, r3
  4001bc:	4805      	ldr	r0, [pc, #20]	; (4001d4 <convert_adc_to_temp+0x38>)
  4001be:	fb80 2003 	smull	r2, r0, r0, r3
  4001c2:	4418      	add	r0, r3
  4001c4:	17db      	asrs	r3, r3, #31
  4001c6:	ebc3 10e0 	rsb	r0, r3, r0, asr #7
}
  4001ca:	301b      	adds	r0, #27
  4001cc:	4770      	bx	lr
  4001ce:	bf00      	nop
  4001d0:	00100101 	.word	0x00100101
  4001d4:	8ca29c05 	.word	0x8ca29c05

004001d8 <AFEC_Temp_callback>:
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  4001d8:	4b04      	ldr	r3, [pc, #16]	; (4001ec <AFEC_Temp_callback+0x14>)
  4001da:	220b      	movs	r2, #11
  4001dc:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4001de:	6e9a      	ldr	r2, [r3, #104]	; 0x68
/**
 * \brief AFEC interrupt callback function.
 */
static void AFEC_Temp_callback(void) //Toda vez que o ADC tiver um valor novo essa função é chamada
{
	g_ul_value = afec_channel_get_value(AFEC0, AFEC_CHANNEL_TEMP_SENSOR);//salva o novo valor da converSão de temp
  4001e0:	4b03      	ldr	r3, [pc, #12]	; (4001f0 <AFEC_Temp_callback+0x18>)
  4001e2:	601a      	str	r2, [r3, #0]
	is_conversion_done = true;
  4001e4:	2201      	movs	r2, #1
  4001e6:	4b03      	ldr	r3, [pc, #12]	; (4001f4 <AFEC_Temp_callback+0x1c>)
  4001e8:	701a      	strb	r2, [r3, #0]
  4001ea:	4770      	bx	lr
  4001ec:	4003c000 	.word	0x4003c000
  4001f0:	204008a8 	.word	0x204008a8
  4001f4:	204008a4 	.word	0x204008a4

004001f8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001fa:	b083      	sub	sp, #12
  4001fc:	4605      	mov	r5, r0
  4001fe:	460c      	mov	r4, r1
	uint32_t val = 0;
  400200:	2300      	movs	r3, #0
  400202:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400204:	4b29      	ldr	r3, [pc, #164]	; (4002ac <usart_serial_getchar+0xb4>)
  400206:	4298      	cmp	r0, r3
  400208:	d107      	bne.n	40021a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40020a:	461f      	mov	r7, r3
  40020c:	4e28      	ldr	r6, [pc, #160]	; (4002b0 <usart_serial_getchar+0xb8>)
  40020e:	4621      	mov	r1, r4
  400210:	4638      	mov	r0, r7
  400212:	47b0      	blx	r6
  400214:	2800      	cmp	r0, #0
  400216:	d1fa      	bne.n	40020e <usart_serial_getchar+0x16>
  400218:	e015      	b.n	400246 <usart_serial_getchar+0x4e>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40021a:	4b26      	ldr	r3, [pc, #152]	; (4002b4 <usart_serial_getchar+0xbc>)
  40021c:	4298      	cmp	r0, r3
  40021e:	d107      	bne.n	400230 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400220:	461f      	mov	r7, r3
  400222:	4e23      	ldr	r6, [pc, #140]	; (4002b0 <usart_serial_getchar+0xb8>)
  400224:	4621      	mov	r1, r4
  400226:	4638      	mov	r0, r7
  400228:	47b0      	blx	r6
  40022a:	2800      	cmp	r0, #0
  40022c:	d1fa      	bne.n	400224 <usart_serial_getchar+0x2c>
  40022e:	e015      	b.n	40025c <usart_serial_getchar+0x64>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400230:	4b21      	ldr	r3, [pc, #132]	; (4002b8 <usart_serial_getchar+0xc0>)
  400232:	4298      	cmp	r0, r3
  400234:	d107      	bne.n	400246 <usart_serial_getchar+0x4e>
		while (uart_read((Uart*)p_usart, data));
  400236:	461f      	mov	r7, r3
  400238:	4e1d      	ldr	r6, [pc, #116]	; (4002b0 <usart_serial_getchar+0xb8>)
  40023a:	4621      	mov	r1, r4
  40023c:	4638      	mov	r0, r7
  40023e:	47b0      	blx	r6
  400240:	2800      	cmp	r0, #0
  400242:	d1fa      	bne.n	40023a <usart_serial_getchar+0x42>
  400244:	e017      	b.n	400276 <usart_serial_getchar+0x7e>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400246:	4b1d      	ldr	r3, [pc, #116]	; (4002bc <usart_serial_getchar+0xc4>)
  400248:	429d      	cmp	r5, r3
  40024a:	d107      	bne.n	40025c <usart_serial_getchar+0x64>
		while (uart_read((Uart*)p_usart, data));
  40024c:	461f      	mov	r7, r3
  40024e:	4e18      	ldr	r6, [pc, #96]	; (4002b0 <usart_serial_getchar+0xb8>)
  400250:	4621      	mov	r1, r4
  400252:	4638      	mov	r0, r7
  400254:	47b0      	blx	r6
  400256:	2800      	cmp	r0, #0
  400258:	d1fa      	bne.n	400250 <usart_serial_getchar+0x58>
  40025a:	e019      	b.n	400290 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40025c:	4b18      	ldr	r3, [pc, #96]	; (4002c0 <usart_serial_getchar+0xc8>)
  40025e:	429d      	cmp	r5, r3
  400260:	d109      	bne.n	400276 <usart_serial_getchar+0x7e>
		while (usart_read(p_usart, &val));
  400262:	461e      	mov	r6, r3
  400264:	4d17      	ldr	r5, [pc, #92]	; (4002c4 <usart_serial_getchar+0xcc>)
  400266:	a901      	add	r1, sp, #4
  400268:	4630      	mov	r0, r6
  40026a:	47a8      	blx	r5
  40026c:	2800      	cmp	r0, #0
  40026e:	d1fa      	bne.n	400266 <usart_serial_getchar+0x6e>
		*data = (uint8_t)(val & 0xFF);
  400270:	9b01      	ldr	r3, [sp, #4]
  400272:	7023      	strb	r3, [r4, #0]
  400274:	e018      	b.n	4002a8 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400276:	4b14      	ldr	r3, [pc, #80]	; (4002c8 <usart_serial_getchar+0xd0>)
  400278:	429d      	cmp	r5, r3
  40027a:	d109      	bne.n	400290 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
  40027c:	461e      	mov	r6, r3
  40027e:	4d11      	ldr	r5, [pc, #68]	; (4002c4 <usart_serial_getchar+0xcc>)
  400280:	a901      	add	r1, sp, #4
  400282:	4630      	mov	r0, r6
  400284:	47a8      	blx	r5
  400286:	2800      	cmp	r0, #0
  400288:	d1fa      	bne.n	400280 <usart_serial_getchar+0x88>
		*data = (uint8_t)(val & 0xFF);
  40028a:	9b01      	ldr	r3, [sp, #4]
  40028c:	7023      	strb	r3, [r4, #0]
  40028e:	e00b      	b.n	4002a8 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400290:	4b0e      	ldr	r3, [pc, #56]	; (4002cc <usart_serial_getchar+0xd4>)
  400292:	429d      	cmp	r5, r3
  400294:	d108      	bne.n	4002a8 <usart_serial_getchar+0xb0>
		while (usart_read(p_usart, &val));
  400296:	461e      	mov	r6, r3
  400298:	4d0a      	ldr	r5, [pc, #40]	; (4002c4 <usart_serial_getchar+0xcc>)
  40029a:	a901      	add	r1, sp, #4
  40029c:	4630      	mov	r0, r6
  40029e:	47a8      	blx	r5
  4002a0:	2800      	cmp	r0, #0
  4002a2:	d1fa      	bne.n	40029a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
  4002a4:	9b01      	ldr	r3, [sp, #4]
  4002a6:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4002a8:	b003      	add	sp, #12
  4002aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4002ac:	400e0800 	.word	0x400e0800
  4002b0:	00400f3d 	.word	0x00400f3d
  4002b4:	400e0a00 	.word	0x400e0a00
  4002b8:	400e1a00 	.word	0x400e1a00
  4002bc:	400e1c00 	.word	0x400e1c00
  4002c0:	40024000 	.word	0x40024000
  4002c4:	00401055 	.word	0x00401055
  4002c8:	40028000 	.word	0x40028000
  4002cc:	4002c000 	.word	0x4002c000

004002d0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4002d0:	b570      	push	{r4, r5, r6, lr}
  4002d2:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4002d4:	4b2a      	ldr	r3, [pc, #168]	; (400380 <usart_serial_putchar+0xb0>)
  4002d6:	4298      	cmp	r0, r3
  4002d8:	d108      	bne.n	4002ec <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  4002da:	461e      	mov	r6, r3
  4002dc:	4d29      	ldr	r5, [pc, #164]	; (400384 <usart_serial_putchar+0xb4>)
  4002de:	4621      	mov	r1, r4
  4002e0:	4630      	mov	r0, r6
  4002e2:	47a8      	blx	r5
  4002e4:	2800      	cmp	r0, #0
  4002e6:	d1fa      	bne.n	4002de <usart_serial_putchar+0xe>
		return 1;
  4002e8:	2001      	movs	r0, #1
  4002ea:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4002ec:	4b26      	ldr	r3, [pc, #152]	; (400388 <usart_serial_putchar+0xb8>)
  4002ee:	4298      	cmp	r0, r3
  4002f0:	d108      	bne.n	400304 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  4002f2:	461e      	mov	r6, r3
  4002f4:	4d23      	ldr	r5, [pc, #140]	; (400384 <usart_serial_putchar+0xb4>)
  4002f6:	4621      	mov	r1, r4
  4002f8:	4630      	mov	r0, r6
  4002fa:	47a8      	blx	r5
  4002fc:	2800      	cmp	r0, #0
  4002fe:	d1fa      	bne.n	4002f6 <usart_serial_putchar+0x26>
		return 1;
  400300:	2001      	movs	r0, #1
  400302:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400304:	4b21      	ldr	r3, [pc, #132]	; (40038c <usart_serial_putchar+0xbc>)
  400306:	4298      	cmp	r0, r3
  400308:	d108      	bne.n	40031c <usart_serial_putchar+0x4c>
		while (uart_write((Uart*)p_usart, c)!=0);
  40030a:	461e      	mov	r6, r3
  40030c:	4d1d      	ldr	r5, [pc, #116]	; (400384 <usart_serial_putchar+0xb4>)
  40030e:	4621      	mov	r1, r4
  400310:	4630      	mov	r0, r6
  400312:	47a8      	blx	r5
  400314:	2800      	cmp	r0, #0
  400316:	d1fa      	bne.n	40030e <usart_serial_putchar+0x3e>
		return 1;
  400318:	2001      	movs	r0, #1
  40031a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40031c:	4b1c      	ldr	r3, [pc, #112]	; (400390 <usart_serial_putchar+0xc0>)
  40031e:	4298      	cmp	r0, r3
  400320:	d108      	bne.n	400334 <usart_serial_putchar+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
  400322:	461e      	mov	r6, r3
  400324:	4d17      	ldr	r5, [pc, #92]	; (400384 <usart_serial_putchar+0xb4>)
  400326:	4621      	mov	r1, r4
  400328:	4630      	mov	r0, r6
  40032a:	47a8      	blx	r5
  40032c:	2800      	cmp	r0, #0
  40032e:	d1fa      	bne.n	400326 <usart_serial_putchar+0x56>
		return 1;
  400330:	2001      	movs	r0, #1
  400332:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400334:	4b17      	ldr	r3, [pc, #92]	; (400394 <usart_serial_putchar+0xc4>)
  400336:	4298      	cmp	r0, r3
  400338:	d108      	bne.n	40034c <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  40033a:	461e      	mov	r6, r3
  40033c:	4d16      	ldr	r5, [pc, #88]	; (400398 <usart_serial_putchar+0xc8>)
  40033e:	4621      	mov	r1, r4
  400340:	4630      	mov	r0, r6
  400342:	47a8      	blx	r5
  400344:	2800      	cmp	r0, #0
  400346:	d1fa      	bne.n	40033e <usart_serial_putchar+0x6e>
		return 1;
  400348:	2001      	movs	r0, #1
  40034a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40034c:	4b13      	ldr	r3, [pc, #76]	; (40039c <usart_serial_putchar+0xcc>)
  40034e:	4298      	cmp	r0, r3
  400350:	d108      	bne.n	400364 <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  400352:	461e      	mov	r6, r3
  400354:	4d10      	ldr	r5, [pc, #64]	; (400398 <usart_serial_putchar+0xc8>)
  400356:	4621      	mov	r1, r4
  400358:	4630      	mov	r0, r6
  40035a:	47a8      	blx	r5
  40035c:	2800      	cmp	r0, #0
  40035e:	d1fa      	bne.n	400356 <usart_serial_putchar+0x86>
		return 1;
  400360:	2001      	movs	r0, #1
  400362:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400364:	4b0e      	ldr	r3, [pc, #56]	; (4003a0 <usart_serial_putchar+0xd0>)
  400366:	4298      	cmp	r0, r3
  400368:	d108      	bne.n	40037c <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  40036a:	461e      	mov	r6, r3
  40036c:	4d0a      	ldr	r5, [pc, #40]	; (400398 <usart_serial_putchar+0xc8>)
  40036e:	4621      	mov	r1, r4
  400370:	4630      	mov	r0, r6
  400372:	47a8      	blx	r5
  400374:	2800      	cmp	r0, #0
  400376:	d1fa      	bne.n	40036e <usart_serial_putchar+0x9e>
		return 1;
  400378:	2001      	movs	r0, #1
  40037a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  40037c:	2000      	movs	r0, #0
}
  40037e:	bd70      	pop	{r4, r5, r6, pc}
  400380:	400e0800 	.word	0x400e0800
  400384:	00400f29 	.word	0x00400f29
  400388:	400e0a00 	.word	0x400e0a00
  40038c:	400e1a00 	.word	0x400e1a00
  400390:	400e1c00 	.word	0x400e1c00
  400394:	40024000 	.word	0x40024000
  400398:	0040103d 	.word	0x0040103d
  40039c:	40028000 	.word	0x40028000
  4003a0:	4002c000 	.word	0x4002c000

004003a4 <TC1_init>:
/**
 * \brief Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
void TC1_init(int freq_TC){
  4003a4:	b570      	push	{r4, r5, r6, lr}
  4003a6:	b084      	sub	sp, #16
  4003a8:	4606      	mov	r6, r0
	    uint32_t ul_sysclk = sysclk_get_cpu_hz();
	    
	    uint32_t channel = 1;
	    
	    /* Configura o PMC */
	    pmc_enable_periph_clk(ID_TC1);
  4003aa:	2018      	movs	r0, #24
  4003ac:	4b14      	ldr	r3, [pc, #80]	; (400400 <TC1_init+0x5c>)
  4003ae:	4798      	blx	r3
	    
	    //int freq_TC=4;//4Hz (4 vezes pos segundo led pisca)
	    
	    /** Configura o TC para operar em  4Mhz e interrupçcão no RC compare */
	    tc_find_mck_divisor(freq_TC, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4003b0:	4c14      	ldr	r4, [pc, #80]	; (400404 <TC1_init+0x60>)
  4003b2:	9400      	str	r4, [sp, #0]
  4003b4:	ab02      	add	r3, sp, #8
  4003b6:	aa03      	add	r2, sp, #12
  4003b8:	4621      	mov	r1, r4
  4003ba:	4630      	mov	r0, r6
  4003bc:	4d12      	ldr	r5, [pc, #72]	; (400408 <TC1_init+0x64>)
  4003be:	47a8      	blx	r5
	    tc_init(TC0, channel, ul_tcclks | TC_CMR_CPCTRG);
  4003c0:	4d12      	ldr	r5, [pc, #72]	; (40040c <TC1_init+0x68>)
  4003c2:	9a02      	ldr	r2, [sp, #8]
  4003c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4003c8:	2101      	movs	r1, #1
  4003ca:	4628      	mov	r0, r5
  4003cc:	4b10      	ldr	r3, [pc, #64]	; (400410 <TC1_init+0x6c>)
  4003ce:	4798      	blx	r3
	    tc_write_rc(TC0, channel, (ul_sysclk / ul_div) / freq_TC);
  4003d0:	9a03      	ldr	r2, [sp, #12]
  4003d2:	fbb4 f2f2 	udiv	r2, r4, r2
  4003d6:	fbb2 f2f6 	udiv	r2, r2, r6
  4003da:	2101      	movs	r1, #1
  4003dc:	4628      	mov	r0, r5
  4003de:	4b0d      	ldr	r3, [pc, #52]	; (400414 <TC1_init+0x70>)
  4003e0:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4003e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4003e6:	4b0c      	ldr	r3, [pc, #48]	; (400418 <TC1_init+0x74>)
  4003e8:	601a      	str	r2, [r3, #0]

	    /* Configura e ativa interrupçcão no TC canal 0 */
	    NVIC_EnableIRQ((IRQn_Type) ID_TC1);
	    tc_enable_interrupt(TC0, channel, TC_IER_CPCS);
  4003ea:	2210      	movs	r2, #16
  4003ec:	2101      	movs	r1, #1
  4003ee:	4628      	mov	r0, r5
  4003f0:	4b0a      	ldr	r3, [pc, #40]	; (40041c <TC1_init+0x78>)
  4003f2:	4798      	blx	r3

	    /* Inicializa o canal 0 do TC */
	    tc_start(TC0, channel);
  4003f4:	2101      	movs	r1, #1
  4003f6:	4628      	mov	r0, r5
  4003f8:	4b09      	ldr	r3, [pc, #36]	; (400420 <TC1_init+0x7c>)
  4003fa:	4798      	blx	r3
}
  4003fc:	b004      	add	sp, #16
  4003fe:	bd70      	pop	{r4, r5, r6, pc}
  400400:	00400ed5 	.word	0x00400ed5
  400404:	11e1a300 	.word	0x11e1a300
  400408:	00400705 	.word	0x00400705
  40040c:	4000c000 	.word	0x4000c000
  400410:	004006c9 	.word	0x004006c9
  400414:	004006ed 	.word	0x004006ed
  400418:	e000e100 	.word	0xe000e100
  40041c:	004006f5 	.word	0x004006f5
  400420:	004006e5 	.word	0x004006e5

00400424 <TC1_Handler>:

void TC1_Handler(void){
  400424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400428:	b087      	sub	sp, #28
	volatile uint32_t ul_dummy;
	
    /****************************************************************
	* Devemos indicar ao TC que a interrupção foi satisfeita.
    ******************************************************************/
	ul_dummy = tc_get_status(TC0, 1);
  40042a:	2101      	movs	r1, #1
  40042c:	4818      	ldr	r0, [pc, #96]	; (400490 <TC1_Handler+0x6c>)
  40042e:	4b19      	ldr	r3, [pc, #100]	; (400494 <TC1_Handler+0x70>)
  400430:	4798      	blx	r3
  400432:	9005      	str	r0, [sp, #20]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  400434:	9b05      	ldr	r3, [sp, #20]
	if(is_conversion_done == true) {
  400436:	4b18      	ldr	r3, [pc, #96]	; (400498 <TC1_Handler+0x74>)
  400438:	781b      	ldrb	r3, [r3, #0]
  40043a:	f013 0fff 	tst.w	r3, #255	; 0xff
  40043e:	d023      	beq.n	400488 <TC1_Handler+0x64>
		is_conversion_done = false;
  400440:	2200      	movs	r2, #0
  400442:	4b15      	ldr	r3, [pc, #84]	; (400498 <TC1_Handler+0x74>)
  400444:	701a      	strb	r2, [r3, #0]
		mais_segundo(&segundo,&minuto,&hora,&dia,&mes,&ano);
		printf("%d/%d/%d %d:%d:%d - Temp : %d \n \r\n",dia,mes,ano,hora,minuto,segundo,convert_adc_to_temp(g_ul_value/*voltagem recebida*/));//A função recebe como parametro uma voltagem e transforma em graus celsius
  400446:	4b15      	ldr	r3, [pc, #84]	; (40049c <TC1_Handler+0x78>)
  400448:	681c      	ldr	r4, [r3, #0]
  40044a:	4b15      	ldr	r3, [pc, #84]	; (4004a0 <TC1_Handler+0x7c>)
  40044c:	681d      	ldr	r5, [r3, #0]
  40044e:	4b15      	ldr	r3, [pc, #84]	; (4004a4 <TC1_Handler+0x80>)
  400450:	681e      	ldr	r6, [r3, #0]
  400452:	4b15      	ldr	r3, [pc, #84]	; (4004a8 <TC1_Handler+0x84>)
  400454:	681f      	ldr	r7, [r3, #0]
  400456:	4b15      	ldr	r3, [pc, #84]	; (4004ac <TC1_Handler+0x88>)
  400458:	f8d3 8000 	ldr.w	r8, [r3]
  40045c:	4b14      	ldr	r3, [pc, #80]	; (4004b0 <TC1_Handler+0x8c>)
  40045e:	f8d3 9000 	ldr.w	r9, [r3]
  400462:	4b14      	ldr	r3, [pc, #80]	; (4004b4 <TC1_Handler+0x90>)
  400464:	6818      	ldr	r0, [r3, #0]
  400466:	4b14      	ldr	r3, [pc, #80]	; (4004b8 <TC1_Handler+0x94>)
  400468:	4798      	blx	r3
  40046a:	9003      	str	r0, [sp, #12]
  40046c:	f8cd 9008 	str.w	r9, [sp, #8]
  400470:	f8cd 8004 	str.w	r8, [sp, #4]
  400474:	9700      	str	r7, [sp, #0]
  400476:	4633      	mov	r3, r6
  400478:	462a      	mov	r2, r5
  40047a:	4621      	mov	r1, r4
  40047c:	480f      	ldr	r0, [pc, #60]	; (4004bc <TC1_Handler+0x98>)
  40047e:	4c10      	ldr	r4, [pc, #64]	; (4004c0 <TC1_Handler+0x9c>)
  400480:	47a0      	blx	r4
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
	afec->AFEC_CR = AFEC_CR_START;
  400482:	2202      	movs	r2, #2
  400484:	4b0f      	ldr	r3, [pc, #60]	; (4004c4 <TC1_Handler+0xa0>)
  400486:	601a      	str	r2, [r3, #0]
		afec_start_software_conversion(AFEC0);
	}
}
  400488:	b007      	add	sp, #28
  40048a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40048e:	bf00      	nop
  400490:	4000c000 	.word	0x4000c000
  400494:	004006fd 	.word	0x004006fd
  400498:	204008a4 	.word	0x204008a4
  40049c:	20400010 	.word	0x20400010
  4004a0:	20400000 	.word	0x20400000
  4004a4:	20400004 	.word	0x20400004
  4004a8:	20400008 	.word	0x20400008
  4004ac:	2040000c 	.word	0x2040000c
  4004b0:	204008a0 	.word	0x204008a0
  4004b4:	204008a8 	.word	0x204008a8
  4004b8:	0040019d 	.word	0x0040019d
  4004bc:	00404890 	.word	0x00404890
  4004c0:	00401809 	.word	0x00401809
  4004c4:	4003c000 	.word	0x4003c000

004004c8 <main>:
		else{
			segundo++;
		}
}
int main(void)
{
  4004c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4004cc:	b091      	sub	sp, #68	; 0x44

	/* Initialize the SAM system. */
  sysclk_init();
  4004ce:	4b58      	ldr	r3, [pc, #352]	; (400630 <main+0x168>)
  4004d0:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4004d2:	200a      	movs	r0, #10
  4004d4:	4c57      	ldr	r4, [pc, #348]	; (400634 <main+0x16c>)
  4004d6:	47a0      	blx	r4
  4004d8:	200b      	movs	r0, #11
  4004da:	47a0      	blx	r4
  4004dc:	200c      	movs	r0, #12
  4004de:	47a0      	blx	r4
  4004e0:	2010      	movs	r0, #16
  4004e2:	47a0      	blx	r4
  4004e4:	2011      	movs	r0, #17
  4004e6:	47a0      	blx	r4
  ioport_init();
  board_init();
  4004e8:	4b53      	ldr	r3, [pc, #332]	; (400638 <main+0x170>)
  4004ea:	4798      	blx	r3
  4004ec:	200e      	movs	r0, #14
  4004ee:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4004f0:	4e52      	ldr	r6, [pc, #328]	; (40063c <main+0x174>)
  4004f2:	4b53      	ldr	r3, [pc, #332]	; (400640 <main+0x178>)
  4004f4:	601e      	str	r6, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4004f6:	4a53      	ldr	r2, [pc, #332]	; (400644 <main+0x17c>)
  4004f8:	4b53      	ldr	r3, [pc, #332]	; (400648 <main+0x180>)
  4004fa:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4004fc:	4a53      	ldr	r2, [pc, #332]	; (40064c <main+0x184>)
  4004fe:	4b54      	ldr	r3, [pc, #336]	; (400650 <main+0x188>)
  400500:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  400502:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400506:	9301      	str	r3, [sp, #4]
	usart_settings.char_length = opt->charlength;
  400508:	23c0      	movs	r3, #192	; 0xc0
  40050a:	9302      	str	r3, [sp, #8]
	usart_settings.parity_type = opt->paritytype;
  40050c:	f44f 6700 	mov.w	r7, #2048	; 0x800
  400510:	9703      	str	r7, [sp, #12]
	usart_settings.stop_bits= opt->stopbits;
  400512:	2500      	movs	r5, #0
  400514:	9504      	str	r5, [sp, #16]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  400516:	9505      	str	r5, [sp, #20]
  400518:	200e      	movs	r0, #14
  40051a:	47a0      	blx	r4
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40051c:	4a4d      	ldr	r2, [pc, #308]	; (400654 <main+0x18c>)
  40051e:	a901      	add	r1, sp, #4
  400520:	4630      	mov	r0, r6
  400522:	4b4d      	ldr	r3, [pc, #308]	; (400658 <main+0x190>)
  400524:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  400526:	4630      	mov	r0, r6
  400528:	4b4c      	ldr	r3, [pc, #304]	; (40065c <main+0x194>)
  40052a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40052c:	4630      	mov	r0, r6
  40052e:	4b4c      	ldr	r3, [pc, #304]	; (400660 <main+0x198>)
  400530:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400532:	4e4c      	ldr	r6, [pc, #304]	; (400664 <main+0x19c>)
  400534:	6833      	ldr	r3, [r6, #0]
  400536:	4629      	mov	r1, r5
  400538:	6898      	ldr	r0, [r3, #8]
  40053a:	4c4b      	ldr	r4, [pc, #300]	; (400668 <main+0x1a0>)
  40053c:	47a0      	blx	r4
	setbuf(stdin, NULL);
  40053e:	6833      	ldr	r3, [r6, #0]
  400540:	4629      	mov	r1, r5
  400542:	6858      	ldr	r0, [r3, #4]
  400544:	47a0      	blx	r4

  /* inicializa console (printf) */
	configure_console();
  
	/* Output example information. */
	puts(STRING_HEADER);// Mostra o valor escrito no começo
  400546:	4849      	ldr	r0, [pc, #292]	; (40066c <main+0x1a4>)
  400548:	4b49      	ldr	r3, [pc, #292]	; (400670 <main+0x1a8>)
  40054a:	4798      	blx	r3
  /************************************* 
   * Ativa e configura AFEC (lendo temperatura da placa)
   *************************************/  

  /* Ativa AFEC - 0 */
	afec_enable(AFEC0);
  40054c:	4c49      	ldr	r4, [pc, #292]	; (400674 <main+0x1ac>)
  40054e:	4620      	mov	r0, r4
  400550:	4b49      	ldr	r3, [pc, #292]	; (400678 <main+0x1b0>)
  400552:	4798      	blx	r3

  /* struct de configuracao do AFEC */
	struct afec_config afec_cfg;

  /* Carrega parametros padrao */
	afec_get_config_defaults(&afec_cfg);
  400554:	a80a      	add	r0, sp, #40	; 0x28
  400556:	4b49      	ldr	r3, [pc, #292]	; (40067c <main+0x1b4>)
  400558:	4798      	blx	r3

  /* Configura AFEC */
	afec_init(AFEC0, &afec_cfg);
  40055a:	a90a      	add	r1, sp, #40	; 0x28
  40055c:	4620      	mov	r0, r4
  40055e:	4b48      	ldr	r3, [pc, #288]	; (400680 <main+0x1b8>)
  400560:	4798      	blx	r3
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  400562:	6863      	ldr	r3, [r4, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  400564:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  400568:	6063      	str	r3, [r4, #4]
  
  /* Configura trigger por software */
  afec_set_trigger(AFEC0, AFEC_TRIG_SW);
  
  /* configura call back */
 	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_11,	AFEC_Temp_callback, 1); 
  40056a:	2301      	movs	r3, #1
  40056c:	4a45      	ldr	r2, [pc, #276]	; (400684 <main+0x1bc>)
  40056e:	210b      	movs	r1, #11
  400570:	4620      	mov	r0, r4
  400572:	4e45      	ldr	r6, [pc, #276]	; (400688 <main+0x1c0>)
  400574:	47b0      	blx	r6
   
  /*** Configuracao específica do canal AFEC ***/
  struct afec_ch_config afec_ch_cfg;
  afec_ch_get_config_defaults(&afec_ch_cfg);
  400576:	a809      	add	r0, sp, #36	; 0x24
  400578:	4b44      	ldr	r3, [pc, #272]	; (40068c <main+0x1c4>)
  40057a:	4798      	blx	r3
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  40057c:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
  afec_ch_set_config(AFEC0, AFEC_CHANNEL_TEMP_SENSOR, &afec_ch_cfg);
  400580:	aa09      	add	r2, sp, #36	; 0x24
  400582:	210b      	movs	r1, #11
  400584:	4620      	mov	r0, r4
  400586:	4b42      	ldr	r3, [pc, #264]	; (400690 <main+0x1c8>)
  400588:	4798      	blx	r3
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  40058a:	230b      	movs	r3, #11
  40058c:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  40058e:	f44f 7300 	mov.w	r3, #512	; 0x200
  400592:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec_channel_set_analog_offset(AFEC0, AFEC_CHANNEL_TEMP_SENSOR, 0x200);

  /***  Configura sensor de temperatura ***/
	struct afec_temp_sensor_config afec_temp_sensor_cfg;

	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  400594:	a807      	add	r0, sp, #28
  400596:	4b3f      	ldr	r3, [pc, #252]	; (400694 <main+0x1cc>)
  400598:	4798      	blx	r3
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  40059a:	a907      	add	r1, sp, #28
  40059c:	4620      	mov	r0, r4
  40059e:	4b3e      	ldr	r3, [pc, #248]	; (400698 <main+0x1d0>)
  4005a0:	4798      	blx	r3
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4005a2:	6167      	str	r7, [r4, #20]
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
	afec->AFEC_CR = AFEC_CR_START;
  4005a4:	2302      	movs	r3, #2
  4005a6:	6023      	str	r3, [r4, #0]
  /* Selecina canal e inicializa conversão */  
	afec_channel_enable(AFEC0, AFEC_CHANNEL_TEMP_SENSOR);
  

  afec_start_software_conversion(AFEC0);
	TC1_init(1);
  4005a8:	2001      	movs	r0, #1
  4005aa:	4b3c      	ldr	r3, [pc, #240]	; (40069c <main+0x1d4>)
  4005ac:	4798      	blx	r3
	while (1) {
		if(is_conversion_done == true) {
  4005ae:	4c3c      	ldr	r4, [pc, #240]	; (4006a0 <main+0x1d8>)
				printf(" 1 \n");
			}
			else if ((int)convert_adc_to_temp(g_ul_value)>36 && (int)convert_adc_to_temp(g_ul_value)<37){
				printf(" 2 \n");
			}
			else if ((int)convert_adc_to_temp(g_ul_value)>37.5) {
  4005b0:	f20f 0974 	addw	r9, pc, #116	; 0x74
  4005b4:	e9d9 8900 	ldrd	r8, r9, [r9]
  

  afec_start_software_conversion(AFEC0);
	TC1_init(1);
	while (1) {
		if(is_conversion_done == true) {
  4005b8:	7823      	ldrb	r3, [r4, #0]
  4005ba:	f013 0fff 	tst.w	r3, #255	; 0xff
  4005be:	d0fb      	beq.n	4005b8 <main+0xf0>
			is_conversion_done = false;
  4005c0:	2300      	movs	r3, #0
  4005c2:	7023      	strb	r3, [r4, #0]
			printf("TEMPERATURA : %d  \r\n", (int)convert_adc_to_temp(g_ul_value) );
  4005c4:	4e37      	ldr	r6, [pc, #220]	; (4006a4 <main+0x1dc>)
  4005c6:	6830      	ldr	r0, [r6, #0]
  4005c8:	4d37      	ldr	r5, [pc, #220]	; (4006a8 <main+0x1e0>)
  4005ca:	47a8      	blx	r5
  4005cc:	4601      	mov	r1, r0
  4005ce:	4837      	ldr	r0, [pc, #220]	; (4006ac <main+0x1e4>)
  4005d0:	4b37      	ldr	r3, [pc, #220]	; (4006b0 <main+0x1e8>)
  4005d2:	4798      	blx	r3

			if ((int)convert_adc_to_temp(g_ul_value)<36){
  4005d4:	6830      	ldr	r0, [r6, #0]
  4005d6:	47a8      	blx	r5
  4005d8:	2823      	cmp	r0, #35	; 0x23
  4005da:	dc03      	bgt.n	4005e4 <main+0x11c>
				printf(" 1 \n");
  4005dc:	4835      	ldr	r0, [pc, #212]	; (4006b4 <main+0x1ec>)
  4005de:	4b34      	ldr	r3, [pc, #208]	; (4006b0 <main+0x1e8>)
  4005e0:	4798      	blx	r3
  4005e2:	e7e9      	b.n	4005b8 <main+0xf0>
			}
			else if ((int)convert_adc_to_temp(g_ul_value)>36 && (int)convert_adc_to_temp(g_ul_value)<37){
  4005e4:	4b2f      	ldr	r3, [pc, #188]	; (4006a4 <main+0x1dc>)
  4005e6:	6818      	ldr	r0, [r3, #0]
  4005e8:	4b2f      	ldr	r3, [pc, #188]	; (4006a8 <main+0x1e0>)
  4005ea:	4798      	blx	r3
  4005ec:	2824      	cmp	r0, #36	; 0x24
  4005ee:	dd09      	ble.n	400604 <main+0x13c>
  4005f0:	4b2c      	ldr	r3, [pc, #176]	; (4006a4 <main+0x1dc>)
  4005f2:	6818      	ldr	r0, [r3, #0]
  4005f4:	4b2c      	ldr	r3, [pc, #176]	; (4006a8 <main+0x1e0>)
  4005f6:	4798      	blx	r3
  4005f8:	2824      	cmp	r0, #36	; 0x24
  4005fa:	dc03      	bgt.n	400604 <main+0x13c>
				printf(" 2 \n");
  4005fc:	482e      	ldr	r0, [pc, #184]	; (4006b8 <main+0x1f0>)
  4005fe:	4b2c      	ldr	r3, [pc, #176]	; (4006b0 <main+0x1e8>)
  400600:	4798      	blx	r3
  400602:	e7d9      	b.n	4005b8 <main+0xf0>
			}
			else if ((int)convert_adc_to_temp(g_ul_value)>37.5) {
  400604:	4b27      	ldr	r3, [pc, #156]	; (4006a4 <main+0x1dc>)
  400606:	6818      	ldr	r0, [r3, #0]
  400608:	4b27      	ldr	r3, [pc, #156]	; (4006a8 <main+0x1e0>)
  40060a:	4798      	blx	r3
  40060c:	4b2b      	ldr	r3, [pc, #172]	; (4006bc <main+0x1f4>)
  40060e:	4798      	blx	r3
  400610:	4642      	mov	r2, r8
  400612:	464b      	mov	r3, r9
  400614:	4d2a      	ldr	r5, [pc, #168]	; (4006c0 <main+0x1f8>)
  400616:	47a8      	blx	r5
  400618:	2800      	cmp	r0, #0
  40061a:	d0cd      	beq.n	4005b8 <main+0xf0>
				printf(" 3 \n");
  40061c:	4829      	ldr	r0, [pc, #164]	; (4006c4 <main+0x1fc>)
  40061e:	4b24      	ldr	r3, [pc, #144]	; (4006b0 <main+0x1e8>)
  400620:	4798      	blx	r3
  400622:	e7c9      	b.n	4005b8 <main+0xf0>
  400624:	f3af 8000 	nop.w
  400628:	00000000 	.word	0x00000000
  40062c:	4042c000 	.word	0x4042c000
  400630:	00400779 	.word	0x00400779
  400634:	00400ed5 	.word	0x00400ed5
  400638:	00400875 	.word	0x00400875
  40063c:	40028000 	.word	0x40028000
  400640:	20400968 	.word	0x20400968
  400644:	004002d1 	.word	0x004002d1
  400648:	20400964 	.word	0x20400964
  40064c:	004001f9 	.word	0x004001f9
  400650:	20400960 	.word	0x20400960
  400654:	08f0d180 	.word	0x08f0d180
  400658:	00400fd9 	.word	0x00400fd9
  40065c:	0040102d 	.word	0x0040102d
  400660:	00401035 	.word	0x00401035
  400664:	20400448 	.word	0x20400448
  400668:	00401945 	.word	0x00401945
  40066c:	004048b4 	.word	0x004048b4
  400670:	00401935 	.word	0x00401935
  400674:	4003c000 	.word	0x4003c000
  400678:	00400c8d 	.word	0x00400c8d
  40067c:	00400abd 	.word	0x00400abd
  400680:	00400b0d 	.word	0x00400b0d
  400684:	004001d9 	.word	0x004001d9
  400688:	00400c0d 	.word	0x00400c0d
  40068c:	00400aed 	.word	0x00400aed
  400690:	00400a79 	.word	0x00400a79
  400694:	00400af9 	.word	0x00400af9
  400698:	00400aa9 	.word	0x00400aa9
  40069c:	004003a5 	.word	0x004003a5
  4006a0:	204008a4 	.word	0x204008a4
  4006a4:	204008a8 	.word	0x204008a8
  4006a8:	0040019d 	.word	0x0040019d
  4006ac:	00404914 	.word	0x00404914
  4006b0:	00401809 	.word	0x00401809
  4006b4:	0040492c 	.word	0x0040492c
  4006b8:	00404934 	.word	0x00404934
  4006bc:	004015dd 	.word	0x004015dd
  4006c0:	004017a5 	.word	0x004017a5
  4006c4:	0040493c 	.word	0x0040493c

004006c8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4006c8:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4006ca:	0189      	lsls	r1, r1, #6
  4006cc:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4006ce:	2402      	movs	r4, #2
  4006d0:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4006d2:	f04f 31ff 	mov.w	r1, #4294967295
  4006d6:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4006d8:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4006da:	605a      	str	r2, [r3, #4]
}
  4006dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006e0:	4770      	bx	lr
  4006e2:	bf00      	nop

004006e4 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4006e4:	0189      	lsls	r1, r1, #6
  4006e6:	2305      	movs	r3, #5
  4006e8:	5043      	str	r3, [r0, r1]
  4006ea:	4770      	bx	lr

004006ec <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4006ec:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4006f0:	61ca      	str	r2, [r1, #28]
  4006f2:	4770      	bx	lr

004006f4 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4006f4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4006f8:	624a      	str	r2, [r1, #36]	; 0x24
  4006fa:	4770      	bx	lr

004006fc <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4006fc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400700:	6a08      	ldr	r0, [r1, #32]
}
  400702:	4770      	bx	lr

00400704 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400704:	b4f0      	push	{r4, r5, r6, r7}
  400706:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400708:	2402      	movs	r4, #2
  40070a:	9401      	str	r4, [sp, #4]
  40070c:	2408      	movs	r4, #8
  40070e:	9402      	str	r4, [sp, #8]
  400710:	2420      	movs	r4, #32
  400712:	9403      	str	r4, [sp, #12]
  400714:	2480      	movs	r4, #128	; 0x80
  400716:	9404      	str	r4, [sp, #16]
  400718:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40071a:	0be4      	lsrs	r4, r4, #15
  40071c:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40071e:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400722:	d81c      	bhi.n	40075e <tc_find_mck_divisor+0x5a>
  400724:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400726:	42a0      	cmp	r0, r4
  400728:	d21f      	bcs.n	40076a <tc_find_mck_divisor+0x66>
  40072a:	ae01      	add	r6, sp, #4
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  40072c:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  40072e:	f856 4f04 	ldr.w	r4, [r6, #4]!
  400732:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400736:	0c27      	lsrs	r7, r4, #16
		if (ul_freq > ul_high) {
  400738:	4284      	cmp	r4, r0
  40073a:	d312      	bcc.n	400762 <tc_find_mck_divisor+0x5e>
			return 0;
		} else if (ul_freq >= ul_low) {
  40073c:	4287      	cmp	r7, r0
  40073e:	d915      	bls.n	40076c <tc_find_mck_divisor+0x68>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  400740:	3501      	adds	r5, #1
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400742:	2d05      	cmp	r5, #5
  400744:	d1f3      	bne.n	40072e <tc_find_mck_divisor+0x2a>
		} else if (ul_freq >= ul_low) {
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400746:	2000      	movs	r0, #0
  400748:	e013      	b.n	400772 <tc_find_mck_divisor+0x6e>
	}

	/*  Store results. */
	if (p_uldiv) {
		*p_uldiv = divisors[ul_index];
  40074a:	a906      	add	r1, sp, #24
  40074c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400750:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400754:	6011      	str	r1, [r2, #0]
	}

	if (p_ultcclks) {
  400756:	b133      	cbz	r3, 400766 <tc_find_mck_divisor+0x62>
		*p_ultcclks = ul_index;
  400758:	601d      	str	r5, [r3, #0]
	}

	return 1;
  40075a:	2001      	movs	r0, #1
  40075c:	e009      	b.n	400772 <tc_find_mck_divisor+0x6e>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
  40075e:	2000      	movs	r0, #0
  400760:	e007      	b.n	400772 <tc_find_mck_divisor+0x6e>
  400762:	2000      	movs	r0, #0
  400764:	e005      	b.n	400772 <tc_find_mck_divisor+0x6e>

	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
  400766:	2001      	movs	r0, #1
  400768:	e003      	b.n	400772 <tc_find_mck_divisor+0x6e>
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  40076a:	2500      	movs	r5, #0
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
  40076c:	2a00      	cmp	r2, #0
  40076e:	d1ec      	bne.n	40074a <tc_find_mck_divisor+0x46>
  400770:	e7f1      	b.n	400756 <tc_find_mck_divisor+0x52>
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400772:	b006      	add	sp, #24
  400774:	bcf0      	pop	{r4, r5, r6, r7}
  400776:	4770      	bx	lr

00400778 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400778:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40077a:	4810      	ldr	r0, [pc, #64]	; (4007bc <sysclk_init+0x44>)
  40077c:	4b10      	ldr	r3, [pc, #64]	; (4007c0 <sysclk_init+0x48>)
  40077e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400780:	213e      	movs	r1, #62	; 0x3e
  400782:	2000      	movs	r0, #0
  400784:	4b0f      	ldr	r3, [pc, #60]	; (4007c4 <sysclk_init+0x4c>)
  400786:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400788:	4c0f      	ldr	r4, [pc, #60]	; (4007c8 <sysclk_init+0x50>)
  40078a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40078c:	2800      	cmp	r0, #0
  40078e:	d0fc      	beq.n	40078a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400790:	4b0e      	ldr	r3, [pc, #56]	; (4007cc <sysclk_init+0x54>)
  400792:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400794:	4a0e      	ldr	r2, [pc, #56]	; (4007d0 <sysclk_init+0x58>)
  400796:	4b0f      	ldr	r3, [pc, #60]	; (4007d4 <sysclk_init+0x5c>)
  400798:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40079a:	4c0f      	ldr	r4, [pc, #60]	; (4007d8 <sysclk_init+0x60>)
  40079c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40079e:	2800      	cmp	r0, #0
  4007a0:	d0fc      	beq.n	40079c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4007a2:	2002      	movs	r0, #2
  4007a4:	4b0d      	ldr	r3, [pc, #52]	; (4007dc <sysclk_init+0x64>)
  4007a6:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4007a8:	2000      	movs	r0, #0
  4007aa:	4b0d      	ldr	r3, [pc, #52]	; (4007e0 <sysclk_init+0x68>)
  4007ac:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4007ae:	4b0d      	ldr	r3, [pc, #52]	; (4007e4 <sysclk_init+0x6c>)
  4007b0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4007b2:	4802      	ldr	r0, [pc, #8]	; (4007bc <sysclk_init+0x44>)
  4007b4:	4b02      	ldr	r3, [pc, #8]	; (4007c0 <sysclk_init+0x48>)
  4007b6:	4798      	blx	r3
  4007b8:	bd10      	pop	{r4, pc}
  4007ba:	bf00      	nop
  4007bc:	11e1a300 	.word	0x11e1a300
  4007c0:	0040125d 	.word	0x0040125d
  4007c4:	00400e51 	.word	0x00400e51
  4007c8:	00400ea5 	.word	0x00400ea5
  4007cc:	00400eb5 	.word	0x00400eb5
  4007d0:	20183f01 	.word	0x20183f01
  4007d4:	400e0600 	.word	0x400e0600
  4007d8:	00400ec5 	.word	0x00400ec5
  4007dc:	00400dad 	.word	0x00400dad
  4007e0:	00400de9 	.word	0x00400de9
  4007e4:	0040114d 	.word	0x0040114d

004007e8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  4007e8:	b990      	cbnz	r0, 400810 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4007ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007ee:	460c      	mov	r4, r1
  4007f0:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4007f2:	2a00      	cmp	r2, #0
  4007f4:	dd0f      	ble.n	400816 <_read+0x2e>
  4007f6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4007f8:	4e08      	ldr	r6, [pc, #32]	; (40081c <_read+0x34>)
  4007fa:	4d09      	ldr	r5, [pc, #36]	; (400820 <_read+0x38>)
  4007fc:	6830      	ldr	r0, [r6, #0]
  4007fe:	4621      	mov	r1, r4
  400800:	682b      	ldr	r3, [r5, #0]
  400802:	4798      	blx	r3
		ptr++;
  400804:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400806:	42a7      	cmp	r7, r4
  400808:	d1f8      	bne.n	4007fc <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  40080a:	4640      	mov	r0, r8
  40080c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400810:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  400814:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400816:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  400818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40081c:	20400968 	.word	0x20400968
  400820:	20400960 	.word	0x20400960

00400824 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400824:	3801      	subs	r0, #1
  400826:	2802      	cmp	r0, #2
  400828:	d815      	bhi.n	400856 <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40082a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40082e:	460e      	mov	r6, r1
  400830:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400832:	b19a      	cbz	r2, 40085c <_write+0x38>
  400834:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400836:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400870 <_write+0x4c>
  40083a:	4f0c      	ldr	r7, [pc, #48]	; (40086c <_write+0x48>)
  40083c:	f8d8 0000 	ldr.w	r0, [r8]
  400840:	f815 1b01 	ldrb.w	r1, [r5], #1
  400844:	683b      	ldr	r3, [r7, #0]
  400846:	4798      	blx	r3
  400848:	2800      	cmp	r0, #0
  40084a:	db0a      	blt.n	400862 <_write+0x3e>
  40084c:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  40084e:	3c01      	subs	r4, #1
  400850:	d1f4      	bne.n	40083c <_write+0x18>
  400852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  400856:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  40085a:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  40085c:	2000      	movs	r0, #0
  40085e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400862:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40086a:	bf00      	nop
  40086c:	20400964 	.word	0x20400964
  400870:	20400968 	.word	0x20400968

00400874 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400876:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40087a:	4b57      	ldr	r3, [pc, #348]	; (4009d8 <board_init+0x164>)
  40087c:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40087e:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400882:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400886:	4b55      	ldr	r3, [pc, #340]	; (4009dc <board_init+0x168>)
  400888:	2200      	movs	r2, #0
  40088a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40088e:	695a      	ldr	r2, [r3, #20]
  400890:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400894:	615a      	str	r2, [r3, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400896:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40089a:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40089e:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4008a2:	f3c6 354e 	ubfx	r5, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4008a6:	f006 0707 	and.w	r7, r6, #7
  4008aa:	3704      	adds	r7, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4008ac:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4008b0:	fab6 f086 	clz	r0, r6
    wshift  = __CLZ(ways) & 0x1f;
  4008b4:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4008b8:	f3bf 8f4f 	dsb	sy

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4008bc:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  4008be:	4633      	mov	r3, r6
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  4008c0:	fa05 f107 	lsl.w	r1, r5, r7
  4008c4:	fa03 f200 	lsl.w	r2, r3, r0
  4008c8:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  4008ca:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
            } while(tmpways--);
  4008ce:	3b01      	subs	r3, #1
  4008d0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4008d4:	d1f6      	bne.n	4008c4 <board_init+0x50>
        } while(sets--);
  4008d6:	3d01      	subs	r5, #1
  4008d8:	f1b5 3fff 	cmp.w	r5, #4294967295
  4008dc:	d1ef      	bne.n	4008be <board_init+0x4a>
  4008de:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4008e2:	4b3e      	ldr	r3, [pc, #248]	; (4009dc <board_init+0x168>)
  4008e4:	695a      	ldr	r2, [r3, #20]
  4008e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4008ea:	615a      	str	r2, [r3, #20]
  4008ec:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4008f0:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4008f4:	4a3a      	ldr	r2, [pc, #232]	; (4009e0 <board_init+0x16c>)
  4008f6:	493b      	ldr	r1, [pc, #236]	; (4009e4 <board_init+0x170>)
  4008f8:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4008fa:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4008fe:	6051      	str	r1, [r2, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400900:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400904:	f3bf 8f6f 	isb	sy
static inline void tcm_disable(void) 
{

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400908:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  40090c:	f022 0201 	bic.w	r2, r2, #1
  400910:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400914:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400918:	f022 0201 	bic.w	r2, r2, #1
  40091c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400920:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400924:	f3bf 8f6f 	isb	sy
  400928:	200a      	movs	r0, #10
  40092a:	4c2f      	ldr	r4, [pc, #188]	; (4009e8 <board_init+0x174>)
  40092c:	47a0      	blx	r4
  40092e:	200b      	movs	r0, #11
  400930:	47a0      	blx	r4
  400932:	200c      	movs	r0, #12
  400934:	47a0      	blx	r4
  400936:	2010      	movs	r0, #16
  400938:	47a0      	blx	r4
  40093a:	2011      	movs	r0, #17
  40093c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40093e:	4b2b      	ldr	r3, [pc, #172]	; (4009ec <board_init+0x178>)
  400940:	f44f 7280 	mov.w	r2, #256	; 0x100
  400944:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400946:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40094a:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40094c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400950:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400954:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400956:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40095a:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40095c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400960:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  400962:	621a      	str	r2, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400968:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40096a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40096e:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400970:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400972:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400976:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400978:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40097c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400980:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400984:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400988:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40098a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40098e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400990:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400992:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400996:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400998:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40099c:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40099e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4009a0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4009a4:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4009a6:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4009a8:	4a11      	ldr	r2, [pc, #68]	; (4009f0 <board_init+0x17c>)
  4009aa:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4009ae:	f043 0310 	orr.w	r3, r3, #16
  4009b2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4009b6:	4b0f      	ldr	r3, [pc, #60]	; (4009f4 <board_init+0x180>)
  4009b8:	2210      	movs	r2, #16
  4009ba:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4009bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4009c0:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4009c2:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4009c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4009c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4009ca:	4311      	orrs	r1, r2
  4009cc:	6719      	str	r1, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  4009ce:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4009d0:	4311      	orrs	r1, r2
  4009d2:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4009d4:	605a      	str	r2, [r3, #4]
  4009d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4009d8:	400e1850 	.word	0x400e1850
  4009dc:	e000ed00 	.word	0xe000ed00
  4009e0:	400e0c00 	.word	0x400e0c00
  4009e4:	5a00080c 	.word	0x5a00080c
  4009e8:	00400ed5 	.word	0x00400ed5
  4009ec:	400e1200 	.word	0x400e1200
  4009f0:	40088000 	.word	0x40088000
  4009f4:	400e1000 	.word	0x400e1000

004009f8 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4009f8:	b570      	push	{r4, r5, r6, lr}
  4009fa:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4009fc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4009fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400a00:	4013      	ands	r3, r2
  400a02:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400a04:	2400      	movs	r4, #0
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  400a06:	4e1a      	ldr	r6, [pc, #104]	; (400a70 <afec_process_callback+0x78>)
  400a08:	4d1a      	ldr	r5, [pc, #104]	; (400a74 <afec_process_callback+0x7c>)
  400a0a:	42a8      	cmp	r0, r5
  400a0c:	bf14      	ite	ne
  400a0e:	2000      	movne	r0, #0
  400a10:	2001      	moveq	r0, #1
  400a12:	0105      	lsls	r5, r0, #4

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  400a14:	2c0b      	cmp	r4, #11
  400a16:	d80a      	bhi.n	400a2e <afec_process_callback+0x36>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  400a18:	9a01      	ldr	r2, [sp, #4]
  400a1a:	2301      	movs	r3, #1
  400a1c:	40a3      	lsls	r3, r4
  400a1e:	4213      	tst	r3, r2
  400a20:	d020      	beq.n	400a64 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  400a22:	192b      	adds	r3, r5, r4
  400a24:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400a28:	b1e3      	cbz	r3, 400a64 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  400a2a:	4798      	blx	r3
  400a2c:	e01a      	b.n	400a64 <afec_process_callback+0x6c>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400a2e:	2c0e      	cmp	r4, #14
  400a30:	d80c      	bhi.n	400a4c <afec_process_callback+0x54>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400a32:	9a01      	ldr	r2, [sp, #4]
  400a34:	f104 010c 	add.w	r1, r4, #12
  400a38:	2301      	movs	r3, #1
  400a3a:	408b      	lsls	r3, r1
  400a3c:	4213      	tst	r3, r2
  400a3e:	d011      	beq.n	400a64 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  400a40:	192b      	adds	r3, r5, r4
  400a42:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400a46:	b16b      	cbz	r3, 400a64 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  400a48:	4798      	blx	r3
  400a4a:	e00b      	b.n	400a64 <afec_process_callback+0x6c>
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400a4c:	9a01      	ldr	r2, [sp, #4]
  400a4e:	f104 010f 	add.w	r1, r4, #15
  400a52:	2301      	movs	r3, #1
  400a54:	408b      	lsls	r3, r1
  400a56:	4213      	tst	r3, r2
  400a58:	d004      	beq.n	400a64 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  400a5a:	192b      	adds	r3, r5, r4
  400a5c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400a60:	b103      	cbz	r3, 400a64 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  400a62:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400a64:	3401      	adds	r4, #1
  400a66:	2c10      	cmp	r4, #16
  400a68:	d1d4      	bne.n	400a14 <afec_process_callback+0x1c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400a6a:	b002      	add	sp, #8
  400a6c:	bd70      	pop	{r4, r5, r6, pc}
  400a6e:	bf00      	nop
  400a70:	2040096c 	.word	0x2040096c
  400a74:	40064000 	.word	0x40064000

00400a78 <afec_ch_set_config>:
 * \param channel The channel number
 * \param config   Configuration for the AFEC channel
 */
void afec_ch_set_config(Afec *const afec, const enum afec_channel_num channel,
		struct afec_ch_config *config)
{
  400a78:	b430      	push	{r4, r5}
	afec_ch_sanity_check(afec, channel);
	uint32_t reg = 0;

	reg = afec->AFEC_DIFFR;
  400a7a:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400a7c:	2301      	movs	r3, #1
  400a7e:	408b      	lsls	r3, r1
  400a80:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400a84:	7815      	ldrb	r5, [r2, #0]
  400a86:	2d00      	cmp	r5, #0
  400a88:	bf08      	it	eq
  400a8a:	2300      	moveq	r3, #0
  400a8c:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  400a8e:	6603      	str	r3, [r0, #96]	; 0x60

	reg = afec->AFEC_CGR;
  400a90:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  400a92:	004d      	lsls	r5, r1, #1
  400a94:	2103      	movs	r1, #3
  400a96:	40a9      	lsls	r1, r5
  400a98:	ea24 0301 	bic.w	r3, r4, r1
	reg |= (config->gain) << (2 * channel);
  400a9c:	7851      	ldrb	r1, [r2, #1]
  400a9e:	40a9      	lsls	r1, r5
  400aa0:	4319      	orrs	r1, r3
	afec->AFEC_CGR = reg;
  400aa2:	6541      	str	r1, [r0, #84]	; 0x54
}
  400aa4:	bc30      	pop	{r4, r5}
  400aa6:	4770      	bx	lr

00400aa8 <afec_temp_sensor_set_config>:
{
	Assert(afec == AFEC0);

	uint32_t reg = 0;

	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  400aa8:	784a      	ldrb	r2, [r1, #1]
  400aaa:	780b      	ldrb	r3, [r1, #0]
  400aac:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  400aae:	6703      	str	r3, [r0, #112]	; 0x70

	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  400ab0:	888a      	ldrh	r2, [r1, #4]
  400ab2:	884b      	ldrh	r3, [r1, #2]
  400ab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400ab8:	6743      	str	r3, [r0, #116]	; 0x74
  400aba:	4770      	bx	lr

00400abc <afec_get_config_defaults>:
void afec_get_config_defaults(struct afec_config *const cfg)
{
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  400abc:	2200      	movs	r2, #0
  400abe:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400ac0:	4b08      	ldr	r3, [pc, #32]	; (400ae4 <afec_get_config_defaults+0x28>)
  400ac2:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400ac4:	4b08      	ldr	r3, [pc, #32]	; (400ae8 <afec_get_config_defaults+0x2c>)
  400ac6:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400ac8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400acc:	60c3      	str	r3, [r0, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  400ace:	2302      	movs	r3, #2
  400ad0:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  400ad2:	2301      	movs	r3, #1
  400ad4:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  400ad6:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400ad8:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400ada:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400adc:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400ade:	7583      	strb	r3, [r0, #22]
  400ae0:	4770      	bx	lr
  400ae2:	bf00      	nop
  400ae4:	11e1a300 	.word	0x11e1a300
  400ae8:	005b8d80 	.word	0x005b8d80

00400aec <afec_ch_get_config_defaults>:
void afec_ch_get_config_defaults(struct afec_ch_config *const cfg)
{
	/*Sanity check argument. */
	Assert(cfg);

	cfg->diff = false;
  400aec:	2300      	movs	r3, #0
  400aee:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400af0:	2301      	movs	r3, #1
  400af2:	7043      	strb	r3, [r0, #1]
  400af4:	4770      	bx	lr
  400af6:	bf00      	nop

00400af8 <afec_temp_sensor_get_config_defaults>:
		struct afec_temp_sensor_config *const cfg)
{
	/*Sanity check argument. */
	Assert(cfg);

	cfg->rctc = false;
  400af8:	2300      	movs	r3, #0
  400afa:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  400afc:	2320      	movs	r3, #32
  400afe:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  400b00:	23ff      	movs	r3, #255	; 0xff
  400b02:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  400b04:	f640 73ff 	movw	r3, #4095	; 0xfff
  400b08:	8083      	strh	r3, [r0, #4]
  400b0a:	4770      	bx	lr

00400b0c <afec_init>:
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400b0c:	6b03      	ldr	r3, [r0, #48]	; 0x30
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400b0e:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  400b12:	d150      	bne.n	400bb6 <afec_init+0xaa>
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  400b14:	b410      	push	{r4}
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  400b16:	2201      	movs	r2, #1
  400b18:	6002      	str	r2, [r0, #0]
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400b1a:	7cca      	ldrb	r2, [r1, #19]
  400b1c:	2a00      	cmp	r2, #0
  400b1e:	bf18      	it	ne
  400b20:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
  400b24:	684a      	ldr	r2, [r1, #4]
  400b26:	688c      	ldr	r4, [r1, #8]
  400b28:	fbb2 f2f4 	udiv	r2, r2, r4
  400b2c:	3a01      	subs	r2, #1
  400b2e:	0212      	lsls	r2, r2, #8
  400b30:	b292      	uxth	r2, r2
  400b32:	68cc      	ldr	r4, [r1, #12]
  400b34:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  400b38:	4322      	orrs	r2, r4
  400b3a:	7c0c      	ldrb	r4, [r1, #16]
  400b3c:	0624      	lsls	r4, r4, #24
  400b3e:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
  400b42:	4322      	orrs	r2, r4
  400b44:	7c4c      	ldrb	r4, [r1, #17]
  400b46:	0724      	lsls	r4, r4, #28
  400b48:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
  400b4c:	4322      	orrs	r2, r4
  400b4e:	4313      	orrs	r3, r2
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;
  400b50:	6043      	str	r3, [r0, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400b52:	7d0b      	ldrb	r3, [r1, #20]
  400b54:	2b00      	cmp	r3, #0
  400b56:	bf14      	ite	ne
  400b58:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
  400b5c:	2200      	moveq	r2, #0
  400b5e:	680b      	ldr	r3, [r1, #0]
  400b60:	431a      	orrs	r2, r3
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  400b62:	7d4b      	ldrb	r3, [r1, #21]
  400b64:	2b00      	cmp	r3, #0
  400b66:	bf14      	ite	ne
  400b68:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
  400b6c:	2300      	moveq	r3, #0
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
			(config->resolution) |
  400b6e:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400b70:	6083      	str	r3, [r0, #8]
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400b72:	7d8b      	ldrb	r3, [r1, #22]
  400b74:	021b      	lsls	r3, r3, #8
  400b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400b7a:	f043 030c 	orr.w	r3, r3, #12
  400b7e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
  400b82:	4b10      	ldr	r3, [pc, #64]	; (400bc4 <afec_init+0xb8>)
  400b84:	4298      	cmp	r0, r3
  400b86:	d109      	bne.n	400b9c <afec_init+0x90>
  400b88:	4b0f      	ldr	r3, [pc, #60]	; (400bc8 <afec_init+0xbc>)
  400b8a:	f103 0140 	add.w	r1, r3, #64	; 0x40
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
  400b8e:	2200      	movs	r2, #0
  400b90:	f843 2f04 	str.w	r2, [r3, #4]!
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400b94:	428b      	cmp	r3, r1
  400b96:	d1fb      	bne.n	400b90 <afec_init+0x84>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  400b98:	2000      	movs	r0, #0
  400b9a:	e00f      	b.n	400bbc <afec_init+0xb0>
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
  400b9c:	4b0b      	ldr	r3, [pc, #44]	; (400bcc <afec_init+0xc0>)
  400b9e:	4298      	cmp	r0, r3
  400ba0:	d10b      	bne.n	400bba <afec_init+0xae>
  400ba2:	4b0b      	ldr	r3, [pc, #44]	; (400bd0 <afec_init+0xc4>)
  400ba4:	f103 0140 	add.w	r1, r3, #64	; 0x40
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
  400ba8:	2200      	movs	r2, #0
  400baa:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400bae:	428b      	cmp	r3, r1
  400bb0:	d1fb      	bne.n	400baa <afec_init+0x9e>
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  400bb2:	2000      	movs	r0, #0
  400bb4:	e002      	b.n	400bbc <afec_init+0xb0>
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
  400bb6:	2019      	movs	r0, #25
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
}
  400bb8:	4770      	bx	lr
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  400bba:	2000      	movs	r0, #0
}
  400bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
  400bc0:	4770      	bx	lr
  400bc2:	bf00      	nop
  400bc4:	4003c000 	.word	0x4003c000
  400bc8:	20400968 	.word	0x20400968
  400bcc:	40064000 	.word	0x40064000
  400bd0:	204009a8 	.word	0x204009a8

00400bd4 <afec_enable_interrupt>:
 * \param interrupt_source Interrupts to be enabled.
 */
void afec_enable_interrupt(Afec *const afec,
		enum afec_interrupt_source interrupt_source)
{
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400bd4:	4b0c      	ldr	r3, [pc, #48]	; (400c08 <afec_enable_interrupt+0x34>)
  400bd6:	4299      	cmp	r1, r3
  400bd8:	d101      	bne.n	400bde <afec_enable_interrupt+0xa>
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  400bda:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  400bdc:	4770      	bx	lr
	}

	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400bde:	290b      	cmp	r1, #11
  400be0:	d809      	bhi.n	400bf6 <afec_enable_interrupt+0x22>
	  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  400be2:	d103      	bne.n	400bec <afec_enable_interrupt+0x18>
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  400be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400be8:	6243      	str	r3, [r0, #36]	; 0x24
  400bea:	4770      	bx	lr
	  #else
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
	  #endif 
		} else {
			afec->AFEC_IER = 1 << interrupt_source;
  400bec:	2301      	movs	r3, #1
  400bee:	fa03 f101 	lsl.w	r1, r3, r1
  400bf2:	6241      	str	r1, [r0, #36]	; 0x24
  400bf4:	4770      	bx	lr
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  400bf6:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400bf8:	bf94      	ite	ls
  400bfa:	310c      	addls	r1, #12
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400bfc:	310f      	addhi	r1, #15
  400bfe:	2301      	movs	r3, #1
  400c00:	fa03 f101 	lsl.w	r1, r3, r1
  400c04:	6241      	str	r1, [r0, #36]	; 0x24
  400c06:	4770      	bx	lr
  400c08:	47000fff 	.word	0x47000fff

00400c0c <afec_set_callback>:
 * \param callback  Callback function pointer
 * \param irq_level Interrupt level
 */
void afec_set_callback(Afec *const afec, enum afec_interrupt_source source,
		afec_callback_t callback, uint8_t irq_level)
{
  400c0c:	b538      	push	{r3, r4, r5, lr}
	Assert(afec);
	Assert(callback);

	uint32_t i = afec_find_inst_num(afec);
	afec_callback_pointer[i][source] = callback;
  400c0e:	4c11      	ldr	r4, [pc, #68]	; (400c54 <afec_set_callback+0x48>)
  400c10:	42a0      	cmp	r0, r4
  400c12:	bf0c      	ite	eq
  400c14:	2410      	moveq	r4, #16
  400c16:	2400      	movne	r4, #0
  400c18:	440c      	add	r4, r1
  400c1a:	4d0f      	ldr	r5, [pc, #60]	; (400c58 <afec_set_callback+0x4c>)
  400c1c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  400c20:	d00a      	beq.n	400c38 <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400c22:	4a0e      	ldr	r2, [pc, #56]	; (400c5c <afec_set_callback+0x50>)
  400c24:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  400c28:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400c2c:	015b      	lsls	r3, r3, #5
  400c2e:	b2db      	uxtb	r3, r3
  400c30:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400c34:	6014      	str	r4, [r2, #0]
  400c36:	e009      	b.n	400c4c <afec_set_callback+0x40>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400c38:	4a08      	ldr	r2, [pc, #32]	; (400c5c <afec_set_callback+0x50>)
  400c3a:	f44f 7480 	mov.w	r4, #256	; 0x100
  400c3e:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400c42:	015b      	lsls	r3, r3, #5
  400c44:	b2db      	uxtb	r3, r3
  400c46:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400c4a:	6054      	str	r4, [r2, #4]
		irq_register_handler(AFEC0_IRQn, irq_level);
	} else if (i == 1) {
		irq_register_handler(AFEC1_IRQn, irq_level);
	}
	/* Enable the specified interrupt source */
	afec_enable_interrupt(afec, source);
  400c4c:	4b04      	ldr	r3, [pc, #16]	; (400c60 <afec_set_callback+0x54>)
  400c4e:	4798      	blx	r3
  400c50:	bd38      	pop	{r3, r4, r5, pc}
  400c52:	bf00      	nop
  400c54:	40064000 	.word	0x40064000
  400c58:	2040096c 	.word	0x2040096c
  400c5c:	e000e100 	.word	0xe000e100
  400c60:	00400bd5 	.word	0x00400bd5

00400c64 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400c64:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400c66:	4802      	ldr	r0, [pc, #8]	; (400c70 <AFEC0_Handler+0xc>)
  400c68:	4b02      	ldr	r3, [pc, #8]	; (400c74 <AFEC0_Handler+0x10>)
  400c6a:	4798      	blx	r3
  400c6c:	bd08      	pop	{r3, pc}
  400c6e:	bf00      	nop
  400c70:	4003c000 	.word	0x4003c000
  400c74:	004009f9 	.word	0x004009f9

00400c78 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400c78:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400c7a:	4802      	ldr	r0, [pc, #8]	; (400c84 <AFEC1_Handler+0xc>)
  400c7c:	4b02      	ldr	r3, [pc, #8]	; (400c88 <AFEC1_Handler+0x10>)
  400c7e:	4798      	blx	r3
  400c80:	bd08      	pop	{r3, pc}
  400c82:	bf00      	nop
  400c84:	40064000 	.word	0x40064000
  400c88:	004009f9 	.word	0x004009f9

00400c8c <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400c8c:	b500      	push	{lr}
  400c8e:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400c90:	4b13      	ldr	r3, [pc, #76]	; (400ce0 <afec_enable+0x54>)
  400c92:	4298      	cmp	r0, r3
  400c94:	bf0c      	ite	eq
  400c96:	2028      	moveq	r0, #40	; 0x28
  400c98:	201d      	movne	r0, #29
  400c9a:	4b12      	ldr	r3, [pc, #72]	; (400ce4 <afec_enable+0x58>)
  400c9c:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400c9e:	4b12      	ldr	r3, [pc, #72]	; (400ce8 <afec_enable+0x5c>)
  400ca0:	789b      	ldrb	r3, [r3, #2]
  400ca2:	2bff      	cmp	r3, #255	; 0xff
  400ca4:	d100      	bne.n	400ca8 <afec_enable+0x1c>
  400ca6:	e7fe      	b.n	400ca6 <afec_enable+0x1a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400ca8:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400cac:	fab3 f383 	clz	r3, r3
  400cb0:	095b      	lsrs	r3, r3, #5
  400cb2:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400cb4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400cb6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400cba:	2200      	movs	r2, #0
  400cbc:	4b0b      	ldr	r3, [pc, #44]	; (400cec <afec_enable+0x60>)
  400cbe:	701a      	strb	r2, [r3, #0]
	return flags;
  400cc0:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400cc2:	4a09      	ldr	r2, [pc, #36]	; (400ce8 <afec_enable+0x5c>)
  400cc4:	7893      	ldrb	r3, [r2, #2]
  400cc6:	3301      	adds	r3, #1
  400cc8:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400cca:	b129      	cbz	r1, 400cd8 <afec_enable+0x4c>
		cpu_irq_enable();
  400ccc:	2201      	movs	r2, #1
  400cce:	4b07      	ldr	r3, [pc, #28]	; (400cec <afec_enable+0x60>)
  400cd0:	701a      	strb	r2, [r3, #0]
  400cd2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400cd6:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400cd8:	b003      	add	sp, #12
  400cda:	f85d fb04 	ldr.w	pc, [sp], #4
  400cde:	bf00      	nop
  400ce0:	40064000 	.word	0x40064000
  400ce4:	00400ed5 	.word	0x00400ed5
  400ce8:	20400958 	.word	0x20400958
  400cec:	20400014 	.word	0x20400014

00400cf0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400cf0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400cf2:	4770      	bx	lr

00400cf4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400cf4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400cf6:	4770      	bx	lr

00400cf8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400cfc:	4604      	mov	r4, r0
  400cfe:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400d00:	4b0e      	ldr	r3, [pc, #56]	; (400d3c <pio_handler_process+0x44>)
  400d02:	4798      	blx	r3
  400d04:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400d06:	4620      	mov	r0, r4
  400d08:	4b0d      	ldr	r3, [pc, #52]	; (400d40 <pio_handler_process+0x48>)
  400d0a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400d0c:	4005      	ands	r5, r0
  400d0e:	d013      	beq.n	400d38 <pio_handler_process+0x40>
  400d10:	4c0c      	ldr	r4, [pc, #48]	; (400d44 <pio_handler_process+0x4c>)
  400d12:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400d16:	6823      	ldr	r3, [r4, #0]
  400d18:	4543      	cmp	r3, r8
  400d1a:	d108      	bne.n	400d2e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400d1c:	6861      	ldr	r1, [r4, #4]
  400d1e:	4229      	tst	r1, r5
  400d20:	d005      	beq.n	400d2e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400d22:	68e3      	ldr	r3, [r4, #12]
  400d24:	4640      	mov	r0, r8
  400d26:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400d28:	6863      	ldr	r3, [r4, #4]
  400d2a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400d2e:	42b4      	cmp	r4, r6
  400d30:	d002      	beq.n	400d38 <pio_handler_process+0x40>
  400d32:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400d34:	2d00      	cmp	r5, #0
  400d36:	d1ee      	bne.n	400d16 <pio_handler_process+0x1e>
  400d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400d3c:	00400cf1 	.word	0x00400cf1
  400d40:	00400cf5 	.word	0x00400cf5
  400d44:	204008ac 	.word	0x204008ac

00400d48 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400d48:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400d4a:	210a      	movs	r1, #10
  400d4c:	4801      	ldr	r0, [pc, #4]	; (400d54 <PIOA_Handler+0xc>)
  400d4e:	4b02      	ldr	r3, [pc, #8]	; (400d58 <PIOA_Handler+0x10>)
  400d50:	4798      	blx	r3
  400d52:	bd08      	pop	{r3, pc}
  400d54:	400e0e00 	.word	0x400e0e00
  400d58:	00400cf9 	.word	0x00400cf9

00400d5c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400d5c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400d5e:	210b      	movs	r1, #11
  400d60:	4801      	ldr	r0, [pc, #4]	; (400d68 <PIOB_Handler+0xc>)
  400d62:	4b02      	ldr	r3, [pc, #8]	; (400d6c <PIOB_Handler+0x10>)
  400d64:	4798      	blx	r3
  400d66:	bd08      	pop	{r3, pc}
  400d68:	400e1000 	.word	0x400e1000
  400d6c:	00400cf9 	.word	0x00400cf9

00400d70 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400d70:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400d72:	210c      	movs	r1, #12
  400d74:	4801      	ldr	r0, [pc, #4]	; (400d7c <PIOC_Handler+0xc>)
  400d76:	4b02      	ldr	r3, [pc, #8]	; (400d80 <PIOC_Handler+0x10>)
  400d78:	4798      	blx	r3
  400d7a:	bd08      	pop	{r3, pc}
  400d7c:	400e1200 	.word	0x400e1200
  400d80:	00400cf9 	.word	0x00400cf9

00400d84 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400d84:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400d86:	2110      	movs	r1, #16
  400d88:	4801      	ldr	r0, [pc, #4]	; (400d90 <PIOD_Handler+0xc>)
  400d8a:	4b02      	ldr	r3, [pc, #8]	; (400d94 <PIOD_Handler+0x10>)
  400d8c:	4798      	blx	r3
  400d8e:	bd08      	pop	{r3, pc}
  400d90:	400e1400 	.word	0x400e1400
  400d94:	00400cf9 	.word	0x00400cf9

00400d98 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400d98:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400d9a:	2111      	movs	r1, #17
  400d9c:	4801      	ldr	r0, [pc, #4]	; (400da4 <PIOE_Handler+0xc>)
  400d9e:	4b02      	ldr	r3, [pc, #8]	; (400da8 <PIOE_Handler+0x10>)
  400da0:	4798      	blx	r3
  400da2:	bd08      	pop	{r3, pc}
  400da4:	400e1600 	.word	0x400e1600
  400da8:	00400cf9 	.word	0x00400cf9

00400dac <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400dac:	2803      	cmp	r0, #3
  400dae:	d007      	beq.n	400dc0 <pmc_mck_set_division+0x14>
  400db0:	2804      	cmp	r0, #4
  400db2:	d008      	beq.n	400dc6 <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400db4:	2802      	cmp	r0, #2
  400db6:	bf0c      	ite	eq
  400db8:	f44f 7280 	moveq.w	r2, #256	; 0x100
  400dbc:	2200      	movne	r2, #0
  400dbe:	e004      	b.n	400dca <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400dc0:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  400dc4:	e001      	b.n	400dca <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400dca:	4906      	ldr	r1, [pc, #24]	; (400de4 <pmc_mck_set_division+0x38>)
  400dcc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400dd2:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  400dd4:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400dd6:	460a      	mov	r2, r1
  400dd8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400dda:	f013 0f08 	tst.w	r3, #8
  400dde:	d0fb      	beq.n	400dd8 <pmc_mck_set_division+0x2c>
}
  400de0:	4770      	bx	lr
  400de2:	bf00      	nop
  400de4:	400e0600 	.word	0x400e0600

00400de8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400de8:	4a18      	ldr	r2, [pc, #96]	; (400e4c <pmc_switch_mck_to_pllack+0x64>)
  400dea:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400df0:	4318      	orrs	r0, r3
  400df2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400df4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400df6:	f013 0f08 	tst.w	r3, #8
  400dfa:	d003      	beq.n	400e04 <pmc_switch_mck_to_pllack+0x1c>
  400dfc:	e009      	b.n	400e12 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400dfe:	3b01      	subs	r3, #1
  400e00:	d103      	bne.n	400e0a <pmc_switch_mck_to_pllack+0x22>
  400e02:	e01e      	b.n	400e42 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400e08:	4910      	ldr	r1, [pc, #64]	; (400e4c <pmc_switch_mck_to_pllack+0x64>)
  400e0a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400e0c:	f012 0f08 	tst.w	r2, #8
  400e10:	d0f5      	beq.n	400dfe <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400e12:	4a0e      	ldr	r2, [pc, #56]	; (400e4c <pmc_switch_mck_to_pllack+0x64>)
  400e14:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e16:	f023 0303 	bic.w	r3, r3, #3
  400e1a:	f043 0302 	orr.w	r3, r3, #2
  400e1e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e20:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400e22:	f010 0008 	ands.w	r0, r0, #8
  400e26:	d004      	beq.n	400e32 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400e28:	2000      	movs	r0, #0
  400e2a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e2c:	3b01      	subs	r3, #1
  400e2e:	d103      	bne.n	400e38 <pmc_switch_mck_to_pllack+0x50>
  400e30:	e009      	b.n	400e46 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400e36:	4905      	ldr	r1, [pc, #20]	; (400e4c <pmc_switch_mck_to_pllack+0x64>)
  400e38:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400e3a:	f012 0f08 	tst.w	r2, #8
  400e3e:	d0f5      	beq.n	400e2c <pmc_switch_mck_to_pllack+0x44>
  400e40:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400e42:	2001      	movs	r0, #1
  400e44:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400e46:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400e48:	4770      	bx	lr
  400e4a:	bf00      	nop
  400e4c:	400e0600 	.word	0x400e0600

00400e50 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400e50:	b138      	cbz	r0, 400e62 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e52:	490e      	ldr	r1, [pc, #56]	; (400e8c <pmc_switch_mainck_to_xtal+0x3c>)
  400e54:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400e56:	4a0e      	ldr	r2, [pc, #56]	; (400e90 <pmc_switch_mainck_to_xtal+0x40>)
  400e58:	401a      	ands	r2, r3
  400e5a:	4b0e      	ldr	r3, [pc, #56]	; (400e94 <pmc_switch_mainck_to_xtal+0x44>)
  400e5c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e5e:	620b      	str	r3, [r1, #32]
  400e60:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e62:	480a      	ldr	r0, [pc, #40]	; (400e8c <pmc_switch_mainck_to_xtal+0x3c>)
  400e64:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400e66:	0209      	lsls	r1, r1, #8
  400e68:	b289      	uxth	r1, r1
  400e6a:	4a0b      	ldr	r2, [pc, #44]	; (400e98 <pmc_switch_mainck_to_xtal+0x48>)
  400e6c:	401a      	ands	r2, r3
  400e6e:	4b0b      	ldr	r3, [pc, #44]	; (400e9c <pmc_switch_mainck_to_xtal+0x4c>)
  400e70:	4313      	orrs	r3, r2
  400e72:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e74:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400e76:	4602      	mov	r2, r0
  400e78:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e7a:	f013 0f01 	tst.w	r3, #1
  400e7e:	d0fb      	beq.n	400e78 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400e80:	4a02      	ldr	r2, [pc, #8]	; (400e8c <pmc_switch_mainck_to_xtal+0x3c>)
  400e82:	6a11      	ldr	r1, [r2, #32]
  400e84:	4b06      	ldr	r3, [pc, #24]	; (400ea0 <pmc_switch_mainck_to_xtal+0x50>)
  400e86:	430b      	orrs	r3, r1
  400e88:	6213      	str	r3, [r2, #32]
  400e8a:	4770      	bx	lr
  400e8c:	400e0600 	.word	0x400e0600
  400e90:	fec8fffc 	.word	0xfec8fffc
  400e94:	01370002 	.word	0x01370002
  400e98:	ffc8fffc 	.word	0xffc8fffc
  400e9c:	00370001 	.word	0x00370001
  400ea0:	01370000 	.word	0x01370000

00400ea4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400ea4:	4b02      	ldr	r3, [pc, #8]	; (400eb0 <pmc_osc_is_ready_mainck+0xc>)
  400ea6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400ea8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400eac:	4770      	bx	lr
  400eae:	bf00      	nop
  400eb0:	400e0600 	.word	0x400e0600

00400eb4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400eb4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400eb8:	4b01      	ldr	r3, [pc, #4]	; (400ec0 <pmc_disable_pllack+0xc>)
  400eba:	629a      	str	r2, [r3, #40]	; 0x28
  400ebc:	4770      	bx	lr
  400ebe:	bf00      	nop
  400ec0:	400e0600 	.word	0x400e0600

00400ec4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400ec4:	4b02      	ldr	r3, [pc, #8]	; (400ed0 <pmc_is_locked_pllack+0xc>)
  400ec6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400ec8:	f000 0002 	and.w	r0, r0, #2
  400ecc:	4770      	bx	lr
  400ece:	bf00      	nop
  400ed0:	400e0600 	.word	0x400e0600

00400ed4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400ed4:	283f      	cmp	r0, #63	; 0x3f
  400ed6:	d81e      	bhi.n	400f16 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400ed8:	281f      	cmp	r0, #31
  400eda:	d80c      	bhi.n	400ef6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400edc:	4b11      	ldr	r3, [pc, #68]	; (400f24 <pmc_enable_periph_clk+0x50>)
  400ede:	699a      	ldr	r2, [r3, #24]
  400ee0:	2301      	movs	r3, #1
  400ee2:	4083      	lsls	r3, r0
  400ee4:	4393      	bics	r3, r2
  400ee6:	d018      	beq.n	400f1a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400ee8:	2301      	movs	r3, #1
  400eea:	fa03 f000 	lsl.w	r0, r3, r0
  400eee:	4b0d      	ldr	r3, [pc, #52]	; (400f24 <pmc_enable_periph_clk+0x50>)
  400ef0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400ef2:	2000      	movs	r0, #0
  400ef4:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400ef6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400ef8:	4b0a      	ldr	r3, [pc, #40]	; (400f24 <pmc_enable_periph_clk+0x50>)
  400efa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400efe:	2301      	movs	r3, #1
  400f00:	4083      	lsls	r3, r0
  400f02:	4393      	bics	r3, r2
  400f04:	d00b      	beq.n	400f1e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400f06:	2301      	movs	r3, #1
  400f08:	fa03 f000 	lsl.w	r0, r3, r0
  400f0c:	4b05      	ldr	r3, [pc, #20]	; (400f24 <pmc_enable_periph_clk+0x50>)
  400f0e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  400f12:	2000      	movs	r0, #0
  400f14:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400f16:	2001      	movs	r0, #1
  400f18:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400f1a:	2000      	movs	r0, #0
  400f1c:	4770      	bx	lr
  400f1e:	2000      	movs	r0, #0
}
  400f20:	4770      	bx	lr
  400f22:	bf00      	nop
  400f24:	400e0600 	.word	0x400e0600

00400f28 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400f28:	6943      	ldr	r3, [r0, #20]
  400f2a:	f013 0f02 	tst.w	r3, #2
  400f2e:	d002      	beq.n	400f36 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400f30:	61c1      	str	r1, [r0, #28]
	return 0;
  400f32:	2000      	movs	r0, #0
  400f34:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400f36:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400f38:	4770      	bx	lr
  400f3a:	bf00      	nop

00400f3c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400f3c:	6943      	ldr	r3, [r0, #20]
  400f3e:	f013 0f01 	tst.w	r3, #1
  400f42:	d003      	beq.n	400f4c <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400f44:	6983      	ldr	r3, [r0, #24]
  400f46:	700b      	strb	r3, [r1, #0]
	return 0;
  400f48:	2000      	movs	r0, #0
  400f4a:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400f4c:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400f4e:	4770      	bx	lr

00400f50 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400f50:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400f52:	010c      	lsls	r4, r1, #4
  400f54:	4294      	cmp	r4, r2
  400f56:	d90f      	bls.n	400f78 <usart_set_async_baudrate+0x28>
  400f58:	e01a      	b.n	400f90 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400f5a:	6841      	ldr	r1, [r0, #4]
  400f5c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400f60:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400f62:	0412      	lsls	r2, r2, #16
  400f64:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400f68:	431a      	orrs	r2, r3
  400f6a:	6202      	str	r2, [r0, #32]

	return 0;
  400f6c:	2000      	movs	r0, #0
  400f6e:	e01c      	b.n	400faa <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  400f70:	2001      	movs	r0, #1
  400f72:	e01a      	b.n	400faa <usart_set_async_baudrate+0x5a>
  400f74:	2001      	movs	r0, #1
  400f76:	e018      	b.n	400faa <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400f78:	0863      	lsrs	r3, r4, #1
  400f7a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400f7e:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  400f82:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400f84:	1e5c      	subs	r4, r3, #1
  400f86:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400f8a:	428c      	cmp	r4, r1
  400f8c:	d9e9      	bls.n	400f62 <usart_set_async_baudrate+0x12>
  400f8e:	e7ef      	b.n	400f70 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400f90:	00c9      	lsls	r1, r1, #3
  400f92:	084b      	lsrs	r3, r1, #1
  400f94:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400f98:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400f9c:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400f9e:	1e5c      	subs	r4, r3, #1
  400fa0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400fa4:	428c      	cmp	r4, r1
  400fa6:	d8e5      	bhi.n	400f74 <usart_set_async_baudrate+0x24>
  400fa8:	e7d7      	b.n	400f5a <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  400faa:	f85d 4b04 	ldr.w	r4, [sp], #4
  400fae:	4770      	bx	lr

00400fb0 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400fb0:	4b08      	ldr	r3, [pc, #32]	; (400fd4 <usart_reset+0x24>)
  400fb2:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400fb6:	2300      	movs	r3, #0
  400fb8:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400fba:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400fbc:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400fbe:	2388      	movs	r3, #136	; 0x88
  400fc0:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400fc2:	2324      	movs	r3, #36	; 0x24
  400fc4:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  400fc6:	f44f 7380 	mov.w	r3, #256	; 0x100
  400fca:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  400fcc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400fd0:	6003      	str	r3, [r0, #0]
  400fd2:	4770      	bx	lr
  400fd4:	55534100 	.word	0x55534100

00400fd8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400fd8:	b570      	push	{r4, r5, r6, lr}
  400fda:	4605      	mov	r5, r0
  400fdc:	460c      	mov	r4, r1
  400fde:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400fe0:	4b0f      	ldr	r3, [pc, #60]	; (401020 <usart_init_rs232+0x48>)
  400fe2:	4798      	blx	r3

	ul_reg_val = 0;
  400fe4:	2200      	movs	r2, #0
  400fe6:	4b0f      	ldr	r3, [pc, #60]	; (401024 <usart_init_rs232+0x4c>)
  400fe8:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400fea:	b19c      	cbz	r4, 401014 <usart_init_rs232+0x3c>
  400fec:	4632      	mov	r2, r6
  400fee:	6821      	ldr	r1, [r4, #0]
  400ff0:	4628      	mov	r0, r5
  400ff2:	4b0d      	ldr	r3, [pc, #52]	; (401028 <usart_init_rs232+0x50>)
  400ff4:	4798      	blx	r3
  400ff6:	4602      	mov	r2, r0
  400ff8:	b970      	cbnz	r0, 401018 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400ffa:	6861      	ldr	r1, [r4, #4]
  400ffc:	68a3      	ldr	r3, [r4, #8]
  400ffe:	4319      	orrs	r1, r3
  401000:	6923      	ldr	r3, [r4, #16]
  401002:	4319      	orrs	r1, r3
  401004:	68e3      	ldr	r3, [r4, #12]
  401006:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401008:	4906      	ldr	r1, [pc, #24]	; (401024 <usart_init_rs232+0x4c>)
  40100a:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  40100c:	6869      	ldr	r1, [r5, #4]
  40100e:	430b      	orrs	r3, r1
  401010:	606b      	str	r3, [r5, #4]

	return 0;
  401012:	e002      	b.n	40101a <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  401014:	2201      	movs	r2, #1
  401016:	e000      	b.n	40101a <usart_init_rs232+0x42>
  401018:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  40101a:	4610      	mov	r0, r2
  40101c:	bd70      	pop	{r4, r5, r6, pc}
  40101e:	bf00      	nop
  401020:	00400fb1 	.word	0x00400fb1
  401024:	2040091c 	.word	0x2040091c
  401028:	00400f51 	.word	0x00400f51

0040102c <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  40102c:	2340      	movs	r3, #64	; 0x40
  40102e:	6003      	str	r3, [r0, #0]
  401030:	4770      	bx	lr
  401032:	bf00      	nop

00401034 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  401034:	2310      	movs	r3, #16
  401036:	6003      	str	r3, [r0, #0]
  401038:	4770      	bx	lr
  40103a:	bf00      	nop

0040103c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40103c:	6943      	ldr	r3, [r0, #20]
  40103e:	f013 0f02 	tst.w	r3, #2
  401042:	d004      	beq.n	40104e <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401044:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401048:	61c1      	str	r1, [r0, #28]
	return 0;
  40104a:	2000      	movs	r0, #0
  40104c:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  40104e:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  401050:	4770      	bx	lr
  401052:	bf00      	nop

00401054 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401054:	6943      	ldr	r3, [r0, #20]
  401056:	f013 0f01 	tst.w	r3, #1
  40105a:	d005      	beq.n	401068 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40105c:	6983      	ldr	r3, [r0, #24]
  40105e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401062:	600b      	str	r3, [r1, #0]

	return 0;
  401064:	2000      	movs	r0, #0
  401066:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  401068:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  40106a:	4770      	bx	lr

0040106c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40106c:	e7fe      	b.n	40106c <Dummy_Handler>
  40106e:	bf00      	nop

00401070 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401070:	b500      	push	{lr}
  401072:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  401074:	4b27      	ldr	r3, [pc, #156]	; (401114 <Reset_Handler+0xa4>)
  401076:	4a28      	ldr	r2, [pc, #160]	; (401118 <Reset_Handler+0xa8>)
  401078:	429a      	cmp	r2, r3
  40107a:	d003      	beq.n	401084 <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  40107c:	4b27      	ldr	r3, [pc, #156]	; (40111c <Reset_Handler+0xac>)
  40107e:	4a25      	ldr	r2, [pc, #148]	; (401114 <Reset_Handler+0xa4>)
  401080:	429a      	cmp	r2, r3
  401082:	d304      	bcc.n	40108e <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401084:	4b26      	ldr	r3, [pc, #152]	; (401120 <Reset_Handler+0xb0>)
  401086:	4a27      	ldr	r2, [pc, #156]	; (401124 <Reset_Handler+0xb4>)
  401088:	429a      	cmp	r2, r3
  40108a:	d30f      	bcc.n	4010ac <Reset_Handler+0x3c>
  40108c:	e01a      	b.n	4010c4 <Reset_Handler+0x54>
  40108e:	4921      	ldr	r1, [pc, #132]	; (401114 <Reset_Handler+0xa4>)
  401090:	4b25      	ldr	r3, [pc, #148]	; (401128 <Reset_Handler+0xb8>)
  401092:	1a5b      	subs	r3, r3, r1
  401094:	f023 0303 	bic.w	r3, r3, #3
  401098:	3304      	adds	r3, #4
  40109a:	4a1f      	ldr	r2, [pc, #124]	; (401118 <Reset_Handler+0xa8>)
  40109c:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  40109e:	f852 0b04 	ldr.w	r0, [r2], #4
  4010a2:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  4010a6:	429a      	cmp	r2, r3
  4010a8:	d1f9      	bne.n	40109e <Reset_Handler+0x2e>
  4010aa:	e7eb      	b.n	401084 <Reset_Handler+0x14>
  4010ac:	4b1f      	ldr	r3, [pc, #124]	; (40112c <Reset_Handler+0xbc>)
  4010ae:	4a20      	ldr	r2, [pc, #128]	; (401130 <Reset_Handler+0xc0>)
  4010b0:	1ad2      	subs	r2, r2, r3
  4010b2:	f022 0203 	bic.w	r2, r2, #3
  4010b6:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4010b8:	3b04      	subs	r3, #4
                *pDest++ = 0;
  4010ba:	2100      	movs	r1, #0
  4010bc:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4010c0:	4293      	cmp	r3, r2
  4010c2:	d1fb      	bne.n	4010bc <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4010c4:	4a1b      	ldr	r2, [pc, #108]	; (401134 <Reset_Handler+0xc4>)
  4010c6:	4b1c      	ldr	r3, [pc, #112]	; (401138 <Reset_Handler+0xc8>)
  4010c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4010cc:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4010ce:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4010d2:	fab3 f383 	clz	r3, r3
  4010d6:	095b      	lsrs	r3, r3, #5
  4010d8:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4010da:	b672      	cpsid	i
  4010dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4010e0:	2200      	movs	r2, #0
  4010e2:	4b16      	ldr	r3, [pc, #88]	; (40113c <Reset_Handler+0xcc>)
  4010e4:	701a      	strb	r2, [r3, #0]
	return flags;
  4010e6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4010e8:	4a15      	ldr	r2, [pc, #84]	; (401140 <Reset_Handler+0xd0>)
  4010ea:	6813      	ldr	r3, [r2, #0]
  4010ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4010f0:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4010f2:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4010f6:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4010fa:	b129      	cbz	r1, 401108 <Reset_Handler+0x98>
		cpu_irq_enable();
  4010fc:	2201      	movs	r2, #1
  4010fe:	4b0f      	ldr	r3, [pc, #60]	; (40113c <Reset_Handler+0xcc>)
  401100:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401102:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401106:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  401108:	4b0e      	ldr	r3, [pc, #56]	; (401144 <Reset_Handler+0xd4>)
  40110a:	4798      	blx	r3

        /* Branch to main function */
        main();
  40110c:	4b0e      	ldr	r3, [pc, #56]	; (401148 <Reset_Handler+0xd8>)
  40110e:	4798      	blx	r3
  401110:	e7fe      	b.n	401110 <Reset_Handler+0xa0>
  401112:	bf00      	nop
  401114:	20400000 	.word	0x20400000
  401118:	004049cc 	.word	0x004049cc
  40111c:	20400884 	.word	0x20400884
  401120:	204009f0 	.word	0x204009f0
  401124:	20400884 	.word	0x20400884
  401128:	20400883 	.word	0x20400883
  40112c:	20400888 	.word	0x20400888
  401130:	204009f3 	.word	0x204009f3
  401134:	e000ed00 	.word	0xe000ed00
  401138:	00400000 	.word	0x00400000
  40113c:	20400014 	.word	0x20400014
  401140:	e000ed88 	.word	0xe000ed88
  401144:	004017b9 	.word	0x004017b9
  401148:	004004c9 	.word	0x004004c9

0040114c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40114c:	4b3c      	ldr	r3, [pc, #240]	; (401240 <SystemCoreClockUpdate+0xf4>)
  40114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401150:	f003 0303 	and.w	r3, r3, #3
  401154:	2b01      	cmp	r3, #1
  401156:	d00f      	beq.n	401178 <SystemCoreClockUpdate+0x2c>
  401158:	b113      	cbz	r3, 401160 <SystemCoreClockUpdate+0x14>
  40115a:	2b02      	cmp	r3, #2
  40115c:	d029      	beq.n	4011b2 <SystemCoreClockUpdate+0x66>
  40115e:	e057      	b.n	401210 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401160:	4b38      	ldr	r3, [pc, #224]	; (401244 <SystemCoreClockUpdate+0xf8>)
  401162:	695b      	ldr	r3, [r3, #20]
  401164:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401168:	bf14      	ite	ne
  40116a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40116e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401172:	4b35      	ldr	r3, [pc, #212]	; (401248 <SystemCoreClockUpdate+0xfc>)
  401174:	601a      	str	r2, [r3, #0]
  401176:	e04b      	b.n	401210 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401178:	4b31      	ldr	r3, [pc, #196]	; (401240 <SystemCoreClockUpdate+0xf4>)
  40117a:	6a1b      	ldr	r3, [r3, #32]
  40117c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401180:	d003      	beq.n	40118a <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401182:	4a32      	ldr	r2, [pc, #200]	; (40124c <SystemCoreClockUpdate+0x100>)
  401184:	4b30      	ldr	r3, [pc, #192]	; (401248 <SystemCoreClockUpdate+0xfc>)
  401186:	601a      	str	r2, [r3, #0]
  401188:	e042      	b.n	401210 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40118a:	4a31      	ldr	r2, [pc, #196]	; (401250 <SystemCoreClockUpdate+0x104>)
  40118c:	4b2e      	ldr	r3, [pc, #184]	; (401248 <SystemCoreClockUpdate+0xfc>)
  40118e:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401190:	4b2b      	ldr	r3, [pc, #172]	; (401240 <SystemCoreClockUpdate+0xf4>)
  401192:	6a1b      	ldr	r3, [r3, #32]
  401194:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401198:	2b10      	cmp	r3, #16
  40119a:	d002      	beq.n	4011a2 <SystemCoreClockUpdate+0x56>
  40119c:	2b20      	cmp	r3, #32
  40119e:	d004      	beq.n	4011aa <SystemCoreClockUpdate+0x5e>
  4011a0:	e036      	b.n	401210 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4011a2:	4a2c      	ldr	r2, [pc, #176]	; (401254 <SystemCoreClockUpdate+0x108>)
  4011a4:	4b28      	ldr	r3, [pc, #160]	; (401248 <SystemCoreClockUpdate+0xfc>)
  4011a6:	601a      	str	r2, [r3, #0]
          break;
  4011a8:	e032      	b.n	401210 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4011aa:	4a28      	ldr	r2, [pc, #160]	; (40124c <SystemCoreClockUpdate+0x100>)
  4011ac:	4b26      	ldr	r3, [pc, #152]	; (401248 <SystemCoreClockUpdate+0xfc>)
  4011ae:	601a      	str	r2, [r3, #0]
          break;
  4011b0:	e02e      	b.n	401210 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4011b2:	4b23      	ldr	r3, [pc, #140]	; (401240 <SystemCoreClockUpdate+0xf4>)
  4011b4:	6a1b      	ldr	r3, [r3, #32]
  4011b6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4011ba:	d003      	beq.n	4011c4 <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4011bc:	4a23      	ldr	r2, [pc, #140]	; (40124c <SystemCoreClockUpdate+0x100>)
  4011be:	4b22      	ldr	r3, [pc, #136]	; (401248 <SystemCoreClockUpdate+0xfc>)
  4011c0:	601a      	str	r2, [r3, #0]
  4011c2:	e012      	b.n	4011ea <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4011c4:	4a22      	ldr	r2, [pc, #136]	; (401250 <SystemCoreClockUpdate+0x104>)
  4011c6:	4b20      	ldr	r3, [pc, #128]	; (401248 <SystemCoreClockUpdate+0xfc>)
  4011c8:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4011ca:	4b1d      	ldr	r3, [pc, #116]	; (401240 <SystemCoreClockUpdate+0xf4>)
  4011cc:	6a1b      	ldr	r3, [r3, #32]
  4011ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011d2:	2b10      	cmp	r3, #16
  4011d4:	d002      	beq.n	4011dc <SystemCoreClockUpdate+0x90>
  4011d6:	2b20      	cmp	r3, #32
  4011d8:	d004      	beq.n	4011e4 <SystemCoreClockUpdate+0x98>
  4011da:	e006      	b.n	4011ea <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4011dc:	4a1d      	ldr	r2, [pc, #116]	; (401254 <SystemCoreClockUpdate+0x108>)
  4011de:	4b1a      	ldr	r3, [pc, #104]	; (401248 <SystemCoreClockUpdate+0xfc>)
  4011e0:	601a      	str	r2, [r3, #0]
          break;
  4011e2:	e002      	b.n	4011ea <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4011e4:	4a19      	ldr	r2, [pc, #100]	; (40124c <SystemCoreClockUpdate+0x100>)
  4011e6:	4b18      	ldr	r3, [pc, #96]	; (401248 <SystemCoreClockUpdate+0xfc>)
  4011e8:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4011ea:	4b15      	ldr	r3, [pc, #84]	; (401240 <SystemCoreClockUpdate+0xf4>)
  4011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011ee:	f003 0303 	and.w	r3, r3, #3
  4011f2:	2b02      	cmp	r3, #2
  4011f4:	d10c      	bne.n	401210 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4011f6:	4a12      	ldr	r2, [pc, #72]	; (401240 <SystemCoreClockUpdate+0xf4>)
  4011f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4011fa:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4011fc:	4812      	ldr	r0, [pc, #72]	; (401248 <SystemCoreClockUpdate+0xfc>)
  4011fe:	f3c3 410a 	ubfx	r1, r3, #16, #11
  401202:	6803      	ldr	r3, [r0, #0]
  401204:	fb01 3303 	mla	r3, r1, r3, r3
  401208:	b2d2      	uxtb	r2, r2
  40120a:	fbb3 f3f2 	udiv	r3, r3, r2
  40120e:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401210:	4b0b      	ldr	r3, [pc, #44]	; (401240 <SystemCoreClockUpdate+0xf4>)
  401212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401214:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401218:	2b70      	cmp	r3, #112	; 0x70
  40121a:	d107      	bne.n	40122c <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  40121c:	4a0a      	ldr	r2, [pc, #40]	; (401248 <SystemCoreClockUpdate+0xfc>)
  40121e:	6813      	ldr	r3, [r2, #0]
  401220:	490d      	ldr	r1, [pc, #52]	; (401258 <SystemCoreClockUpdate+0x10c>)
  401222:	fba1 1303 	umull	r1, r3, r1, r3
  401226:	085b      	lsrs	r3, r3, #1
  401228:	6013      	str	r3, [r2, #0]
  40122a:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40122c:	4b04      	ldr	r3, [pc, #16]	; (401240 <SystemCoreClockUpdate+0xf4>)
  40122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401230:	4905      	ldr	r1, [pc, #20]	; (401248 <SystemCoreClockUpdate+0xfc>)
  401232:	f3c3 1202 	ubfx	r2, r3, #4, #3
  401236:	680b      	ldr	r3, [r1, #0]
  401238:	40d3      	lsrs	r3, r2
  40123a:	600b      	str	r3, [r1, #0]
  40123c:	4770      	bx	lr
  40123e:	bf00      	nop
  401240:	400e0600 	.word	0x400e0600
  401244:	400e1810 	.word	0x400e1810
  401248:	20400018 	.word	0x20400018
  40124c:	00b71b00 	.word	0x00b71b00
  401250:	003d0900 	.word	0x003d0900
  401254:	007a1200 	.word	0x007a1200
  401258:	aaaaaaab 	.word	0xaaaaaaab

0040125c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40125c:	4b16      	ldr	r3, [pc, #88]	; (4012b8 <system_init_flash+0x5c>)
  40125e:	4298      	cmp	r0, r3
  401260:	d804      	bhi.n	40126c <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401262:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401266:	4b15      	ldr	r3, [pc, #84]	; (4012bc <system_init_flash+0x60>)
  401268:	601a      	str	r2, [r3, #0]
  40126a:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40126c:	4b14      	ldr	r3, [pc, #80]	; (4012c0 <system_init_flash+0x64>)
  40126e:	4298      	cmp	r0, r3
  401270:	d803      	bhi.n	40127a <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401272:	4a14      	ldr	r2, [pc, #80]	; (4012c4 <system_init_flash+0x68>)
  401274:	4b11      	ldr	r3, [pc, #68]	; (4012bc <system_init_flash+0x60>)
  401276:	601a      	str	r2, [r3, #0]
  401278:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40127a:	4b13      	ldr	r3, [pc, #76]	; (4012c8 <system_init_flash+0x6c>)
  40127c:	4298      	cmp	r0, r3
  40127e:	d803      	bhi.n	401288 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401280:	4a12      	ldr	r2, [pc, #72]	; (4012cc <system_init_flash+0x70>)
  401282:	4b0e      	ldr	r3, [pc, #56]	; (4012bc <system_init_flash+0x60>)
  401284:	601a      	str	r2, [r3, #0]
  401286:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401288:	4b11      	ldr	r3, [pc, #68]	; (4012d0 <system_init_flash+0x74>)
  40128a:	4298      	cmp	r0, r3
  40128c:	d803      	bhi.n	401296 <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40128e:	4a11      	ldr	r2, [pc, #68]	; (4012d4 <system_init_flash+0x78>)
  401290:	4b0a      	ldr	r3, [pc, #40]	; (4012bc <system_init_flash+0x60>)
  401292:	601a      	str	r2, [r3, #0]
  401294:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401296:	4b10      	ldr	r3, [pc, #64]	; (4012d8 <system_init_flash+0x7c>)
  401298:	4298      	cmp	r0, r3
  40129a:	d804      	bhi.n	4012a6 <system_init_flash+0x4a>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40129c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4012a0:	4b06      	ldr	r3, [pc, #24]	; (4012bc <system_init_flash+0x60>)
  4012a2:	601a      	str	r2, [r3, #0]
  4012a4:	4770      	bx	lr
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4012a6:	4b0d      	ldr	r3, [pc, #52]	; (4012dc <system_init_flash+0x80>)
  4012a8:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4012aa:	bf94      	ite	ls
  4012ac:	4a0c      	ldrls	r2, [pc, #48]	; (4012e0 <system_init_flash+0x84>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4012ae:	4a0d      	ldrhi	r2, [pc, #52]	; (4012e4 <system_init_flash+0x88>)
  4012b0:	4b02      	ldr	r3, [pc, #8]	; (4012bc <system_init_flash+0x60>)
  4012b2:	601a      	str	r2, [r3, #0]
  4012b4:	4770      	bx	lr
  4012b6:	bf00      	nop
  4012b8:	015ef3bf 	.word	0x015ef3bf
  4012bc:	400e0c00 	.word	0x400e0c00
  4012c0:	02bde77f 	.word	0x02bde77f
  4012c4:	04000100 	.word	0x04000100
  4012c8:	041cdb3f 	.word	0x041cdb3f
  4012cc:	04000200 	.word	0x04000200
  4012d0:	057bceff 	.word	0x057bceff
  4012d4:	04000300 	.word	0x04000300
  4012d8:	06dac2bf 	.word	0x06dac2bf
  4012dc:	0839b67f 	.word	0x0839b67f
  4012e0:	04000500 	.word	0x04000500
  4012e4:	04000600 	.word	0x04000600

004012e8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4012e8:	4b09      	ldr	r3, [pc, #36]	; (401310 <_sbrk+0x28>)
  4012ea:	681b      	ldr	r3, [r3, #0]
  4012ec:	b913      	cbnz	r3, 4012f4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  4012ee:	4a09      	ldr	r2, [pc, #36]	; (401314 <_sbrk+0x2c>)
  4012f0:	4b07      	ldr	r3, [pc, #28]	; (401310 <_sbrk+0x28>)
  4012f2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4012f4:	4b06      	ldr	r3, [pc, #24]	; (401310 <_sbrk+0x28>)
  4012f6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4012f8:	181a      	adds	r2, r3, r0
  4012fa:	4907      	ldr	r1, [pc, #28]	; (401318 <_sbrk+0x30>)
  4012fc:	4291      	cmp	r1, r2
  4012fe:	db04      	blt.n	40130a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  401300:	4610      	mov	r0, r2
  401302:	4a03      	ldr	r2, [pc, #12]	; (401310 <_sbrk+0x28>)
  401304:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401306:	4618      	mov	r0, r3
  401308:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  40130a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  40130e:	4770      	bx	lr
  401310:	20400920 	.word	0x20400920
  401314:	20402bf0 	.word	0x20402bf0
  401318:	2045fffc 	.word	0x2045fffc

0040131c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40131c:	f04f 30ff 	mov.w	r0, #4294967295
  401320:	4770      	bx	lr
  401322:	bf00      	nop

00401324 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401328:	604b      	str	r3, [r1, #4]

	return 0;
}
  40132a:	2000      	movs	r0, #0
  40132c:	4770      	bx	lr
  40132e:	bf00      	nop

00401330 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401330:	2001      	movs	r0, #1
  401332:	4770      	bx	lr

00401334 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401334:	2000      	movs	r0, #0
  401336:	4770      	bx	lr

00401338 <__aeabi_drsub>:
  401338:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40133c:	e002      	b.n	401344 <__adddf3>
  40133e:	bf00      	nop

00401340 <__aeabi_dsub>:
  401340:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00401344 <__adddf3>:
  401344:	b530      	push	{r4, r5, lr}
  401346:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40134a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40134e:	ea94 0f05 	teq	r4, r5
  401352:	bf08      	it	eq
  401354:	ea90 0f02 	teqeq	r0, r2
  401358:	bf1f      	itttt	ne
  40135a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40135e:	ea55 0c02 	orrsne.w	ip, r5, r2
  401362:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  401366:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40136a:	f000 80e2 	beq.w	401532 <__adddf3+0x1ee>
  40136e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  401372:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  401376:	bfb8      	it	lt
  401378:	426d      	neglt	r5, r5
  40137a:	dd0c      	ble.n	401396 <__adddf3+0x52>
  40137c:	442c      	add	r4, r5
  40137e:	ea80 0202 	eor.w	r2, r0, r2
  401382:	ea81 0303 	eor.w	r3, r1, r3
  401386:	ea82 0000 	eor.w	r0, r2, r0
  40138a:	ea83 0101 	eor.w	r1, r3, r1
  40138e:	ea80 0202 	eor.w	r2, r0, r2
  401392:	ea81 0303 	eor.w	r3, r1, r3
  401396:	2d36      	cmp	r5, #54	; 0x36
  401398:	bf88      	it	hi
  40139a:	bd30      	pophi	{r4, r5, pc}
  40139c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4013a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4013a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4013a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4013ac:	d002      	beq.n	4013b4 <__adddf3+0x70>
  4013ae:	4240      	negs	r0, r0
  4013b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4013b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4013b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4013bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4013c0:	d002      	beq.n	4013c8 <__adddf3+0x84>
  4013c2:	4252      	negs	r2, r2
  4013c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4013c8:	ea94 0f05 	teq	r4, r5
  4013cc:	f000 80a7 	beq.w	40151e <__adddf3+0x1da>
  4013d0:	f1a4 0401 	sub.w	r4, r4, #1
  4013d4:	f1d5 0e20 	rsbs	lr, r5, #32
  4013d8:	db0d      	blt.n	4013f6 <__adddf3+0xb2>
  4013da:	fa02 fc0e 	lsl.w	ip, r2, lr
  4013de:	fa22 f205 	lsr.w	r2, r2, r5
  4013e2:	1880      	adds	r0, r0, r2
  4013e4:	f141 0100 	adc.w	r1, r1, #0
  4013e8:	fa03 f20e 	lsl.w	r2, r3, lr
  4013ec:	1880      	adds	r0, r0, r2
  4013ee:	fa43 f305 	asr.w	r3, r3, r5
  4013f2:	4159      	adcs	r1, r3
  4013f4:	e00e      	b.n	401414 <__adddf3+0xd0>
  4013f6:	f1a5 0520 	sub.w	r5, r5, #32
  4013fa:	f10e 0e20 	add.w	lr, lr, #32
  4013fe:	2a01      	cmp	r2, #1
  401400:	fa03 fc0e 	lsl.w	ip, r3, lr
  401404:	bf28      	it	cs
  401406:	f04c 0c02 	orrcs.w	ip, ip, #2
  40140a:	fa43 f305 	asr.w	r3, r3, r5
  40140e:	18c0      	adds	r0, r0, r3
  401410:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  401414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401418:	d507      	bpl.n	40142a <__adddf3+0xe6>
  40141a:	f04f 0e00 	mov.w	lr, #0
  40141e:	f1dc 0c00 	rsbs	ip, ip, #0
  401422:	eb7e 0000 	sbcs.w	r0, lr, r0
  401426:	eb6e 0101 	sbc.w	r1, lr, r1
  40142a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40142e:	d31b      	bcc.n	401468 <__adddf3+0x124>
  401430:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  401434:	d30c      	bcc.n	401450 <__adddf3+0x10c>
  401436:	0849      	lsrs	r1, r1, #1
  401438:	ea5f 0030 	movs.w	r0, r0, rrx
  40143c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  401440:	f104 0401 	add.w	r4, r4, #1
  401444:	ea4f 5244 	mov.w	r2, r4, lsl #21
  401448:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40144c:	f080 809a 	bcs.w	401584 <__adddf3+0x240>
  401450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  401454:	bf08      	it	eq
  401456:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40145a:	f150 0000 	adcs.w	r0, r0, #0
  40145e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401462:	ea41 0105 	orr.w	r1, r1, r5
  401466:	bd30      	pop	{r4, r5, pc}
  401468:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40146c:	4140      	adcs	r0, r0
  40146e:	eb41 0101 	adc.w	r1, r1, r1
  401472:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401476:	f1a4 0401 	sub.w	r4, r4, #1
  40147a:	d1e9      	bne.n	401450 <__adddf3+0x10c>
  40147c:	f091 0f00 	teq	r1, #0
  401480:	bf04      	itt	eq
  401482:	4601      	moveq	r1, r0
  401484:	2000      	moveq	r0, #0
  401486:	fab1 f381 	clz	r3, r1
  40148a:	bf08      	it	eq
  40148c:	3320      	addeq	r3, #32
  40148e:	f1a3 030b 	sub.w	r3, r3, #11
  401492:	f1b3 0220 	subs.w	r2, r3, #32
  401496:	da0c      	bge.n	4014b2 <__adddf3+0x16e>
  401498:	320c      	adds	r2, #12
  40149a:	dd08      	ble.n	4014ae <__adddf3+0x16a>
  40149c:	f102 0c14 	add.w	ip, r2, #20
  4014a0:	f1c2 020c 	rsb	r2, r2, #12
  4014a4:	fa01 f00c 	lsl.w	r0, r1, ip
  4014a8:	fa21 f102 	lsr.w	r1, r1, r2
  4014ac:	e00c      	b.n	4014c8 <__adddf3+0x184>
  4014ae:	f102 0214 	add.w	r2, r2, #20
  4014b2:	bfd8      	it	le
  4014b4:	f1c2 0c20 	rsble	ip, r2, #32
  4014b8:	fa01 f102 	lsl.w	r1, r1, r2
  4014bc:	fa20 fc0c 	lsr.w	ip, r0, ip
  4014c0:	bfdc      	itt	le
  4014c2:	ea41 010c 	orrle.w	r1, r1, ip
  4014c6:	4090      	lslle	r0, r2
  4014c8:	1ae4      	subs	r4, r4, r3
  4014ca:	bfa2      	ittt	ge
  4014cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4014d0:	4329      	orrge	r1, r5
  4014d2:	bd30      	popge	{r4, r5, pc}
  4014d4:	ea6f 0404 	mvn.w	r4, r4
  4014d8:	3c1f      	subs	r4, #31
  4014da:	da1c      	bge.n	401516 <__adddf3+0x1d2>
  4014dc:	340c      	adds	r4, #12
  4014de:	dc0e      	bgt.n	4014fe <__adddf3+0x1ba>
  4014e0:	f104 0414 	add.w	r4, r4, #20
  4014e4:	f1c4 0220 	rsb	r2, r4, #32
  4014e8:	fa20 f004 	lsr.w	r0, r0, r4
  4014ec:	fa01 f302 	lsl.w	r3, r1, r2
  4014f0:	ea40 0003 	orr.w	r0, r0, r3
  4014f4:	fa21 f304 	lsr.w	r3, r1, r4
  4014f8:	ea45 0103 	orr.w	r1, r5, r3
  4014fc:	bd30      	pop	{r4, r5, pc}
  4014fe:	f1c4 040c 	rsb	r4, r4, #12
  401502:	f1c4 0220 	rsb	r2, r4, #32
  401506:	fa20 f002 	lsr.w	r0, r0, r2
  40150a:	fa01 f304 	lsl.w	r3, r1, r4
  40150e:	ea40 0003 	orr.w	r0, r0, r3
  401512:	4629      	mov	r1, r5
  401514:	bd30      	pop	{r4, r5, pc}
  401516:	fa21 f004 	lsr.w	r0, r1, r4
  40151a:	4629      	mov	r1, r5
  40151c:	bd30      	pop	{r4, r5, pc}
  40151e:	f094 0f00 	teq	r4, #0
  401522:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  401526:	bf06      	itte	eq
  401528:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40152c:	3401      	addeq	r4, #1
  40152e:	3d01      	subne	r5, #1
  401530:	e74e      	b.n	4013d0 <__adddf3+0x8c>
  401532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401536:	bf18      	it	ne
  401538:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40153c:	d029      	beq.n	401592 <__adddf3+0x24e>
  40153e:	ea94 0f05 	teq	r4, r5
  401542:	bf08      	it	eq
  401544:	ea90 0f02 	teqeq	r0, r2
  401548:	d005      	beq.n	401556 <__adddf3+0x212>
  40154a:	ea54 0c00 	orrs.w	ip, r4, r0
  40154e:	bf04      	itt	eq
  401550:	4619      	moveq	r1, r3
  401552:	4610      	moveq	r0, r2
  401554:	bd30      	pop	{r4, r5, pc}
  401556:	ea91 0f03 	teq	r1, r3
  40155a:	bf1e      	ittt	ne
  40155c:	2100      	movne	r1, #0
  40155e:	2000      	movne	r0, #0
  401560:	bd30      	popne	{r4, r5, pc}
  401562:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  401566:	d105      	bne.n	401574 <__adddf3+0x230>
  401568:	0040      	lsls	r0, r0, #1
  40156a:	4149      	adcs	r1, r1
  40156c:	bf28      	it	cs
  40156e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  401572:	bd30      	pop	{r4, r5, pc}
  401574:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  401578:	bf3c      	itt	cc
  40157a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40157e:	bd30      	popcc	{r4, r5, pc}
  401580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401584:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  401588:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40158c:	f04f 0000 	mov.w	r0, #0
  401590:	bd30      	pop	{r4, r5, pc}
  401592:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401596:	bf1a      	itte	ne
  401598:	4619      	movne	r1, r3
  40159a:	4610      	movne	r0, r2
  40159c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4015a0:	bf1c      	itt	ne
  4015a2:	460b      	movne	r3, r1
  4015a4:	4602      	movne	r2, r0
  4015a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4015aa:	bf06      	itte	eq
  4015ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4015b0:	ea91 0f03 	teqeq	r1, r3
  4015b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4015b8:	bd30      	pop	{r4, r5, pc}
  4015ba:	bf00      	nop

004015bc <__aeabi_ui2d>:
  4015bc:	f090 0f00 	teq	r0, #0
  4015c0:	bf04      	itt	eq
  4015c2:	2100      	moveq	r1, #0
  4015c4:	4770      	bxeq	lr
  4015c6:	b530      	push	{r4, r5, lr}
  4015c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4015cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4015d0:	f04f 0500 	mov.w	r5, #0
  4015d4:	f04f 0100 	mov.w	r1, #0
  4015d8:	e750      	b.n	40147c <__adddf3+0x138>
  4015da:	bf00      	nop

004015dc <__aeabi_i2d>:
  4015dc:	f090 0f00 	teq	r0, #0
  4015e0:	bf04      	itt	eq
  4015e2:	2100      	moveq	r1, #0
  4015e4:	4770      	bxeq	lr
  4015e6:	b530      	push	{r4, r5, lr}
  4015e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4015ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4015f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4015f4:	bf48      	it	mi
  4015f6:	4240      	negmi	r0, r0
  4015f8:	f04f 0100 	mov.w	r1, #0
  4015fc:	e73e      	b.n	40147c <__adddf3+0x138>
  4015fe:	bf00      	nop

00401600 <__aeabi_f2d>:
  401600:	0042      	lsls	r2, r0, #1
  401602:	ea4f 01e2 	mov.w	r1, r2, asr #3
  401606:	ea4f 0131 	mov.w	r1, r1, rrx
  40160a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40160e:	bf1f      	itttt	ne
  401610:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  401614:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401618:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40161c:	4770      	bxne	lr
  40161e:	f092 0f00 	teq	r2, #0
  401622:	bf14      	ite	ne
  401624:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401628:	4770      	bxeq	lr
  40162a:	b530      	push	{r4, r5, lr}
  40162c:	f44f 7460 	mov.w	r4, #896	; 0x380
  401630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401638:	e720      	b.n	40147c <__adddf3+0x138>
  40163a:	bf00      	nop

0040163c <__aeabi_ul2d>:
  40163c:	ea50 0201 	orrs.w	r2, r0, r1
  401640:	bf08      	it	eq
  401642:	4770      	bxeq	lr
  401644:	b530      	push	{r4, r5, lr}
  401646:	f04f 0500 	mov.w	r5, #0
  40164a:	e00a      	b.n	401662 <__aeabi_l2d+0x16>

0040164c <__aeabi_l2d>:
  40164c:	ea50 0201 	orrs.w	r2, r0, r1
  401650:	bf08      	it	eq
  401652:	4770      	bxeq	lr
  401654:	b530      	push	{r4, r5, lr}
  401656:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40165a:	d502      	bpl.n	401662 <__aeabi_l2d+0x16>
  40165c:	4240      	negs	r0, r0
  40165e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401662:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401666:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40166a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40166e:	f43f aedc 	beq.w	40142a <__adddf3+0xe6>
  401672:	f04f 0203 	mov.w	r2, #3
  401676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40167a:	bf18      	it	ne
  40167c:	3203      	addne	r2, #3
  40167e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401682:	bf18      	it	ne
  401684:	3203      	addne	r2, #3
  401686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40168a:	f1c2 0320 	rsb	r3, r2, #32
  40168e:	fa00 fc03 	lsl.w	ip, r0, r3
  401692:	fa20 f002 	lsr.w	r0, r0, r2
  401696:	fa01 fe03 	lsl.w	lr, r1, r3
  40169a:	ea40 000e 	orr.w	r0, r0, lr
  40169e:	fa21 f102 	lsr.w	r1, r1, r2
  4016a2:	4414      	add	r4, r2
  4016a4:	e6c1      	b.n	40142a <__adddf3+0xe6>
  4016a6:	bf00      	nop

004016a8 <__gedf2>:
  4016a8:	f04f 3cff 	mov.w	ip, #4294967295
  4016ac:	e006      	b.n	4016bc <__cmpdf2+0x4>
  4016ae:	bf00      	nop

004016b0 <__ledf2>:
  4016b0:	f04f 0c01 	mov.w	ip, #1
  4016b4:	e002      	b.n	4016bc <__cmpdf2+0x4>
  4016b6:	bf00      	nop

004016b8 <__cmpdf2>:
  4016b8:	f04f 0c01 	mov.w	ip, #1
  4016bc:	f84d cd04 	str.w	ip, [sp, #-4]!
  4016c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4016c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4016c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4016cc:	bf18      	it	ne
  4016ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4016d2:	d01b      	beq.n	40170c <__cmpdf2+0x54>
  4016d4:	b001      	add	sp, #4
  4016d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4016da:	bf0c      	ite	eq
  4016dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4016e0:	ea91 0f03 	teqne	r1, r3
  4016e4:	bf02      	ittt	eq
  4016e6:	ea90 0f02 	teqeq	r0, r2
  4016ea:	2000      	moveq	r0, #0
  4016ec:	4770      	bxeq	lr
  4016ee:	f110 0f00 	cmn.w	r0, #0
  4016f2:	ea91 0f03 	teq	r1, r3
  4016f6:	bf58      	it	pl
  4016f8:	4299      	cmppl	r1, r3
  4016fa:	bf08      	it	eq
  4016fc:	4290      	cmpeq	r0, r2
  4016fe:	bf2c      	ite	cs
  401700:	17d8      	asrcs	r0, r3, #31
  401702:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  401706:	f040 0001 	orr.w	r0, r0, #1
  40170a:	4770      	bx	lr
  40170c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  401710:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  401714:	d102      	bne.n	40171c <__cmpdf2+0x64>
  401716:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40171a:	d107      	bne.n	40172c <__cmpdf2+0x74>
  40171c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  401720:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  401724:	d1d6      	bne.n	4016d4 <__cmpdf2+0x1c>
  401726:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40172a:	d0d3      	beq.n	4016d4 <__cmpdf2+0x1c>
  40172c:	f85d 0b04 	ldr.w	r0, [sp], #4
  401730:	4770      	bx	lr
  401732:	bf00      	nop

00401734 <__aeabi_cdrcmple>:
  401734:	4684      	mov	ip, r0
  401736:	4610      	mov	r0, r2
  401738:	4662      	mov	r2, ip
  40173a:	468c      	mov	ip, r1
  40173c:	4619      	mov	r1, r3
  40173e:	4663      	mov	r3, ip
  401740:	e000      	b.n	401744 <__aeabi_cdcmpeq>
  401742:	bf00      	nop

00401744 <__aeabi_cdcmpeq>:
  401744:	b501      	push	{r0, lr}
  401746:	f7ff ffb7 	bl	4016b8 <__cmpdf2>
  40174a:	2800      	cmp	r0, #0
  40174c:	bf48      	it	mi
  40174e:	f110 0f00 	cmnmi.w	r0, #0
  401752:	bd01      	pop	{r0, pc}

00401754 <__aeabi_dcmpeq>:
  401754:	f84d ed08 	str.w	lr, [sp, #-8]!
  401758:	f7ff fff4 	bl	401744 <__aeabi_cdcmpeq>
  40175c:	bf0c      	ite	eq
  40175e:	2001      	moveq	r0, #1
  401760:	2000      	movne	r0, #0
  401762:	f85d fb08 	ldr.w	pc, [sp], #8
  401766:	bf00      	nop

00401768 <__aeabi_dcmplt>:
  401768:	f84d ed08 	str.w	lr, [sp, #-8]!
  40176c:	f7ff ffea 	bl	401744 <__aeabi_cdcmpeq>
  401770:	bf34      	ite	cc
  401772:	2001      	movcc	r0, #1
  401774:	2000      	movcs	r0, #0
  401776:	f85d fb08 	ldr.w	pc, [sp], #8
  40177a:	bf00      	nop

0040177c <__aeabi_dcmple>:
  40177c:	f84d ed08 	str.w	lr, [sp, #-8]!
  401780:	f7ff ffe0 	bl	401744 <__aeabi_cdcmpeq>
  401784:	bf94      	ite	ls
  401786:	2001      	movls	r0, #1
  401788:	2000      	movhi	r0, #0
  40178a:	f85d fb08 	ldr.w	pc, [sp], #8
  40178e:	bf00      	nop

00401790 <__aeabi_dcmpge>:
  401790:	f84d ed08 	str.w	lr, [sp, #-8]!
  401794:	f7ff ffce 	bl	401734 <__aeabi_cdrcmple>
  401798:	bf94      	ite	ls
  40179a:	2001      	movls	r0, #1
  40179c:	2000      	movhi	r0, #0
  40179e:	f85d fb08 	ldr.w	pc, [sp], #8
  4017a2:	bf00      	nop

004017a4 <__aeabi_dcmpgt>:
  4017a4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4017a8:	f7ff ffc4 	bl	401734 <__aeabi_cdrcmple>
  4017ac:	bf34      	ite	cc
  4017ae:	2001      	movcc	r0, #1
  4017b0:	2000      	movcs	r0, #0
  4017b2:	f85d fb08 	ldr.w	pc, [sp], #8
  4017b6:	bf00      	nop

004017b8 <__libc_init_array>:
  4017b8:	b570      	push	{r4, r5, r6, lr}
  4017ba:	4e0f      	ldr	r6, [pc, #60]	; (4017f8 <__libc_init_array+0x40>)
  4017bc:	4d0f      	ldr	r5, [pc, #60]	; (4017fc <__libc_init_array+0x44>)
  4017be:	1b76      	subs	r6, r6, r5
  4017c0:	10b6      	asrs	r6, r6, #2
  4017c2:	bf18      	it	ne
  4017c4:	2400      	movne	r4, #0
  4017c6:	d005      	beq.n	4017d4 <__libc_init_array+0x1c>
  4017c8:	3401      	adds	r4, #1
  4017ca:	f855 3b04 	ldr.w	r3, [r5], #4
  4017ce:	4798      	blx	r3
  4017d0:	42a6      	cmp	r6, r4
  4017d2:	d1f9      	bne.n	4017c8 <__libc_init_array+0x10>
  4017d4:	4e0a      	ldr	r6, [pc, #40]	; (401800 <__libc_init_array+0x48>)
  4017d6:	4d0b      	ldr	r5, [pc, #44]	; (401804 <__libc_init_array+0x4c>)
  4017d8:	1b76      	subs	r6, r6, r5
  4017da:	f003 f8e1 	bl	4049a0 <_init>
  4017de:	10b6      	asrs	r6, r6, #2
  4017e0:	bf18      	it	ne
  4017e2:	2400      	movne	r4, #0
  4017e4:	d006      	beq.n	4017f4 <__libc_init_array+0x3c>
  4017e6:	3401      	adds	r4, #1
  4017e8:	f855 3b04 	ldr.w	r3, [r5], #4
  4017ec:	4798      	blx	r3
  4017ee:	42a6      	cmp	r6, r4
  4017f0:	d1f9      	bne.n	4017e6 <__libc_init_array+0x2e>
  4017f2:	bd70      	pop	{r4, r5, r6, pc}
  4017f4:	bd70      	pop	{r4, r5, r6, pc}
  4017f6:	bf00      	nop
  4017f8:	004049ac 	.word	0x004049ac
  4017fc:	004049ac 	.word	0x004049ac
  401800:	004049b4 	.word	0x004049b4
  401804:	004049ac 	.word	0x004049ac

00401808 <iprintf>:
  401808:	b40f      	push	{r0, r1, r2, r3}
  40180a:	b500      	push	{lr}
  40180c:	4907      	ldr	r1, [pc, #28]	; (40182c <iprintf+0x24>)
  40180e:	b083      	sub	sp, #12
  401810:	ab04      	add	r3, sp, #16
  401812:	6808      	ldr	r0, [r1, #0]
  401814:	f853 2b04 	ldr.w	r2, [r3], #4
  401818:	6881      	ldr	r1, [r0, #8]
  40181a:	9301      	str	r3, [sp, #4]
  40181c:	f000 f9fa 	bl	401c14 <_vfiprintf_r>
  401820:	b003      	add	sp, #12
  401822:	f85d eb04 	ldr.w	lr, [sp], #4
  401826:	b004      	add	sp, #16
  401828:	4770      	bx	lr
  40182a:	bf00      	nop
  40182c:	20400448 	.word	0x20400448

00401830 <memset>:
  401830:	b470      	push	{r4, r5, r6}
  401832:	0784      	lsls	r4, r0, #30
  401834:	d046      	beq.n	4018c4 <memset+0x94>
  401836:	1e54      	subs	r4, r2, #1
  401838:	2a00      	cmp	r2, #0
  40183a:	d041      	beq.n	4018c0 <memset+0x90>
  40183c:	b2cd      	uxtb	r5, r1
  40183e:	4603      	mov	r3, r0
  401840:	e002      	b.n	401848 <memset+0x18>
  401842:	1e62      	subs	r2, r4, #1
  401844:	b3e4      	cbz	r4, 4018c0 <memset+0x90>
  401846:	4614      	mov	r4, r2
  401848:	f803 5b01 	strb.w	r5, [r3], #1
  40184c:	079a      	lsls	r2, r3, #30
  40184e:	d1f8      	bne.n	401842 <memset+0x12>
  401850:	2c03      	cmp	r4, #3
  401852:	d92e      	bls.n	4018b2 <memset+0x82>
  401854:	b2cd      	uxtb	r5, r1
  401856:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40185a:	2c0f      	cmp	r4, #15
  40185c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401860:	d919      	bls.n	401896 <memset+0x66>
  401862:	f103 0210 	add.w	r2, r3, #16
  401866:	4626      	mov	r6, r4
  401868:	3e10      	subs	r6, #16
  40186a:	2e0f      	cmp	r6, #15
  40186c:	f842 5c10 	str.w	r5, [r2, #-16]
  401870:	f842 5c0c 	str.w	r5, [r2, #-12]
  401874:	f842 5c08 	str.w	r5, [r2, #-8]
  401878:	f842 5c04 	str.w	r5, [r2, #-4]
  40187c:	f102 0210 	add.w	r2, r2, #16
  401880:	d8f2      	bhi.n	401868 <memset+0x38>
  401882:	f1a4 0210 	sub.w	r2, r4, #16
  401886:	f022 020f 	bic.w	r2, r2, #15
  40188a:	f004 040f 	and.w	r4, r4, #15
  40188e:	3210      	adds	r2, #16
  401890:	2c03      	cmp	r4, #3
  401892:	4413      	add	r3, r2
  401894:	d90d      	bls.n	4018b2 <memset+0x82>
  401896:	461e      	mov	r6, r3
  401898:	4622      	mov	r2, r4
  40189a:	3a04      	subs	r2, #4
  40189c:	2a03      	cmp	r2, #3
  40189e:	f846 5b04 	str.w	r5, [r6], #4
  4018a2:	d8fa      	bhi.n	40189a <memset+0x6a>
  4018a4:	1f22      	subs	r2, r4, #4
  4018a6:	f022 0203 	bic.w	r2, r2, #3
  4018aa:	3204      	adds	r2, #4
  4018ac:	4413      	add	r3, r2
  4018ae:	f004 0403 	and.w	r4, r4, #3
  4018b2:	b12c      	cbz	r4, 4018c0 <memset+0x90>
  4018b4:	b2c9      	uxtb	r1, r1
  4018b6:	441c      	add	r4, r3
  4018b8:	f803 1b01 	strb.w	r1, [r3], #1
  4018bc:	42a3      	cmp	r3, r4
  4018be:	d1fb      	bne.n	4018b8 <memset+0x88>
  4018c0:	bc70      	pop	{r4, r5, r6}
  4018c2:	4770      	bx	lr
  4018c4:	4614      	mov	r4, r2
  4018c6:	4603      	mov	r3, r0
  4018c8:	e7c2      	b.n	401850 <memset+0x20>
  4018ca:	bf00      	nop

004018cc <_puts_r>:
  4018cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4018ce:	4605      	mov	r5, r0
  4018d0:	b089      	sub	sp, #36	; 0x24
  4018d2:	4608      	mov	r0, r1
  4018d4:	460c      	mov	r4, r1
  4018d6:	f000 f8f3 	bl	401ac0 <strlen>
  4018da:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4018dc:	4f14      	ldr	r7, [pc, #80]	; (401930 <_puts_r+0x64>)
  4018de:	9404      	str	r4, [sp, #16]
  4018e0:	2601      	movs	r6, #1
  4018e2:	1c44      	adds	r4, r0, #1
  4018e4:	a904      	add	r1, sp, #16
  4018e6:	2202      	movs	r2, #2
  4018e8:	9403      	str	r4, [sp, #12]
  4018ea:	9005      	str	r0, [sp, #20]
  4018ec:	68ac      	ldr	r4, [r5, #8]
  4018ee:	9706      	str	r7, [sp, #24]
  4018f0:	9607      	str	r6, [sp, #28]
  4018f2:	9101      	str	r1, [sp, #4]
  4018f4:	9202      	str	r2, [sp, #8]
  4018f6:	b1b3      	cbz	r3, 401926 <_puts_r+0x5a>
  4018f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4018fc:	049a      	lsls	r2, r3, #18
  4018fe:	d406      	bmi.n	40190e <_puts_r+0x42>
  401900:	6e62      	ldr	r2, [r4, #100]	; 0x64
  401902:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401906:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40190a:	81a3      	strh	r3, [r4, #12]
  40190c:	6662      	str	r2, [r4, #100]	; 0x64
  40190e:	4621      	mov	r1, r4
  401910:	4628      	mov	r0, r5
  401912:	aa01      	add	r2, sp, #4
  401914:	f001 fc10 	bl	403138 <__sfvwrite_r>
  401918:	2800      	cmp	r0, #0
  40191a:	bf14      	ite	ne
  40191c:	f04f 30ff 	movne.w	r0, #4294967295
  401920:	200a      	moveq	r0, #10
  401922:	b009      	add	sp, #36	; 0x24
  401924:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401926:	4628      	mov	r0, r5
  401928:	f001 fa54 	bl	402dd4 <__sinit>
  40192c:	e7e4      	b.n	4018f8 <_puts_r+0x2c>
  40192e:	bf00      	nop
  401930:	0040494c 	.word	0x0040494c

00401934 <puts>:
  401934:	4b02      	ldr	r3, [pc, #8]	; (401940 <puts+0xc>)
  401936:	4601      	mov	r1, r0
  401938:	6818      	ldr	r0, [r3, #0]
  40193a:	f7ff bfc7 	b.w	4018cc <_puts_r>
  40193e:	bf00      	nop
  401940:	20400448 	.word	0x20400448

00401944 <setbuf>:
  401944:	2900      	cmp	r1, #0
  401946:	bf0c      	ite	eq
  401948:	2202      	moveq	r2, #2
  40194a:	2200      	movne	r2, #0
  40194c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401950:	f000 b800 	b.w	401954 <setvbuf>

00401954 <setvbuf>:
  401954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401958:	4c51      	ldr	r4, [pc, #324]	; (401aa0 <setvbuf+0x14c>)
  40195a:	6825      	ldr	r5, [r4, #0]
  40195c:	b083      	sub	sp, #12
  40195e:	4604      	mov	r4, r0
  401960:	460f      	mov	r7, r1
  401962:	4690      	mov	r8, r2
  401964:	461e      	mov	r6, r3
  401966:	b115      	cbz	r5, 40196e <setvbuf+0x1a>
  401968:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40196a:	2b00      	cmp	r3, #0
  40196c:	d079      	beq.n	401a62 <setvbuf+0x10e>
  40196e:	f1b8 0f02 	cmp.w	r8, #2
  401972:	d004      	beq.n	40197e <setvbuf+0x2a>
  401974:	f1b8 0f01 	cmp.w	r8, #1
  401978:	d87f      	bhi.n	401a7a <setvbuf+0x126>
  40197a:	2e00      	cmp	r6, #0
  40197c:	db7d      	blt.n	401a7a <setvbuf+0x126>
  40197e:	4621      	mov	r1, r4
  401980:	4628      	mov	r0, r5
  401982:	f001 f993 	bl	402cac <_fflush_r>
  401986:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401988:	b141      	cbz	r1, 40199c <setvbuf+0x48>
  40198a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40198e:	4299      	cmp	r1, r3
  401990:	d002      	beq.n	401998 <setvbuf+0x44>
  401992:	4628      	mov	r0, r5
  401994:	f001 fae8 	bl	402f68 <_free_r>
  401998:	2300      	movs	r3, #0
  40199a:	6323      	str	r3, [r4, #48]	; 0x30
  40199c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4019a0:	2200      	movs	r2, #0
  4019a2:	61a2      	str	r2, [r4, #24]
  4019a4:	6062      	str	r2, [r4, #4]
  4019a6:	061a      	lsls	r2, r3, #24
  4019a8:	d454      	bmi.n	401a54 <setvbuf+0x100>
  4019aa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4019ae:	f023 0303 	bic.w	r3, r3, #3
  4019b2:	f1b8 0f02 	cmp.w	r8, #2
  4019b6:	81a3      	strh	r3, [r4, #12]
  4019b8:	d039      	beq.n	401a2e <setvbuf+0xda>
  4019ba:	ab01      	add	r3, sp, #4
  4019bc:	466a      	mov	r2, sp
  4019be:	4621      	mov	r1, r4
  4019c0:	4628      	mov	r0, r5
  4019c2:	f001 fd6f 	bl	4034a4 <__swhatbuf_r>
  4019c6:	89a3      	ldrh	r3, [r4, #12]
  4019c8:	4318      	orrs	r0, r3
  4019ca:	81a0      	strh	r0, [r4, #12]
  4019cc:	b326      	cbz	r6, 401a18 <setvbuf+0xc4>
  4019ce:	b327      	cbz	r7, 401a1a <setvbuf+0xc6>
  4019d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4019d2:	2b00      	cmp	r3, #0
  4019d4:	d04d      	beq.n	401a72 <setvbuf+0x11e>
  4019d6:	9b00      	ldr	r3, [sp, #0]
  4019d8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4019dc:	6027      	str	r7, [r4, #0]
  4019de:	429e      	cmp	r6, r3
  4019e0:	bf1c      	itt	ne
  4019e2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  4019e6:	81a0      	strhne	r0, [r4, #12]
  4019e8:	f1b8 0f01 	cmp.w	r8, #1
  4019ec:	bf08      	it	eq
  4019ee:	f040 0001 	orreq.w	r0, r0, #1
  4019f2:	b283      	uxth	r3, r0
  4019f4:	bf08      	it	eq
  4019f6:	81a0      	strheq	r0, [r4, #12]
  4019f8:	f003 0008 	and.w	r0, r3, #8
  4019fc:	b280      	uxth	r0, r0
  4019fe:	6127      	str	r7, [r4, #16]
  401a00:	6166      	str	r6, [r4, #20]
  401a02:	b318      	cbz	r0, 401a4c <setvbuf+0xf8>
  401a04:	f013 0001 	ands.w	r0, r3, #1
  401a08:	d02f      	beq.n	401a6a <setvbuf+0x116>
  401a0a:	2000      	movs	r0, #0
  401a0c:	4276      	negs	r6, r6
  401a0e:	61a6      	str	r6, [r4, #24]
  401a10:	60a0      	str	r0, [r4, #8]
  401a12:	b003      	add	sp, #12
  401a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401a18:	9e00      	ldr	r6, [sp, #0]
  401a1a:	4630      	mov	r0, r6
  401a1c:	f001 fdb6 	bl	40358c <malloc>
  401a20:	4607      	mov	r7, r0
  401a22:	b368      	cbz	r0, 401a80 <setvbuf+0x12c>
  401a24:	89a3      	ldrh	r3, [r4, #12]
  401a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401a2a:	81a3      	strh	r3, [r4, #12]
  401a2c:	e7d0      	b.n	4019d0 <setvbuf+0x7c>
  401a2e:	2000      	movs	r0, #0
  401a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401a34:	f043 0302 	orr.w	r3, r3, #2
  401a38:	2500      	movs	r5, #0
  401a3a:	2101      	movs	r1, #1
  401a3c:	81a3      	strh	r3, [r4, #12]
  401a3e:	60a5      	str	r5, [r4, #8]
  401a40:	6022      	str	r2, [r4, #0]
  401a42:	6122      	str	r2, [r4, #16]
  401a44:	6161      	str	r1, [r4, #20]
  401a46:	b003      	add	sp, #12
  401a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401a4c:	60a0      	str	r0, [r4, #8]
  401a4e:	b003      	add	sp, #12
  401a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401a54:	6921      	ldr	r1, [r4, #16]
  401a56:	4628      	mov	r0, r5
  401a58:	f001 fa86 	bl	402f68 <_free_r>
  401a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401a60:	e7a3      	b.n	4019aa <setvbuf+0x56>
  401a62:	4628      	mov	r0, r5
  401a64:	f001 f9b6 	bl	402dd4 <__sinit>
  401a68:	e781      	b.n	40196e <setvbuf+0x1a>
  401a6a:	60a6      	str	r6, [r4, #8]
  401a6c:	b003      	add	sp, #12
  401a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401a72:	4628      	mov	r0, r5
  401a74:	f001 f9ae 	bl	402dd4 <__sinit>
  401a78:	e7ad      	b.n	4019d6 <setvbuf+0x82>
  401a7a:	f04f 30ff 	mov.w	r0, #4294967295
  401a7e:	e7e2      	b.n	401a46 <setvbuf+0xf2>
  401a80:	f8dd 9000 	ldr.w	r9, [sp]
  401a84:	45b1      	cmp	r9, r6
  401a86:	d006      	beq.n	401a96 <setvbuf+0x142>
  401a88:	4648      	mov	r0, r9
  401a8a:	f001 fd7f 	bl	40358c <malloc>
  401a8e:	4607      	mov	r7, r0
  401a90:	b108      	cbz	r0, 401a96 <setvbuf+0x142>
  401a92:	464e      	mov	r6, r9
  401a94:	e7c6      	b.n	401a24 <setvbuf+0xd0>
  401a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401a9a:	f04f 30ff 	mov.w	r0, #4294967295
  401a9e:	e7c7      	b.n	401a30 <setvbuf+0xdc>
  401aa0:	20400448 	.word	0x20400448
	...

00401ac0 <strlen>:
  401ac0:	f890 f000 	pld	[r0]
  401ac4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401ac8:	f020 0107 	bic.w	r1, r0, #7
  401acc:	f06f 0c00 	mvn.w	ip, #0
  401ad0:	f010 0407 	ands.w	r4, r0, #7
  401ad4:	f891 f020 	pld	[r1, #32]
  401ad8:	f040 8049 	bne.w	401b6e <strlen+0xae>
  401adc:	f04f 0400 	mov.w	r4, #0
  401ae0:	f06f 0007 	mvn.w	r0, #7
  401ae4:	e9d1 2300 	ldrd	r2, r3, [r1]
  401ae8:	f891 f040 	pld	[r1, #64]	; 0x40
  401aec:	f100 0008 	add.w	r0, r0, #8
  401af0:	fa82 f24c 	uadd8	r2, r2, ip
  401af4:	faa4 f28c 	sel	r2, r4, ip
  401af8:	fa83 f34c 	uadd8	r3, r3, ip
  401afc:	faa2 f38c 	sel	r3, r2, ip
  401b00:	bb4b      	cbnz	r3, 401b56 <strlen+0x96>
  401b02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401b06:	fa82 f24c 	uadd8	r2, r2, ip
  401b0a:	f100 0008 	add.w	r0, r0, #8
  401b0e:	faa4 f28c 	sel	r2, r4, ip
  401b12:	fa83 f34c 	uadd8	r3, r3, ip
  401b16:	faa2 f38c 	sel	r3, r2, ip
  401b1a:	b9e3      	cbnz	r3, 401b56 <strlen+0x96>
  401b1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  401b20:	fa82 f24c 	uadd8	r2, r2, ip
  401b24:	f100 0008 	add.w	r0, r0, #8
  401b28:	faa4 f28c 	sel	r2, r4, ip
  401b2c:	fa83 f34c 	uadd8	r3, r3, ip
  401b30:	faa2 f38c 	sel	r3, r2, ip
  401b34:	b97b      	cbnz	r3, 401b56 <strlen+0x96>
  401b36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  401b3a:	f101 0120 	add.w	r1, r1, #32
  401b3e:	fa82 f24c 	uadd8	r2, r2, ip
  401b42:	f100 0008 	add.w	r0, r0, #8
  401b46:	faa4 f28c 	sel	r2, r4, ip
  401b4a:	fa83 f34c 	uadd8	r3, r3, ip
  401b4e:	faa2 f38c 	sel	r3, r2, ip
  401b52:	2b00      	cmp	r3, #0
  401b54:	d0c6      	beq.n	401ae4 <strlen+0x24>
  401b56:	2a00      	cmp	r2, #0
  401b58:	bf04      	itt	eq
  401b5a:	3004      	addeq	r0, #4
  401b5c:	461a      	moveq	r2, r3
  401b5e:	ba12      	rev	r2, r2
  401b60:	fab2 f282 	clz	r2, r2
  401b64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401b68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  401b6c:	4770      	bx	lr
  401b6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  401b72:	f004 0503 	and.w	r5, r4, #3
  401b76:	f1c4 0000 	rsb	r0, r4, #0
  401b7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  401b7e:	f014 0f04 	tst.w	r4, #4
  401b82:	f891 f040 	pld	[r1, #64]	; 0x40
  401b86:	fa0c f505 	lsl.w	r5, ip, r5
  401b8a:	ea62 0205 	orn	r2, r2, r5
  401b8e:	bf1c      	itt	ne
  401b90:	ea63 0305 	ornne	r3, r3, r5
  401b94:	4662      	movne	r2, ip
  401b96:	f04f 0400 	mov.w	r4, #0
  401b9a:	e7a9      	b.n	401af0 <strlen+0x30>

00401b9c <__sprint_r.part.0>:
  401b9c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401b9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401ba2:	049c      	lsls	r4, r3, #18
  401ba4:	4692      	mov	sl, r2
  401ba6:	d52c      	bpl.n	401c02 <__sprint_r.part.0+0x66>
  401ba8:	6893      	ldr	r3, [r2, #8]
  401baa:	6812      	ldr	r2, [r2, #0]
  401bac:	b33b      	cbz	r3, 401bfe <__sprint_r.part.0+0x62>
  401bae:	460f      	mov	r7, r1
  401bb0:	4680      	mov	r8, r0
  401bb2:	f102 0908 	add.w	r9, r2, #8
  401bb6:	e919 0060 	ldmdb	r9, {r5, r6}
  401bba:	08b6      	lsrs	r6, r6, #2
  401bbc:	d017      	beq.n	401bee <__sprint_r.part.0+0x52>
  401bbe:	3d04      	subs	r5, #4
  401bc0:	2400      	movs	r4, #0
  401bc2:	e001      	b.n	401bc8 <__sprint_r.part.0+0x2c>
  401bc4:	42a6      	cmp	r6, r4
  401bc6:	d010      	beq.n	401bea <__sprint_r.part.0+0x4e>
  401bc8:	463a      	mov	r2, r7
  401bca:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401bce:	4640      	mov	r0, r8
  401bd0:	f001 f96a 	bl	402ea8 <_fputwc_r>
  401bd4:	1c43      	adds	r3, r0, #1
  401bd6:	f104 0401 	add.w	r4, r4, #1
  401bda:	d1f3      	bne.n	401bc4 <__sprint_r.part.0+0x28>
  401bdc:	2300      	movs	r3, #0
  401bde:	f8ca 3008 	str.w	r3, [sl, #8]
  401be2:	f8ca 3004 	str.w	r3, [sl, #4]
  401be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401bea:	f8da 3008 	ldr.w	r3, [sl, #8]
  401bee:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  401bf2:	f8ca 3008 	str.w	r3, [sl, #8]
  401bf6:	f109 0908 	add.w	r9, r9, #8
  401bfa:	2b00      	cmp	r3, #0
  401bfc:	d1db      	bne.n	401bb6 <__sprint_r.part.0+0x1a>
  401bfe:	2000      	movs	r0, #0
  401c00:	e7ec      	b.n	401bdc <__sprint_r.part.0+0x40>
  401c02:	f001 fa99 	bl	403138 <__sfvwrite_r>
  401c06:	2300      	movs	r3, #0
  401c08:	f8ca 3008 	str.w	r3, [sl, #8]
  401c0c:	f8ca 3004 	str.w	r3, [sl, #4]
  401c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00401c14 <_vfiprintf_r>:
  401c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c18:	b0ab      	sub	sp, #172	; 0xac
  401c1a:	461c      	mov	r4, r3
  401c1c:	9100      	str	r1, [sp, #0]
  401c1e:	4690      	mov	r8, r2
  401c20:	9304      	str	r3, [sp, #16]
  401c22:	9005      	str	r0, [sp, #20]
  401c24:	b118      	cbz	r0, 401c2e <_vfiprintf_r+0x1a>
  401c26:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401c28:	2b00      	cmp	r3, #0
  401c2a:	f000 80de 	beq.w	401dea <_vfiprintf_r+0x1d6>
  401c2e:	9800      	ldr	r0, [sp, #0]
  401c30:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  401c34:	b28a      	uxth	r2, r1
  401c36:	0495      	lsls	r5, r2, #18
  401c38:	d407      	bmi.n	401c4a <_vfiprintf_r+0x36>
  401c3a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  401c3c:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  401c40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401c44:	8182      	strh	r2, [r0, #12]
  401c46:	6643      	str	r3, [r0, #100]	; 0x64
  401c48:	b292      	uxth	r2, r2
  401c4a:	0711      	lsls	r1, r2, #28
  401c4c:	f140 80b1 	bpl.w	401db2 <_vfiprintf_r+0x19e>
  401c50:	9b00      	ldr	r3, [sp, #0]
  401c52:	691b      	ldr	r3, [r3, #16]
  401c54:	2b00      	cmp	r3, #0
  401c56:	f000 80ac 	beq.w	401db2 <_vfiprintf_r+0x19e>
  401c5a:	f002 021a 	and.w	r2, r2, #26
  401c5e:	2a0a      	cmp	r2, #10
  401c60:	f000 80b5 	beq.w	401dce <_vfiprintf_r+0x1ba>
  401c64:	2300      	movs	r3, #0
  401c66:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  401c6a:	9302      	str	r3, [sp, #8]
  401c6c:	930f      	str	r3, [sp, #60]	; 0x3c
  401c6e:	930e      	str	r3, [sp, #56]	; 0x38
  401c70:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  401c74:	46da      	mov	sl, fp
  401c76:	f898 3000 	ldrb.w	r3, [r8]
  401c7a:	4644      	mov	r4, r8
  401c7c:	b1fb      	cbz	r3, 401cbe <_vfiprintf_r+0xaa>
  401c7e:	2b25      	cmp	r3, #37	; 0x25
  401c80:	d102      	bne.n	401c88 <_vfiprintf_r+0x74>
  401c82:	e01c      	b.n	401cbe <_vfiprintf_r+0xaa>
  401c84:	2b25      	cmp	r3, #37	; 0x25
  401c86:	d003      	beq.n	401c90 <_vfiprintf_r+0x7c>
  401c88:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401c8c:	2b00      	cmp	r3, #0
  401c8e:	d1f9      	bne.n	401c84 <_vfiprintf_r+0x70>
  401c90:	ebc8 0504 	rsb	r5, r8, r4
  401c94:	b19d      	cbz	r5, 401cbe <_vfiprintf_r+0xaa>
  401c96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401c98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401c9a:	f8ca 8000 	str.w	r8, [sl]
  401c9e:	3301      	adds	r3, #1
  401ca0:	442a      	add	r2, r5
  401ca2:	2b07      	cmp	r3, #7
  401ca4:	f8ca 5004 	str.w	r5, [sl, #4]
  401ca8:	920f      	str	r2, [sp, #60]	; 0x3c
  401caa:	930e      	str	r3, [sp, #56]	; 0x38
  401cac:	dd7b      	ble.n	401da6 <_vfiprintf_r+0x192>
  401cae:	2a00      	cmp	r2, #0
  401cb0:	f040 8528 	bne.w	402704 <_vfiprintf_r+0xaf0>
  401cb4:	9b02      	ldr	r3, [sp, #8]
  401cb6:	920e      	str	r2, [sp, #56]	; 0x38
  401cb8:	442b      	add	r3, r5
  401cba:	46da      	mov	sl, fp
  401cbc:	9302      	str	r3, [sp, #8]
  401cbe:	7823      	ldrb	r3, [r4, #0]
  401cc0:	2b00      	cmp	r3, #0
  401cc2:	f000 843e 	beq.w	402542 <_vfiprintf_r+0x92e>
  401cc6:	2100      	movs	r1, #0
  401cc8:	f04f 0300 	mov.w	r3, #0
  401ccc:	f04f 32ff 	mov.w	r2, #4294967295
  401cd0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401cd4:	f104 0801 	add.w	r8, r4, #1
  401cd8:	7863      	ldrb	r3, [r4, #1]
  401cda:	9201      	str	r2, [sp, #4]
  401cdc:	4608      	mov	r0, r1
  401cde:	460e      	mov	r6, r1
  401ce0:	460c      	mov	r4, r1
  401ce2:	f108 0801 	add.w	r8, r8, #1
  401ce6:	f1a3 0220 	sub.w	r2, r3, #32
  401cea:	2a58      	cmp	r2, #88	; 0x58
  401cec:	f200 8393 	bhi.w	402416 <_vfiprintf_r+0x802>
  401cf0:	e8df f012 	tbh	[pc, r2, lsl #1]
  401cf4:	03910346 	.word	0x03910346
  401cf8:	034e0391 	.word	0x034e0391
  401cfc:	03910391 	.word	0x03910391
  401d00:	03910391 	.word	0x03910391
  401d04:	03910391 	.word	0x03910391
  401d08:	02670289 	.word	0x02670289
  401d0c:	00800391 	.word	0x00800391
  401d10:	0391026c 	.word	0x0391026c
  401d14:	025901c6 	.word	0x025901c6
  401d18:	02590259 	.word	0x02590259
  401d1c:	02590259 	.word	0x02590259
  401d20:	02590259 	.word	0x02590259
  401d24:	02590259 	.word	0x02590259
  401d28:	03910391 	.word	0x03910391
  401d2c:	03910391 	.word	0x03910391
  401d30:	03910391 	.word	0x03910391
  401d34:	03910391 	.word	0x03910391
  401d38:	03910391 	.word	0x03910391
  401d3c:	039101cb 	.word	0x039101cb
  401d40:	03910391 	.word	0x03910391
  401d44:	03910391 	.word	0x03910391
  401d48:	03910391 	.word	0x03910391
  401d4c:	03910391 	.word	0x03910391
  401d50:	02140391 	.word	0x02140391
  401d54:	03910391 	.word	0x03910391
  401d58:	03910391 	.word	0x03910391
  401d5c:	02ee0391 	.word	0x02ee0391
  401d60:	03910391 	.word	0x03910391
  401d64:	03910311 	.word	0x03910311
  401d68:	03910391 	.word	0x03910391
  401d6c:	03910391 	.word	0x03910391
  401d70:	03910391 	.word	0x03910391
  401d74:	03910391 	.word	0x03910391
  401d78:	03340391 	.word	0x03340391
  401d7c:	0391038a 	.word	0x0391038a
  401d80:	03910391 	.word	0x03910391
  401d84:	038a0367 	.word	0x038a0367
  401d88:	03910391 	.word	0x03910391
  401d8c:	0391036c 	.word	0x0391036c
  401d90:	02950379 	.word	0x02950379
  401d94:	02e90085 	.word	0x02e90085
  401d98:	029b0391 	.word	0x029b0391
  401d9c:	02ba0391 	.word	0x02ba0391
  401da0:	03910391 	.word	0x03910391
  401da4:	0353      	.short	0x0353
  401da6:	f10a 0a08 	add.w	sl, sl, #8
  401daa:	9b02      	ldr	r3, [sp, #8]
  401dac:	442b      	add	r3, r5
  401dae:	9302      	str	r3, [sp, #8]
  401db0:	e785      	b.n	401cbe <_vfiprintf_r+0xaa>
  401db2:	9900      	ldr	r1, [sp, #0]
  401db4:	9805      	ldr	r0, [sp, #20]
  401db6:	f000 fe61 	bl	402a7c <__swsetup_r>
  401dba:	2800      	cmp	r0, #0
  401dbc:	f040 8558 	bne.w	402870 <_vfiprintf_r+0xc5c>
  401dc0:	9b00      	ldr	r3, [sp, #0]
  401dc2:	899a      	ldrh	r2, [r3, #12]
  401dc4:	f002 021a 	and.w	r2, r2, #26
  401dc8:	2a0a      	cmp	r2, #10
  401dca:	f47f af4b 	bne.w	401c64 <_vfiprintf_r+0x50>
  401dce:	9900      	ldr	r1, [sp, #0]
  401dd0:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  401dd4:	2b00      	cmp	r3, #0
  401dd6:	f6ff af45 	blt.w	401c64 <_vfiprintf_r+0x50>
  401dda:	4623      	mov	r3, r4
  401ddc:	4642      	mov	r2, r8
  401dde:	9805      	ldr	r0, [sp, #20]
  401de0:	f000 fe16 	bl	402a10 <__sbprintf>
  401de4:	b02b      	add	sp, #172	; 0xac
  401de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401dea:	f000 fff3 	bl	402dd4 <__sinit>
  401dee:	e71e      	b.n	401c2e <_vfiprintf_r+0x1a>
  401df0:	4264      	negs	r4, r4
  401df2:	9304      	str	r3, [sp, #16]
  401df4:	f046 0604 	orr.w	r6, r6, #4
  401df8:	f898 3000 	ldrb.w	r3, [r8]
  401dfc:	e771      	b.n	401ce2 <_vfiprintf_r+0xce>
  401dfe:	2130      	movs	r1, #48	; 0x30
  401e00:	9804      	ldr	r0, [sp, #16]
  401e02:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  401e06:	9901      	ldr	r1, [sp, #4]
  401e08:	9406      	str	r4, [sp, #24]
  401e0a:	f04f 0300 	mov.w	r3, #0
  401e0e:	2278      	movs	r2, #120	; 0x78
  401e10:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401e14:	2900      	cmp	r1, #0
  401e16:	4603      	mov	r3, r0
  401e18:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  401e1c:	6804      	ldr	r4, [r0, #0]
  401e1e:	f103 0304 	add.w	r3, r3, #4
  401e22:	f04f 0500 	mov.w	r5, #0
  401e26:	f046 0202 	orr.w	r2, r6, #2
  401e2a:	f2c0 8525 	blt.w	402878 <_vfiprintf_r+0xc64>
  401e2e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401e32:	ea54 0205 	orrs.w	r2, r4, r5
  401e36:	f046 0602 	orr.w	r6, r6, #2
  401e3a:	9304      	str	r3, [sp, #16]
  401e3c:	f040 84bf 	bne.w	4027be <_vfiprintf_r+0xbaa>
  401e40:	48b3      	ldr	r0, [pc, #716]	; (402110 <_vfiprintf_r+0x4fc>)
  401e42:	9b01      	ldr	r3, [sp, #4]
  401e44:	2b00      	cmp	r3, #0
  401e46:	f040 841c 	bne.w	402682 <_vfiprintf_r+0xa6e>
  401e4a:	4699      	mov	r9, r3
  401e4c:	2300      	movs	r3, #0
  401e4e:	9301      	str	r3, [sp, #4]
  401e50:	9303      	str	r3, [sp, #12]
  401e52:	465f      	mov	r7, fp
  401e54:	9b01      	ldr	r3, [sp, #4]
  401e56:	9a03      	ldr	r2, [sp, #12]
  401e58:	4293      	cmp	r3, r2
  401e5a:	bfb8      	it	lt
  401e5c:	4613      	movlt	r3, r2
  401e5e:	461d      	mov	r5, r3
  401e60:	f1b9 0f00 	cmp.w	r9, #0
  401e64:	d000      	beq.n	401e68 <_vfiprintf_r+0x254>
  401e66:	3501      	adds	r5, #1
  401e68:	f016 0302 	ands.w	r3, r6, #2
  401e6c:	9307      	str	r3, [sp, #28]
  401e6e:	bf18      	it	ne
  401e70:	3502      	addne	r5, #2
  401e72:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  401e76:	9308      	str	r3, [sp, #32]
  401e78:	f040 82f1 	bne.w	40245e <_vfiprintf_r+0x84a>
  401e7c:	9b06      	ldr	r3, [sp, #24]
  401e7e:	1b5c      	subs	r4, r3, r5
  401e80:	2c00      	cmp	r4, #0
  401e82:	f340 82ec 	ble.w	40245e <_vfiprintf_r+0x84a>
  401e86:	2c10      	cmp	r4, #16
  401e88:	f340 8556 	ble.w	402938 <_vfiprintf_r+0xd24>
  401e8c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 402114 <_vfiprintf_r+0x500>
  401e90:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  401e94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401e96:	46d4      	mov	ip, sl
  401e98:	2310      	movs	r3, #16
  401e9a:	46c2      	mov	sl, r8
  401e9c:	4670      	mov	r0, lr
  401e9e:	46a8      	mov	r8, r5
  401ea0:	464d      	mov	r5, r9
  401ea2:	f8dd 9014 	ldr.w	r9, [sp, #20]
  401ea6:	e007      	b.n	401eb8 <_vfiprintf_r+0x2a4>
  401ea8:	f100 0e02 	add.w	lr, r0, #2
  401eac:	f10c 0c08 	add.w	ip, ip, #8
  401eb0:	4608      	mov	r0, r1
  401eb2:	3c10      	subs	r4, #16
  401eb4:	2c10      	cmp	r4, #16
  401eb6:	dd13      	ble.n	401ee0 <_vfiprintf_r+0x2cc>
  401eb8:	1c41      	adds	r1, r0, #1
  401eba:	3210      	adds	r2, #16
  401ebc:	2907      	cmp	r1, #7
  401ebe:	920f      	str	r2, [sp, #60]	; 0x3c
  401ec0:	f8cc 5000 	str.w	r5, [ip]
  401ec4:	f8cc 3004 	str.w	r3, [ip, #4]
  401ec8:	910e      	str	r1, [sp, #56]	; 0x38
  401eca:	dded      	ble.n	401ea8 <_vfiprintf_r+0x294>
  401ecc:	2a00      	cmp	r2, #0
  401ece:	f040 82b7 	bne.w	402440 <_vfiprintf_r+0x82c>
  401ed2:	3c10      	subs	r4, #16
  401ed4:	2c10      	cmp	r4, #16
  401ed6:	4610      	mov	r0, r2
  401ed8:	f04f 0e01 	mov.w	lr, #1
  401edc:	46dc      	mov	ip, fp
  401ede:	dceb      	bgt.n	401eb8 <_vfiprintf_r+0x2a4>
  401ee0:	46a9      	mov	r9, r5
  401ee2:	4670      	mov	r0, lr
  401ee4:	4645      	mov	r5, r8
  401ee6:	46d0      	mov	r8, sl
  401ee8:	46e2      	mov	sl, ip
  401eea:	4422      	add	r2, r4
  401eec:	2807      	cmp	r0, #7
  401eee:	920f      	str	r2, [sp, #60]	; 0x3c
  401ef0:	f8ca 9000 	str.w	r9, [sl]
  401ef4:	f8ca 4004 	str.w	r4, [sl, #4]
  401ef8:	900e      	str	r0, [sp, #56]	; 0x38
  401efa:	f300 8375 	bgt.w	4025e8 <_vfiprintf_r+0x9d4>
  401efe:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401f02:	f10a 0a08 	add.w	sl, sl, #8
  401f06:	f100 0e01 	add.w	lr, r0, #1
  401f0a:	2b00      	cmp	r3, #0
  401f0c:	f040 82b0 	bne.w	402470 <_vfiprintf_r+0x85c>
  401f10:	9b07      	ldr	r3, [sp, #28]
  401f12:	2b00      	cmp	r3, #0
  401f14:	f000 82c3 	beq.w	40249e <_vfiprintf_r+0x88a>
  401f18:	3202      	adds	r2, #2
  401f1a:	a90c      	add	r1, sp, #48	; 0x30
  401f1c:	2302      	movs	r3, #2
  401f1e:	f1be 0f07 	cmp.w	lr, #7
  401f22:	920f      	str	r2, [sp, #60]	; 0x3c
  401f24:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401f28:	e88a 000a 	stmia.w	sl, {r1, r3}
  401f2c:	f340 8378 	ble.w	402620 <_vfiprintf_r+0xa0c>
  401f30:	2a00      	cmp	r2, #0
  401f32:	f040 840a 	bne.w	40274a <_vfiprintf_r+0xb36>
  401f36:	9b08      	ldr	r3, [sp, #32]
  401f38:	2b80      	cmp	r3, #128	; 0x80
  401f3a:	f04f 0e01 	mov.w	lr, #1
  401f3e:	4610      	mov	r0, r2
  401f40:	46da      	mov	sl, fp
  401f42:	f040 82b0 	bne.w	4024a6 <_vfiprintf_r+0x892>
  401f46:	9b06      	ldr	r3, [sp, #24]
  401f48:	1b5c      	subs	r4, r3, r5
  401f4a:	2c00      	cmp	r4, #0
  401f4c:	f340 82ab 	ble.w	4024a6 <_vfiprintf_r+0x892>
  401f50:	2c10      	cmp	r4, #16
  401f52:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 402118 <_vfiprintf_r+0x504>
  401f56:	f340 850b 	ble.w	402970 <_vfiprintf_r+0xd5c>
  401f5a:	46d6      	mov	lr, sl
  401f5c:	2310      	movs	r3, #16
  401f5e:	46c2      	mov	sl, r8
  401f60:	46a8      	mov	r8, r5
  401f62:	464d      	mov	r5, r9
  401f64:	f8dd 9014 	ldr.w	r9, [sp, #20]
  401f68:	e007      	b.n	401f7a <_vfiprintf_r+0x366>
  401f6a:	f100 0c02 	add.w	ip, r0, #2
  401f6e:	f10e 0e08 	add.w	lr, lr, #8
  401f72:	4608      	mov	r0, r1
  401f74:	3c10      	subs	r4, #16
  401f76:	2c10      	cmp	r4, #16
  401f78:	dd13      	ble.n	401fa2 <_vfiprintf_r+0x38e>
  401f7a:	1c41      	adds	r1, r0, #1
  401f7c:	3210      	adds	r2, #16
  401f7e:	2907      	cmp	r1, #7
  401f80:	920f      	str	r2, [sp, #60]	; 0x3c
  401f82:	f8ce 5000 	str.w	r5, [lr]
  401f86:	f8ce 3004 	str.w	r3, [lr, #4]
  401f8a:	910e      	str	r1, [sp, #56]	; 0x38
  401f8c:	dded      	ble.n	401f6a <_vfiprintf_r+0x356>
  401f8e:	2a00      	cmp	r2, #0
  401f90:	f040 8315 	bne.w	4025be <_vfiprintf_r+0x9aa>
  401f94:	3c10      	subs	r4, #16
  401f96:	2c10      	cmp	r4, #16
  401f98:	f04f 0c01 	mov.w	ip, #1
  401f9c:	4610      	mov	r0, r2
  401f9e:	46de      	mov	lr, fp
  401fa0:	dceb      	bgt.n	401f7a <_vfiprintf_r+0x366>
  401fa2:	46a9      	mov	r9, r5
  401fa4:	4645      	mov	r5, r8
  401fa6:	46d0      	mov	r8, sl
  401fa8:	46f2      	mov	sl, lr
  401faa:	4422      	add	r2, r4
  401fac:	f1bc 0f07 	cmp.w	ip, #7
  401fb0:	920f      	str	r2, [sp, #60]	; 0x3c
  401fb2:	f8ca 9000 	str.w	r9, [sl]
  401fb6:	f8ca 4004 	str.w	r4, [sl, #4]
  401fba:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  401fbe:	f300 83d2 	bgt.w	402766 <_vfiprintf_r+0xb52>
  401fc2:	9b01      	ldr	r3, [sp, #4]
  401fc4:	9903      	ldr	r1, [sp, #12]
  401fc6:	1a5c      	subs	r4, r3, r1
  401fc8:	2c00      	cmp	r4, #0
  401fca:	f10a 0a08 	add.w	sl, sl, #8
  401fce:	f10c 0e01 	add.w	lr, ip, #1
  401fd2:	4660      	mov	r0, ip
  401fd4:	f300 826d 	bgt.w	4024b2 <_vfiprintf_r+0x89e>
  401fd8:	9903      	ldr	r1, [sp, #12]
  401fda:	f8ca 7000 	str.w	r7, [sl]
  401fde:	440a      	add	r2, r1
  401fe0:	f1be 0f07 	cmp.w	lr, #7
  401fe4:	920f      	str	r2, [sp, #60]	; 0x3c
  401fe6:	f8ca 1004 	str.w	r1, [sl, #4]
  401fea:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401fee:	f340 82ce 	ble.w	40258e <_vfiprintf_r+0x97a>
  401ff2:	2a00      	cmp	r2, #0
  401ff4:	f040 833a 	bne.w	40266c <_vfiprintf_r+0xa58>
  401ff8:	0770      	lsls	r0, r6, #29
  401ffa:	920e      	str	r2, [sp, #56]	; 0x38
  401ffc:	d538      	bpl.n	402070 <_vfiprintf_r+0x45c>
  401ffe:	9b06      	ldr	r3, [sp, #24]
  402000:	1b5c      	subs	r4, r3, r5
  402002:	2c00      	cmp	r4, #0
  402004:	dd34      	ble.n	402070 <_vfiprintf_r+0x45c>
  402006:	46da      	mov	sl, fp
  402008:	2c10      	cmp	r4, #16
  40200a:	f340 84ab 	ble.w	402964 <_vfiprintf_r+0xd50>
  40200e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 402114 <_vfiprintf_r+0x500>
  402012:	990e      	ldr	r1, [sp, #56]	; 0x38
  402014:	464f      	mov	r7, r9
  402016:	2610      	movs	r6, #16
  402018:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40201c:	e006      	b.n	40202c <_vfiprintf_r+0x418>
  40201e:	1c88      	adds	r0, r1, #2
  402020:	f10a 0a08 	add.w	sl, sl, #8
  402024:	4619      	mov	r1, r3
  402026:	3c10      	subs	r4, #16
  402028:	2c10      	cmp	r4, #16
  40202a:	dd13      	ble.n	402054 <_vfiprintf_r+0x440>
  40202c:	1c4b      	adds	r3, r1, #1
  40202e:	3210      	adds	r2, #16
  402030:	2b07      	cmp	r3, #7
  402032:	920f      	str	r2, [sp, #60]	; 0x3c
  402034:	f8ca 7000 	str.w	r7, [sl]
  402038:	f8ca 6004 	str.w	r6, [sl, #4]
  40203c:	930e      	str	r3, [sp, #56]	; 0x38
  40203e:	ddee      	ble.n	40201e <_vfiprintf_r+0x40a>
  402040:	2a00      	cmp	r2, #0
  402042:	f040 828e 	bne.w	402562 <_vfiprintf_r+0x94e>
  402046:	3c10      	subs	r4, #16
  402048:	2c10      	cmp	r4, #16
  40204a:	f04f 0001 	mov.w	r0, #1
  40204e:	4611      	mov	r1, r2
  402050:	46da      	mov	sl, fp
  402052:	dceb      	bgt.n	40202c <_vfiprintf_r+0x418>
  402054:	46b9      	mov	r9, r7
  402056:	4422      	add	r2, r4
  402058:	2807      	cmp	r0, #7
  40205a:	920f      	str	r2, [sp, #60]	; 0x3c
  40205c:	f8ca 9000 	str.w	r9, [sl]
  402060:	f8ca 4004 	str.w	r4, [sl, #4]
  402064:	900e      	str	r0, [sp, #56]	; 0x38
  402066:	f340 829b 	ble.w	4025a0 <_vfiprintf_r+0x98c>
  40206a:	2a00      	cmp	r2, #0
  40206c:	f040 8425 	bne.w	4028ba <_vfiprintf_r+0xca6>
  402070:	9b02      	ldr	r3, [sp, #8]
  402072:	9a06      	ldr	r2, [sp, #24]
  402074:	42aa      	cmp	r2, r5
  402076:	bfac      	ite	ge
  402078:	189b      	addge	r3, r3, r2
  40207a:	195b      	addlt	r3, r3, r5
  40207c:	9302      	str	r3, [sp, #8]
  40207e:	e299      	b.n	4025b4 <_vfiprintf_r+0x9a0>
  402080:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  402084:	f898 3000 	ldrb.w	r3, [r8]
  402088:	e62b      	b.n	401ce2 <_vfiprintf_r+0xce>
  40208a:	9406      	str	r4, [sp, #24]
  40208c:	2900      	cmp	r1, #0
  40208e:	f040 84af 	bne.w	4029f0 <_vfiprintf_r+0xddc>
  402092:	f046 0610 	orr.w	r6, r6, #16
  402096:	06b3      	lsls	r3, r6, #26
  402098:	f140 8312 	bpl.w	4026c0 <_vfiprintf_r+0xaac>
  40209c:	9904      	ldr	r1, [sp, #16]
  40209e:	3107      	adds	r1, #7
  4020a0:	f021 0107 	bic.w	r1, r1, #7
  4020a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4020a8:	3108      	adds	r1, #8
  4020aa:	9104      	str	r1, [sp, #16]
  4020ac:	4614      	mov	r4, r2
  4020ae:	461d      	mov	r5, r3
  4020b0:	2a00      	cmp	r2, #0
  4020b2:	f173 0300 	sbcs.w	r3, r3, #0
  4020b6:	f2c0 8386 	blt.w	4027c6 <_vfiprintf_r+0xbb2>
  4020ba:	9b01      	ldr	r3, [sp, #4]
  4020bc:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4020c0:	2b00      	cmp	r3, #0
  4020c2:	f2c0 831a 	blt.w	4026fa <_vfiprintf_r+0xae6>
  4020c6:	ea54 0305 	orrs.w	r3, r4, r5
  4020ca:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4020ce:	f000 80ed 	beq.w	4022ac <_vfiprintf_r+0x698>
  4020d2:	2d00      	cmp	r5, #0
  4020d4:	bf08      	it	eq
  4020d6:	2c0a      	cmpeq	r4, #10
  4020d8:	f0c0 80ed 	bcc.w	4022b6 <_vfiprintf_r+0x6a2>
  4020dc:	465f      	mov	r7, fp
  4020de:	4620      	mov	r0, r4
  4020e0:	4629      	mov	r1, r5
  4020e2:	220a      	movs	r2, #10
  4020e4:	2300      	movs	r3, #0
  4020e6:	f002 fa47 	bl	404578 <__aeabi_uldivmod>
  4020ea:	3230      	adds	r2, #48	; 0x30
  4020ec:	f807 2d01 	strb.w	r2, [r7, #-1]!
  4020f0:	4620      	mov	r0, r4
  4020f2:	4629      	mov	r1, r5
  4020f4:	2300      	movs	r3, #0
  4020f6:	220a      	movs	r2, #10
  4020f8:	f002 fa3e 	bl	404578 <__aeabi_uldivmod>
  4020fc:	4604      	mov	r4, r0
  4020fe:	460d      	mov	r5, r1
  402100:	ea54 0305 	orrs.w	r3, r4, r5
  402104:	d1eb      	bne.n	4020de <_vfiprintf_r+0x4ca>
  402106:	ebc7 030b 	rsb	r3, r7, fp
  40210a:	9303      	str	r3, [sp, #12]
  40210c:	e6a2      	b.n	401e54 <_vfiprintf_r+0x240>
  40210e:	bf00      	nop
  402110:	00404974 	.word	0x00404974
  402114:	00404990 	.word	0x00404990
  402118:	00404950 	.word	0x00404950
  40211c:	9406      	str	r4, [sp, #24]
  40211e:	2900      	cmp	r1, #0
  402120:	f040 8462 	bne.w	4029e8 <_vfiprintf_r+0xdd4>
  402124:	f046 0610 	orr.w	r6, r6, #16
  402128:	f016 0320 	ands.w	r3, r6, #32
  40212c:	f000 82ae 	beq.w	40268c <_vfiprintf_r+0xa78>
  402130:	9b04      	ldr	r3, [sp, #16]
  402132:	3307      	adds	r3, #7
  402134:	f023 0307 	bic.w	r3, r3, #7
  402138:	f04f 0200 	mov.w	r2, #0
  40213c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  402140:	e9d3 4500 	ldrd	r4, r5, [r3]
  402144:	f103 0208 	add.w	r2, r3, #8
  402148:	9b01      	ldr	r3, [sp, #4]
  40214a:	9204      	str	r2, [sp, #16]
  40214c:	2b00      	cmp	r3, #0
  40214e:	f2c0 8174 	blt.w	40243a <_vfiprintf_r+0x826>
  402152:	ea54 0305 	orrs.w	r3, r4, r5
  402156:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40215a:	f040 816e 	bne.w	40243a <_vfiprintf_r+0x826>
  40215e:	9b01      	ldr	r3, [sp, #4]
  402160:	2b00      	cmp	r3, #0
  402162:	f000 8430 	beq.w	4029c6 <_vfiprintf_r+0xdb2>
  402166:	f04f 0900 	mov.w	r9, #0
  40216a:	2400      	movs	r4, #0
  40216c:	2500      	movs	r5, #0
  40216e:	465f      	mov	r7, fp
  402170:	08e2      	lsrs	r2, r4, #3
  402172:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  402176:	08e9      	lsrs	r1, r5, #3
  402178:	f004 0307 	and.w	r3, r4, #7
  40217c:	460d      	mov	r5, r1
  40217e:	4614      	mov	r4, r2
  402180:	3330      	adds	r3, #48	; 0x30
  402182:	ea54 0205 	orrs.w	r2, r4, r5
  402186:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40218a:	d1f1      	bne.n	402170 <_vfiprintf_r+0x55c>
  40218c:	07f4      	lsls	r4, r6, #31
  40218e:	d5ba      	bpl.n	402106 <_vfiprintf_r+0x4f2>
  402190:	2b30      	cmp	r3, #48	; 0x30
  402192:	d0b8      	beq.n	402106 <_vfiprintf_r+0x4f2>
  402194:	2230      	movs	r2, #48	; 0x30
  402196:	1e7b      	subs	r3, r7, #1
  402198:	f807 2c01 	strb.w	r2, [r7, #-1]
  40219c:	ebc3 020b 	rsb	r2, r3, fp
  4021a0:	9203      	str	r2, [sp, #12]
  4021a2:	461f      	mov	r7, r3
  4021a4:	e656      	b.n	401e54 <_vfiprintf_r+0x240>
  4021a6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4021aa:	2400      	movs	r4, #0
  4021ac:	f818 3b01 	ldrb.w	r3, [r8], #1
  4021b0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4021b4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  4021b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4021bc:	2a09      	cmp	r2, #9
  4021be:	d9f5      	bls.n	4021ac <_vfiprintf_r+0x598>
  4021c0:	e591      	b.n	401ce6 <_vfiprintf_r+0xd2>
  4021c2:	f898 3000 	ldrb.w	r3, [r8]
  4021c6:	2101      	movs	r1, #1
  4021c8:	202b      	movs	r0, #43	; 0x2b
  4021ca:	e58a      	b.n	401ce2 <_vfiprintf_r+0xce>
  4021cc:	f898 3000 	ldrb.w	r3, [r8]
  4021d0:	2b2a      	cmp	r3, #42	; 0x2a
  4021d2:	f108 0501 	add.w	r5, r8, #1
  4021d6:	f000 83dd 	beq.w	402994 <_vfiprintf_r+0xd80>
  4021da:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4021de:	2a09      	cmp	r2, #9
  4021e0:	46a8      	mov	r8, r5
  4021e2:	bf98      	it	ls
  4021e4:	2500      	movls	r5, #0
  4021e6:	f200 83ce 	bhi.w	402986 <_vfiprintf_r+0xd72>
  4021ea:	f818 3b01 	ldrb.w	r3, [r8], #1
  4021ee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4021f2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  4021f6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4021fa:	2a09      	cmp	r2, #9
  4021fc:	d9f5      	bls.n	4021ea <_vfiprintf_r+0x5d6>
  4021fe:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  402202:	9201      	str	r2, [sp, #4]
  402204:	e56f      	b.n	401ce6 <_vfiprintf_r+0xd2>
  402206:	9a04      	ldr	r2, [sp, #16]
  402208:	6814      	ldr	r4, [r2, #0]
  40220a:	4613      	mov	r3, r2
  40220c:	2c00      	cmp	r4, #0
  40220e:	f103 0304 	add.w	r3, r3, #4
  402212:	f6ff aded 	blt.w	401df0 <_vfiprintf_r+0x1dc>
  402216:	9304      	str	r3, [sp, #16]
  402218:	f898 3000 	ldrb.w	r3, [r8]
  40221c:	e561      	b.n	401ce2 <_vfiprintf_r+0xce>
  40221e:	9406      	str	r4, [sp, #24]
  402220:	2900      	cmp	r1, #0
  402222:	d081      	beq.n	402128 <_vfiprintf_r+0x514>
  402224:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402228:	e77e      	b.n	402128 <_vfiprintf_r+0x514>
  40222a:	9a04      	ldr	r2, [sp, #16]
  40222c:	9406      	str	r4, [sp, #24]
  40222e:	6817      	ldr	r7, [r2, #0]
  402230:	f04f 0300 	mov.w	r3, #0
  402234:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402238:	1d14      	adds	r4, r2, #4
  40223a:	9b01      	ldr	r3, [sp, #4]
  40223c:	2f00      	cmp	r7, #0
  40223e:	f000 8386 	beq.w	40294e <_vfiprintf_r+0xd3a>
  402242:	2b00      	cmp	r3, #0
  402244:	f2c0 835f 	blt.w	402906 <_vfiprintf_r+0xcf2>
  402248:	461a      	mov	r2, r3
  40224a:	2100      	movs	r1, #0
  40224c:	4638      	mov	r0, r7
  40224e:	f001 fc5f 	bl	403b10 <memchr>
  402252:	2800      	cmp	r0, #0
  402254:	f000 838f 	beq.w	402976 <_vfiprintf_r+0xd62>
  402258:	1bc3      	subs	r3, r0, r7
  40225a:	9303      	str	r3, [sp, #12]
  40225c:	2300      	movs	r3, #0
  40225e:	9404      	str	r4, [sp, #16]
  402260:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  402264:	9301      	str	r3, [sp, #4]
  402266:	e5f5      	b.n	401e54 <_vfiprintf_r+0x240>
  402268:	9406      	str	r4, [sp, #24]
  40226a:	2900      	cmp	r1, #0
  40226c:	f040 83b9 	bne.w	4029e2 <_vfiprintf_r+0xdce>
  402270:	f016 0920 	ands.w	r9, r6, #32
  402274:	d135      	bne.n	4022e2 <_vfiprintf_r+0x6ce>
  402276:	f016 0310 	ands.w	r3, r6, #16
  40227a:	d103      	bne.n	402284 <_vfiprintf_r+0x670>
  40227c:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  402280:	f040 832a 	bne.w	4028d8 <_vfiprintf_r+0xcc4>
  402284:	9a04      	ldr	r2, [sp, #16]
  402286:	4613      	mov	r3, r2
  402288:	6814      	ldr	r4, [r2, #0]
  40228a:	9a01      	ldr	r2, [sp, #4]
  40228c:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402290:	2a00      	cmp	r2, #0
  402292:	f103 0304 	add.w	r3, r3, #4
  402296:	f04f 0500 	mov.w	r5, #0
  40229a:	f2c0 8332 	blt.w	402902 <_vfiprintf_r+0xcee>
  40229e:	ea54 0205 	orrs.w	r2, r4, r5
  4022a2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4022a6:	9304      	str	r3, [sp, #16]
  4022a8:	f47f af13 	bne.w	4020d2 <_vfiprintf_r+0x4be>
  4022ac:	9b01      	ldr	r3, [sp, #4]
  4022ae:	2b00      	cmp	r3, #0
  4022b0:	f43f adcc 	beq.w	401e4c <_vfiprintf_r+0x238>
  4022b4:	2400      	movs	r4, #0
  4022b6:	af2a      	add	r7, sp, #168	; 0xa8
  4022b8:	3430      	adds	r4, #48	; 0x30
  4022ba:	f807 4d41 	strb.w	r4, [r7, #-65]!
  4022be:	ebc7 030b 	rsb	r3, r7, fp
  4022c2:	9303      	str	r3, [sp, #12]
  4022c4:	e5c6      	b.n	401e54 <_vfiprintf_r+0x240>
  4022c6:	f046 0620 	orr.w	r6, r6, #32
  4022ca:	f898 3000 	ldrb.w	r3, [r8]
  4022ce:	e508      	b.n	401ce2 <_vfiprintf_r+0xce>
  4022d0:	9406      	str	r4, [sp, #24]
  4022d2:	2900      	cmp	r1, #0
  4022d4:	f040 836e 	bne.w	4029b4 <_vfiprintf_r+0xda0>
  4022d8:	f046 0610 	orr.w	r6, r6, #16
  4022dc:	f016 0920 	ands.w	r9, r6, #32
  4022e0:	d0c9      	beq.n	402276 <_vfiprintf_r+0x662>
  4022e2:	9b04      	ldr	r3, [sp, #16]
  4022e4:	3307      	adds	r3, #7
  4022e6:	f023 0307 	bic.w	r3, r3, #7
  4022ea:	f04f 0200 	mov.w	r2, #0
  4022ee:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  4022f2:	e9d3 4500 	ldrd	r4, r5, [r3]
  4022f6:	f103 0208 	add.w	r2, r3, #8
  4022fa:	9b01      	ldr	r3, [sp, #4]
  4022fc:	9204      	str	r2, [sp, #16]
  4022fe:	2b00      	cmp	r3, #0
  402300:	f2c0 81f9 	blt.w	4026f6 <_vfiprintf_r+0xae2>
  402304:	ea54 0305 	orrs.w	r3, r4, r5
  402308:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40230c:	f04f 0900 	mov.w	r9, #0
  402310:	f47f aedf 	bne.w	4020d2 <_vfiprintf_r+0x4be>
  402314:	e7ca      	b.n	4022ac <_vfiprintf_r+0x698>
  402316:	9406      	str	r4, [sp, #24]
  402318:	2900      	cmp	r1, #0
  40231a:	f040 8351 	bne.w	4029c0 <_vfiprintf_r+0xdac>
  40231e:	06b2      	lsls	r2, r6, #26
  402320:	48ae      	ldr	r0, [pc, #696]	; (4025dc <_vfiprintf_r+0x9c8>)
  402322:	d541      	bpl.n	4023a8 <_vfiprintf_r+0x794>
  402324:	9a04      	ldr	r2, [sp, #16]
  402326:	3207      	adds	r2, #7
  402328:	f022 0207 	bic.w	r2, r2, #7
  40232c:	e9d2 4500 	ldrd	r4, r5, [r2]
  402330:	f102 0108 	add.w	r1, r2, #8
  402334:	9104      	str	r1, [sp, #16]
  402336:	f016 0901 	ands.w	r9, r6, #1
  40233a:	f000 8177 	beq.w	40262c <_vfiprintf_r+0xa18>
  40233e:	ea54 0205 	orrs.w	r2, r4, r5
  402342:	f040 8226 	bne.w	402792 <_vfiprintf_r+0xb7e>
  402346:	f04f 0300 	mov.w	r3, #0
  40234a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40234e:	9b01      	ldr	r3, [sp, #4]
  402350:	2b00      	cmp	r3, #0
  402352:	f2c0 8196 	blt.w	402682 <_vfiprintf_r+0xa6e>
  402356:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40235a:	e572      	b.n	401e42 <_vfiprintf_r+0x22e>
  40235c:	9a04      	ldr	r2, [sp, #16]
  40235e:	9406      	str	r4, [sp, #24]
  402360:	6813      	ldr	r3, [r2, #0]
  402362:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  402366:	4613      	mov	r3, r2
  402368:	f04f 0100 	mov.w	r1, #0
  40236c:	2501      	movs	r5, #1
  40236e:	3304      	adds	r3, #4
  402370:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  402374:	9304      	str	r3, [sp, #16]
  402376:	9503      	str	r5, [sp, #12]
  402378:	af10      	add	r7, sp, #64	; 0x40
  40237a:	2300      	movs	r3, #0
  40237c:	9301      	str	r3, [sp, #4]
  40237e:	e573      	b.n	401e68 <_vfiprintf_r+0x254>
  402380:	f898 3000 	ldrb.w	r3, [r8]
  402384:	2800      	cmp	r0, #0
  402386:	f47f acac 	bne.w	401ce2 <_vfiprintf_r+0xce>
  40238a:	2101      	movs	r1, #1
  40238c:	2020      	movs	r0, #32
  40238e:	e4a8      	b.n	401ce2 <_vfiprintf_r+0xce>
  402390:	f046 0601 	orr.w	r6, r6, #1
  402394:	f898 3000 	ldrb.w	r3, [r8]
  402398:	e4a3      	b.n	401ce2 <_vfiprintf_r+0xce>
  40239a:	9406      	str	r4, [sp, #24]
  40239c:	2900      	cmp	r1, #0
  40239e:	f040 830c 	bne.w	4029ba <_vfiprintf_r+0xda6>
  4023a2:	06b2      	lsls	r2, r6, #26
  4023a4:	488e      	ldr	r0, [pc, #568]	; (4025e0 <_vfiprintf_r+0x9cc>)
  4023a6:	d4bd      	bmi.n	402324 <_vfiprintf_r+0x710>
  4023a8:	9904      	ldr	r1, [sp, #16]
  4023aa:	06f7      	lsls	r7, r6, #27
  4023ac:	460a      	mov	r2, r1
  4023ae:	f100 819d 	bmi.w	4026ec <_vfiprintf_r+0xad8>
  4023b2:	0675      	lsls	r5, r6, #25
  4023b4:	f140 819a 	bpl.w	4026ec <_vfiprintf_r+0xad8>
  4023b8:	3204      	adds	r2, #4
  4023ba:	880c      	ldrh	r4, [r1, #0]
  4023bc:	9204      	str	r2, [sp, #16]
  4023be:	2500      	movs	r5, #0
  4023c0:	e7b9      	b.n	402336 <_vfiprintf_r+0x722>
  4023c2:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4023c6:	f898 3000 	ldrb.w	r3, [r8]
  4023ca:	e48a      	b.n	401ce2 <_vfiprintf_r+0xce>
  4023cc:	f898 3000 	ldrb.w	r3, [r8]
  4023d0:	2b6c      	cmp	r3, #108	; 0x6c
  4023d2:	bf03      	ittte	eq
  4023d4:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  4023d8:	f046 0620 	orreq.w	r6, r6, #32
  4023dc:	f108 0801 	addeq.w	r8, r8, #1
  4023e0:	f046 0610 	orrne.w	r6, r6, #16
  4023e4:	e47d      	b.n	401ce2 <_vfiprintf_r+0xce>
  4023e6:	2900      	cmp	r1, #0
  4023e8:	f040 8309 	bne.w	4029fe <_vfiprintf_r+0xdea>
  4023ec:	06b4      	lsls	r4, r6, #26
  4023ee:	f140 821c 	bpl.w	40282a <_vfiprintf_r+0xc16>
  4023f2:	9a04      	ldr	r2, [sp, #16]
  4023f4:	9902      	ldr	r1, [sp, #8]
  4023f6:	6813      	ldr	r3, [r2, #0]
  4023f8:	17cd      	asrs	r5, r1, #31
  4023fa:	4608      	mov	r0, r1
  4023fc:	3204      	adds	r2, #4
  4023fe:	4629      	mov	r1, r5
  402400:	9204      	str	r2, [sp, #16]
  402402:	e9c3 0100 	strd	r0, r1, [r3]
  402406:	e436      	b.n	401c76 <_vfiprintf_r+0x62>
  402408:	9406      	str	r4, [sp, #24]
  40240a:	2900      	cmp	r1, #0
  40240c:	f43f ae43 	beq.w	402096 <_vfiprintf_r+0x482>
  402410:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402414:	e63f      	b.n	402096 <_vfiprintf_r+0x482>
  402416:	9406      	str	r4, [sp, #24]
  402418:	2900      	cmp	r1, #0
  40241a:	f040 82ed 	bne.w	4029f8 <_vfiprintf_r+0xde4>
  40241e:	2b00      	cmp	r3, #0
  402420:	f000 808f 	beq.w	402542 <_vfiprintf_r+0x92e>
  402424:	2501      	movs	r5, #1
  402426:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40242a:	f04f 0300 	mov.w	r3, #0
  40242e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402432:	9503      	str	r5, [sp, #12]
  402434:	af10      	add	r7, sp, #64	; 0x40
  402436:	e7a0      	b.n	40237a <_vfiprintf_r+0x766>
  402438:	9304      	str	r3, [sp, #16]
  40243a:	f04f 0900 	mov.w	r9, #0
  40243e:	e696      	b.n	40216e <_vfiprintf_r+0x55a>
  402440:	aa0d      	add	r2, sp, #52	; 0x34
  402442:	9900      	ldr	r1, [sp, #0]
  402444:	9309      	str	r3, [sp, #36]	; 0x24
  402446:	4648      	mov	r0, r9
  402448:	f7ff fba8 	bl	401b9c <__sprint_r.part.0>
  40244c:	2800      	cmp	r0, #0
  40244e:	d17f      	bne.n	402550 <_vfiprintf_r+0x93c>
  402450:	980e      	ldr	r0, [sp, #56]	; 0x38
  402452:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402454:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402456:	f100 0e01 	add.w	lr, r0, #1
  40245a:	46dc      	mov	ip, fp
  40245c:	e529      	b.n	401eb2 <_vfiprintf_r+0x29e>
  40245e:	980e      	ldr	r0, [sp, #56]	; 0x38
  402460:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402462:	f100 0e01 	add.w	lr, r0, #1
  402466:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40246a:	2b00      	cmp	r3, #0
  40246c:	f43f ad50 	beq.w	401f10 <_vfiprintf_r+0x2fc>
  402470:	3201      	adds	r2, #1
  402472:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  402476:	2301      	movs	r3, #1
  402478:	f1be 0f07 	cmp.w	lr, #7
  40247c:	920f      	str	r2, [sp, #60]	; 0x3c
  40247e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  402482:	e88a 000a 	stmia.w	sl, {r1, r3}
  402486:	f340 80bf 	ble.w	402608 <_vfiprintf_r+0x9f4>
  40248a:	2a00      	cmp	r2, #0
  40248c:	f040 814e 	bne.w	40272c <_vfiprintf_r+0xb18>
  402490:	9907      	ldr	r1, [sp, #28]
  402492:	2900      	cmp	r1, #0
  402494:	f040 80be 	bne.w	402614 <_vfiprintf_r+0xa00>
  402498:	469e      	mov	lr, r3
  40249a:	4610      	mov	r0, r2
  40249c:	46da      	mov	sl, fp
  40249e:	9b08      	ldr	r3, [sp, #32]
  4024a0:	2b80      	cmp	r3, #128	; 0x80
  4024a2:	f43f ad50 	beq.w	401f46 <_vfiprintf_r+0x332>
  4024a6:	9b01      	ldr	r3, [sp, #4]
  4024a8:	9903      	ldr	r1, [sp, #12]
  4024aa:	1a5c      	subs	r4, r3, r1
  4024ac:	2c00      	cmp	r4, #0
  4024ae:	f77f ad93 	ble.w	401fd8 <_vfiprintf_r+0x3c4>
  4024b2:	2c10      	cmp	r4, #16
  4024b4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4025e4 <_vfiprintf_r+0x9d0>
  4024b8:	dd25      	ble.n	402506 <_vfiprintf_r+0x8f2>
  4024ba:	46d4      	mov	ip, sl
  4024bc:	2310      	movs	r3, #16
  4024be:	46c2      	mov	sl, r8
  4024c0:	46a8      	mov	r8, r5
  4024c2:	464d      	mov	r5, r9
  4024c4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4024c8:	e007      	b.n	4024da <_vfiprintf_r+0x8c6>
  4024ca:	f100 0e02 	add.w	lr, r0, #2
  4024ce:	f10c 0c08 	add.w	ip, ip, #8
  4024d2:	4608      	mov	r0, r1
  4024d4:	3c10      	subs	r4, #16
  4024d6:	2c10      	cmp	r4, #16
  4024d8:	dd11      	ble.n	4024fe <_vfiprintf_r+0x8ea>
  4024da:	1c41      	adds	r1, r0, #1
  4024dc:	3210      	adds	r2, #16
  4024de:	2907      	cmp	r1, #7
  4024e0:	920f      	str	r2, [sp, #60]	; 0x3c
  4024e2:	f8cc 5000 	str.w	r5, [ip]
  4024e6:	f8cc 3004 	str.w	r3, [ip, #4]
  4024ea:	910e      	str	r1, [sp, #56]	; 0x38
  4024ec:	dded      	ble.n	4024ca <_vfiprintf_r+0x8b6>
  4024ee:	b9d2      	cbnz	r2, 402526 <_vfiprintf_r+0x912>
  4024f0:	3c10      	subs	r4, #16
  4024f2:	2c10      	cmp	r4, #16
  4024f4:	f04f 0e01 	mov.w	lr, #1
  4024f8:	4610      	mov	r0, r2
  4024fa:	46dc      	mov	ip, fp
  4024fc:	dced      	bgt.n	4024da <_vfiprintf_r+0x8c6>
  4024fe:	46a9      	mov	r9, r5
  402500:	4645      	mov	r5, r8
  402502:	46d0      	mov	r8, sl
  402504:	46e2      	mov	sl, ip
  402506:	4422      	add	r2, r4
  402508:	f1be 0f07 	cmp.w	lr, #7
  40250c:	920f      	str	r2, [sp, #60]	; 0x3c
  40250e:	f8ca 9000 	str.w	r9, [sl]
  402512:	f8ca 4004 	str.w	r4, [sl, #4]
  402516:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40251a:	dc2e      	bgt.n	40257a <_vfiprintf_r+0x966>
  40251c:	f10a 0a08 	add.w	sl, sl, #8
  402520:	f10e 0e01 	add.w	lr, lr, #1
  402524:	e558      	b.n	401fd8 <_vfiprintf_r+0x3c4>
  402526:	aa0d      	add	r2, sp, #52	; 0x34
  402528:	9900      	ldr	r1, [sp, #0]
  40252a:	9301      	str	r3, [sp, #4]
  40252c:	4648      	mov	r0, r9
  40252e:	f7ff fb35 	bl	401b9c <__sprint_r.part.0>
  402532:	b968      	cbnz	r0, 402550 <_vfiprintf_r+0x93c>
  402534:	980e      	ldr	r0, [sp, #56]	; 0x38
  402536:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402538:	9b01      	ldr	r3, [sp, #4]
  40253a:	f100 0e01 	add.w	lr, r0, #1
  40253e:	46dc      	mov	ip, fp
  402540:	e7c8      	b.n	4024d4 <_vfiprintf_r+0x8c0>
  402542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402544:	b123      	cbz	r3, 402550 <_vfiprintf_r+0x93c>
  402546:	9805      	ldr	r0, [sp, #20]
  402548:	9900      	ldr	r1, [sp, #0]
  40254a:	aa0d      	add	r2, sp, #52	; 0x34
  40254c:	f7ff fb26 	bl	401b9c <__sprint_r.part.0>
  402550:	9b00      	ldr	r3, [sp, #0]
  402552:	899b      	ldrh	r3, [r3, #12]
  402554:	065a      	lsls	r2, r3, #25
  402556:	f100 818b 	bmi.w	402870 <_vfiprintf_r+0xc5c>
  40255a:	9802      	ldr	r0, [sp, #8]
  40255c:	b02b      	add	sp, #172	; 0xac
  40255e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402562:	aa0d      	add	r2, sp, #52	; 0x34
  402564:	9900      	ldr	r1, [sp, #0]
  402566:	4648      	mov	r0, r9
  402568:	f7ff fb18 	bl	401b9c <__sprint_r.part.0>
  40256c:	2800      	cmp	r0, #0
  40256e:	d1ef      	bne.n	402550 <_vfiprintf_r+0x93c>
  402570:	990e      	ldr	r1, [sp, #56]	; 0x38
  402572:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402574:	1c48      	adds	r0, r1, #1
  402576:	46da      	mov	sl, fp
  402578:	e555      	b.n	402026 <_vfiprintf_r+0x412>
  40257a:	2a00      	cmp	r2, #0
  40257c:	f040 80fb 	bne.w	402776 <_vfiprintf_r+0xb62>
  402580:	9a03      	ldr	r2, [sp, #12]
  402582:	921b      	str	r2, [sp, #108]	; 0x6c
  402584:	2301      	movs	r3, #1
  402586:	920f      	str	r2, [sp, #60]	; 0x3c
  402588:	971a      	str	r7, [sp, #104]	; 0x68
  40258a:	930e      	str	r3, [sp, #56]	; 0x38
  40258c:	46da      	mov	sl, fp
  40258e:	f10a 0a08 	add.w	sl, sl, #8
  402592:	0771      	lsls	r1, r6, #29
  402594:	d504      	bpl.n	4025a0 <_vfiprintf_r+0x98c>
  402596:	9b06      	ldr	r3, [sp, #24]
  402598:	1b5c      	subs	r4, r3, r5
  40259a:	2c00      	cmp	r4, #0
  40259c:	f73f ad34 	bgt.w	402008 <_vfiprintf_r+0x3f4>
  4025a0:	9b02      	ldr	r3, [sp, #8]
  4025a2:	9906      	ldr	r1, [sp, #24]
  4025a4:	42a9      	cmp	r1, r5
  4025a6:	bfac      	ite	ge
  4025a8:	185b      	addge	r3, r3, r1
  4025aa:	195b      	addlt	r3, r3, r5
  4025ac:	9302      	str	r3, [sp, #8]
  4025ae:	2a00      	cmp	r2, #0
  4025b0:	f040 80b3 	bne.w	40271a <_vfiprintf_r+0xb06>
  4025b4:	2300      	movs	r3, #0
  4025b6:	930e      	str	r3, [sp, #56]	; 0x38
  4025b8:	46da      	mov	sl, fp
  4025ba:	f7ff bb5c 	b.w	401c76 <_vfiprintf_r+0x62>
  4025be:	aa0d      	add	r2, sp, #52	; 0x34
  4025c0:	9900      	ldr	r1, [sp, #0]
  4025c2:	9307      	str	r3, [sp, #28]
  4025c4:	4648      	mov	r0, r9
  4025c6:	f7ff fae9 	bl	401b9c <__sprint_r.part.0>
  4025ca:	2800      	cmp	r0, #0
  4025cc:	d1c0      	bne.n	402550 <_vfiprintf_r+0x93c>
  4025ce:	980e      	ldr	r0, [sp, #56]	; 0x38
  4025d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4025d2:	9b07      	ldr	r3, [sp, #28]
  4025d4:	f100 0c01 	add.w	ip, r0, #1
  4025d8:	46de      	mov	lr, fp
  4025da:	e4cb      	b.n	401f74 <_vfiprintf_r+0x360>
  4025dc:	00404960 	.word	0x00404960
  4025e0:	00404974 	.word	0x00404974
  4025e4:	00404950 	.word	0x00404950
  4025e8:	2a00      	cmp	r2, #0
  4025ea:	f040 8133 	bne.w	402854 <_vfiprintf_r+0xc40>
  4025ee:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4025f2:	2b00      	cmp	r3, #0
  4025f4:	f000 80f5 	beq.w	4027e2 <_vfiprintf_r+0xbce>
  4025f8:	2301      	movs	r3, #1
  4025fa:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  4025fe:	461a      	mov	r2, r3
  402600:	931b      	str	r3, [sp, #108]	; 0x6c
  402602:	469e      	mov	lr, r3
  402604:	911a      	str	r1, [sp, #104]	; 0x68
  402606:	46da      	mov	sl, fp
  402608:	4670      	mov	r0, lr
  40260a:	f10a 0a08 	add.w	sl, sl, #8
  40260e:	f10e 0e01 	add.w	lr, lr, #1
  402612:	e47d      	b.n	401f10 <_vfiprintf_r+0x2fc>
  402614:	a90c      	add	r1, sp, #48	; 0x30
  402616:	2202      	movs	r2, #2
  402618:	469e      	mov	lr, r3
  40261a:	911a      	str	r1, [sp, #104]	; 0x68
  40261c:	921b      	str	r2, [sp, #108]	; 0x6c
  40261e:	46da      	mov	sl, fp
  402620:	4670      	mov	r0, lr
  402622:	f10a 0a08 	add.w	sl, sl, #8
  402626:	f10e 0e01 	add.w	lr, lr, #1
  40262a:	e738      	b.n	40249e <_vfiprintf_r+0x88a>
  40262c:	9b01      	ldr	r3, [sp, #4]
  40262e:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402632:	2b00      	cmp	r3, #0
  402634:	f2c0 812a 	blt.w	40288c <_vfiprintf_r+0xc78>
  402638:	ea54 0305 	orrs.w	r3, r4, r5
  40263c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402640:	f43f abff 	beq.w	401e42 <_vfiprintf_r+0x22e>
  402644:	465f      	mov	r7, fp
  402646:	0923      	lsrs	r3, r4, #4
  402648:	f004 010f 	and.w	r1, r4, #15
  40264c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  402650:	092a      	lsrs	r2, r5, #4
  402652:	461c      	mov	r4, r3
  402654:	4615      	mov	r5, r2
  402656:	5c43      	ldrb	r3, [r0, r1]
  402658:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40265c:	ea54 0305 	orrs.w	r3, r4, r5
  402660:	d1f1      	bne.n	402646 <_vfiprintf_r+0xa32>
  402662:	ebc7 030b 	rsb	r3, r7, fp
  402666:	9303      	str	r3, [sp, #12]
  402668:	f7ff bbf4 	b.w	401e54 <_vfiprintf_r+0x240>
  40266c:	aa0d      	add	r2, sp, #52	; 0x34
  40266e:	9900      	ldr	r1, [sp, #0]
  402670:	9805      	ldr	r0, [sp, #20]
  402672:	f7ff fa93 	bl	401b9c <__sprint_r.part.0>
  402676:	2800      	cmp	r0, #0
  402678:	f47f af6a 	bne.w	402550 <_vfiprintf_r+0x93c>
  40267c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40267e:	46da      	mov	sl, fp
  402680:	e787      	b.n	402592 <_vfiprintf_r+0x97e>
  402682:	f04f 0900 	mov.w	r9, #0
  402686:	2400      	movs	r4, #0
  402688:	2500      	movs	r5, #0
  40268a:	e7db      	b.n	402644 <_vfiprintf_r+0xa30>
  40268c:	f016 0210 	ands.w	r2, r6, #16
  402690:	f000 80b2 	beq.w	4027f8 <_vfiprintf_r+0xbe4>
  402694:	9904      	ldr	r1, [sp, #16]
  402696:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40269a:	460a      	mov	r2, r1
  40269c:	680c      	ldr	r4, [r1, #0]
  40269e:	9901      	ldr	r1, [sp, #4]
  4026a0:	2900      	cmp	r1, #0
  4026a2:	f102 0204 	add.w	r2, r2, #4
  4026a6:	f04f 0500 	mov.w	r5, #0
  4026aa:	f2c0 8159 	blt.w	402960 <_vfiprintf_r+0xd4c>
  4026ae:	ea54 0105 	orrs.w	r1, r4, r5
  4026b2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4026b6:	9204      	str	r2, [sp, #16]
  4026b8:	f43f ad51 	beq.w	40215e <_vfiprintf_r+0x54a>
  4026bc:	4699      	mov	r9, r3
  4026be:	e556      	b.n	40216e <_vfiprintf_r+0x55a>
  4026c0:	06f7      	lsls	r7, r6, #27
  4026c2:	d40a      	bmi.n	4026da <_vfiprintf_r+0xac6>
  4026c4:	0675      	lsls	r5, r6, #25
  4026c6:	d508      	bpl.n	4026da <_vfiprintf_r+0xac6>
  4026c8:	9904      	ldr	r1, [sp, #16]
  4026ca:	f9b1 4000 	ldrsh.w	r4, [r1]
  4026ce:	3104      	adds	r1, #4
  4026d0:	17e5      	asrs	r5, r4, #31
  4026d2:	4622      	mov	r2, r4
  4026d4:	462b      	mov	r3, r5
  4026d6:	9104      	str	r1, [sp, #16]
  4026d8:	e4ea      	b.n	4020b0 <_vfiprintf_r+0x49c>
  4026da:	9a04      	ldr	r2, [sp, #16]
  4026dc:	6814      	ldr	r4, [r2, #0]
  4026de:	4613      	mov	r3, r2
  4026e0:	3304      	adds	r3, #4
  4026e2:	17e5      	asrs	r5, r4, #31
  4026e4:	9304      	str	r3, [sp, #16]
  4026e6:	4622      	mov	r2, r4
  4026e8:	462b      	mov	r3, r5
  4026ea:	e4e1      	b.n	4020b0 <_vfiprintf_r+0x49c>
  4026ec:	6814      	ldr	r4, [r2, #0]
  4026ee:	3204      	adds	r2, #4
  4026f0:	9204      	str	r2, [sp, #16]
  4026f2:	2500      	movs	r5, #0
  4026f4:	e61f      	b.n	402336 <_vfiprintf_r+0x722>
  4026f6:	f04f 0900 	mov.w	r9, #0
  4026fa:	ea54 0305 	orrs.w	r3, r4, r5
  4026fe:	f47f ace8 	bne.w	4020d2 <_vfiprintf_r+0x4be>
  402702:	e5d8      	b.n	4022b6 <_vfiprintf_r+0x6a2>
  402704:	aa0d      	add	r2, sp, #52	; 0x34
  402706:	9900      	ldr	r1, [sp, #0]
  402708:	9805      	ldr	r0, [sp, #20]
  40270a:	f7ff fa47 	bl	401b9c <__sprint_r.part.0>
  40270e:	2800      	cmp	r0, #0
  402710:	f47f af1e 	bne.w	402550 <_vfiprintf_r+0x93c>
  402714:	46da      	mov	sl, fp
  402716:	f7ff bb48 	b.w	401daa <_vfiprintf_r+0x196>
  40271a:	aa0d      	add	r2, sp, #52	; 0x34
  40271c:	9900      	ldr	r1, [sp, #0]
  40271e:	9805      	ldr	r0, [sp, #20]
  402720:	f7ff fa3c 	bl	401b9c <__sprint_r.part.0>
  402724:	2800      	cmp	r0, #0
  402726:	f43f af45 	beq.w	4025b4 <_vfiprintf_r+0x9a0>
  40272a:	e711      	b.n	402550 <_vfiprintf_r+0x93c>
  40272c:	aa0d      	add	r2, sp, #52	; 0x34
  40272e:	9900      	ldr	r1, [sp, #0]
  402730:	9805      	ldr	r0, [sp, #20]
  402732:	f7ff fa33 	bl	401b9c <__sprint_r.part.0>
  402736:	2800      	cmp	r0, #0
  402738:	f47f af0a 	bne.w	402550 <_vfiprintf_r+0x93c>
  40273c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40273e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402740:	f100 0e01 	add.w	lr, r0, #1
  402744:	46da      	mov	sl, fp
  402746:	f7ff bbe3 	b.w	401f10 <_vfiprintf_r+0x2fc>
  40274a:	aa0d      	add	r2, sp, #52	; 0x34
  40274c:	9900      	ldr	r1, [sp, #0]
  40274e:	9805      	ldr	r0, [sp, #20]
  402750:	f7ff fa24 	bl	401b9c <__sprint_r.part.0>
  402754:	2800      	cmp	r0, #0
  402756:	f47f aefb 	bne.w	402550 <_vfiprintf_r+0x93c>
  40275a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40275c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40275e:	f100 0e01 	add.w	lr, r0, #1
  402762:	46da      	mov	sl, fp
  402764:	e69b      	b.n	40249e <_vfiprintf_r+0x88a>
  402766:	2a00      	cmp	r2, #0
  402768:	f040 80d8 	bne.w	40291c <_vfiprintf_r+0xd08>
  40276c:	f04f 0e01 	mov.w	lr, #1
  402770:	4610      	mov	r0, r2
  402772:	46da      	mov	sl, fp
  402774:	e697      	b.n	4024a6 <_vfiprintf_r+0x892>
  402776:	aa0d      	add	r2, sp, #52	; 0x34
  402778:	9900      	ldr	r1, [sp, #0]
  40277a:	9805      	ldr	r0, [sp, #20]
  40277c:	f7ff fa0e 	bl	401b9c <__sprint_r.part.0>
  402780:	2800      	cmp	r0, #0
  402782:	f47f aee5 	bne.w	402550 <_vfiprintf_r+0x93c>
  402786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402788:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40278a:	f103 0e01 	add.w	lr, r3, #1
  40278e:	46da      	mov	sl, fp
  402790:	e422      	b.n	401fd8 <_vfiprintf_r+0x3c4>
  402792:	2230      	movs	r2, #48	; 0x30
  402794:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  402798:	9a01      	ldr	r2, [sp, #4]
  40279a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40279e:	2a00      	cmp	r2, #0
  4027a0:	f04f 0300 	mov.w	r3, #0
  4027a4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4027a8:	f046 0302 	orr.w	r3, r6, #2
  4027ac:	f2c0 80cb 	blt.w	402946 <_vfiprintf_r+0xd32>
  4027b0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4027b4:	f046 0602 	orr.w	r6, r6, #2
  4027b8:	f04f 0900 	mov.w	r9, #0
  4027bc:	e742      	b.n	402644 <_vfiprintf_r+0xa30>
  4027be:	f04f 0900 	mov.w	r9, #0
  4027c2:	4890      	ldr	r0, [pc, #576]	; (402a04 <_vfiprintf_r+0xdf0>)
  4027c4:	e73e      	b.n	402644 <_vfiprintf_r+0xa30>
  4027c6:	9b01      	ldr	r3, [sp, #4]
  4027c8:	4264      	negs	r4, r4
  4027ca:	f04f 092d 	mov.w	r9, #45	; 0x2d
  4027ce:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4027d2:	2b00      	cmp	r3, #0
  4027d4:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4027d8:	f6ff ac7b 	blt.w	4020d2 <_vfiprintf_r+0x4be>
  4027dc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4027e0:	e477      	b.n	4020d2 <_vfiprintf_r+0x4be>
  4027e2:	9b07      	ldr	r3, [sp, #28]
  4027e4:	2b00      	cmp	r3, #0
  4027e6:	d072      	beq.n	4028ce <_vfiprintf_r+0xcba>
  4027e8:	ab0c      	add	r3, sp, #48	; 0x30
  4027ea:	2202      	movs	r2, #2
  4027ec:	931a      	str	r3, [sp, #104]	; 0x68
  4027ee:	921b      	str	r2, [sp, #108]	; 0x6c
  4027f0:	f04f 0e01 	mov.w	lr, #1
  4027f4:	46da      	mov	sl, fp
  4027f6:	e713      	b.n	402620 <_vfiprintf_r+0xa0c>
  4027f8:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  4027fc:	d048      	beq.n	402890 <_vfiprintf_r+0xc7c>
  4027fe:	9904      	ldr	r1, [sp, #16]
  402800:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  402804:	460b      	mov	r3, r1
  402806:	880c      	ldrh	r4, [r1, #0]
  402808:	9901      	ldr	r1, [sp, #4]
  40280a:	2900      	cmp	r1, #0
  40280c:	f103 0304 	add.w	r3, r3, #4
  402810:	f04f 0500 	mov.w	r5, #0
  402814:	f6ff ae10 	blt.w	402438 <_vfiprintf_r+0x824>
  402818:	ea54 0105 	orrs.w	r1, r4, r5
  40281c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402820:	9304      	str	r3, [sp, #16]
  402822:	f43f ac9c 	beq.w	40215e <_vfiprintf_r+0x54a>
  402826:	4691      	mov	r9, r2
  402828:	e4a1      	b.n	40216e <_vfiprintf_r+0x55a>
  40282a:	06f0      	lsls	r0, r6, #27
  40282c:	d40a      	bmi.n	402844 <_vfiprintf_r+0xc30>
  40282e:	0671      	lsls	r1, r6, #25
  402830:	d508      	bpl.n	402844 <_vfiprintf_r+0xc30>
  402832:	9a04      	ldr	r2, [sp, #16]
  402834:	6813      	ldr	r3, [r2, #0]
  402836:	3204      	adds	r2, #4
  402838:	9204      	str	r2, [sp, #16]
  40283a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40283e:	801a      	strh	r2, [r3, #0]
  402840:	f7ff ba19 	b.w	401c76 <_vfiprintf_r+0x62>
  402844:	9a04      	ldr	r2, [sp, #16]
  402846:	6813      	ldr	r3, [r2, #0]
  402848:	3204      	adds	r2, #4
  40284a:	9204      	str	r2, [sp, #16]
  40284c:	9a02      	ldr	r2, [sp, #8]
  40284e:	601a      	str	r2, [r3, #0]
  402850:	f7ff ba11 	b.w	401c76 <_vfiprintf_r+0x62>
  402854:	aa0d      	add	r2, sp, #52	; 0x34
  402856:	9900      	ldr	r1, [sp, #0]
  402858:	9805      	ldr	r0, [sp, #20]
  40285a:	f7ff f99f 	bl	401b9c <__sprint_r.part.0>
  40285e:	2800      	cmp	r0, #0
  402860:	f47f ae76 	bne.w	402550 <_vfiprintf_r+0x93c>
  402864:	980e      	ldr	r0, [sp, #56]	; 0x38
  402866:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402868:	f100 0e01 	add.w	lr, r0, #1
  40286c:	46da      	mov	sl, fp
  40286e:	e5fa      	b.n	402466 <_vfiprintf_r+0x852>
  402870:	f04f 30ff 	mov.w	r0, #4294967295
  402874:	f7ff bab6 	b.w	401de4 <_vfiprintf_r+0x1d0>
  402878:	4862      	ldr	r0, [pc, #392]	; (402a04 <_vfiprintf_r+0xdf0>)
  40287a:	4616      	mov	r6, r2
  40287c:	ea54 0205 	orrs.w	r2, r4, r5
  402880:	9304      	str	r3, [sp, #16]
  402882:	f04f 0900 	mov.w	r9, #0
  402886:	f47f aedd 	bne.w	402644 <_vfiprintf_r+0xa30>
  40288a:	e6fc      	b.n	402686 <_vfiprintf_r+0xa72>
  40288c:	9b04      	ldr	r3, [sp, #16]
  40288e:	e7f5      	b.n	40287c <_vfiprintf_r+0xc68>
  402890:	9a04      	ldr	r2, [sp, #16]
  402892:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402896:	4613      	mov	r3, r2
  402898:	6814      	ldr	r4, [r2, #0]
  40289a:	9a01      	ldr	r2, [sp, #4]
  40289c:	2a00      	cmp	r2, #0
  40289e:	f103 0304 	add.w	r3, r3, #4
  4028a2:	f04f 0500 	mov.w	r5, #0
  4028a6:	f6ff adc7 	blt.w	402438 <_vfiprintf_r+0x824>
  4028aa:	ea54 0205 	orrs.w	r2, r4, r5
  4028ae:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4028b2:	9304      	str	r3, [sp, #16]
  4028b4:	f47f ac5b 	bne.w	40216e <_vfiprintf_r+0x55a>
  4028b8:	e451      	b.n	40215e <_vfiprintf_r+0x54a>
  4028ba:	aa0d      	add	r2, sp, #52	; 0x34
  4028bc:	9900      	ldr	r1, [sp, #0]
  4028be:	9805      	ldr	r0, [sp, #20]
  4028c0:	f7ff f96c 	bl	401b9c <__sprint_r.part.0>
  4028c4:	2800      	cmp	r0, #0
  4028c6:	f47f ae43 	bne.w	402550 <_vfiprintf_r+0x93c>
  4028ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4028cc:	e668      	b.n	4025a0 <_vfiprintf_r+0x98c>
  4028ce:	4610      	mov	r0, r2
  4028d0:	f04f 0e01 	mov.w	lr, #1
  4028d4:	46da      	mov	sl, fp
  4028d6:	e5e6      	b.n	4024a6 <_vfiprintf_r+0x892>
  4028d8:	9904      	ldr	r1, [sp, #16]
  4028da:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4028de:	460a      	mov	r2, r1
  4028e0:	880c      	ldrh	r4, [r1, #0]
  4028e2:	9901      	ldr	r1, [sp, #4]
  4028e4:	2900      	cmp	r1, #0
  4028e6:	f102 0204 	add.w	r2, r2, #4
  4028ea:	f04f 0500 	mov.w	r5, #0
  4028ee:	db4e      	blt.n	40298e <_vfiprintf_r+0xd7a>
  4028f0:	ea54 0105 	orrs.w	r1, r4, r5
  4028f4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4028f8:	9204      	str	r2, [sp, #16]
  4028fa:	4699      	mov	r9, r3
  4028fc:	f47f abe9 	bne.w	4020d2 <_vfiprintf_r+0x4be>
  402900:	e4d4      	b.n	4022ac <_vfiprintf_r+0x698>
  402902:	9304      	str	r3, [sp, #16]
  402904:	e6f9      	b.n	4026fa <_vfiprintf_r+0xae6>
  402906:	4638      	mov	r0, r7
  402908:	9404      	str	r4, [sp, #16]
  40290a:	f7ff f8d9 	bl	401ac0 <strlen>
  40290e:	2300      	movs	r3, #0
  402910:	9003      	str	r0, [sp, #12]
  402912:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  402916:	9301      	str	r3, [sp, #4]
  402918:	f7ff ba9c 	b.w	401e54 <_vfiprintf_r+0x240>
  40291c:	aa0d      	add	r2, sp, #52	; 0x34
  40291e:	9900      	ldr	r1, [sp, #0]
  402920:	9805      	ldr	r0, [sp, #20]
  402922:	f7ff f93b 	bl	401b9c <__sprint_r.part.0>
  402926:	2800      	cmp	r0, #0
  402928:	f47f ae12 	bne.w	402550 <_vfiprintf_r+0x93c>
  40292c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40292e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402930:	f100 0e01 	add.w	lr, r0, #1
  402934:	46da      	mov	sl, fp
  402936:	e5b6      	b.n	4024a6 <_vfiprintf_r+0x892>
  402938:	980e      	ldr	r0, [sp, #56]	; 0x38
  40293a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40293c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 402a0c <_vfiprintf_r+0xdf8>
  402940:	3001      	adds	r0, #1
  402942:	f7ff bad2 	b.w	401eea <_vfiprintf_r+0x2d6>
  402946:	461e      	mov	r6, r3
  402948:	f04f 0900 	mov.w	r9, #0
  40294c:	e67a      	b.n	402644 <_vfiprintf_r+0xa30>
  40294e:	2b06      	cmp	r3, #6
  402950:	bf28      	it	cs
  402952:	2306      	movcs	r3, #6
  402954:	9303      	str	r3, [sp, #12]
  402956:	9404      	str	r4, [sp, #16]
  402958:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  40295c:	4f2a      	ldr	r7, [pc, #168]	; (402a08 <_vfiprintf_r+0xdf4>)
  40295e:	e50c      	b.n	40237a <_vfiprintf_r+0x766>
  402960:	9204      	str	r2, [sp, #16]
  402962:	e56a      	b.n	40243a <_vfiprintf_r+0x826>
  402964:	980e      	ldr	r0, [sp, #56]	; 0x38
  402966:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 402a0c <_vfiprintf_r+0xdf8>
  40296a:	3001      	adds	r0, #1
  40296c:	f7ff bb73 	b.w	402056 <_vfiprintf_r+0x442>
  402970:	46f4      	mov	ip, lr
  402972:	f7ff bb1a 	b.w	401faa <_vfiprintf_r+0x396>
  402976:	9b01      	ldr	r3, [sp, #4]
  402978:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40297c:	9303      	str	r3, [sp, #12]
  40297e:	9404      	str	r4, [sp, #16]
  402980:	9001      	str	r0, [sp, #4]
  402982:	f7ff ba67 	b.w	401e54 <_vfiprintf_r+0x240>
  402986:	2200      	movs	r2, #0
  402988:	9201      	str	r2, [sp, #4]
  40298a:	f7ff b9ac 	b.w	401ce6 <_vfiprintf_r+0xd2>
  40298e:	9204      	str	r2, [sp, #16]
  402990:	4699      	mov	r9, r3
  402992:	e6b2      	b.n	4026fa <_vfiprintf_r+0xae6>
  402994:	9a04      	ldr	r2, [sp, #16]
  402996:	6813      	ldr	r3, [r2, #0]
  402998:	9301      	str	r3, [sp, #4]
  40299a:	3204      	adds	r2, #4
  40299c:	2b00      	cmp	r3, #0
  40299e:	9204      	str	r2, [sp, #16]
  4029a0:	f898 3001 	ldrb.w	r3, [r8, #1]
  4029a4:	46a8      	mov	r8, r5
  4029a6:	f6bf a99c 	bge.w	401ce2 <_vfiprintf_r+0xce>
  4029aa:	f04f 32ff 	mov.w	r2, #4294967295
  4029ae:	9201      	str	r2, [sp, #4]
  4029b0:	f7ff b997 	b.w	401ce2 <_vfiprintf_r+0xce>
  4029b4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4029b8:	e48e      	b.n	4022d8 <_vfiprintf_r+0x6c4>
  4029ba:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4029be:	e4f0      	b.n	4023a2 <_vfiprintf_r+0x78e>
  4029c0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4029c4:	e4ab      	b.n	40231e <_vfiprintf_r+0x70a>
  4029c6:	4699      	mov	r9, r3
  4029c8:	07f3      	lsls	r3, r6, #31
  4029ca:	d505      	bpl.n	4029d8 <_vfiprintf_r+0xdc4>
  4029cc:	af2a      	add	r7, sp, #168	; 0xa8
  4029ce:	2330      	movs	r3, #48	; 0x30
  4029d0:	f807 3d41 	strb.w	r3, [r7, #-65]!
  4029d4:	f7ff bb97 	b.w	402106 <_vfiprintf_r+0x4f2>
  4029d8:	9b01      	ldr	r3, [sp, #4]
  4029da:	9303      	str	r3, [sp, #12]
  4029dc:	465f      	mov	r7, fp
  4029de:	f7ff ba39 	b.w	401e54 <_vfiprintf_r+0x240>
  4029e2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4029e6:	e443      	b.n	402270 <_vfiprintf_r+0x65c>
  4029e8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4029ec:	f7ff bb9a 	b.w	402124 <_vfiprintf_r+0x510>
  4029f0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4029f4:	f7ff bb4d 	b.w	402092 <_vfiprintf_r+0x47e>
  4029f8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4029fc:	e50f      	b.n	40241e <_vfiprintf_r+0x80a>
  4029fe:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402a02:	e4f3      	b.n	4023ec <_vfiprintf_r+0x7d8>
  402a04:	00404974 	.word	0x00404974
  402a08:	00404988 	.word	0x00404988
  402a0c:	00404990 	.word	0x00404990

00402a10 <__sbprintf>:
  402a10:	b5f0      	push	{r4, r5, r6, r7, lr}
  402a12:	460c      	mov	r4, r1
  402a14:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  402a18:	8989      	ldrh	r1, [r1, #12]
  402a1a:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402a1c:	89e5      	ldrh	r5, [r4, #14]
  402a1e:	9619      	str	r6, [sp, #100]	; 0x64
  402a20:	f021 0102 	bic.w	r1, r1, #2
  402a24:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402a26:	f8ad 500e 	strh.w	r5, [sp, #14]
  402a2a:	2500      	movs	r5, #0
  402a2c:	69e7      	ldr	r7, [r4, #28]
  402a2e:	f8ad 100c 	strh.w	r1, [sp, #12]
  402a32:	9609      	str	r6, [sp, #36]	; 0x24
  402a34:	9506      	str	r5, [sp, #24]
  402a36:	ae1a      	add	r6, sp, #104	; 0x68
  402a38:	f44f 6580 	mov.w	r5, #1024	; 0x400
  402a3c:	4669      	mov	r1, sp
  402a3e:	9600      	str	r6, [sp, #0]
  402a40:	9604      	str	r6, [sp, #16]
  402a42:	9502      	str	r5, [sp, #8]
  402a44:	9505      	str	r5, [sp, #20]
  402a46:	9707      	str	r7, [sp, #28]
  402a48:	4606      	mov	r6, r0
  402a4a:	f7ff f8e3 	bl	401c14 <_vfiprintf_r>
  402a4e:	1e05      	subs	r5, r0, #0
  402a50:	db07      	blt.n	402a62 <__sbprintf+0x52>
  402a52:	4630      	mov	r0, r6
  402a54:	4669      	mov	r1, sp
  402a56:	f000 f929 	bl	402cac <_fflush_r>
  402a5a:	2800      	cmp	r0, #0
  402a5c:	bf18      	it	ne
  402a5e:	f04f 35ff 	movne.w	r5, #4294967295
  402a62:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402a66:	065b      	lsls	r3, r3, #25
  402a68:	d503      	bpl.n	402a72 <__sbprintf+0x62>
  402a6a:	89a3      	ldrh	r3, [r4, #12]
  402a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402a70:	81a3      	strh	r3, [r4, #12]
  402a72:	4628      	mov	r0, r5
  402a74:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  402a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402a7a:	bf00      	nop

00402a7c <__swsetup_r>:
  402a7c:	b538      	push	{r3, r4, r5, lr}
  402a7e:	4b30      	ldr	r3, [pc, #192]	; (402b40 <__swsetup_r+0xc4>)
  402a80:	681b      	ldr	r3, [r3, #0]
  402a82:	4605      	mov	r5, r0
  402a84:	460c      	mov	r4, r1
  402a86:	b113      	cbz	r3, 402a8e <__swsetup_r+0x12>
  402a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402a8a:	2a00      	cmp	r2, #0
  402a8c:	d038      	beq.n	402b00 <__swsetup_r+0x84>
  402a8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402a92:	b293      	uxth	r3, r2
  402a94:	0718      	lsls	r0, r3, #28
  402a96:	d50c      	bpl.n	402ab2 <__swsetup_r+0x36>
  402a98:	6920      	ldr	r0, [r4, #16]
  402a9a:	b1a8      	cbz	r0, 402ac8 <__swsetup_r+0x4c>
  402a9c:	f013 0201 	ands.w	r2, r3, #1
  402aa0:	d01e      	beq.n	402ae0 <__swsetup_r+0x64>
  402aa2:	6963      	ldr	r3, [r4, #20]
  402aa4:	2200      	movs	r2, #0
  402aa6:	425b      	negs	r3, r3
  402aa8:	61a3      	str	r3, [r4, #24]
  402aaa:	60a2      	str	r2, [r4, #8]
  402aac:	b1f0      	cbz	r0, 402aec <__swsetup_r+0x70>
  402aae:	2000      	movs	r0, #0
  402ab0:	bd38      	pop	{r3, r4, r5, pc}
  402ab2:	06d9      	lsls	r1, r3, #27
  402ab4:	d53c      	bpl.n	402b30 <__swsetup_r+0xb4>
  402ab6:	0758      	lsls	r0, r3, #29
  402ab8:	d426      	bmi.n	402b08 <__swsetup_r+0x8c>
  402aba:	6920      	ldr	r0, [r4, #16]
  402abc:	f042 0308 	orr.w	r3, r2, #8
  402ac0:	81a3      	strh	r3, [r4, #12]
  402ac2:	b29b      	uxth	r3, r3
  402ac4:	2800      	cmp	r0, #0
  402ac6:	d1e9      	bne.n	402a9c <__swsetup_r+0x20>
  402ac8:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402acc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402ad0:	d0e4      	beq.n	402a9c <__swsetup_r+0x20>
  402ad2:	4628      	mov	r0, r5
  402ad4:	4621      	mov	r1, r4
  402ad6:	f000 fd15 	bl	403504 <__smakebuf_r>
  402ada:	89a3      	ldrh	r3, [r4, #12]
  402adc:	6920      	ldr	r0, [r4, #16]
  402ade:	e7dd      	b.n	402a9c <__swsetup_r+0x20>
  402ae0:	0799      	lsls	r1, r3, #30
  402ae2:	bf58      	it	pl
  402ae4:	6962      	ldrpl	r2, [r4, #20]
  402ae6:	60a2      	str	r2, [r4, #8]
  402ae8:	2800      	cmp	r0, #0
  402aea:	d1e0      	bne.n	402aae <__swsetup_r+0x32>
  402aec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402af0:	061a      	lsls	r2, r3, #24
  402af2:	d5dd      	bpl.n	402ab0 <__swsetup_r+0x34>
  402af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402af8:	81a3      	strh	r3, [r4, #12]
  402afa:	f04f 30ff 	mov.w	r0, #4294967295
  402afe:	bd38      	pop	{r3, r4, r5, pc}
  402b00:	4618      	mov	r0, r3
  402b02:	f000 f967 	bl	402dd4 <__sinit>
  402b06:	e7c2      	b.n	402a8e <__swsetup_r+0x12>
  402b08:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402b0a:	b151      	cbz	r1, 402b22 <__swsetup_r+0xa6>
  402b0c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402b10:	4299      	cmp	r1, r3
  402b12:	d004      	beq.n	402b1e <__swsetup_r+0xa2>
  402b14:	4628      	mov	r0, r5
  402b16:	f000 fa27 	bl	402f68 <_free_r>
  402b1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402b1e:	2300      	movs	r3, #0
  402b20:	6323      	str	r3, [r4, #48]	; 0x30
  402b22:	2300      	movs	r3, #0
  402b24:	6920      	ldr	r0, [r4, #16]
  402b26:	6063      	str	r3, [r4, #4]
  402b28:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402b2c:	6020      	str	r0, [r4, #0]
  402b2e:	e7c5      	b.n	402abc <__swsetup_r+0x40>
  402b30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402b34:	2309      	movs	r3, #9
  402b36:	602b      	str	r3, [r5, #0]
  402b38:	f04f 30ff 	mov.w	r0, #4294967295
  402b3c:	81a2      	strh	r2, [r4, #12]
  402b3e:	bd38      	pop	{r3, r4, r5, pc}
  402b40:	20400448 	.word	0x20400448

00402b44 <register_fini>:
  402b44:	4b02      	ldr	r3, [pc, #8]	; (402b50 <register_fini+0xc>)
  402b46:	b113      	cbz	r3, 402b4e <register_fini+0xa>
  402b48:	4802      	ldr	r0, [pc, #8]	; (402b54 <register_fini+0x10>)
  402b4a:	f000 b805 	b.w	402b58 <atexit>
  402b4e:	4770      	bx	lr
  402b50:	00000000 	.word	0x00000000
  402b54:	00402de9 	.word	0x00402de9

00402b58 <atexit>:
  402b58:	2300      	movs	r3, #0
  402b5a:	4601      	mov	r1, r0
  402b5c:	461a      	mov	r2, r3
  402b5e:	4618      	mov	r0, r3
  402b60:	f001 bc12 	b.w	404388 <__register_exitproc>

00402b64 <__sflush_r>:
  402b64:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402b68:	b29a      	uxth	r2, r3
  402b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402b6e:	460d      	mov	r5, r1
  402b70:	0711      	lsls	r1, r2, #28
  402b72:	4680      	mov	r8, r0
  402b74:	d43c      	bmi.n	402bf0 <__sflush_r+0x8c>
  402b76:	686a      	ldr	r2, [r5, #4]
  402b78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402b7c:	2a00      	cmp	r2, #0
  402b7e:	81ab      	strh	r3, [r5, #12]
  402b80:	dd73      	ble.n	402c6a <__sflush_r+0x106>
  402b82:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402b84:	2c00      	cmp	r4, #0
  402b86:	d04b      	beq.n	402c20 <__sflush_r+0xbc>
  402b88:	b29b      	uxth	r3, r3
  402b8a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  402b8e:	2100      	movs	r1, #0
  402b90:	b292      	uxth	r2, r2
  402b92:	f8d8 6000 	ldr.w	r6, [r8]
  402b96:	f8c8 1000 	str.w	r1, [r8]
  402b9a:	2a00      	cmp	r2, #0
  402b9c:	d069      	beq.n	402c72 <__sflush_r+0x10e>
  402b9e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402ba0:	075f      	lsls	r7, r3, #29
  402ba2:	d505      	bpl.n	402bb0 <__sflush_r+0x4c>
  402ba4:	6869      	ldr	r1, [r5, #4]
  402ba6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402ba8:	1a52      	subs	r2, r2, r1
  402baa:	b10b      	cbz	r3, 402bb0 <__sflush_r+0x4c>
  402bac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402bae:	1ad2      	subs	r2, r2, r3
  402bb0:	2300      	movs	r3, #0
  402bb2:	69e9      	ldr	r1, [r5, #28]
  402bb4:	4640      	mov	r0, r8
  402bb6:	47a0      	blx	r4
  402bb8:	1c44      	adds	r4, r0, #1
  402bba:	d03c      	beq.n	402c36 <__sflush_r+0xd2>
  402bbc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402bc0:	692a      	ldr	r2, [r5, #16]
  402bc2:	602a      	str	r2, [r5, #0]
  402bc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402bc8:	2200      	movs	r2, #0
  402bca:	81ab      	strh	r3, [r5, #12]
  402bcc:	04db      	lsls	r3, r3, #19
  402bce:	606a      	str	r2, [r5, #4]
  402bd0:	d449      	bmi.n	402c66 <__sflush_r+0x102>
  402bd2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402bd4:	f8c8 6000 	str.w	r6, [r8]
  402bd8:	b311      	cbz	r1, 402c20 <__sflush_r+0xbc>
  402bda:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402bde:	4299      	cmp	r1, r3
  402be0:	d002      	beq.n	402be8 <__sflush_r+0x84>
  402be2:	4640      	mov	r0, r8
  402be4:	f000 f9c0 	bl	402f68 <_free_r>
  402be8:	2000      	movs	r0, #0
  402bea:	6328      	str	r0, [r5, #48]	; 0x30
  402bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402bf0:	692e      	ldr	r6, [r5, #16]
  402bf2:	b1ae      	cbz	r6, 402c20 <__sflush_r+0xbc>
  402bf4:	682c      	ldr	r4, [r5, #0]
  402bf6:	602e      	str	r6, [r5, #0]
  402bf8:	0790      	lsls	r0, r2, #30
  402bfa:	bf0c      	ite	eq
  402bfc:	696b      	ldreq	r3, [r5, #20]
  402bfe:	2300      	movne	r3, #0
  402c00:	1ba4      	subs	r4, r4, r6
  402c02:	60ab      	str	r3, [r5, #8]
  402c04:	e00a      	b.n	402c1c <__sflush_r+0xb8>
  402c06:	4623      	mov	r3, r4
  402c08:	4632      	mov	r2, r6
  402c0a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402c0c:	69e9      	ldr	r1, [r5, #28]
  402c0e:	4640      	mov	r0, r8
  402c10:	47b8      	blx	r7
  402c12:	2800      	cmp	r0, #0
  402c14:	eba4 0400 	sub.w	r4, r4, r0
  402c18:	4406      	add	r6, r0
  402c1a:	dd04      	ble.n	402c26 <__sflush_r+0xc2>
  402c1c:	2c00      	cmp	r4, #0
  402c1e:	dcf2      	bgt.n	402c06 <__sflush_r+0xa2>
  402c20:	2000      	movs	r0, #0
  402c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c26:	89ab      	ldrh	r3, [r5, #12]
  402c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402c2c:	81ab      	strh	r3, [r5, #12]
  402c2e:	f04f 30ff 	mov.w	r0, #4294967295
  402c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c36:	f8d8 2000 	ldr.w	r2, [r8]
  402c3a:	2a1d      	cmp	r2, #29
  402c3c:	d8f3      	bhi.n	402c26 <__sflush_r+0xc2>
  402c3e:	4b1a      	ldr	r3, [pc, #104]	; (402ca8 <__sflush_r+0x144>)
  402c40:	40d3      	lsrs	r3, r2
  402c42:	f003 0301 	and.w	r3, r3, #1
  402c46:	f083 0401 	eor.w	r4, r3, #1
  402c4a:	2b00      	cmp	r3, #0
  402c4c:	d0eb      	beq.n	402c26 <__sflush_r+0xc2>
  402c4e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402c52:	6929      	ldr	r1, [r5, #16]
  402c54:	6029      	str	r1, [r5, #0]
  402c56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402c5a:	04d9      	lsls	r1, r3, #19
  402c5c:	606c      	str	r4, [r5, #4]
  402c5e:	81ab      	strh	r3, [r5, #12]
  402c60:	d5b7      	bpl.n	402bd2 <__sflush_r+0x6e>
  402c62:	2a00      	cmp	r2, #0
  402c64:	d1b5      	bne.n	402bd2 <__sflush_r+0x6e>
  402c66:	6528      	str	r0, [r5, #80]	; 0x50
  402c68:	e7b3      	b.n	402bd2 <__sflush_r+0x6e>
  402c6a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402c6c:	2a00      	cmp	r2, #0
  402c6e:	dc88      	bgt.n	402b82 <__sflush_r+0x1e>
  402c70:	e7d6      	b.n	402c20 <__sflush_r+0xbc>
  402c72:	2301      	movs	r3, #1
  402c74:	69e9      	ldr	r1, [r5, #28]
  402c76:	4640      	mov	r0, r8
  402c78:	47a0      	blx	r4
  402c7a:	1c43      	adds	r3, r0, #1
  402c7c:	4602      	mov	r2, r0
  402c7e:	d002      	beq.n	402c86 <__sflush_r+0x122>
  402c80:	89ab      	ldrh	r3, [r5, #12]
  402c82:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402c84:	e78c      	b.n	402ba0 <__sflush_r+0x3c>
  402c86:	f8d8 3000 	ldr.w	r3, [r8]
  402c8a:	2b00      	cmp	r3, #0
  402c8c:	d0f8      	beq.n	402c80 <__sflush_r+0x11c>
  402c8e:	2b1d      	cmp	r3, #29
  402c90:	d001      	beq.n	402c96 <__sflush_r+0x132>
  402c92:	2b16      	cmp	r3, #22
  402c94:	d102      	bne.n	402c9c <__sflush_r+0x138>
  402c96:	f8c8 6000 	str.w	r6, [r8]
  402c9a:	e7c1      	b.n	402c20 <__sflush_r+0xbc>
  402c9c:	89ab      	ldrh	r3, [r5, #12]
  402c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402ca2:	81ab      	strh	r3, [r5, #12]
  402ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402ca8:	20400001 	.word	0x20400001

00402cac <_fflush_r>:
  402cac:	b510      	push	{r4, lr}
  402cae:	4604      	mov	r4, r0
  402cb0:	b082      	sub	sp, #8
  402cb2:	b108      	cbz	r0, 402cb8 <_fflush_r+0xc>
  402cb4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402cb6:	b153      	cbz	r3, 402cce <_fflush_r+0x22>
  402cb8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  402cbc:	b908      	cbnz	r0, 402cc2 <_fflush_r+0x16>
  402cbe:	b002      	add	sp, #8
  402cc0:	bd10      	pop	{r4, pc}
  402cc2:	4620      	mov	r0, r4
  402cc4:	b002      	add	sp, #8
  402cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402cca:	f7ff bf4b 	b.w	402b64 <__sflush_r>
  402cce:	9101      	str	r1, [sp, #4]
  402cd0:	f000 f880 	bl	402dd4 <__sinit>
  402cd4:	9901      	ldr	r1, [sp, #4]
  402cd6:	e7ef      	b.n	402cb8 <_fflush_r+0xc>

00402cd8 <_cleanup_r>:
  402cd8:	4901      	ldr	r1, [pc, #4]	; (402ce0 <_cleanup_r+0x8>)
  402cda:	f000 bbaf 	b.w	40343c <_fwalk_reent>
  402cde:	bf00      	nop
  402ce0:	00404451 	.word	0x00404451

00402ce4 <__sinit.part.1>:
  402ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ce8:	4b35      	ldr	r3, [pc, #212]	; (402dc0 <__sinit.part.1+0xdc>)
  402cea:	6845      	ldr	r5, [r0, #4]
  402cec:	63c3      	str	r3, [r0, #60]	; 0x3c
  402cee:	2400      	movs	r4, #0
  402cf0:	4607      	mov	r7, r0
  402cf2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  402cf6:	2304      	movs	r3, #4
  402cf8:	2103      	movs	r1, #3
  402cfa:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  402cfe:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  402d02:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  402d06:	b083      	sub	sp, #12
  402d08:	602c      	str	r4, [r5, #0]
  402d0a:	606c      	str	r4, [r5, #4]
  402d0c:	60ac      	str	r4, [r5, #8]
  402d0e:	666c      	str	r4, [r5, #100]	; 0x64
  402d10:	81ec      	strh	r4, [r5, #14]
  402d12:	612c      	str	r4, [r5, #16]
  402d14:	616c      	str	r4, [r5, #20]
  402d16:	61ac      	str	r4, [r5, #24]
  402d18:	81ab      	strh	r3, [r5, #12]
  402d1a:	4621      	mov	r1, r4
  402d1c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402d20:	2208      	movs	r2, #8
  402d22:	f7fe fd85 	bl	401830 <memset>
  402d26:	68be      	ldr	r6, [r7, #8]
  402d28:	f8df b098 	ldr.w	fp, [pc, #152]	; 402dc4 <__sinit.part.1+0xe0>
  402d2c:	f8df a098 	ldr.w	sl, [pc, #152]	; 402dc8 <__sinit.part.1+0xe4>
  402d30:	f8df 9098 	ldr.w	r9, [pc, #152]	; 402dcc <__sinit.part.1+0xe8>
  402d34:	f8df 8098 	ldr.w	r8, [pc, #152]	; 402dd0 <__sinit.part.1+0xec>
  402d38:	f8c5 b020 	str.w	fp, [r5, #32]
  402d3c:	2301      	movs	r3, #1
  402d3e:	2209      	movs	r2, #9
  402d40:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402d44:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402d48:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  402d4c:	61ed      	str	r5, [r5, #28]
  402d4e:	4621      	mov	r1, r4
  402d50:	81f3      	strh	r3, [r6, #14]
  402d52:	81b2      	strh	r2, [r6, #12]
  402d54:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  402d58:	6034      	str	r4, [r6, #0]
  402d5a:	6074      	str	r4, [r6, #4]
  402d5c:	60b4      	str	r4, [r6, #8]
  402d5e:	6674      	str	r4, [r6, #100]	; 0x64
  402d60:	6134      	str	r4, [r6, #16]
  402d62:	6174      	str	r4, [r6, #20]
  402d64:	61b4      	str	r4, [r6, #24]
  402d66:	2208      	movs	r2, #8
  402d68:	9301      	str	r3, [sp, #4]
  402d6a:	f7fe fd61 	bl	401830 <memset>
  402d6e:	68fd      	ldr	r5, [r7, #12]
  402d70:	61f6      	str	r6, [r6, #28]
  402d72:	2012      	movs	r0, #18
  402d74:	2202      	movs	r2, #2
  402d76:	f8c6 b020 	str.w	fp, [r6, #32]
  402d7a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  402d7e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  402d82:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  402d86:	4621      	mov	r1, r4
  402d88:	81a8      	strh	r0, [r5, #12]
  402d8a:	81ea      	strh	r2, [r5, #14]
  402d8c:	602c      	str	r4, [r5, #0]
  402d8e:	606c      	str	r4, [r5, #4]
  402d90:	60ac      	str	r4, [r5, #8]
  402d92:	666c      	str	r4, [r5, #100]	; 0x64
  402d94:	612c      	str	r4, [r5, #16]
  402d96:	616c      	str	r4, [r5, #20]
  402d98:	61ac      	str	r4, [r5, #24]
  402d9a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402d9e:	2208      	movs	r2, #8
  402da0:	f7fe fd46 	bl	401830 <memset>
  402da4:	9b01      	ldr	r3, [sp, #4]
  402da6:	61ed      	str	r5, [r5, #28]
  402da8:	f8c5 b020 	str.w	fp, [r5, #32]
  402dac:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402db0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402db4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  402db8:	63bb      	str	r3, [r7, #56]	; 0x38
  402dba:	b003      	add	sp, #12
  402dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402dc0:	00402cd9 	.word	0x00402cd9
  402dc4:	004041b9 	.word	0x004041b9
  402dc8:	004041dd 	.word	0x004041dd
  402dcc:	00404219 	.word	0x00404219
  402dd0:	00404239 	.word	0x00404239

00402dd4 <__sinit>:
  402dd4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402dd6:	b103      	cbz	r3, 402dda <__sinit+0x6>
  402dd8:	4770      	bx	lr
  402dda:	f7ff bf83 	b.w	402ce4 <__sinit.part.1>
  402dde:	bf00      	nop

00402de0 <__sfp_lock_acquire>:
  402de0:	4770      	bx	lr
  402de2:	bf00      	nop

00402de4 <__sfp_lock_release>:
  402de4:	4770      	bx	lr
  402de6:	bf00      	nop

00402de8 <__libc_fini_array>:
  402de8:	b538      	push	{r3, r4, r5, lr}
  402dea:	4d07      	ldr	r5, [pc, #28]	; (402e08 <__libc_fini_array+0x20>)
  402dec:	4c07      	ldr	r4, [pc, #28]	; (402e0c <__libc_fini_array+0x24>)
  402dee:	1b2c      	subs	r4, r5, r4
  402df0:	10a4      	asrs	r4, r4, #2
  402df2:	d005      	beq.n	402e00 <__libc_fini_array+0x18>
  402df4:	3c01      	subs	r4, #1
  402df6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  402dfa:	4798      	blx	r3
  402dfc:	2c00      	cmp	r4, #0
  402dfe:	d1f9      	bne.n	402df4 <__libc_fini_array+0xc>
  402e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402e04:	f001 bdd6 	b.w	4049b4 <_fini>
  402e08:	004049c4 	.word	0x004049c4
  402e0c:	004049c0 	.word	0x004049c0

00402e10 <__fputwc>:
  402e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402e14:	b082      	sub	sp, #8
  402e16:	4680      	mov	r8, r0
  402e18:	4689      	mov	r9, r1
  402e1a:	4614      	mov	r4, r2
  402e1c:	f000 fb3c 	bl	403498 <__locale_mb_cur_max>
  402e20:	2801      	cmp	r0, #1
  402e22:	d033      	beq.n	402e8c <__fputwc+0x7c>
  402e24:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402e28:	464a      	mov	r2, r9
  402e2a:	a901      	add	r1, sp, #4
  402e2c:	4640      	mov	r0, r8
  402e2e:	f001 fa5d 	bl	4042ec <_wcrtomb_r>
  402e32:	f1b0 3fff 	cmp.w	r0, #4294967295
  402e36:	4682      	mov	sl, r0
  402e38:	d021      	beq.n	402e7e <__fputwc+0x6e>
  402e3a:	b388      	cbz	r0, 402ea0 <__fputwc+0x90>
  402e3c:	f89d 6004 	ldrb.w	r6, [sp, #4]
  402e40:	2500      	movs	r5, #0
  402e42:	e008      	b.n	402e56 <__fputwc+0x46>
  402e44:	6823      	ldr	r3, [r4, #0]
  402e46:	1c5a      	adds	r2, r3, #1
  402e48:	6022      	str	r2, [r4, #0]
  402e4a:	701e      	strb	r6, [r3, #0]
  402e4c:	3501      	adds	r5, #1
  402e4e:	4555      	cmp	r5, sl
  402e50:	d226      	bcs.n	402ea0 <__fputwc+0x90>
  402e52:	ab01      	add	r3, sp, #4
  402e54:	5d5e      	ldrb	r6, [r3, r5]
  402e56:	68a3      	ldr	r3, [r4, #8]
  402e58:	3b01      	subs	r3, #1
  402e5a:	2b00      	cmp	r3, #0
  402e5c:	60a3      	str	r3, [r4, #8]
  402e5e:	daf1      	bge.n	402e44 <__fputwc+0x34>
  402e60:	69a7      	ldr	r7, [r4, #24]
  402e62:	42bb      	cmp	r3, r7
  402e64:	4631      	mov	r1, r6
  402e66:	4622      	mov	r2, r4
  402e68:	4640      	mov	r0, r8
  402e6a:	db01      	blt.n	402e70 <__fputwc+0x60>
  402e6c:	2e0a      	cmp	r6, #10
  402e6e:	d1e9      	bne.n	402e44 <__fputwc+0x34>
  402e70:	f001 f9e6 	bl	404240 <__swbuf_r>
  402e74:	1c43      	adds	r3, r0, #1
  402e76:	d1e9      	bne.n	402e4c <__fputwc+0x3c>
  402e78:	b002      	add	sp, #8
  402e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402e7e:	89a3      	ldrh	r3, [r4, #12]
  402e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402e84:	81a3      	strh	r3, [r4, #12]
  402e86:	b002      	add	sp, #8
  402e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402e8c:	f109 33ff 	add.w	r3, r9, #4294967295
  402e90:	2bfe      	cmp	r3, #254	; 0xfe
  402e92:	d8c7      	bhi.n	402e24 <__fputwc+0x14>
  402e94:	fa5f f689 	uxtb.w	r6, r9
  402e98:	4682      	mov	sl, r0
  402e9a:	f88d 6004 	strb.w	r6, [sp, #4]
  402e9e:	e7cf      	b.n	402e40 <__fputwc+0x30>
  402ea0:	4648      	mov	r0, r9
  402ea2:	b002      	add	sp, #8
  402ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402ea8 <_fputwc_r>:
  402ea8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402eac:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  402eb0:	d10a      	bne.n	402ec8 <_fputwc_r+0x20>
  402eb2:	b410      	push	{r4}
  402eb4:	6e54      	ldr	r4, [r2, #100]	; 0x64
  402eb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402eba:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  402ebe:	6654      	str	r4, [r2, #100]	; 0x64
  402ec0:	8193      	strh	r3, [r2, #12]
  402ec2:	bc10      	pop	{r4}
  402ec4:	f7ff bfa4 	b.w	402e10 <__fputwc>
  402ec8:	f7ff bfa2 	b.w	402e10 <__fputwc>

00402ecc <_malloc_trim_r>:
  402ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402ece:	4f23      	ldr	r7, [pc, #140]	; (402f5c <_malloc_trim_r+0x90>)
  402ed0:	460c      	mov	r4, r1
  402ed2:	4606      	mov	r6, r0
  402ed4:	f000 ff6a 	bl	403dac <__malloc_lock>
  402ed8:	68bb      	ldr	r3, [r7, #8]
  402eda:	685d      	ldr	r5, [r3, #4]
  402edc:	f025 0503 	bic.w	r5, r5, #3
  402ee0:	1b29      	subs	r1, r5, r4
  402ee2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  402ee6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402eea:	f021 010f 	bic.w	r1, r1, #15
  402eee:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402ef2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402ef6:	db07      	blt.n	402f08 <_malloc_trim_r+0x3c>
  402ef8:	2100      	movs	r1, #0
  402efa:	4630      	mov	r0, r6
  402efc:	f001 f94a 	bl	404194 <_sbrk_r>
  402f00:	68bb      	ldr	r3, [r7, #8]
  402f02:	442b      	add	r3, r5
  402f04:	4298      	cmp	r0, r3
  402f06:	d004      	beq.n	402f12 <_malloc_trim_r+0x46>
  402f08:	4630      	mov	r0, r6
  402f0a:	f000 ff51 	bl	403db0 <__malloc_unlock>
  402f0e:	2000      	movs	r0, #0
  402f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402f12:	4261      	negs	r1, r4
  402f14:	4630      	mov	r0, r6
  402f16:	f001 f93d 	bl	404194 <_sbrk_r>
  402f1a:	3001      	adds	r0, #1
  402f1c:	d00d      	beq.n	402f3a <_malloc_trim_r+0x6e>
  402f1e:	4b10      	ldr	r3, [pc, #64]	; (402f60 <_malloc_trim_r+0x94>)
  402f20:	68ba      	ldr	r2, [r7, #8]
  402f22:	6819      	ldr	r1, [r3, #0]
  402f24:	1b2d      	subs	r5, r5, r4
  402f26:	f045 0501 	orr.w	r5, r5, #1
  402f2a:	4630      	mov	r0, r6
  402f2c:	1b09      	subs	r1, r1, r4
  402f2e:	6055      	str	r5, [r2, #4]
  402f30:	6019      	str	r1, [r3, #0]
  402f32:	f000 ff3d 	bl	403db0 <__malloc_unlock>
  402f36:	2001      	movs	r0, #1
  402f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402f3a:	2100      	movs	r1, #0
  402f3c:	4630      	mov	r0, r6
  402f3e:	f001 f929 	bl	404194 <_sbrk_r>
  402f42:	68ba      	ldr	r2, [r7, #8]
  402f44:	1a83      	subs	r3, r0, r2
  402f46:	2b0f      	cmp	r3, #15
  402f48:	ddde      	ble.n	402f08 <_malloc_trim_r+0x3c>
  402f4a:	4c06      	ldr	r4, [pc, #24]	; (402f64 <_malloc_trim_r+0x98>)
  402f4c:	4904      	ldr	r1, [pc, #16]	; (402f60 <_malloc_trim_r+0x94>)
  402f4e:	6824      	ldr	r4, [r4, #0]
  402f50:	f043 0301 	orr.w	r3, r3, #1
  402f54:	1b00      	subs	r0, r0, r4
  402f56:	6053      	str	r3, [r2, #4]
  402f58:	6008      	str	r0, [r1, #0]
  402f5a:	e7d5      	b.n	402f08 <_malloc_trim_r+0x3c>
  402f5c:	20400470 	.word	0x20400470
  402f60:	20400930 	.word	0x20400930
  402f64:	2040087c 	.word	0x2040087c

00402f68 <_free_r>:
  402f68:	2900      	cmp	r1, #0
  402f6a:	d045      	beq.n	402ff8 <_free_r+0x90>
  402f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402f70:	460d      	mov	r5, r1
  402f72:	4680      	mov	r8, r0
  402f74:	f000 ff1a 	bl	403dac <__malloc_lock>
  402f78:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402f7c:	496a      	ldr	r1, [pc, #424]	; (403128 <_free_r+0x1c0>)
  402f7e:	f027 0301 	bic.w	r3, r7, #1
  402f82:	f1a5 0408 	sub.w	r4, r5, #8
  402f86:	18e2      	adds	r2, r4, r3
  402f88:	688e      	ldr	r6, [r1, #8]
  402f8a:	6850      	ldr	r0, [r2, #4]
  402f8c:	42b2      	cmp	r2, r6
  402f8e:	f020 0003 	bic.w	r0, r0, #3
  402f92:	d062      	beq.n	40305a <_free_r+0xf2>
  402f94:	07fe      	lsls	r6, r7, #31
  402f96:	6050      	str	r0, [r2, #4]
  402f98:	d40b      	bmi.n	402fb2 <_free_r+0x4a>
  402f9a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402f9e:	1be4      	subs	r4, r4, r7
  402fa0:	f101 0e08 	add.w	lr, r1, #8
  402fa4:	68a5      	ldr	r5, [r4, #8]
  402fa6:	4575      	cmp	r5, lr
  402fa8:	443b      	add	r3, r7
  402faa:	d06f      	beq.n	40308c <_free_r+0x124>
  402fac:	68e7      	ldr	r7, [r4, #12]
  402fae:	60ef      	str	r7, [r5, #12]
  402fb0:	60bd      	str	r5, [r7, #8]
  402fb2:	1815      	adds	r5, r2, r0
  402fb4:	686d      	ldr	r5, [r5, #4]
  402fb6:	07ed      	lsls	r5, r5, #31
  402fb8:	d542      	bpl.n	403040 <_free_r+0xd8>
  402fba:	f043 0201 	orr.w	r2, r3, #1
  402fbe:	6062      	str	r2, [r4, #4]
  402fc0:	50e3      	str	r3, [r4, r3]
  402fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402fc6:	d218      	bcs.n	402ffa <_free_r+0x92>
  402fc8:	08db      	lsrs	r3, r3, #3
  402fca:	1c5a      	adds	r2, r3, #1
  402fcc:	684d      	ldr	r5, [r1, #4]
  402fce:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  402fd2:	60a7      	str	r7, [r4, #8]
  402fd4:	2001      	movs	r0, #1
  402fd6:	109b      	asrs	r3, r3, #2
  402fd8:	fa00 f303 	lsl.w	r3, r0, r3
  402fdc:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  402fe0:	431d      	orrs	r5, r3
  402fe2:	3808      	subs	r0, #8
  402fe4:	60e0      	str	r0, [r4, #12]
  402fe6:	604d      	str	r5, [r1, #4]
  402fe8:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  402fec:	60fc      	str	r4, [r7, #12]
  402fee:	4640      	mov	r0, r8
  402ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402ff4:	f000 bedc 	b.w	403db0 <__malloc_unlock>
  402ff8:	4770      	bx	lr
  402ffa:	0a5a      	lsrs	r2, r3, #9
  402ffc:	2a04      	cmp	r2, #4
  402ffe:	d853      	bhi.n	4030a8 <_free_r+0x140>
  403000:	099a      	lsrs	r2, r3, #6
  403002:	f102 0739 	add.w	r7, r2, #57	; 0x39
  403006:	007f      	lsls	r7, r7, #1
  403008:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40300c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  403010:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  403014:	4944      	ldr	r1, [pc, #272]	; (403128 <_free_r+0x1c0>)
  403016:	3808      	subs	r0, #8
  403018:	4290      	cmp	r0, r2
  40301a:	d04d      	beq.n	4030b8 <_free_r+0x150>
  40301c:	6851      	ldr	r1, [r2, #4]
  40301e:	f021 0103 	bic.w	r1, r1, #3
  403022:	428b      	cmp	r3, r1
  403024:	d202      	bcs.n	40302c <_free_r+0xc4>
  403026:	6892      	ldr	r2, [r2, #8]
  403028:	4290      	cmp	r0, r2
  40302a:	d1f7      	bne.n	40301c <_free_r+0xb4>
  40302c:	68d0      	ldr	r0, [r2, #12]
  40302e:	60e0      	str	r0, [r4, #12]
  403030:	60a2      	str	r2, [r4, #8]
  403032:	6084      	str	r4, [r0, #8]
  403034:	60d4      	str	r4, [r2, #12]
  403036:	4640      	mov	r0, r8
  403038:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40303c:	f000 beb8 	b.w	403db0 <__malloc_unlock>
  403040:	6895      	ldr	r5, [r2, #8]
  403042:	4f3a      	ldr	r7, [pc, #232]	; (40312c <_free_r+0x1c4>)
  403044:	42bd      	cmp	r5, r7
  403046:	4403      	add	r3, r0
  403048:	d03f      	beq.n	4030ca <_free_r+0x162>
  40304a:	68d0      	ldr	r0, [r2, #12]
  40304c:	60e8      	str	r0, [r5, #12]
  40304e:	f043 0201 	orr.w	r2, r3, #1
  403052:	6085      	str	r5, [r0, #8]
  403054:	6062      	str	r2, [r4, #4]
  403056:	50e3      	str	r3, [r4, r3]
  403058:	e7b3      	b.n	402fc2 <_free_r+0x5a>
  40305a:	07ff      	lsls	r7, r7, #31
  40305c:	4403      	add	r3, r0
  40305e:	d407      	bmi.n	403070 <_free_r+0x108>
  403060:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403064:	1aa4      	subs	r4, r4, r2
  403066:	4413      	add	r3, r2
  403068:	68a0      	ldr	r0, [r4, #8]
  40306a:	68e2      	ldr	r2, [r4, #12]
  40306c:	60c2      	str	r2, [r0, #12]
  40306e:	6090      	str	r0, [r2, #8]
  403070:	4a2f      	ldr	r2, [pc, #188]	; (403130 <_free_r+0x1c8>)
  403072:	6812      	ldr	r2, [r2, #0]
  403074:	f043 0001 	orr.w	r0, r3, #1
  403078:	4293      	cmp	r3, r2
  40307a:	6060      	str	r0, [r4, #4]
  40307c:	608c      	str	r4, [r1, #8]
  40307e:	d3b6      	bcc.n	402fee <_free_r+0x86>
  403080:	4b2c      	ldr	r3, [pc, #176]	; (403134 <_free_r+0x1cc>)
  403082:	4640      	mov	r0, r8
  403084:	6819      	ldr	r1, [r3, #0]
  403086:	f7ff ff21 	bl	402ecc <_malloc_trim_r>
  40308a:	e7b0      	b.n	402fee <_free_r+0x86>
  40308c:	1811      	adds	r1, r2, r0
  40308e:	6849      	ldr	r1, [r1, #4]
  403090:	07c9      	lsls	r1, r1, #31
  403092:	d444      	bmi.n	40311e <_free_r+0x1b6>
  403094:	6891      	ldr	r1, [r2, #8]
  403096:	68d2      	ldr	r2, [r2, #12]
  403098:	60ca      	str	r2, [r1, #12]
  40309a:	4403      	add	r3, r0
  40309c:	f043 0001 	orr.w	r0, r3, #1
  4030a0:	6091      	str	r1, [r2, #8]
  4030a2:	6060      	str	r0, [r4, #4]
  4030a4:	50e3      	str	r3, [r4, r3]
  4030a6:	e7a2      	b.n	402fee <_free_r+0x86>
  4030a8:	2a14      	cmp	r2, #20
  4030aa:	d817      	bhi.n	4030dc <_free_r+0x174>
  4030ac:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4030b0:	007f      	lsls	r7, r7, #1
  4030b2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4030b6:	e7a9      	b.n	40300c <_free_r+0xa4>
  4030b8:	10aa      	asrs	r2, r5, #2
  4030ba:	684b      	ldr	r3, [r1, #4]
  4030bc:	2501      	movs	r5, #1
  4030be:	fa05 f202 	lsl.w	r2, r5, r2
  4030c2:	4313      	orrs	r3, r2
  4030c4:	604b      	str	r3, [r1, #4]
  4030c6:	4602      	mov	r2, r0
  4030c8:	e7b1      	b.n	40302e <_free_r+0xc6>
  4030ca:	f043 0201 	orr.w	r2, r3, #1
  4030ce:	614c      	str	r4, [r1, #20]
  4030d0:	610c      	str	r4, [r1, #16]
  4030d2:	60e5      	str	r5, [r4, #12]
  4030d4:	60a5      	str	r5, [r4, #8]
  4030d6:	6062      	str	r2, [r4, #4]
  4030d8:	50e3      	str	r3, [r4, r3]
  4030da:	e788      	b.n	402fee <_free_r+0x86>
  4030dc:	2a54      	cmp	r2, #84	; 0x54
  4030de:	d806      	bhi.n	4030ee <_free_r+0x186>
  4030e0:	0b1a      	lsrs	r2, r3, #12
  4030e2:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4030e6:	007f      	lsls	r7, r7, #1
  4030e8:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4030ec:	e78e      	b.n	40300c <_free_r+0xa4>
  4030ee:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4030f2:	d806      	bhi.n	403102 <_free_r+0x19a>
  4030f4:	0bda      	lsrs	r2, r3, #15
  4030f6:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4030fa:	007f      	lsls	r7, r7, #1
  4030fc:	f102 0577 	add.w	r5, r2, #119	; 0x77
  403100:	e784      	b.n	40300c <_free_r+0xa4>
  403102:	f240 5054 	movw	r0, #1364	; 0x554
  403106:	4282      	cmp	r2, r0
  403108:	d806      	bhi.n	403118 <_free_r+0x1b0>
  40310a:	0c9a      	lsrs	r2, r3, #18
  40310c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  403110:	007f      	lsls	r7, r7, #1
  403112:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  403116:	e779      	b.n	40300c <_free_r+0xa4>
  403118:	27fe      	movs	r7, #254	; 0xfe
  40311a:	257e      	movs	r5, #126	; 0x7e
  40311c:	e776      	b.n	40300c <_free_r+0xa4>
  40311e:	f043 0201 	orr.w	r2, r3, #1
  403122:	6062      	str	r2, [r4, #4]
  403124:	50e3      	str	r3, [r4, r3]
  403126:	e762      	b.n	402fee <_free_r+0x86>
  403128:	20400470 	.word	0x20400470
  40312c:	20400478 	.word	0x20400478
  403130:	20400878 	.word	0x20400878
  403134:	2040092c 	.word	0x2040092c

00403138 <__sfvwrite_r>:
  403138:	6893      	ldr	r3, [r2, #8]
  40313a:	2b00      	cmp	r3, #0
  40313c:	d076      	beq.n	40322c <__sfvwrite_r+0xf4>
  40313e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403142:	898b      	ldrh	r3, [r1, #12]
  403144:	b085      	sub	sp, #20
  403146:	460c      	mov	r4, r1
  403148:	0719      	lsls	r1, r3, #28
  40314a:	9001      	str	r0, [sp, #4]
  40314c:	4616      	mov	r6, r2
  40314e:	d529      	bpl.n	4031a4 <__sfvwrite_r+0x6c>
  403150:	6922      	ldr	r2, [r4, #16]
  403152:	b33a      	cbz	r2, 4031a4 <__sfvwrite_r+0x6c>
  403154:	f003 0802 	and.w	r8, r3, #2
  403158:	fa1f f088 	uxth.w	r0, r8
  40315c:	6835      	ldr	r5, [r6, #0]
  40315e:	2800      	cmp	r0, #0
  403160:	d02f      	beq.n	4031c2 <__sfvwrite_r+0x8a>
  403162:	f04f 0900 	mov.w	r9, #0
  403166:	4fb4      	ldr	r7, [pc, #720]	; (403438 <__sfvwrite_r+0x300>)
  403168:	46c8      	mov	r8, r9
  40316a:	46b2      	mov	sl, r6
  40316c:	45b8      	cmp	r8, r7
  40316e:	4643      	mov	r3, r8
  403170:	464a      	mov	r2, r9
  403172:	bf28      	it	cs
  403174:	463b      	movcs	r3, r7
  403176:	9801      	ldr	r0, [sp, #4]
  403178:	f1b8 0f00 	cmp.w	r8, #0
  40317c:	d050      	beq.n	403220 <__sfvwrite_r+0xe8>
  40317e:	69e1      	ldr	r1, [r4, #28]
  403180:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403182:	47b0      	blx	r6
  403184:	2800      	cmp	r0, #0
  403186:	dd71      	ble.n	40326c <__sfvwrite_r+0x134>
  403188:	f8da 3008 	ldr.w	r3, [sl, #8]
  40318c:	1a1b      	subs	r3, r3, r0
  40318e:	4481      	add	r9, r0
  403190:	ebc0 0808 	rsb	r8, r0, r8
  403194:	f8ca 3008 	str.w	r3, [sl, #8]
  403198:	2b00      	cmp	r3, #0
  40319a:	d1e7      	bne.n	40316c <__sfvwrite_r+0x34>
  40319c:	2000      	movs	r0, #0
  40319e:	b005      	add	sp, #20
  4031a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031a4:	4621      	mov	r1, r4
  4031a6:	9801      	ldr	r0, [sp, #4]
  4031a8:	f7ff fc68 	bl	402a7c <__swsetup_r>
  4031ac:	2800      	cmp	r0, #0
  4031ae:	f040 813a 	bne.w	403426 <__sfvwrite_r+0x2ee>
  4031b2:	89a3      	ldrh	r3, [r4, #12]
  4031b4:	6835      	ldr	r5, [r6, #0]
  4031b6:	f003 0802 	and.w	r8, r3, #2
  4031ba:	fa1f f088 	uxth.w	r0, r8
  4031be:	2800      	cmp	r0, #0
  4031c0:	d1cf      	bne.n	403162 <__sfvwrite_r+0x2a>
  4031c2:	f013 0901 	ands.w	r9, r3, #1
  4031c6:	d15b      	bne.n	403280 <__sfvwrite_r+0x148>
  4031c8:	464f      	mov	r7, r9
  4031ca:	9602      	str	r6, [sp, #8]
  4031cc:	b31f      	cbz	r7, 403216 <__sfvwrite_r+0xde>
  4031ce:	059a      	lsls	r2, r3, #22
  4031d0:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4031d4:	d52c      	bpl.n	403230 <__sfvwrite_r+0xf8>
  4031d6:	4547      	cmp	r7, r8
  4031d8:	46c2      	mov	sl, r8
  4031da:	f0c0 80a4 	bcc.w	403326 <__sfvwrite_r+0x1ee>
  4031de:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4031e2:	f040 80b1 	bne.w	403348 <__sfvwrite_r+0x210>
  4031e6:	6820      	ldr	r0, [r4, #0]
  4031e8:	4652      	mov	r2, sl
  4031ea:	4649      	mov	r1, r9
  4031ec:	f000 fd7a 	bl	403ce4 <memmove>
  4031f0:	68a0      	ldr	r0, [r4, #8]
  4031f2:	6823      	ldr	r3, [r4, #0]
  4031f4:	ebc8 0000 	rsb	r0, r8, r0
  4031f8:	4453      	add	r3, sl
  4031fa:	60a0      	str	r0, [r4, #8]
  4031fc:	6023      	str	r3, [r4, #0]
  4031fe:	4638      	mov	r0, r7
  403200:	9a02      	ldr	r2, [sp, #8]
  403202:	6893      	ldr	r3, [r2, #8]
  403204:	1a1b      	subs	r3, r3, r0
  403206:	4481      	add	r9, r0
  403208:	1a3f      	subs	r7, r7, r0
  40320a:	6093      	str	r3, [r2, #8]
  40320c:	2b00      	cmp	r3, #0
  40320e:	d0c5      	beq.n	40319c <__sfvwrite_r+0x64>
  403210:	89a3      	ldrh	r3, [r4, #12]
  403212:	2f00      	cmp	r7, #0
  403214:	d1db      	bne.n	4031ce <__sfvwrite_r+0x96>
  403216:	f8d5 9000 	ldr.w	r9, [r5]
  40321a:	686f      	ldr	r7, [r5, #4]
  40321c:	3508      	adds	r5, #8
  40321e:	e7d5      	b.n	4031cc <__sfvwrite_r+0x94>
  403220:	f8d5 9000 	ldr.w	r9, [r5]
  403224:	f8d5 8004 	ldr.w	r8, [r5, #4]
  403228:	3508      	adds	r5, #8
  40322a:	e79f      	b.n	40316c <__sfvwrite_r+0x34>
  40322c:	2000      	movs	r0, #0
  40322e:	4770      	bx	lr
  403230:	6820      	ldr	r0, [r4, #0]
  403232:	6923      	ldr	r3, [r4, #16]
  403234:	4298      	cmp	r0, r3
  403236:	d803      	bhi.n	403240 <__sfvwrite_r+0x108>
  403238:	6961      	ldr	r1, [r4, #20]
  40323a:	428f      	cmp	r7, r1
  40323c:	f080 80b7 	bcs.w	4033ae <__sfvwrite_r+0x276>
  403240:	45b8      	cmp	r8, r7
  403242:	bf28      	it	cs
  403244:	46b8      	movcs	r8, r7
  403246:	4642      	mov	r2, r8
  403248:	4649      	mov	r1, r9
  40324a:	f000 fd4b 	bl	403ce4 <memmove>
  40324e:	68a3      	ldr	r3, [r4, #8]
  403250:	6822      	ldr	r2, [r4, #0]
  403252:	ebc8 0303 	rsb	r3, r8, r3
  403256:	4442      	add	r2, r8
  403258:	60a3      	str	r3, [r4, #8]
  40325a:	6022      	str	r2, [r4, #0]
  40325c:	2b00      	cmp	r3, #0
  40325e:	d149      	bne.n	4032f4 <__sfvwrite_r+0x1bc>
  403260:	4621      	mov	r1, r4
  403262:	9801      	ldr	r0, [sp, #4]
  403264:	f7ff fd22 	bl	402cac <_fflush_r>
  403268:	2800      	cmp	r0, #0
  40326a:	d043      	beq.n	4032f4 <__sfvwrite_r+0x1bc>
  40326c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403274:	f04f 30ff 	mov.w	r0, #4294967295
  403278:	81a3      	strh	r3, [r4, #12]
  40327a:	b005      	add	sp, #20
  40327c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403280:	4680      	mov	r8, r0
  403282:	9002      	str	r0, [sp, #8]
  403284:	4682      	mov	sl, r0
  403286:	4681      	mov	r9, r0
  403288:	f1b9 0f00 	cmp.w	r9, #0
  40328c:	d02a      	beq.n	4032e4 <__sfvwrite_r+0x1ac>
  40328e:	9b02      	ldr	r3, [sp, #8]
  403290:	2b00      	cmp	r3, #0
  403292:	d04c      	beq.n	40332e <__sfvwrite_r+0x1f6>
  403294:	6820      	ldr	r0, [r4, #0]
  403296:	6923      	ldr	r3, [r4, #16]
  403298:	6962      	ldr	r2, [r4, #20]
  40329a:	45c8      	cmp	r8, r9
  40329c:	46c3      	mov	fp, r8
  40329e:	bf28      	it	cs
  4032a0:	46cb      	movcs	fp, r9
  4032a2:	4298      	cmp	r0, r3
  4032a4:	465f      	mov	r7, fp
  4032a6:	d904      	bls.n	4032b2 <__sfvwrite_r+0x17a>
  4032a8:	68a3      	ldr	r3, [r4, #8]
  4032aa:	4413      	add	r3, r2
  4032ac:	459b      	cmp	fp, r3
  4032ae:	f300 8090 	bgt.w	4033d2 <__sfvwrite_r+0x29a>
  4032b2:	4593      	cmp	fp, r2
  4032b4:	db20      	blt.n	4032f8 <__sfvwrite_r+0x1c0>
  4032b6:	4613      	mov	r3, r2
  4032b8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4032ba:	69e1      	ldr	r1, [r4, #28]
  4032bc:	9801      	ldr	r0, [sp, #4]
  4032be:	4652      	mov	r2, sl
  4032c0:	47b8      	blx	r7
  4032c2:	1e07      	subs	r7, r0, #0
  4032c4:	ddd2      	ble.n	40326c <__sfvwrite_r+0x134>
  4032c6:	ebb8 0807 	subs.w	r8, r8, r7
  4032ca:	d023      	beq.n	403314 <__sfvwrite_r+0x1dc>
  4032cc:	68b3      	ldr	r3, [r6, #8]
  4032ce:	1bdb      	subs	r3, r3, r7
  4032d0:	44ba      	add	sl, r7
  4032d2:	ebc7 0909 	rsb	r9, r7, r9
  4032d6:	60b3      	str	r3, [r6, #8]
  4032d8:	2b00      	cmp	r3, #0
  4032da:	f43f af5f 	beq.w	40319c <__sfvwrite_r+0x64>
  4032de:	f1b9 0f00 	cmp.w	r9, #0
  4032e2:	d1d4      	bne.n	40328e <__sfvwrite_r+0x156>
  4032e4:	2300      	movs	r3, #0
  4032e6:	f8d5 a000 	ldr.w	sl, [r5]
  4032ea:	f8d5 9004 	ldr.w	r9, [r5, #4]
  4032ee:	9302      	str	r3, [sp, #8]
  4032f0:	3508      	adds	r5, #8
  4032f2:	e7c9      	b.n	403288 <__sfvwrite_r+0x150>
  4032f4:	4640      	mov	r0, r8
  4032f6:	e783      	b.n	403200 <__sfvwrite_r+0xc8>
  4032f8:	465a      	mov	r2, fp
  4032fa:	4651      	mov	r1, sl
  4032fc:	f000 fcf2 	bl	403ce4 <memmove>
  403300:	68a2      	ldr	r2, [r4, #8]
  403302:	6823      	ldr	r3, [r4, #0]
  403304:	ebcb 0202 	rsb	r2, fp, r2
  403308:	445b      	add	r3, fp
  40330a:	ebb8 0807 	subs.w	r8, r8, r7
  40330e:	60a2      	str	r2, [r4, #8]
  403310:	6023      	str	r3, [r4, #0]
  403312:	d1db      	bne.n	4032cc <__sfvwrite_r+0x194>
  403314:	4621      	mov	r1, r4
  403316:	9801      	ldr	r0, [sp, #4]
  403318:	f7ff fcc8 	bl	402cac <_fflush_r>
  40331c:	2800      	cmp	r0, #0
  40331e:	d1a5      	bne.n	40326c <__sfvwrite_r+0x134>
  403320:	f8cd 8008 	str.w	r8, [sp, #8]
  403324:	e7d2      	b.n	4032cc <__sfvwrite_r+0x194>
  403326:	6820      	ldr	r0, [r4, #0]
  403328:	46b8      	mov	r8, r7
  40332a:	46ba      	mov	sl, r7
  40332c:	e75c      	b.n	4031e8 <__sfvwrite_r+0xb0>
  40332e:	464a      	mov	r2, r9
  403330:	210a      	movs	r1, #10
  403332:	4650      	mov	r0, sl
  403334:	f000 fbec 	bl	403b10 <memchr>
  403338:	2800      	cmp	r0, #0
  40333a:	d06f      	beq.n	40341c <__sfvwrite_r+0x2e4>
  40333c:	3001      	adds	r0, #1
  40333e:	2301      	movs	r3, #1
  403340:	ebca 0800 	rsb	r8, sl, r0
  403344:	9302      	str	r3, [sp, #8]
  403346:	e7a5      	b.n	403294 <__sfvwrite_r+0x15c>
  403348:	6962      	ldr	r2, [r4, #20]
  40334a:	6820      	ldr	r0, [r4, #0]
  40334c:	6921      	ldr	r1, [r4, #16]
  40334e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  403352:	ebc1 0a00 	rsb	sl, r1, r0
  403356:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40335a:	f10a 0001 	add.w	r0, sl, #1
  40335e:	ea4f 0868 	mov.w	r8, r8, asr #1
  403362:	4438      	add	r0, r7
  403364:	4540      	cmp	r0, r8
  403366:	4642      	mov	r2, r8
  403368:	bf84      	itt	hi
  40336a:	4680      	movhi	r8, r0
  40336c:	4642      	movhi	r2, r8
  40336e:	055b      	lsls	r3, r3, #21
  403370:	d542      	bpl.n	4033f8 <__sfvwrite_r+0x2c0>
  403372:	4611      	mov	r1, r2
  403374:	9801      	ldr	r0, [sp, #4]
  403376:	f000 f911 	bl	40359c <_malloc_r>
  40337a:	4683      	mov	fp, r0
  40337c:	2800      	cmp	r0, #0
  40337e:	d055      	beq.n	40342c <__sfvwrite_r+0x2f4>
  403380:	4652      	mov	r2, sl
  403382:	6921      	ldr	r1, [r4, #16]
  403384:	f000 fc14 	bl	403bb0 <memcpy>
  403388:	89a3      	ldrh	r3, [r4, #12]
  40338a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40338e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403392:	81a3      	strh	r3, [r4, #12]
  403394:	ebca 0308 	rsb	r3, sl, r8
  403398:	eb0b 000a 	add.w	r0, fp, sl
  40339c:	f8c4 8014 	str.w	r8, [r4, #20]
  4033a0:	f8c4 b010 	str.w	fp, [r4, #16]
  4033a4:	6020      	str	r0, [r4, #0]
  4033a6:	60a3      	str	r3, [r4, #8]
  4033a8:	46b8      	mov	r8, r7
  4033aa:	46ba      	mov	sl, r7
  4033ac:	e71c      	b.n	4031e8 <__sfvwrite_r+0xb0>
  4033ae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4033b2:	42bb      	cmp	r3, r7
  4033b4:	bf28      	it	cs
  4033b6:	463b      	movcs	r3, r7
  4033b8:	464a      	mov	r2, r9
  4033ba:	fb93 f3f1 	sdiv	r3, r3, r1
  4033be:	9801      	ldr	r0, [sp, #4]
  4033c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4033c2:	fb01 f303 	mul.w	r3, r1, r3
  4033c6:	69e1      	ldr	r1, [r4, #28]
  4033c8:	47b0      	blx	r6
  4033ca:	2800      	cmp	r0, #0
  4033cc:	f73f af18 	bgt.w	403200 <__sfvwrite_r+0xc8>
  4033d0:	e74c      	b.n	40326c <__sfvwrite_r+0x134>
  4033d2:	461a      	mov	r2, r3
  4033d4:	4651      	mov	r1, sl
  4033d6:	9303      	str	r3, [sp, #12]
  4033d8:	f000 fc84 	bl	403ce4 <memmove>
  4033dc:	6822      	ldr	r2, [r4, #0]
  4033de:	9b03      	ldr	r3, [sp, #12]
  4033e0:	9801      	ldr	r0, [sp, #4]
  4033e2:	441a      	add	r2, r3
  4033e4:	6022      	str	r2, [r4, #0]
  4033e6:	4621      	mov	r1, r4
  4033e8:	f7ff fc60 	bl	402cac <_fflush_r>
  4033ec:	9b03      	ldr	r3, [sp, #12]
  4033ee:	2800      	cmp	r0, #0
  4033f0:	f47f af3c 	bne.w	40326c <__sfvwrite_r+0x134>
  4033f4:	461f      	mov	r7, r3
  4033f6:	e766      	b.n	4032c6 <__sfvwrite_r+0x18e>
  4033f8:	9801      	ldr	r0, [sp, #4]
  4033fa:	f000 fcdb 	bl	403db4 <_realloc_r>
  4033fe:	4683      	mov	fp, r0
  403400:	2800      	cmp	r0, #0
  403402:	d1c7      	bne.n	403394 <__sfvwrite_r+0x25c>
  403404:	9d01      	ldr	r5, [sp, #4]
  403406:	6921      	ldr	r1, [r4, #16]
  403408:	4628      	mov	r0, r5
  40340a:	f7ff fdad 	bl	402f68 <_free_r>
  40340e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403412:	220c      	movs	r2, #12
  403414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403418:	602a      	str	r2, [r5, #0]
  40341a:	e729      	b.n	403270 <__sfvwrite_r+0x138>
  40341c:	2301      	movs	r3, #1
  40341e:	f109 0801 	add.w	r8, r9, #1
  403422:	9302      	str	r3, [sp, #8]
  403424:	e736      	b.n	403294 <__sfvwrite_r+0x15c>
  403426:	f04f 30ff 	mov.w	r0, #4294967295
  40342a:	e6b8      	b.n	40319e <__sfvwrite_r+0x66>
  40342c:	9a01      	ldr	r2, [sp, #4]
  40342e:	230c      	movs	r3, #12
  403430:	6013      	str	r3, [r2, #0]
  403432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403436:	e71b      	b.n	403270 <__sfvwrite_r+0x138>
  403438:	7ffffc00 	.word	0x7ffffc00

0040343c <_fwalk_reent>:
  40343c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403440:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403444:	d01f      	beq.n	403486 <_fwalk_reent+0x4a>
  403446:	4688      	mov	r8, r1
  403448:	4606      	mov	r6, r0
  40344a:	f04f 0900 	mov.w	r9, #0
  40344e:	687d      	ldr	r5, [r7, #4]
  403450:	68bc      	ldr	r4, [r7, #8]
  403452:	3d01      	subs	r5, #1
  403454:	d411      	bmi.n	40347a <_fwalk_reent+0x3e>
  403456:	89a3      	ldrh	r3, [r4, #12]
  403458:	2b01      	cmp	r3, #1
  40345a:	f105 35ff 	add.w	r5, r5, #4294967295
  40345e:	d908      	bls.n	403472 <_fwalk_reent+0x36>
  403460:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403464:	3301      	adds	r3, #1
  403466:	4621      	mov	r1, r4
  403468:	4630      	mov	r0, r6
  40346a:	d002      	beq.n	403472 <_fwalk_reent+0x36>
  40346c:	47c0      	blx	r8
  40346e:	ea49 0900 	orr.w	r9, r9, r0
  403472:	1c6b      	adds	r3, r5, #1
  403474:	f104 0468 	add.w	r4, r4, #104	; 0x68
  403478:	d1ed      	bne.n	403456 <_fwalk_reent+0x1a>
  40347a:	683f      	ldr	r7, [r7, #0]
  40347c:	2f00      	cmp	r7, #0
  40347e:	d1e6      	bne.n	40344e <_fwalk_reent+0x12>
  403480:	4648      	mov	r0, r9
  403482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403486:	46b9      	mov	r9, r7
  403488:	4648      	mov	r0, r9
  40348a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40348e:	bf00      	nop

00403490 <__locale_charset>:
  403490:	4800      	ldr	r0, [pc, #0]	; (403494 <__locale_charset+0x4>)
  403492:	4770      	bx	lr
  403494:	2040044c 	.word	0x2040044c

00403498 <__locale_mb_cur_max>:
  403498:	4b01      	ldr	r3, [pc, #4]	; (4034a0 <__locale_mb_cur_max+0x8>)
  40349a:	6818      	ldr	r0, [r3, #0]
  40349c:	4770      	bx	lr
  40349e:	bf00      	nop
  4034a0:	2040046c 	.word	0x2040046c

004034a4 <__swhatbuf_r>:
  4034a4:	b570      	push	{r4, r5, r6, lr}
  4034a6:	460d      	mov	r5, r1
  4034a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4034ac:	2900      	cmp	r1, #0
  4034ae:	b090      	sub	sp, #64	; 0x40
  4034b0:	4614      	mov	r4, r2
  4034b2:	461e      	mov	r6, r3
  4034b4:	db14      	blt.n	4034e0 <__swhatbuf_r+0x3c>
  4034b6:	aa01      	add	r2, sp, #4
  4034b8:	f001 f80c 	bl	4044d4 <_fstat_r>
  4034bc:	2800      	cmp	r0, #0
  4034be:	db0f      	blt.n	4034e0 <__swhatbuf_r+0x3c>
  4034c0:	9a02      	ldr	r2, [sp, #8]
  4034c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4034c6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4034ca:	fab2 f282 	clz	r2, r2
  4034ce:	0952      	lsrs	r2, r2, #5
  4034d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4034d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4034d8:	6032      	str	r2, [r6, #0]
  4034da:	6023      	str	r3, [r4, #0]
  4034dc:	b010      	add	sp, #64	; 0x40
  4034de:	bd70      	pop	{r4, r5, r6, pc}
  4034e0:	89a8      	ldrh	r0, [r5, #12]
  4034e2:	f000 0080 	and.w	r0, r0, #128	; 0x80
  4034e6:	b282      	uxth	r2, r0
  4034e8:	2000      	movs	r0, #0
  4034ea:	6030      	str	r0, [r6, #0]
  4034ec:	b11a      	cbz	r2, 4034f6 <__swhatbuf_r+0x52>
  4034ee:	2340      	movs	r3, #64	; 0x40
  4034f0:	6023      	str	r3, [r4, #0]
  4034f2:	b010      	add	sp, #64	; 0x40
  4034f4:	bd70      	pop	{r4, r5, r6, pc}
  4034f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4034fa:	4610      	mov	r0, r2
  4034fc:	6023      	str	r3, [r4, #0]
  4034fe:	b010      	add	sp, #64	; 0x40
  403500:	bd70      	pop	{r4, r5, r6, pc}
  403502:	bf00      	nop

00403504 <__smakebuf_r>:
  403504:	898a      	ldrh	r2, [r1, #12]
  403506:	0792      	lsls	r2, r2, #30
  403508:	460b      	mov	r3, r1
  40350a:	d506      	bpl.n	40351a <__smakebuf_r+0x16>
  40350c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  403510:	2101      	movs	r1, #1
  403512:	601a      	str	r2, [r3, #0]
  403514:	611a      	str	r2, [r3, #16]
  403516:	6159      	str	r1, [r3, #20]
  403518:	4770      	bx	lr
  40351a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40351c:	b083      	sub	sp, #12
  40351e:	ab01      	add	r3, sp, #4
  403520:	466a      	mov	r2, sp
  403522:	460c      	mov	r4, r1
  403524:	4605      	mov	r5, r0
  403526:	f7ff ffbd 	bl	4034a4 <__swhatbuf_r>
  40352a:	9900      	ldr	r1, [sp, #0]
  40352c:	4606      	mov	r6, r0
  40352e:	4628      	mov	r0, r5
  403530:	f000 f834 	bl	40359c <_malloc_r>
  403534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403538:	b1d0      	cbz	r0, 403570 <__smakebuf_r+0x6c>
  40353a:	9a01      	ldr	r2, [sp, #4]
  40353c:	4f12      	ldr	r7, [pc, #72]	; (403588 <__smakebuf_r+0x84>)
  40353e:	9900      	ldr	r1, [sp, #0]
  403540:	63ef      	str	r7, [r5, #60]	; 0x3c
  403542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403546:	81a3      	strh	r3, [r4, #12]
  403548:	6020      	str	r0, [r4, #0]
  40354a:	6120      	str	r0, [r4, #16]
  40354c:	6161      	str	r1, [r4, #20]
  40354e:	b91a      	cbnz	r2, 403558 <__smakebuf_r+0x54>
  403550:	4333      	orrs	r3, r6
  403552:	81a3      	strh	r3, [r4, #12]
  403554:	b003      	add	sp, #12
  403556:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403558:	4628      	mov	r0, r5
  40355a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40355e:	f000 ffcd 	bl	4044fc <_isatty_r>
  403562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403566:	2800      	cmp	r0, #0
  403568:	d0f2      	beq.n	403550 <__smakebuf_r+0x4c>
  40356a:	f043 0301 	orr.w	r3, r3, #1
  40356e:	e7ef      	b.n	403550 <__smakebuf_r+0x4c>
  403570:	059a      	lsls	r2, r3, #22
  403572:	d4ef      	bmi.n	403554 <__smakebuf_r+0x50>
  403574:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403578:	f043 0302 	orr.w	r3, r3, #2
  40357c:	2101      	movs	r1, #1
  40357e:	81a3      	strh	r3, [r4, #12]
  403580:	6022      	str	r2, [r4, #0]
  403582:	6122      	str	r2, [r4, #16]
  403584:	6161      	str	r1, [r4, #20]
  403586:	e7e5      	b.n	403554 <__smakebuf_r+0x50>
  403588:	00402cd9 	.word	0x00402cd9

0040358c <malloc>:
  40358c:	4b02      	ldr	r3, [pc, #8]	; (403598 <malloc+0xc>)
  40358e:	4601      	mov	r1, r0
  403590:	6818      	ldr	r0, [r3, #0]
  403592:	f000 b803 	b.w	40359c <_malloc_r>
  403596:	bf00      	nop
  403598:	20400448 	.word	0x20400448

0040359c <_malloc_r>:
  40359c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4035a0:	f101 050b 	add.w	r5, r1, #11
  4035a4:	2d16      	cmp	r5, #22
  4035a6:	b083      	sub	sp, #12
  4035a8:	4606      	mov	r6, r0
  4035aa:	f240 809f 	bls.w	4036ec <_malloc_r+0x150>
  4035ae:	f035 0507 	bics.w	r5, r5, #7
  4035b2:	f100 80bf 	bmi.w	403734 <_malloc_r+0x198>
  4035b6:	42a9      	cmp	r1, r5
  4035b8:	f200 80bc 	bhi.w	403734 <_malloc_r+0x198>
  4035bc:	f000 fbf6 	bl	403dac <__malloc_lock>
  4035c0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  4035c4:	f0c0 829c 	bcc.w	403b00 <_malloc_r+0x564>
  4035c8:	0a6b      	lsrs	r3, r5, #9
  4035ca:	f000 80ba 	beq.w	403742 <_malloc_r+0x1a6>
  4035ce:	2b04      	cmp	r3, #4
  4035d0:	f200 8183 	bhi.w	4038da <_malloc_r+0x33e>
  4035d4:	09a8      	lsrs	r0, r5, #6
  4035d6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  4035da:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4035de:	3038      	adds	r0, #56	; 0x38
  4035e0:	4fc4      	ldr	r7, [pc, #784]	; (4038f4 <_malloc_r+0x358>)
  4035e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4035e6:	f1a3 0108 	sub.w	r1, r3, #8
  4035ea:	685c      	ldr	r4, [r3, #4]
  4035ec:	42a1      	cmp	r1, r4
  4035ee:	d107      	bne.n	403600 <_malloc_r+0x64>
  4035f0:	e0ac      	b.n	40374c <_malloc_r+0x1b0>
  4035f2:	2a00      	cmp	r2, #0
  4035f4:	f280 80ac 	bge.w	403750 <_malloc_r+0x1b4>
  4035f8:	68e4      	ldr	r4, [r4, #12]
  4035fa:	42a1      	cmp	r1, r4
  4035fc:	f000 80a6 	beq.w	40374c <_malloc_r+0x1b0>
  403600:	6863      	ldr	r3, [r4, #4]
  403602:	f023 0303 	bic.w	r3, r3, #3
  403606:	1b5a      	subs	r2, r3, r5
  403608:	2a0f      	cmp	r2, #15
  40360a:	ddf2      	ble.n	4035f2 <_malloc_r+0x56>
  40360c:	49b9      	ldr	r1, [pc, #740]	; (4038f4 <_malloc_r+0x358>)
  40360e:	693c      	ldr	r4, [r7, #16]
  403610:	f101 0e08 	add.w	lr, r1, #8
  403614:	4574      	cmp	r4, lr
  403616:	f000 81b3 	beq.w	403980 <_malloc_r+0x3e4>
  40361a:	6863      	ldr	r3, [r4, #4]
  40361c:	f023 0303 	bic.w	r3, r3, #3
  403620:	1b5a      	subs	r2, r3, r5
  403622:	2a0f      	cmp	r2, #15
  403624:	f300 8199 	bgt.w	40395a <_malloc_r+0x3be>
  403628:	2a00      	cmp	r2, #0
  40362a:	f8c1 e014 	str.w	lr, [r1, #20]
  40362e:	f8c1 e010 	str.w	lr, [r1, #16]
  403632:	f280 809e 	bge.w	403772 <_malloc_r+0x1d6>
  403636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40363a:	f080 8167 	bcs.w	40390c <_malloc_r+0x370>
  40363e:	08db      	lsrs	r3, r3, #3
  403640:	f103 0c01 	add.w	ip, r3, #1
  403644:	2201      	movs	r2, #1
  403646:	109b      	asrs	r3, r3, #2
  403648:	fa02 f303 	lsl.w	r3, r2, r3
  40364c:	684a      	ldr	r2, [r1, #4]
  40364e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  403652:	f8c4 8008 	str.w	r8, [r4, #8]
  403656:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  40365a:	431a      	orrs	r2, r3
  40365c:	f1a9 0308 	sub.w	r3, r9, #8
  403660:	60e3      	str	r3, [r4, #12]
  403662:	604a      	str	r2, [r1, #4]
  403664:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  403668:	f8c8 400c 	str.w	r4, [r8, #12]
  40366c:	1083      	asrs	r3, r0, #2
  40366e:	2401      	movs	r4, #1
  403670:	409c      	lsls	r4, r3
  403672:	4294      	cmp	r4, r2
  403674:	f200 808a 	bhi.w	40378c <_malloc_r+0x1f0>
  403678:	4214      	tst	r4, r2
  40367a:	d106      	bne.n	40368a <_malloc_r+0xee>
  40367c:	f020 0003 	bic.w	r0, r0, #3
  403680:	0064      	lsls	r4, r4, #1
  403682:	4214      	tst	r4, r2
  403684:	f100 0004 	add.w	r0, r0, #4
  403688:	d0fa      	beq.n	403680 <_malloc_r+0xe4>
  40368a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40368e:	46cc      	mov	ip, r9
  403690:	4680      	mov	r8, r0
  403692:	f8dc 100c 	ldr.w	r1, [ip, #12]
  403696:	458c      	cmp	ip, r1
  403698:	d107      	bne.n	4036aa <_malloc_r+0x10e>
  40369a:	e173      	b.n	403984 <_malloc_r+0x3e8>
  40369c:	2a00      	cmp	r2, #0
  40369e:	f280 8181 	bge.w	4039a4 <_malloc_r+0x408>
  4036a2:	68c9      	ldr	r1, [r1, #12]
  4036a4:	458c      	cmp	ip, r1
  4036a6:	f000 816d 	beq.w	403984 <_malloc_r+0x3e8>
  4036aa:	684b      	ldr	r3, [r1, #4]
  4036ac:	f023 0303 	bic.w	r3, r3, #3
  4036b0:	1b5a      	subs	r2, r3, r5
  4036b2:	2a0f      	cmp	r2, #15
  4036b4:	ddf2      	ble.n	40369c <_malloc_r+0x100>
  4036b6:	460c      	mov	r4, r1
  4036b8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4036bc:	f854 8f08 	ldr.w	r8, [r4, #8]!
  4036c0:	194b      	adds	r3, r1, r5
  4036c2:	f045 0501 	orr.w	r5, r5, #1
  4036c6:	604d      	str	r5, [r1, #4]
  4036c8:	f042 0101 	orr.w	r1, r2, #1
  4036cc:	f8c8 c00c 	str.w	ip, [r8, #12]
  4036d0:	4630      	mov	r0, r6
  4036d2:	f8cc 8008 	str.w	r8, [ip, #8]
  4036d6:	617b      	str	r3, [r7, #20]
  4036d8:	613b      	str	r3, [r7, #16]
  4036da:	f8c3 e00c 	str.w	lr, [r3, #12]
  4036de:	f8c3 e008 	str.w	lr, [r3, #8]
  4036e2:	6059      	str	r1, [r3, #4]
  4036e4:	509a      	str	r2, [r3, r2]
  4036e6:	f000 fb63 	bl	403db0 <__malloc_unlock>
  4036ea:	e01f      	b.n	40372c <_malloc_r+0x190>
  4036ec:	2910      	cmp	r1, #16
  4036ee:	d821      	bhi.n	403734 <_malloc_r+0x198>
  4036f0:	f000 fb5c 	bl	403dac <__malloc_lock>
  4036f4:	2510      	movs	r5, #16
  4036f6:	2306      	movs	r3, #6
  4036f8:	2002      	movs	r0, #2
  4036fa:	4f7e      	ldr	r7, [pc, #504]	; (4038f4 <_malloc_r+0x358>)
  4036fc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  403700:	f1a3 0208 	sub.w	r2, r3, #8
  403704:	685c      	ldr	r4, [r3, #4]
  403706:	4294      	cmp	r4, r2
  403708:	f000 8145 	beq.w	403996 <_malloc_r+0x3fa>
  40370c:	6863      	ldr	r3, [r4, #4]
  40370e:	68e1      	ldr	r1, [r4, #12]
  403710:	68a5      	ldr	r5, [r4, #8]
  403712:	f023 0303 	bic.w	r3, r3, #3
  403716:	4423      	add	r3, r4
  403718:	4630      	mov	r0, r6
  40371a:	685a      	ldr	r2, [r3, #4]
  40371c:	60e9      	str	r1, [r5, #12]
  40371e:	f042 0201 	orr.w	r2, r2, #1
  403722:	608d      	str	r5, [r1, #8]
  403724:	605a      	str	r2, [r3, #4]
  403726:	f000 fb43 	bl	403db0 <__malloc_unlock>
  40372a:	3408      	adds	r4, #8
  40372c:	4620      	mov	r0, r4
  40372e:	b003      	add	sp, #12
  403730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403734:	2400      	movs	r4, #0
  403736:	230c      	movs	r3, #12
  403738:	4620      	mov	r0, r4
  40373a:	6033      	str	r3, [r6, #0]
  40373c:	b003      	add	sp, #12
  40373e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403742:	2380      	movs	r3, #128	; 0x80
  403744:	f04f 0e40 	mov.w	lr, #64	; 0x40
  403748:	203f      	movs	r0, #63	; 0x3f
  40374a:	e749      	b.n	4035e0 <_malloc_r+0x44>
  40374c:	4670      	mov	r0, lr
  40374e:	e75d      	b.n	40360c <_malloc_r+0x70>
  403750:	4423      	add	r3, r4
  403752:	68e1      	ldr	r1, [r4, #12]
  403754:	685a      	ldr	r2, [r3, #4]
  403756:	68a5      	ldr	r5, [r4, #8]
  403758:	f042 0201 	orr.w	r2, r2, #1
  40375c:	60e9      	str	r1, [r5, #12]
  40375e:	4630      	mov	r0, r6
  403760:	608d      	str	r5, [r1, #8]
  403762:	605a      	str	r2, [r3, #4]
  403764:	f000 fb24 	bl	403db0 <__malloc_unlock>
  403768:	3408      	adds	r4, #8
  40376a:	4620      	mov	r0, r4
  40376c:	b003      	add	sp, #12
  40376e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403772:	4423      	add	r3, r4
  403774:	4630      	mov	r0, r6
  403776:	685a      	ldr	r2, [r3, #4]
  403778:	f042 0201 	orr.w	r2, r2, #1
  40377c:	605a      	str	r2, [r3, #4]
  40377e:	f000 fb17 	bl	403db0 <__malloc_unlock>
  403782:	3408      	adds	r4, #8
  403784:	4620      	mov	r0, r4
  403786:	b003      	add	sp, #12
  403788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40378c:	68bc      	ldr	r4, [r7, #8]
  40378e:	6863      	ldr	r3, [r4, #4]
  403790:	f023 0803 	bic.w	r8, r3, #3
  403794:	45a8      	cmp	r8, r5
  403796:	d304      	bcc.n	4037a2 <_malloc_r+0x206>
  403798:	ebc5 0308 	rsb	r3, r5, r8
  40379c:	2b0f      	cmp	r3, #15
  40379e:	f300 808c 	bgt.w	4038ba <_malloc_r+0x31e>
  4037a2:	4b55      	ldr	r3, [pc, #340]	; (4038f8 <_malloc_r+0x35c>)
  4037a4:	f8df 9160 	ldr.w	r9, [pc, #352]	; 403908 <_malloc_r+0x36c>
  4037a8:	681a      	ldr	r2, [r3, #0]
  4037aa:	f8d9 3000 	ldr.w	r3, [r9]
  4037ae:	3301      	adds	r3, #1
  4037b0:	442a      	add	r2, r5
  4037b2:	eb04 0a08 	add.w	sl, r4, r8
  4037b6:	f000 8160 	beq.w	403a7a <_malloc_r+0x4de>
  4037ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  4037be:	320f      	adds	r2, #15
  4037c0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4037c4:	f022 020f 	bic.w	r2, r2, #15
  4037c8:	4611      	mov	r1, r2
  4037ca:	4630      	mov	r0, r6
  4037cc:	9201      	str	r2, [sp, #4]
  4037ce:	f000 fce1 	bl	404194 <_sbrk_r>
  4037d2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4037d6:	4683      	mov	fp, r0
  4037d8:	9a01      	ldr	r2, [sp, #4]
  4037da:	f000 8158 	beq.w	403a8e <_malloc_r+0x4f2>
  4037de:	4582      	cmp	sl, r0
  4037e0:	f200 80fc 	bhi.w	4039dc <_malloc_r+0x440>
  4037e4:	4b45      	ldr	r3, [pc, #276]	; (4038fc <_malloc_r+0x360>)
  4037e6:	6819      	ldr	r1, [r3, #0]
  4037e8:	45da      	cmp	sl, fp
  4037ea:	4411      	add	r1, r2
  4037ec:	6019      	str	r1, [r3, #0]
  4037ee:	f000 8153 	beq.w	403a98 <_malloc_r+0x4fc>
  4037f2:	f8d9 0000 	ldr.w	r0, [r9]
  4037f6:	f8df e110 	ldr.w	lr, [pc, #272]	; 403908 <_malloc_r+0x36c>
  4037fa:	3001      	adds	r0, #1
  4037fc:	bf1b      	ittet	ne
  4037fe:	ebca 0a0b 	rsbne	sl, sl, fp
  403802:	4451      	addne	r1, sl
  403804:	f8ce b000 	streq.w	fp, [lr]
  403808:	6019      	strne	r1, [r3, #0]
  40380a:	f01b 0107 	ands.w	r1, fp, #7
  40380e:	f000 8117 	beq.w	403a40 <_malloc_r+0x4a4>
  403812:	f1c1 0008 	rsb	r0, r1, #8
  403816:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40381a:	4483      	add	fp, r0
  40381c:	3108      	adds	r1, #8
  40381e:	445a      	add	r2, fp
  403820:	f3c2 020b 	ubfx	r2, r2, #0, #12
  403824:	ebc2 0901 	rsb	r9, r2, r1
  403828:	4649      	mov	r1, r9
  40382a:	4630      	mov	r0, r6
  40382c:	9301      	str	r3, [sp, #4]
  40382e:	f000 fcb1 	bl	404194 <_sbrk_r>
  403832:	1c43      	adds	r3, r0, #1
  403834:	9b01      	ldr	r3, [sp, #4]
  403836:	f000 813f 	beq.w	403ab8 <_malloc_r+0x51c>
  40383a:	ebcb 0200 	rsb	r2, fp, r0
  40383e:	444a      	add	r2, r9
  403840:	f042 0201 	orr.w	r2, r2, #1
  403844:	6819      	ldr	r1, [r3, #0]
  403846:	f8c7 b008 	str.w	fp, [r7, #8]
  40384a:	4449      	add	r1, r9
  40384c:	42bc      	cmp	r4, r7
  40384e:	f8cb 2004 	str.w	r2, [fp, #4]
  403852:	6019      	str	r1, [r3, #0]
  403854:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4038fc <_malloc_r+0x360>
  403858:	d016      	beq.n	403888 <_malloc_r+0x2ec>
  40385a:	f1b8 0f0f 	cmp.w	r8, #15
  40385e:	f240 80fd 	bls.w	403a5c <_malloc_r+0x4c0>
  403862:	6862      	ldr	r2, [r4, #4]
  403864:	f1a8 030c 	sub.w	r3, r8, #12
  403868:	f023 0307 	bic.w	r3, r3, #7
  40386c:	18e0      	adds	r0, r4, r3
  40386e:	f002 0201 	and.w	r2, r2, #1
  403872:	f04f 0e05 	mov.w	lr, #5
  403876:	431a      	orrs	r2, r3
  403878:	2b0f      	cmp	r3, #15
  40387a:	6062      	str	r2, [r4, #4]
  40387c:	f8c0 e004 	str.w	lr, [r0, #4]
  403880:	f8c0 e008 	str.w	lr, [r0, #8]
  403884:	f200 811c 	bhi.w	403ac0 <_malloc_r+0x524>
  403888:	4b1d      	ldr	r3, [pc, #116]	; (403900 <_malloc_r+0x364>)
  40388a:	68bc      	ldr	r4, [r7, #8]
  40388c:	681a      	ldr	r2, [r3, #0]
  40388e:	4291      	cmp	r1, r2
  403890:	bf88      	it	hi
  403892:	6019      	strhi	r1, [r3, #0]
  403894:	4b1b      	ldr	r3, [pc, #108]	; (403904 <_malloc_r+0x368>)
  403896:	681a      	ldr	r2, [r3, #0]
  403898:	4291      	cmp	r1, r2
  40389a:	6862      	ldr	r2, [r4, #4]
  40389c:	bf88      	it	hi
  40389e:	6019      	strhi	r1, [r3, #0]
  4038a0:	f022 0203 	bic.w	r2, r2, #3
  4038a4:	4295      	cmp	r5, r2
  4038a6:	eba2 0305 	sub.w	r3, r2, r5
  4038aa:	d801      	bhi.n	4038b0 <_malloc_r+0x314>
  4038ac:	2b0f      	cmp	r3, #15
  4038ae:	dc04      	bgt.n	4038ba <_malloc_r+0x31e>
  4038b0:	4630      	mov	r0, r6
  4038b2:	f000 fa7d 	bl	403db0 <__malloc_unlock>
  4038b6:	2400      	movs	r4, #0
  4038b8:	e738      	b.n	40372c <_malloc_r+0x190>
  4038ba:	1962      	adds	r2, r4, r5
  4038bc:	f043 0301 	orr.w	r3, r3, #1
  4038c0:	f045 0501 	orr.w	r5, r5, #1
  4038c4:	6065      	str	r5, [r4, #4]
  4038c6:	4630      	mov	r0, r6
  4038c8:	60ba      	str	r2, [r7, #8]
  4038ca:	6053      	str	r3, [r2, #4]
  4038cc:	f000 fa70 	bl	403db0 <__malloc_unlock>
  4038d0:	3408      	adds	r4, #8
  4038d2:	4620      	mov	r0, r4
  4038d4:	b003      	add	sp, #12
  4038d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4038da:	2b14      	cmp	r3, #20
  4038dc:	d971      	bls.n	4039c2 <_malloc_r+0x426>
  4038de:	2b54      	cmp	r3, #84	; 0x54
  4038e0:	f200 80a4 	bhi.w	403a2c <_malloc_r+0x490>
  4038e4:	0b28      	lsrs	r0, r5, #12
  4038e6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  4038ea:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4038ee:	306e      	adds	r0, #110	; 0x6e
  4038f0:	e676      	b.n	4035e0 <_malloc_r+0x44>
  4038f2:	bf00      	nop
  4038f4:	20400470 	.word	0x20400470
  4038f8:	2040092c 	.word	0x2040092c
  4038fc:	20400930 	.word	0x20400930
  403900:	20400928 	.word	0x20400928
  403904:	20400924 	.word	0x20400924
  403908:	2040087c 	.word	0x2040087c
  40390c:	0a5a      	lsrs	r2, r3, #9
  40390e:	2a04      	cmp	r2, #4
  403910:	d95e      	bls.n	4039d0 <_malloc_r+0x434>
  403912:	2a14      	cmp	r2, #20
  403914:	f200 80b3 	bhi.w	403a7e <_malloc_r+0x4e2>
  403918:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40391c:	0049      	lsls	r1, r1, #1
  40391e:	325b      	adds	r2, #91	; 0x5b
  403920:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  403924:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  403928:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 403b08 <_malloc_r+0x56c>
  40392c:	f1ac 0c08 	sub.w	ip, ip, #8
  403930:	458c      	cmp	ip, r1
  403932:	f000 8088 	beq.w	403a46 <_malloc_r+0x4aa>
  403936:	684a      	ldr	r2, [r1, #4]
  403938:	f022 0203 	bic.w	r2, r2, #3
  40393c:	4293      	cmp	r3, r2
  40393e:	d202      	bcs.n	403946 <_malloc_r+0x3aa>
  403940:	6889      	ldr	r1, [r1, #8]
  403942:	458c      	cmp	ip, r1
  403944:	d1f7      	bne.n	403936 <_malloc_r+0x39a>
  403946:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40394a:	687a      	ldr	r2, [r7, #4]
  40394c:	f8c4 c00c 	str.w	ip, [r4, #12]
  403950:	60a1      	str	r1, [r4, #8]
  403952:	f8cc 4008 	str.w	r4, [ip, #8]
  403956:	60cc      	str	r4, [r1, #12]
  403958:	e688      	b.n	40366c <_malloc_r+0xd0>
  40395a:	1963      	adds	r3, r4, r5
  40395c:	f042 0701 	orr.w	r7, r2, #1
  403960:	f045 0501 	orr.w	r5, r5, #1
  403964:	6065      	str	r5, [r4, #4]
  403966:	4630      	mov	r0, r6
  403968:	614b      	str	r3, [r1, #20]
  40396a:	610b      	str	r3, [r1, #16]
  40396c:	f8c3 e00c 	str.w	lr, [r3, #12]
  403970:	f8c3 e008 	str.w	lr, [r3, #8]
  403974:	605f      	str	r7, [r3, #4]
  403976:	509a      	str	r2, [r3, r2]
  403978:	3408      	adds	r4, #8
  40397a:	f000 fa19 	bl	403db0 <__malloc_unlock>
  40397e:	e6d5      	b.n	40372c <_malloc_r+0x190>
  403980:	684a      	ldr	r2, [r1, #4]
  403982:	e673      	b.n	40366c <_malloc_r+0xd0>
  403984:	f108 0801 	add.w	r8, r8, #1
  403988:	f018 0f03 	tst.w	r8, #3
  40398c:	f10c 0c08 	add.w	ip, ip, #8
  403990:	f47f ae7f 	bne.w	403692 <_malloc_r+0xf6>
  403994:	e030      	b.n	4039f8 <_malloc_r+0x45c>
  403996:	68dc      	ldr	r4, [r3, #12]
  403998:	42a3      	cmp	r3, r4
  40399a:	bf08      	it	eq
  40399c:	3002      	addeq	r0, #2
  40399e:	f43f ae35 	beq.w	40360c <_malloc_r+0x70>
  4039a2:	e6b3      	b.n	40370c <_malloc_r+0x170>
  4039a4:	440b      	add	r3, r1
  4039a6:	460c      	mov	r4, r1
  4039a8:	685a      	ldr	r2, [r3, #4]
  4039aa:	68c9      	ldr	r1, [r1, #12]
  4039ac:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4039b0:	f042 0201 	orr.w	r2, r2, #1
  4039b4:	605a      	str	r2, [r3, #4]
  4039b6:	4630      	mov	r0, r6
  4039b8:	60e9      	str	r1, [r5, #12]
  4039ba:	608d      	str	r5, [r1, #8]
  4039bc:	f000 f9f8 	bl	403db0 <__malloc_unlock>
  4039c0:	e6b4      	b.n	40372c <_malloc_r+0x190>
  4039c2:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  4039c6:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  4039ca:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4039ce:	e607      	b.n	4035e0 <_malloc_r+0x44>
  4039d0:	099a      	lsrs	r2, r3, #6
  4039d2:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4039d6:	0049      	lsls	r1, r1, #1
  4039d8:	3238      	adds	r2, #56	; 0x38
  4039da:	e7a1      	b.n	403920 <_malloc_r+0x384>
  4039dc:	42bc      	cmp	r4, r7
  4039de:	4b4a      	ldr	r3, [pc, #296]	; (403b08 <_malloc_r+0x56c>)
  4039e0:	f43f af00 	beq.w	4037e4 <_malloc_r+0x248>
  4039e4:	689c      	ldr	r4, [r3, #8]
  4039e6:	6862      	ldr	r2, [r4, #4]
  4039e8:	f022 0203 	bic.w	r2, r2, #3
  4039ec:	e75a      	b.n	4038a4 <_malloc_r+0x308>
  4039ee:	f859 3908 	ldr.w	r3, [r9], #-8
  4039f2:	4599      	cmp	r9, r3
  4039f4:	f040 8082 	bne.w	403afc <_malloc_r+0x560>
  4039f8:	f010 0f03 	tst.w	r0, #3
  4039fc:	f100 30ff 	add.w	r0, r0, #4294967295
  403a00:	d1f5      	bne.n	4039ee <_malloc_r+0x452>
  403a02:	687b      	ldr	r3, [r7, #4]
  403a04:	ea23 0304 	bic.w	r3, r3, r4
  403a08:	607b      	str	r3, [r7, #4]
  403a0a:	0064      	lsls	r4, r4, #1
  403a0c:	429c      	cmp	r4, r3
  403a0e:	f63f aebd 	bhi.w	40378c <_malloc_r+0x1f0>
  403a12:	2c00      	cmp	r4, #0
  403a14:	f43f aeba 	beq.w	40378c <_malloc_r+0x1f0>
  403a18:	421c      	tst	r4, r3
  403a1a:	4640      	mov	r0, r8
  403a1c:	f47f ae35 	bne.w	40368a <_malloc_r+0xee>
  403a20:	0064      	lsls	r4, r4, #1
  403a22:	421c      	tst	r4, r3
  403a24:	f100 0004 	add.w	r0, r0, #4
  403a28:	d0fa      	beq.n	403a20 <_malloc_r+0x484>
  403a2a:	e62e      	b.n	40368a <_malloc_r+0xee>
  403a2c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403a30:	d818      	bhi.n	403a64 <_malloc_r+0x4c8>
  403a32:	0be8      	lsrs	r0, r5, #15
  403a34:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  403a38:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403a3c:	3077      	adds	r0, #119	; 0x77
  403a3e:	e5cf      	b.n	4035e0 <_malloc_r+0x44>
  403a40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403a44:	e6eb      	b.n	40381e <_malloc_r+0x282>
  403a46:	2101      	movs	r1, #1
  403a48:	f8d8 3004 	ldr.w	r3, [r8, #4]
  403a4c:	1092      	asrs	r2, r2, #2
  403a4e:	fa01 f202 	lsl.w	r2, r1, r2
  403a52:	431a      	orrs	r2, r3
  403a54:	f8c8 2004 	str.w	r2, [r8, #4]
  403a58:	4661      	mov	r1, ip
  403a5a:	e777      	b.n	40394c <_malloc_r+0x3b0>
  403a5c:	2301      	movs	r3, #1
  403a5e:	f8cb 3004 	str.w	r3, [fp, #4]
  403a62:	e725      	b.n	4038b0 <_malloc_r+0x314>
  403a64:	f240 5254 	movw	r2, #1364	; 0x554
  403a68:	4293      	cmp	r3, r2
  403a6a:	d820      	bhi.n	403aae <_malloc_r+0x512>
  403a6c:	0ca8      	lsrs	r0, r5, #18
  403a6e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  403a72:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403a76:	307c      	adds	r0, #124	; 0x7c
  403a78:	e5b2      	b.n	4035e0 <_malloc_r+0x44>
  403a7a:	3210      	adds	r2, #16
  403a7c:	e6a4      	b.n	4037c8 <_malloc_r+0x22c>
  403a7e:	2a54      	cmp	r2, #84	; 0x54
  403a80:	d826      	bhi.n	403ad0 <_malloc_r+0x534>
  403a82:	0b1a      	lsrs	r2, r3, #12
  403a84:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403a88:	0049      	lsls	r1, r1, #1
  403a8a:	326e      	adds	r2, #110	; 0x6e
  403a8c:	e748      	b.n	403920 <_malloc_r+0x384>
  403a8e:	68bc      	ldr	r4, [r7, #8]
  403a90:	6862      	ldr	r2, [r4, #4]
  403a92:	f022 0203 	bic.w	r2, r2, #3
  403a96:	e705      	b.n	4038a4 <_malloc_r+0x308>
  403a98:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403a9c:	2800      	cmp	r0, #0
  403a9e:	f47f aea8 	bne.w	4037f2 <_malloc_r+0x256>
  403aa2:	4442      	add	r2, r8
  403aa4:	68bb      	ldr	r3, [r7, #8]
  403aa6:	f042 0201 	orr.w	r2, r2, #1
  403aaa:	605a      	str	r2, [r3, #4]
  403aac:	e6ec      	b.n	403888 <_malloc_r+0x2ec>
  403aae:	23fe      	movs	r3, #254	; 0xfe
  403ab0:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  403ab4:	207e      	movs	r0, #126	; 0x7e
  403ab6:	e593      	b.n	4035e0 <_malloc_r+0x44>
  403ab8:	2201      	movs	r2, #1
  403aba:	f04f 0900 	mov.w	r9, #0
  403abe:	e6c1      	b.n	403844 <_malloc_r+0x2a8>
  403ac0:	f104 0108 	add.w	r1, r4, #8
  403ac4:	4630      	mov	r0, r6
  403ac6:	f7ff fa4f 	bl	402f68 <_free_r>
  403aca:	f8d9 1000 	ldr.w	r1, [r9]
  403ace:	e6db      	b.n	403888 <_malloc_r+0x2ec>
  403ad0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403ad4:	d805      	bhi.n	403ae2 <_malloc_r+0x546>
  403ad6:	0bda      	lsrs	r2, r3, #15
  403ad8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403adc:	0049      	lsls	r1, r1, #1
  403ade:	3277      	adds	r2, #119	; 0x77
  403ae0:	e71e      	b.n	403920 <_malloc_r+0x384>
  403ae2:	f240 5154 	movw	r1, #1364	; 0x554
  403ae6:	428a      	cmp	r2, r1
  403ae8:	d805      	bhi.n	403af6 <_malloc_r+0x55a>
  403aea:	0c9a      	lsrs	r2, r3, #18
  403aec:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403af0:	0049      	lsls	r1, r1, #1
  403af2:	327c      	adds	r2, #124	; 0x7c
  403af4:	e714      	b.n	403920 <_malloc_r+0x384>
  403af6:	21fe      	movs	r1, #254	; 0xfe
  403af8:	227e      	movs	r2, #126	; 0x7e
  403afa:	e711      	b.n	403920 <_malloc_r+0x384>
  403afc:	687b      	ldr	r3, [r7, #4]
  403afe:	e784      	b.n	403a0a <_malloc_r+0x46e>
  403b00:	08e8      	lsrs	r0, r5, #3
  403b02:	1c43      	adds	r3, r0, #1
  403b04:	005b      	lsls	r3, r3, #1
  403b06:	e5f8      	b.n	4036fa <_malloc_r+0x15e>
  403b08:	20400470 	.word	0x20400470
  403b0c:	00000000 	.word	0x00000000

00403b10 <memchr>:
  403b10:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403b14:	2a10      	cmp	r2, #16
  403b16:	db2b      	blt.n	403b70 <memchr+0x60>
  403b18:	f010 0f07 	tst.w	r0, #7
  403b1c:	d008      	beq.n	403b30 <memchr+0x20>
  403b1e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403b22:	3a01      	subs	r2, #1
  403b24:	428b      	cmp	r3, r1
  403b26:	d02d      	beq.n	403b84 <memchr+0x74>
  403b28:	f010 0f07 	tst.w	r0, #7
  403b2c:	b342      	cbz	r2, 403b80 <memchr+0x70>
  403b2e:	d1f6      	bne.n	403b1e <memchr+0xe>
  403b30:	b4f0      	push	{r4, r5, r6, r7}
  403b32:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403b36:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  403b3a:	f022 0407 	bic.w	r4, r2, #7
  403b3e:	f07f 0700 	mvns.w	r7, #0
  403b42:	2300      	movs	r3, #0
  403b44:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403b48:	3c08      	subs	r4, #8
  403b4a:	ea85 0501 	eor.w	r5, r5, r1
  403b4e:	ea86 0601 	eor.w	r6, r6, r1
  403b52:	fa85 f547 	uadd8	r5, r5, r7
  403b56:	faa3 f587 	sel	r5, r3, r7
  403b5a:	fa86 f647 	uadd8	r6, r6, r7
  403b5e:	faa5 f687 	sel	r6, r5, r7
  403b62:	b98e      	cbnz	r6, 403b88 <memchr+0x78>
  403b64:	d1ee      	bne.n	403b44 <memchr+0x34>
  403b66:	bcf0      	pop	{r4, r5, r6, r7}
  403b68:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403b6c:	f002 0207 	and.w	r2, r2, #7
  403b70:	b132      	cbz	r2, 403b80 <memchr+0x70>
  403b72:	f810 3b01 	ldrb.w	r3, [r0], #1
  403b76:	3a01      	subs	r2, #1
  403b78:	ea83 0301 	eor.w	r3, r3, r1
  403b7c:	b113      	cbz	r3, 403b84 <memchr+0x74>
  403b7e:	d1f8      	bne.n	403b72 <memchr+0x62>
  403b80:	2000      	movs	r0, #0
  403b82:	4770      	bx	lr
  403b84:	3801      	subs	r0, #1
  403b86:	4770      	bx	lr
  403b88:	2d00      	cmp	r5, #0
  403b8a:	bf06      	itte	eq
  403b8c:	4635      	moveq	r5, r6
  403b8e:	3803      	subeq	r0, #3
  403b90:	3807      	subne	r0, #7
  403b92:	f015 0f01 	tst.w	r5, #1
  403b96:	d107      	bne.n	403ba8 <memchr+0x98>
  403b98:	3001      	adds	r0, #1
  403b9a:	f415 7f80 	tst.w	r5, #256	; 0x100
  403b9e:	bf02      	ittt	eq
  403ba0:	3001      	addeq	r0, #1
  403ba2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403ba6:	3001      	addeq	r0, #1
  403ba8:	bcf0      	pop	{r4, r5, r6, r7}
  403baa:	3801      	subs	r0, #1
  403bac:	4770      	bx	lr
  403bae:	bf00      	nop

00403bb0 <memcpy>:
  403bb0:	4684      	mov	ip, r0
  403bb2:	ea41 0300 	orr.w	r3, r1, r0
  403bb6:	f013 0303 	ands.w	r3, r3, #3
  403bba:	d16d      	bne.n	403c98 <memcpy+0xe8>
  403bbc:	3a40      	subs	r2, #64	; 0x40
  403bbe:	d341      	bcc.n	403c44 <memcpy+0x94>
  403bc0:	f851 3b04 	ldr.w	r3, [r1], #4
  403bc4:	f840 3b04 	str.w	r3, [r0], #4
  403bc8:	f851 3b04 	ldr.w	r3, [r1], #4
  403bcc:	f840 3b04 	str.w	r3, [r0], #4
  403bd0:	f851 3b04 	ldr.w	r3, [r1], #4
  403bd4:	f840 3b04 	str.w	r3, [r0], #4
  403bd8:	f851 3b04 	ldr.w	r3, [r1], #4
  403bdc:	f840 3b04 	str.w	r3, [r0], #4
  403be0:	f851 3b04 	ldr.w	r3, [r1], #4
  403be4:	f840 3b04 	str.w	r3, [r0], #4
  403be8:	f851 3b04 	ldr.w	r3, [r1], #4
  403bec:	f840 3b04 	str.w	r3, [r0], #4
  403bf0:	f851 3b04 	ldr.w	r3, [r1], #4
  403bf4:	f840 3b04 	str.w	r3, [r0], #4
  403bf8:	f851 3b04 	ldr.w	r3, [r1], #4
  403bfc:	f840 3b04 	str.w	r3, [r0], #4
  403c00:	f851 3b04 	ldr.w	r3, [r1], #4
  403c04:	f840 3b04 	str.w	r3, [r0], #4
  403c08:	f851 3b04 	ldr.w	r3, [r1], #4
  403c0c:	f840 3b04 	str.w	r3, [r0], #4
  403c10:	f851 3b04 	ldr.w	r3, [r1], #4
  403c14:	f840 3b04 	str.w	r3, [r0], #4
  403c18:	f851 3b04 	ldr.w	r3, [r1], #4
  403c1c:	f840 3b04 	str.w	r3, [r0], #4
  403c20:	f851 3b04 	ldr.w	r3, [r1], #4
  403c24:	f840 3b04 	str.w	r3, [r0], #4
  403c28:	f851 3b04 	ldr.w	r3, [r1], #4
  403c2c:	f840 3b04 	str.w	r3, [r0], #4
  403c30:	f851 3b04 	ldr.w	r3, [r1], #4
  403c34:	f840 3b04 	str.w	r3, [r0], #4
  403c38:	f851 3b04 	ldr.w	r3, [r1], #4
  403c3c:	f840 3b04 	str.w	r3, [r0], #4
  403c40:	3a40      	subs	r2, #64	; 0x40
  403c42:	d2bd      	bcs.n	403bc0 <memcpy+0x10>
  403c44:	3230      	adds	r2, #48	; 0x30
  403c46:	d311      	bcc.n	403c6c <memcpy+0xbc>
  403c48:	f851 3b04 	ldr.w	r3, [r1], #4
  403c4c:	f840 3b04 	str.w	r3, [r0], #4
  403c50:	f851 3b04 	ldr.w	r3, [r1], #4
  403c54:	f840 3b04 	str.w	r3, [r0], #4
  403c58:	f851 3b04 	ldr.w	r3, [r1], #4
  403c5c:	f840 3b04 	str.w	r3, [r0], #4
  403c60:	f851 3b04 	ldr.w	r3, [r1], #4
  403c64:	f840 3b04 	str.w	r3, [r0], #4
  403c68:	3a10      	subs	r2, #16
  403c6a:	d2ed      	bcs.n	403c48 <memcpy+0x98>
  403c6c:	320c      	adds	r2, #12
  403c6e:	d305      	bcc.n	403c7c <memcpy+0xcc>
  403c70:	f851 3b04 	ldr.w	r3, [r1], #4
  403c74:	f840 3b04 	str.w	r3, [r0], #4
  403c78:	3a04      	subs	r2, #4
  403c7a:	d2f9      	bcs.n	403c70 <memcpy+0xc0>
  403c7c:	3204      	adds	r2, #4
  403c7e:	d008      	beq.n	403c92 <memcpy+0xe2>
  403c80:	07d2      	lsls	r2, r2, #31
  403c82:	bf1c      	itt	ne
  403c84:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403c88:	f800 3b01 	strbne.w	r3, [r0], #1
  403c8c:	d301      	bcc.n	403c92 <memcpy+0xe2>
  403c8e:	880b      	ldrh	r3, [r1, #0]
  403c90:	8003      	strh	r3, [r0, #0]
  403c92:	4660      	mov	r0, ip
  403c94:	4770      	bx	lr
  403c96:	bf00      	nop
  403c98:	2a08      	cmp	r2, #8
  403c9a:	d313      	bcc.n	403cc4 <memcpy+0x114>
  403c9c:	078b      	lsls	r3, r1, #30
  403c9e:	d08d      	beq.n	403bbc <memcpy+0xc>
  403ca0:	f010 0303 	ands.w	r3, r0, #3
  403ca4:	d08a      	beq.n	403bbc <memcpy+0xc>
  403ca6:	f1c3 0304 	rsb	r3, r3, #4
  403caa:	1ad2      	subs	r2, r2, r3
  403cac:	07db      	lsls	r3, r3, #31
  403cae:	bf1c      	itt	ne
  403cb0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403cb4:	f800 3b01 	strbne.w	r3, [r0], #1
  403cb8:	d380      	bcc.n	403bbc <memcpy+0xc>
  403cba:	f831 3b02 	ldrh.w	r3, [r1], #2
  403cbe:	f820 3b02 	strh.w	r3, [r0], #2
  403cc2:	e77b      	b.n	403bbc <memcpy+0xc>
  403cc4:	3a04      	subs	r2, #4
  403cc6:	d3d9      	bcc.n	403c7c <memcpy+0xcc>
  403cc8:	3a01      	subs	r2, #1
  403cca:	f811 3b01 	ldrb.w	r3, [r1], #1
  403cce:	f800 3b01 	strb.w	r3, [r0], #1
  403cd2:	d2f9      	bcs.n	403cc8 <memcpy+0x118>
  403cd4:	780b      	ldrb	r3, [r1, #0]
  403cd6:	7003      	strb	r3, [r0, #0]
  403cd8:	784b      	ldrb	r3, [r1, #1]
  403cda:	7043      	strb	r3, [r0, #1]
  403cdc:	788b      	ldrb	r3, [r1, #2]
  403cde:	7083      	strb	r3, [r0, #2]
  403ce0:	4660      	mov	r0, ip
  403ce2:	4770      	bx	lr

00403ce4 <memmove>:
  403ce4:	4288      	cmp	r0, r1
  403ce6:	b5f0      	push	{r4, r5, r6, r7, lr}
  403ce8:	d90d      	bls.n	403d06 <memmove+0x22>
  403cea:	188b      	adds	r3, r1, r2
  403cec:	4298      	cmp	r0, r3
  403cee:	d20a      	bcs.n	403d06 <memmove+0x22>
  403cf0:	1881      	adds	r1, r0, r2
  403cf2:	2a00      	cmp	r2, #0
  403cf4:	d051      	beq.n	403d9a <memmove+0xb6>
  403cf6:	1a9a      	subs	r2, r3, r2
  403cf8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403cfc:	f801 4d01 	strb.w	r4, [r1, #-1]!
  403d00:	4293      	cmp	r3, r2
  403d02:	d1f9      	bne.n	403cf8 <memmove+0x14>
  403d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403d06:	2a0f      	cmp	r2, #15
  403d08:	d948      	bls.n	403d9c <memmove+0xb8>
  403d0a:	ea41 0300 	orr.w	r3, r1, r0
  403d0e:	079b      	lsls	r3, r3, #30
  403d10:	d146      	bne.n	403da0 <memmove+0xbc>
  403d12:	f100 0410 	add.w	r4, r0, #16
  403d16:	f101 0310 	add.w	r3, r1, #16
  403d1a:	4615      	mov	r5, r2
  403d1c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403d20:	f844 6c10 	str.w	r6, [r4, #-16]
  403d24:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403d28:	f844 6c0c 	str.w	r6, [r4, #-12]
  403d2c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403d30:	f844 6c08 	str.w	r6, [r4, #-8]
  403d34:	3d10      	subs	r5, #16
  403d36:	f853 6c04 	ldr.w	r6, [r3, #-4]
  403d3a:	f844 6c04 	str.w	r6, [r4, #-4]
  403d3e:	2d0f      	cmp	r5, #15
  403d40:	f103 0310 	add.w	r3, r3, #16
  403d44:	f104 0410 	add.w	r4, r4, #16
  403d48:	d8e8      	bhi.n	403d1c <memmove+0x38>
  403d4a:	f1a2 0310 	sub.w	r3, r2, #16
  403d4e:	f023 030f 	bic.w	r3, r3, #15
  403d52:	f002 0e0f 	and.w	lr, r2, #15
  403d56:	3310      	adds	r3, #16
  403d58:	f1be 0f03 	cmp.w	lr, #3
  403d5c:	4419      	add	r1, r3
  403d5e:	4403      	add	r3, r0
  403d60:	d921      	bls.n	403da6 <memmove+0xc2>
  403d62:	1f1e      	subs	r6, r3, #4
  403d64:	460d      	mov	r5, r1
  403d66:	4674      	mov	r4, lr
  403d68:	3c04      	subs	r4, #4
  403d6a:	f855 7b04 	ldr.w	r7, [r5], #4
  403d6e:	f846 7f04 	str.w	r7, [r6, #4]!
  403d72:	2c03      	cmp	r4, #3
  403d74:	d8f8      	bhi.n	403d68 <memmove+0x84>
  403d76:	f1ae 0404 	sub.w	r4, lr, #4
  403d7a:	f024 0403 	bic.w	r4, r4, #3
  403d7e:	3404      	adds	r4, #4
  403d80:	4423      	add	r3, r4
  403d82:	4421      	add	r1, r4
  403d84:	f002 0203 	and.w	r2, r2, #3
  403d88:	b162      	cbz	r2, 403da4 <memmove+0xc0>
  403d8a:	3b01      	subs	r3, #1
  403d8c:	440a      	add	r2, r1
  403d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403d92:	f803 4f01 	strb.w	r4, [r3, #1]!
  403d96:	428a      	cmp	r2, r1
  403d98:	d1f9      	bne.n	403d8e <memmove+0xaa>
  403d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403d9c:	4603      	mov	r3, r0
  403d9e:	e7f3      	b.n	403d88 <memmove+0xa4>
  403da0:	4603      	mov	r3, r0
  403da2:	e7f2      	b.n	403d8a <memmove+0xa6>
  403da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403da6:	4672      	mov	r2, lr
  403da8:	e7ee      	b.n	403d88 <memmove+0xa4>
  403daa:	bf00      	nop

00403dac <__malloc_lock>:
  403dac:	4770      	bx	lr
  403dae:	bf00      	nop

00403db0 <__malloc_unlock>:
  403db0:	4770      	bx	lr
  403db2:	bf00      	nop

00403db4 <_realloc_r>:
  403db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403db8:	4617      	mov	r7, r2
  403dba:	b083      	sub	sp, #12
  403dbc:	2900      	cmp	r1, #0
  403dbe:	f000 80c1 	beq.w	403f44 <_realloc_r+0x190>
  403dc2:	460e      	mov	r6, r1
  403dc4:	4681      	mov	r9, r0
  403dc6:	f107 050b 	add.w	r5, r7, #11
  403dca:	f7ff ffef 	bl	403dac <__malloc_lock>
  403dce:	f856 ec04 	ldr.w	lr, [r6, #-4]
  403dd2:	2d16      	cmp	r5, #22
  403dd4:	f02e 0403 	bic.w	r4, lr, #3
  403dd8:	f1a6 0808 	sub.w	r8, r6, #8
  403ddc:	d840      	bhi.n	403e60 <_realloc_r+0xac>
  403dde:	2210      	movs	r2, #16
  403de0:	4615      	mov	r5, r2
  403de2:	42af      	cmp	r7, r5
  403de4:	d841      	bhi.n	403e6a <_realloc_r+0xb6>
  403de6:	4294      	cmp	r4, r2
  403de8:	da75      	bge.n	403ed6 <_realloc_r+0x122>
  403dea:	4bc9      	ldr	r3, [pc, #804]	; (404110 <_realloc_r+0x35c>)
  403dec:	6899      	ldr	r1, [r3, #8]
  403dee:	eb08 0004 	add.w	r0, r8, r4
  403df2:	4288      	cmp	r0, r1
  403df4:	6841      	ldr	r1, [r0, #4]
  403df6:	f000 80d9 	beq.w	403fac <_realloc_r+0x1f8>
  403dfa:	f021 0301 	bic.w	r3, r1, #1
  403dfe:	4403      	add	r3, r0
  403e00:	685b      	ldr	r3, [r3, #4]
  403e02:	07db      	lsls	r3, r3, #31
  403e04:	d57d      	bpl.n	403f02 <_realloc_r+0x14e>
  403e06:	f01e 0f01 	tst.w	lr, #1
  403e0a:	d035      	beq.n	403e78 <_realloc_r+0xc4>
  403e0c:	4639      	mov	r1, r7
  403e0e:	4648      	mov	r0, r9
  403e10:	f7ff fbc4 	bl	40359c <_malloc_r>
  403e14:	4607      	mov	r7, r0
  403e16:	b1e0      	cbz	r0, 403e52 <_realloc_r+0x9e>
  403e18:	f856 3c04 	ldr.w	r3, [r6, #-4]
  403e1c:	f023 0301 	bic.w	r3, r3, #1
  403e20:	4443      	add	r3, r8
  403e22:	f1a0 0208 	sub.w	r2, r0, #8
  403e26:	429a      	cmp	r2, r3
  403e28:	f000 8144 	beq.w	4040b4 <_realloc_r+0x300>
  403e2c:	1f22      	subs	r2, r4, #4
  403e2e:	2a24      	cmp	r2, #36	; 0x24
  403e30:	f200 8131 	bhi.w	404096 <_realloc_r+0x2e2>
  403e34:	2a13      	cmp	r2, #19
  403e36:	f200 8104 	bhi.w	404042 <_realloc_r+0x28e>
  403e3a:	4603      	mov	r3, r0
  403e3c:	4632      	mov	r2, r6
  403e3e:	6811      	ldr	r1, [r2, #0]
  403e40:	6019      	str	r1, [r3, #0]
  403e42:	6851      	ldr	r1, [r2, #4]
  403e44:	6059      	str	r1, [r3, #4]
  403e46:	6892      	ldr	r2, [r2, #8]
  403e48:	609a      	str	r2, [r3, #8]
  403e4a:	4631      	mov	r1, r6
  403e4c:	4648      	mov	r0, r9
  403e4e:	f7ff f88b 	bl	402f68 <_free_r>
  403e52:	4648      	mov	r0, r9
  403e54:	f7ff ffac 	bl	403db0 <__malloc_unlock>
  403e58:	4638      	mov	r0, r7
  403e5a:	b003      	add	sp, #12
  403e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e60:	f025 0507 	bic.w	r5, r5, #7
  403e64:	2d00      	cmp	r5, #0
  403e66:	462a      	mov	r2, r5
  403e68:	dabb      	bge.n	403de2 <_realloc_r+0x2e>
  403e6a:	230c      	movs	r3, #12
  403e6c:	2000      	movs	r0, #0
  403e6e:	f8c9 3000 	str.w	r3, [r9]
  403e72:	b003      	add	sp, #12
  403e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e78:	f856 3c08 	ldr.w	r3, [r6, #-8]
  403e7c:	ebc3 0a08 	rsb	sl, r3, r8
  403e80:	f8da 3004 	ldr.w	r3, [sl, #4]
  403e84:	f023 0c03 	bic.w	ip, r3, #3
  403e88:	eb04 030c 	add.w	r3, r4, ip
  403e8c:	4293      	cmp	r3, r2
  403e8e:	dbbd      	blt.n	403e0c <_realloc_r+0x58>
  403e90:	4657      	mov	r7, sl
  403e92:	f8da 100c 	ldr.w	r1, [sl, #12]
  403e96:	f857 0f08 	ldr.w	r0, [r7, #8]!
  403e9a:	1f22      	subs	r2, r4, #4
  403e9c:	2a24      	cmp	r2, #36	; 0x24
  403e9e:	60c1      	str	r1, [r0, #12]
  403ea0:	6088      	str	r0, [r1, #8]
  403ea2:	f200 8117 	bhi.w	4040d4 <_realloc_r+0x320>
  403ea6:	2a13      	cmp	r2, #19
  403ea8:	f240 8112 	bls.w	4040d0 <_realloc_r+0x31c>
  403eac:	6831      	ldr	r1, [r6, #0]
  403eae:	f8ca 1008 	str.w	r1, [sl, #8]
  403eb2:	6871      	ldr	r1, [r6, #4]
  403eb4:	f8ca 100c 	str.w	r1, [sl, #12]
  403eb8:	2a1b      	cmp	r2, #27
  403eba:	f200 812b 	bhi.w	404114 <_realloc_r+0x360>
  403ebe:	3608      	adds	r6, #8
  403ec0:	f10a 0210 	add.w	r2, sl, #16
  403ec4:	6831      	ldr	r1, [r6, #0]
  403ec6:	6011      	str	r1, [r2, #0]
  403ec8:	6871      	ldr	r1, [r6, #4]
  403eca:	6051      	str	r1, [r2, #4]
  403ecc:	68b1      	ldr	r1, [r6, #8]
  403ece:	6091      	str	r1, [r2, #8]
  403ed0:	463e      	mov	r6, r7
  403ed2:	461c      	mov	r4, r3
  403ed4:	46d0      	mov	r8, sl
  403ed6:	1b63      	subs	r3, r4, r5
  403ed8:	2b0f      	cmp	r3, #15
  403eda:	d81d      	bhi.n	403f18 <_realloc_r+0x164>
  403edc:	f8d8 3004 	ldr.w	r3, [r8, #4]
  403ee0:	f003 0301 	and.w	r3, r3, #1
  403ee4:	4323      	orrs	r3, r4
  403ee6:	4444      	add	r4, r8
  403ee8:	f8c8 3004 	str.w	r3, [r8, #4]
  403eec:	6863      	ldr	r3, [r4, #4]
  403eee:	f043 0301 	orr.w	r3, r3, #1
  403ef2:	6063      	str	r3, [r4, #4]
  403ef4:	4648      	mov	r0, r9
  403ef6:	f7ff ff5b 	bl	403db0 <__malloc_unlock>
  403efa:	4630      	mov	r0, r6
  403efc:	b003      	add	sp, #12
  403efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f02:	f021 0103 	bic.w	r1, r1, #3
  403f06:	4421      	add	r1, r4
  403f08:	4291      	cmp	r1, r2
  403f0a:	db21      	blt.n	403f50 <_realloc_r+0x19c>
  403f0c:	68c3      	ldr	r3, [r0, #12]
  403f0e:	6882      	ldr	r2, [r0, #8]
  403f10:	460c      	mov	r4, r1
  403f12:	60d3      	str	r3, [r2, #12]
  403f14:	609a      	str	r2, [r3, #8]
  403f16:	e7de      	b.n	403ed6 <_realloc_r+0x122>
  403f18:	f8d8 2004 	ldr.w	r2, [r8, #4]
  403f1c:	eb08 0105 	add.w	r1, r8, r5
  403f20:	f002 0201 	and.w	r2, r2, #1
  403f24:	4315      	orrs	r5, r2
  403f26:	f043 0201 	orr.w	r2, r3, #1
  403f2a:	440b      	add	r3, r1
  403f2c:	f8c8 5004 	str.w	r5, [r8, #4]
  403f30:	604a      	str	r2, [r1, #4]
  403f32:	685a      	ldr	r2, [r3, #4]
  403f34:	f042 0201 	orr.w	r2, r2, #1
  403f38:	3108      	adds	r1, #8
  403f3a:	605a      	str	r2, [r3, #4]
  403f3c:	4648      	mov	r0, r9
  403f3e:	f7ff f813 	bl	402f68 <_free_r>
  403f42:	e7d7      	b.n	403ef4 <_realloc_r+0x140>
  403f44:	4611      	mov	r1, r2
  403f46:	b003      	add	sp, #12
  403f48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403f4c:	f7ff bb26 	b.w	40359c <_malloc_r>
  403f50:	f01e 0f01 	tst.w	lr, #1
  403f54:	f47f af5a 	bne.w	403e0c <_realloc_r+0x58>
  403f58:	f856 3c08 	ldr.w	r3, [r6, #-8]
  403f5c:	ebc3 0a08 	rsb	sl, r3, r8
  403f60:	f8da 3004 	ldr.w	r3, [sl, #4]
  403f64:	f023 0c03 	bic.w	ip, r3, #3
  403f68:	eb01 0e0c 	add.w	lr, r1, ip
  403f6c:	4596      	cmp	lr, r2
  403f6e:	db8b      	blt.n	403e88 <_realloc_r+0xd4>
  403f70:	68c3      	ldr	r3, [r0, #12]
  403f72:	6882      	ldr	r2, [r0, #8]
  403f74:	4657      	mov	r7, sl
  403f76:	60d3      	str	r3, [r2, #12]
  403f78:	609a      	str	r2, [r3, #8]
  403f7a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  403f7e:	f8da 300c 	ldr.w	r3, [sl, #12]
  403f82:	60cb      	str	r3, [r1, #12]
  403f84:	1f22      	subs	r2, r4, #4
  403f86:	2a24      	cmp	r2, #36	; 0x24
  403f88:	6099      	str	r1, [r3, #8]
  403f8a:	f200 8099 	bhi.w	4040c0 <_realloc_r+0x30c>
  403f8e:	2a13      	cmp	r2, #19
  403f90:	d962      	bls.n	404058 <_realloc_r+0x2a4>
  403f92:	6833      	ldr	r3, [r6, #0]
  403f94:	f8ca 3008 	str.w	r3, [sl, #8]
  403f98:	6873      	ldr	r3, [r6, #4]
  403f9a:	f8ca 300c 	str.w	r3, [sl, #12]
  403f9e:	2a1b      	cmp	r2, #27
  403fa0:	f200 80a0 	bhi.w	4040e4 <_realloc_r+0x330>
  403fa4:	3608      	adds	r6, #8
  403fa6:	f10a 0310 	add.w	r3, sl, #16
  403faa:	e056      	b.n	40405a <_realloc_r+0x2a6>
  403fac:	f021 0b03 	bic.w	fp, r1, #3
  403fb0:	44a3      	add	fp, r4
  403fb2:	f105 0010 	add.w	r0, r5, #16
  403fb6:	4583      	cmp	fp, r0
  403fb8:	da59      	bge.n	40406e <_realloc_r+0x2ba>
  403fba:	f01e 0f01 	tst.w	lr, #1
  403fbe:	f47f af25 	bne.w	403e0c <_realloc_r+0x58>
  403fc2:	f856 1c08 	ldr.w	r1, [r6, #-8]
  403fc6:	ebc1 0a08 	rsb	sl, r1, r8
  403fca:	f8da 1004 	ldr.w	r1, [sl, #4]
  403fce:	f021 0c03 	bic.w	ip, r1, #3
  403fd2:	44e3      	add	fp, ip
  403fd4:	4558      	cmp	r0, fp
  403fd6:	f73f af57 	bgt.w	403e88 <_realloc_r+0xd4>
  403fda:	4657      	mov	r7, sl
  403fdc:	f8da 100c 	ldr.w	r1, [sl, #12]
  403fe0:	f857 0f08 	ldr.w	r0, [r7, #8]!
  403fe4:	1f22      	subs	r2, r4, #4
  403fe6:	2a24      	cmp	r2, #36	; 0x24
  403fe8:	60c1      	str	r1, [r0, #12]
  403fea:	6088      	str	r0, [r1, #8]
  403fec:	f200 80b4 	bhi.w	404158 <_realloc_r+0x3a4>
  403ff0:	2a13      	cmp	r2, #19
  403ff2:	f240 80a5 	bls.w	404140 <_realloc_r+0x38c>
  403ff6:	6831      	ldr	r1, [r6, #0]
  403ff8:	f8ca 1008 	str.w	r1, [sl, #8]
  403ffc:	6871      	ldr	r1, [r6, #4]
  403ffe:	f8ca 100c 	str.w	r1, [sl, #12]
  404002:	2a1b      	cmp	r2, #27
  404004:	f200 80af 	bhi.w	404166 <_realloc_r+0x3b2>
  404008:	3608      	adds	r6, #8
  40400a:	f10a 0210 	add.w	r2, sl, #16
  40400e:	6831      	ldr	r1, [r6, #0]
  404010:	6011      	str	r1, [r2, #0]
  404012:	6871      	ldr	r1, [r6, #4]
  404014:	6051      	str	r1, [r2, #4]
  404016:	68b1      	ldr	r1, [r6, #8]
  404018:	6091      	str	r1, [r2, #8]
  40401a:	eb0a 0105 	add.w	r1, sl, r5
  40401e:	ebc5 020b 	rsb	r2, r5, fp
  404022:	f042 0201 	orr.w	r2, r2, #1
  404026:	6099      	str	r1, [r3, #8]
  404028:	604a      	str	r2, [r1, #4]
  40402a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40402e:	f003 0301 	and.w	r3, r3, #1
  404032:	431d      	orrs	r5, r3
  404034:	4648      	mov	r0, r9
  404036:	f8ca 5004 	str.w	r5, [sl, #4]
  40403a:	f7ff feb9 	bl	403db0 <__malloc_unlock>
  40403e:	4638      	mov	r0, r7
  404040:	e75c      	b.n	403efc <_realloc_r+0x148>
  404042:	6833      	ldr	r3, [r6, #0]
  404044:	6003      	str	r3, [r0, #0]
  404046:	6873      	ldr	r3, [r6, #4]
  404048:	6043      	str	r3, [r0, #4]
  40404a:	2a1b      	cmp	r2, #27
  40404c:	d827      	bhi.n	40409e <_realloc_r+0x2ea>
  40404e:	f100 0308 	add.w	r3, r0, #8
  404052:	f106 0208 	add.w	r2, r6, #8
  404056:	e6f2      	b.n	403e3e <_realloc_r+0x8a>
  404058:	463b      	mov	r3, r7
  40405a:	6832      	ldr	r2, [r6, #0]
  40405c:	601a      	str	r2, [r3, #0]
  40405e:	6872      	ldr	r2, [r6, #4]
  404060:	605a      	str	r2, [r3, #4]
  404062:	68b2      	ldr	r2, [r6, #8]
  404064:	609a      	str	r2, [r3, #8]
  404066:	463e      	mov	r6, r7
  404068:	4674      	mov	r4, lr
  40406a:	46d0      	mov	r8, sl
  40406c:	e733      	b.n	403ed6 <_realloc_r+0x122>
  40406e:	eb08 0105 	add.w	r1, r8, r5
  404072:	ebc5 0b0b 	rsb	fp, r5, fp
  404076:	f04b 0201 	orr.w	r2, fp, #1
  40407a:	6099      	str	r1, [r3, #8]
  40407c:	604a      	str	r2, [r1, #4]
  40407e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  404082:	f003 0301 	and.w	r3, r3, #1
  404086:	431d      	orrs	r5, r3
  404088:	4648      	mov	r0, r9
  40408a:	f846 5c04 	str.w	r5, [r6, #-4]
  40408e:	f7ff fe8f 	bl	403db0 <__malloc_unlock>
  404092:	4630      	mov	r0, r6
  404094:	e732      	b.n	403efc <_realloc_r+0x148>
  404096:	4631      	mov	r1, r6
  404098:	f7ff fe24 	bl	403ce4 <memmove>
  40409c:	e6d5      	b.n	403e4a <_realloc_r+0x96>
  40409e:	68b3      	ldr	r3, [r6, #8]
  4040a0:	6083      	str	r3, [r0, #8]
  4040a2:	68f3      	ldr	r3, [r6, #12]
  4040a4:	60c3      	str	r3, [r0, #12]
  4040a6:	2a24      	cmp	r2, #36	; 0x24
  4040a8:	d028      	beq.n	4040fc <_realloc_r+0x348>
  4040aa:	f100 0310 	add.w	r3, r0, #16
  4040ae:	f106 0210 	add.w	r2, r6, #16
  4040b2:	e6c4      	b.n	403e3e <_realloc_r+0x8a>
  4040b4:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4040b8:	f023 0303 	bic.w	r3, r3, #3
  4040bc:	441c      	add	r4, r3
  4040be:	e70a      	b.n	403ed6 <_realloc_r+0x122>
  4040c0:	4631      	mov	r1, r6
  4040c2:	4638      	mov	r0, r7
  4040c4:	4674      	mov	r4, lr
  4040c6:	46d0      	mov	r8, sl
  4040c8:	f7ff fe0c 	bl	403ce4 <memmove>
  4040cc:	463e      	mov	r6, r7
  4040ce:	e702      	b.n	403ed6 <_realloc_r+0x122>
  4040d0:	463a      	mov	r2, r7
  4040d2:	e6f7      	b.n	403ec4 <_realloc_r+0x110>
  4040d4:	4631      	mov	r1, r6
  4040d6:	4638      	mov	r0, r7
  4040d8:	461c      	mov	r4, r3
  4040da:	46d0      	mov	r8, sl
  4040dc:	f7ff fe02 	bl	403ce4 <memmove>
  4040e0:	463e      	mov	r6, r7
  4040e2:	e6f8      	b.n	403ed6 <_realloc_r+0x122>
  4040e4:	68b3      	ldr	r3, [r6, #8]
  4040e6:	f8ca 3010 	str.w	r3, [sl, #16]
  4040ea:	68f3      	ldr	r3, [r6, #12]
  4040ec:	f8ca 3014 	str.w	r3, [sl, #20]
  4040f0:	2a24      	cmp	r2, #36	; 0x24
  4040f2:	d01b      	beq.n	40412c <_realloc_r+0x378>
  4040f4:	3610      	adds	r6, #16
  4040f6:	f10a 0318 	add.w	r3, sl, #24
  4040fa:	e7ae      	b.n	40405a <_realloc_r+0x2a6>
  4040fc:	6933      	ldr	r3, [r6, #16]
  4040fe:	6103      	str	r3, [r0, #16]
  404100:	6973      	ldr	r3, [r6, #20]
  404102:	6143      	str	r3, [r0, #20]
  404104:	f106 0218 	add.w	r2, r6, #24
  404108:	f100 0318 	add.w	r3, r0, #24
  40410c:	e697      	b.n	403e3e <_realloc_r+0x8a>
  40410e:	bf00      	nop
  404110:	20400470 	.word	0x20400470
  404114:	68b1      	ldr	r1, [r6, #8]
  404116:	f8ca 1010 	str.w	r1, [sl, #16]
  40411a:	68f1      	ldr	r1, [r6, #12]
  40411c:	f8ca 1014 	str.w	r1, [sl, #20]
  404120:	2a24      	cmp	r2, #36	; 0x24
  404122:	d00f      	beq.n	404144 <_realloc_r+0x390>
  404124:	3610      	adds	r6, #16
  404126:	f10a 0218 	add.w	r2, sl, #24
  40412a:	e6cb      	b.n	403ec4 <_realloc_r+0x110>
  40412c:	6933      	ldr	r3, [r6, #16]
  40412e:	f8ca 3018 	str.w	r3, [sl, #24]
  404132:	6973      	ldr	r3, [r6, #20]
  404134:	f8ca 301c 	str.w	r3, [sl, #28]
  404138:	3618      	adds	r6, #24
  40413a:	f10a 0320 	add.w	r3, sl, #32
  40413e:	e78c      	b.n	40405a <_realloc_r+0x2a6>
  404140:	463a      	mov	r2, r7
  404142:	e764      	b.n	40400e <_realloc_r+0x25a>
  404144:	6932      	ldr	r2, [r6, #16]
  404146:	f8ca 2018 	str.w	r2, [sl, #24]
  40414a:	6972      	ldr	r2, [r6, #20]
  40414c:	f8ca 201c 	str.w	r2, [sl, #28]
  404150:	3618      	adds	r6, #24
  404152:	f10a 0220 	add.w	r2, sl, #32
  404156:	e6b5      	b.n	403ec4 <_realloc_r+0x110>
  404158:	4631      	mov	r1, r6
  40415a:	4638      	mov	r0, r7
  40415c:	9301      	str	r3, [sp, #4]
  40415e:	f7ff fdc1 	bl	403ce4 <memmove>
  404162:	9b01      	ldr	r3, [sp, #4]
  404164:	e759      	b.n	40401a <_realloc_r+0x266>
  404166:	68b1      	ldr	r1, [r6, #8]
  404168:	f8ca 1010 	str.w	r1, [sl, #16]
  40416c:	68f1      	ldr	r1, [r6, #12]
  40416e:	f8ca 1014 	str.w	r1, [sl, #20]
  404172:	2a24      	cmp	r2, #36	; 0x24
  404174:	d003      	beq.n	40417e <_realloc_r+0x3ca>
  404176:	3610      	adds	r6, #16
  404178:	f10a 0218 	add.w	r2, sl, #24
  40417c:	e747      	b.n	40400e <_realloc_r+0x25a>
  40417e:	6932      	ldr	r2, [r6, #16]
  404180:	f8ca 2018 	str.w	r2, [sl, #24]
  404184:	6972      	ldr	r2, [r6, #20]
  404186:	f8ca 201c 	str.w	r2, [sl, #28]
  40418a:	3618      	adds	r6, #24
  40418c:	f10a 0220 	add.w	r2, sl, #32
  404190:	e73d      	b.n	40400e <_realloc_r+0x25a>
  404192:	bf00      	nop

00404194 <_sbrk_r>:
  404194:	b538      	push	{r3, r4, r5, lr}
  404196:	4c07      	ldr	r4, [pc, #28]	; (4041b4 <_sbrk_r+0x20>)
  404198:	2300      	movs	r3, #0
  40419a:	4605      	mov	r5, r0
  40419c:	4608      	mov	r0, r1
  40419e:	6023      	str	r3, [r4, #0]
  4041a0:	f7fd f8a2 	bl	4012e8 <_sbrk>
  4041a4:	1c43      	adds	r3, r0, #1
  4041a6:	d000      	beq.n	4041aa <_sbrk_r+0x16>
  4041a8:	bd38      	pop	{r3, r4, r5, pc}
  4041aa:	6823      	ldr	r3, [r4, #0]
  4041ac:	2b00      	cmp	r3, #0
  4041ae:	d0fb      	beq.n	4041a8 <_sbrk_r+0x14>
  4041b0:	602b      	str	r3, [r5, #0]
  4041b2:	bd38      	pop	{r3, r4, r5, pc}
  4041b4:	204009ec 	.word	0x204009ec

004041b8 <__sread>:
  4041b8:	b510      	push	{r4, lr}
  4041ba:	460c      	mov	r4, r1
  4041bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4041c0:	f000 f9c4 	bl	40454c <_read_r>
  4041c4:	2800      	cmp	r0, #0
  4041c6:	db03      	blt.n	4041d0 <__sread+0x18>
  4041c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4041ca:	4403      	add	r3, r0
  4041cc:	6523      	str	r3, [r4, #80]	; 0x50
  4041ce:	bd10      	pop	{r4, pc}
  4041d0:	89a3      	ldrh	r3, [r4, #12]
  4041d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4041d6:	81a3      	strh	r3, [r4, #12]
  4041d8:	bd10      	pop	{r4, pc}
  4041da:	bf00      	nop

004041dc <__swrite>:
  4041dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4041e0:	4616      	mov	r6, r2
  4041e2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4041e6:	461f      	mov	r7, r3
  4041e8:	05d3      	lsls	r3, r2, #23
  4041ea:	460c      	mov	r4, r1
  4041ec:	4605      	mov	r5, r0
  4041ee:	d507      	bpl.n	404200 <__swrite+0x24>
  4041f0:	2200      	movs	r2, #0
  4041f2:	2302      	movs	r3, #2
  4041f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4041f8:	f000 f992 	bl	404520 <_lseek_r>
  4041fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404204:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404208:	81a2      	strh	r2, [r4, #12]
  40420a:	463b      	mov	r3, r7
  40420c:	4632      	mov	r2, r6
  40420e:	4628      	mov	r0, r5
  404210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404214:	f000 b8a2 	b.w	40435c <_write_r>

00404218 <__sseek>:
  404218:	b510      	push	{r4, lr}
  40421a:	460c      	mov	r4, r1
  40421c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404220:	f000 f97e 	bl	404520 <_lseek_r>
  404224:	89a3      	ldrh	r3, [r4, #12]
  404226:	1c42      	adds	r2, r0, #1
  404228:	bf0e      	itee	eq
  40422a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40422e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404232:	6520      	strne	r0, [r4, #80]	; 0x50
  404234:	81a3      	strh	r3, [r4, #12]
  404236:	bd10      	pop	{r4, pc}

00404238 <__sclose>:
  404238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40423c:	f000 b8f6 	b.w	40442c <_close_r>

00404240 <__swbuf_r>:
  404240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404242:	460e      	mov	r6, r1
  404244:	4614      	mov	r4, r2
  404246:	4607      	mov	r7, r0
  404248:	b110      	cbz	r0, 404250 <__swbuf_r+0x10>
  40424a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40424c:	2b00      	cmp	r3, #0
  40424e:	d04a      	beq.n	4042e6 <__swbuf_r+0xa6>
  404250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404254:	69a3      	ldr	r3, [r4, #24]
  404256:	60a3      	str	r3, [r4, #8]
  404258:	b291      	uxth	r1, r2
  40425a:	0708      	lsls	r0, r1, #28
  40425c:	d538      	bpl.n	4042d0 <__swbuf_r+0x90>
  40425e:	6923      	ldr	r3, [r4, #16]
  404260:	2b00      	cmp	r3, #0
  404262:	d035      	beq.n	4042d0 <__swbuf_r+0x90>
  404264:	0489      	lsls	r1, r1, #18
  404266:	b2f5      	uxtb	r5, r6
  404268:	d515      	bpl.n	404296 <__swbuf_r+0x56>
  40426a:	6822      	ldr	r2, [r4, #0]
  40426c:	6961      	ldr	r1, [r4, #20]
  40426e:	1ad3      	subs	r3, r2, r3
  404270:	428b      	cmp	r3, r1
  404272:	da1c      	bge.n	4042ae <__swbuf_r+0x6e>
  404274:	3301      	adds	r3, #1
  404276:	68a1      	ldr	r1, [r4, #8]
  404278:	1c50      	adds	r0, r2, #1
  40427a:	3901      	subs	r1, #1
  40427c:	60a1      	str	r1, [r4, #8]
  40427e:	6020      	str	r0, [r4, #0]
  404280:	7016      	strb	r6, [r2, #0]
  404282:	6962      	ldr	r2, [r4, #20]
  404284:	429a      	cmp	r2, r3
  404286:	d01a      	beq.n	4042be <__swbuf_r+0x7e>
  404288:	89a3      	ldrh	r3, [r4, #12]
  40428a:	07db      	lsls	r3, r3, #31
  40428c:	d501      	bpl.n	404292 <__swbuf_r+0x52>
  40428e:	2d0a      	cmp	r5, #10
  404290:	d015      	beq.n	4042be <__swbuf_r+0x7e>
  404292:	4628      	mov	r0, r5
  404294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404296:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40429c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4042a0:	81a2      	strh	r2, [r4, #12]
  4042a2:	6822      	ldr	r2, [r4, #0]
  4042a4:	6661      	str	r1, [r4, #100]	; 0x64
  4042a6:	6961      	ldr	r1, [r4, #20]
  4042a8:	1ad3      	subs	r3, r2, r3
  4042aa:	428b      	cmp	r3, r1
  4042ac:	dbe2      	blt.n	404274 <__swbuf_r+0x34>
  4042ae:	4621      	mov	r1, r4
  4042b0:	4638      	mov	r0, r7
  4042b2:	f7fe fcfb 	bl	402cac <_fflush_r>
  4042b6:	b940      	cbnz	r0, 4042ca <__swbuf_r+0x8a>
  4042b8:	6822      	ldr	r2, [r4, #0]
  4042ba:	2301      	movs	r3, #1
  4042bc:	e7db      	b.n	404276 <__swbuf_r+0x36>
  4042be:	4621      	mov	r1, r4
  4042c0:	4638      	mov	r0, r7
  4042c2:	f7fe fcf3 	bl	402cac <_fflush_r>
  4042c6:	2800      	cmp	r0, #0
  4042c8:	d0e3      	beq.n	404292 <__swbuf_r+0x52>
  4042ca:	f04f 30ff 	mov.w	r0, #4294967295
  4042ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042d0:	4621      	mov	r1, r4
  4042d2:	4638      	mov	r0, r7
  4042d4:	f7fe fbd2 	bl	402a7c <__swsetup_r>
  4042d8:	2800      	cmp	r0, #0
  4042da:	d1f6      	bne.n	4042ca <__swbuf_r+0x8a>
  4042dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4042e0:	6923      	ldr	r3, [r4, #16]
  4042e2:	b291      	uxth	r1, r2
  4042e4:	e7be      	b.n	404264 <__swbuf_r+0x24>
  4042e6:	f7fe fd75 	bl	402dd4 <__sinit>
  4042ea:	e7b1      	b.n	404250 <__swbuf_r+0x10>

004042ec <_wcrtomb_r>:
  4042ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4042f0:	4605      	mov	r5, r0
  4042f2:	b086      	sub	sp, #24
  4042f4:	461e      	mov	r6, r3
  4042f6:	460c      	mov	r4, r1
  4042f8:	b1a1      	cbz	r1, 404324 <_wcrtomb_r+0x38>
  4042fa:	4b10      	ldr	r3, [pc, #64]	; (40433c <_wcrtomb_r+0x50>)
  4042fc:	4617      	mov	r7, r2
  4042fe:	f8d3 8000 	ldr.w	r8, [r3]
  404302:	f7ff f8c5 	bl	403490 <__locale_charset>
  404306:	9600      	str	r6, [sp, #0]
  404308:	4603      	mov	r3, r0
  40430a:	463a      	mov	r2, r7
  40430c:	4621      	mov	r1, r4
  40430e:	4628      	mov	r0, r5
  404310:	47c0      	blx	r8
  404312:	1c43      	adds	r3, r0, #1
  404314:	d103      	bne.n	40431e <_wcrtomb_r+0x32>
  404316:	2200      	movs	r2, #0
  404318:	238a      	movs	r3, #138	; 0x8a
  40431a:	6032      	str	r2, [r6, #0]
  40431c:	602b      	str	r3, [r5, #0]
  40431e:	b006      	add	sp, #24
  404320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404324:	4b05      	ldr	r3, [pc, #20]	; (40433c <_wcrtomb_r+0x50>)
  404326:	681f      	ldr	r7, [r3, #0]
  404328:	f7ff f8b2 	bl	403490 <__locale_charset>
  40432c:	9600      	str	r6, [sp, #0]
  40432e:	4603      	mov	r3, r0
  404330:	4622      	mov	r2, r4
  404332:	a903      	add	r1, sp, #12
  404334:	4628      	mov	r0, r5
  404336:	47b8      	blx	r7
  404338:	e7eb      	b.n	404312 <_wcrtomb_r+0x26>
  40433a:	bf00      	nop
  40433c:	20400880 	.word	0x20400880

00404340 <__ascii_wctomb>:
  404340:	b121      	cbz	r1, 40434c <__ascii_wctomb+0xc>
  404342:	2aff      	cmp	r2, #255	; 0xff
  404344:	d804      	bhi.n	404350 <__ascii_wctomb+0x10>
  404346:	700a      	strb	r2, [r1, #0]
  404348:	2001      	movs	r0, #1
  40434a:	4770      	bx	lr
  40434c:	4608      	mov	r0, r1
  40434e:	4770      	bx	lr
  404350:	238a      	movs	r3, #138	; 0x8a
  404352:	6003      	str	r3, [r0, #0]
  404354:	f04f 30ff 	mov.w	r0, #4294967295
  404358:	4770      	bx	lr
  40435a:	bf00      	nop

0040435c <_write_r>:
  40435c:	b570      	push	{r4, r5, r6, lr}
  40435e:	460d      	mov	r5, r1
  404360:	4c08      	ldr	r4, [pc, #32]	; (404384 <_write_r+0x28>)
  404362:	4611      	mov	r1, r2
  404364:	4606      	mov	r6, r0
  404366:	461a      	mov	r2, r3
  404368:	4628      	mov	r0, r5
  40436a:	2300      	movs	r3, #0
  40436c:	6023      	str	r3, [r4, #0]
  40436e:	f7fc fa59 	bl	400824 <_write>
  404372:	1c43      	adds	r3, r0, #1
  404374:	d000      	beq.n	404378 <_write_r+0x1c>
  404376:	bd70      	pop	{r4, r5, r6, pc}
  404378:	6823      	ldr	r3, [r4, #0]
  40437a:	2b00      	cmp	r3, #0
  40437c:	d0fb      	beq.n	404376 <_write_r+0x1a>
  40437e:	6033      	str	r3, [r6, #0]
  404380:	bd70      	pop	{r4, r5, r6, pc}
  404382:	bf00      	nop
  404384:	204009ec 	.word	0x204009ec

00404388 <__register_exitproc>:
  404388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40438c:	4c25      	ldr	r4, [pc, #148]	; (404424 <__register_exitproc+0x9c>)
  40438e:	6825      	ldr	r5, [r4, #0]
  404390:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  404394:	4606      	mov	r6, r0
  404396:	4688      	mov	r8, r1
  404398:	4692      	mov	sl, r2
  40439a:	4699      	mov	r9, r3
  40439c:	b3c4      	cbz	r4, 404410 <__register_exitproc+0x88>
  40439e:	6860      	ldr	r0, [r4, #4]
  4043a0:	281f      	cmp	r0, #31
  4043a2:	dc17      	bgt.n	4043d4 <__register_exitproc+0x4c>
  4043a4:	1c43      	adds	r3, r0, #1
  4043a6:	b176      	cbz	r6, 4043c6 <__register_exitproc+0x3e>
  4043a8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4043ac:	2201      	movs	r2, #1
  4043ae:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4043b2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4043b6:	4082      	lsls	r2, r0
  4043b8:	4311      	orrs	r1, r2
  4043ba:	2e02      	cmp	r6, #2
  4043bc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4043c0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4043c4:	d01e      	beq.n	404404 <__register_exitproc+0x7c>
  4043c6:	3002      	adds	r0, #2
  4043c8:	6063      	str	r3, [r4, #4]
  4043ca:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4043ce:	2000      	movs	r0, #0
  4043d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4043d4:	4b14      	ldr	r3, [pc, #80]	; (404428 <__register_exitproc+0xa0>)
  4043d6:	b303      	cbz	r3, 40441a <__register_exitproc+0x92>
  4043d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4043dc:	f7ff f8d6 	bl	40358c <malloc>
  4043e0:	4604      	mov	r4, r0
  4043e2:	b1d0      	cbz	r0, 40441a <__register_exitproc+0x92>
  4043e4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4043e8:	2700      	movs	r7, #0
  4043ea:	e880 0088 	stmia.w	r0, {r3, r7}
  4043ee:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4043f2:	4638      	mov	r0, r7
  4043f4:	2301      	movs	r3, #1
  4043f6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4043fa:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4043fe:	2e00      	cmp	r6, #0
  404400:	d0e1      	beq.n	4043c6 <__register_exitproc+0x3e>
  404402:	e7d1      	b.n	4043a8 <__register_exitproc+0x20>
  404404:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  404408:	430a      	orrs	r2, r1
  40440a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40440e:	e7da      	b.n	4043c6 <__register_exitproc+0x3e>
  404410:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  404414:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404418:	e7c1      	b.n	40439e <__register_exitproc+0x16>
  40441a:	f04f 30ff 	mov.w	r0, #4294967295
  40441e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404422:	bf00      	nop
  404424:	00404948 	.word	0x00404948
  404428:	0040358d 	.word	0x0040358d

0040442c <_close_r>:
  40442c:	b538      	push	{r3, r4, r5, lr}
  40442e:	4c07      	ldr	r4, [pc, #28]	; (40444c <_close_r+0x20>)
  404430:	2300      	movs	r3, #0
  404432:	4605      	mov	r5, r0
  404434:	4608      	mov	r0, r1
  404436:	6023      	str	r3, [r4, #0]
  404438:	f7fc ff70 	bl	40131c <_close>
  40443c:	1c43      	adds	r3, r0, #1
  40443e:	d000      	beq.n	404442 <_close_r+0x16>
  404440:	bd38      	pop	{r3, r4, r5, pc}
  404442:	6823      	ldr	r3, [r4, #0]
  404444:	2b00      	cmp	r3, #0
  404446:	d0fb      	beq.n	404440 <_close_r+0x14>
  404448:	602b      	str	r3, [r5, #0]
  40444a:	bd38      	pop	{r3, r4, r5, pc}
  40444c:	204009ec 	.word	0x204009ec

00404450 <_fclose_r>:
  404450:	2900      	cmp	r1, #0
  404452:	d03d      	beq.n	4044d0 <_fclose_r+0x80>
  404454:	b570      	push	{r4, r5, r6, lr}
  404456:	4605      	mov	r5, r0
  404458:	460c      	mov	r4, r1
  40445a:	b108      	cbz	r0, 404460 <_fclose_r+0x10>
  40445c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40445e:	b37b      	cbz	r3, 4044c0 <_fclose_r+0x70>
  404460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404464:	b90b      	cbnz	r3, 40446a <_fclose_r+0x1a>
  404466:	2000      	movs	r0, #0
  404468:	bd70      	pop	{r4, r5, r6, pc}
  40446a:	4621      	mov	r1, r4
  40446c:	4628      	mov	r0, r5
  40446e:	f7fe fb79 	bl	402b64 <__sflush_r>
  404472:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404474:	4606      	mov	r6, r0
  404476:	b133      	cbz	r3, 404486 <_fclose_r+0x36>
  404478:	69e1      	ldr	r1, [r4, #28]
  40447a:	4628      	mov	r0, r5
  40447c:	4798      	blx	r3
  40447e:	2800      	cmp	r0, #0
  404480:	bfb8      	it	lt
  404482:	f04f 36ff 	movlt.w	r6, #4294967295
  404486:	89a3      	ldrh	r3, [r4, #12]
  404488:	061b      	lsls	r3, r3, #24
  40448a:	d41c      	bmi.n	4044c6 <_fclose_r+0x76>
  40448c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40448e:	b141      	cbz	r1, 4044a2 <_fclose_r+0x52>
  404490:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404494:	4299      	cmp	r1, r3
  404496:	d002      	beq.n	40449e <_fclose_r+0x4e>
  404498:	4628      	mov	r0, r5
  40449a:	f7fe fd65 	bl	402f68 <_free_r>
  40449e:	2300      	movs	r3, #0
  4044a0:	6323      	str	r3, [r4, #48]	; 0x30
  4044a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4044a4:	b121      	cbz	r1, 4044b0 <_fclose_r+0x60>
  4044a6:	4628      	mov	r0, r5
  4044a8:	f7fe fd5e 	bl	402f68 <_free_r>
  4044ac:	2300      	movs	r3, #0
  4044ae:	6463      	str	r3, [r4, #68]	; 0x44
  4044b0:	f7fe fc96 	bl	402de0 <__sfp_lock_acquire>
  4044b4:	2300      	movs	r3, #0
  4044b6:	81a3      	strh	r3, [r4, #12]
  4044b8:	f7fe fc94 	bl	402de4 <__sfp_lock_release>
  4044bc:	4630      	mov	r0, r6
  4044be:	bd70      	pop	{r4, r5, r6, pc}
  4044c0:	f7fe fc88 	bl	402dd4 <__sinit>
  4044c4:	e7cc      	b.n	404460 <_fclose_r+0x10>
  4044c6:	6921      	ldr	r1, [r4, #16]
  4044c8:	4628      	mov	r0, r5
  4044ca:	f7fe fd4d 	bl	402f68 <_free_r>
  4044ce:	e7dd      	b.n	40448c <_fclose_r+0x3c>
  4044d0:	2000      	movs	r0, #0
  4044d2:	4770      	bx	lr

004044d4 <_fstat_r>:
  4044d4:	b538      	push	{r3, r4, r5, lr}
  4044d6:	460b      	mov	r3, r1
  4044d8:	4c07      	ldr	r4, [pc, #28]	; (4044f8 <_fstat_r+0x24>)
  4044da:	4605      	mov	r5, r0
  4044dc:	4611      	mov	r1, r2
  4044de:	4618      	mov	r0, r3
  4044e0:	2300      	movs	r3, #0
  4044e2:	6023      	str	r3, [r4, #0]
  4044e4:	f7fc ff1e 	bl	401324 <_fstat>
  4044e8:	1c43      	adds	r3, r0, #1
  4044ea:	d000      	beq.n	4044ee <_fstat_r+0x1a>
  4044ec:	bd38      	pop	{r3, r4, r5, pc}
  4044ee:	6823      	ldr	r3, [r4, #0]
  4044f0:	2b00      	cmp	r3, #0
  4044f2:	d0fb      	beq.n	4044ec <_fstat_r+0x18>
  4044f4:	602b      	str	r3, [r5, #0]
  4044f6:	bd38      	pop	{r3, r4, r5, pc}
  4044f8:	204009ec 	.word	0x204009ec

004044fc <_isatty_r>:
  4044fc:	b538      	push	{r3, r4, r5, lr}
  4044fe:	4c07      	ldr	r4, [pc, #28]	; (40451c <_isatty_r+0x20>)
  404500:	2300      	movs	r3, #0
  404502:	4605      	mov	r5, r0
  404504:	4608      	mov	r0, r1
  404506:	6023      	str	r3, [r4, #0]
  404508:	f7fc ff12 	bl	401330 <_isatty>
  40450c:	1c43      	adds	r3, r0, #1
  40450e:	d000      	beq.n	404512 <_isatty_r+0x16>
  404510:	bd38      	pop	{r3, r4, r5, pc}
  404512:	6823      	ldr	r3, [r4, #0]
  404514:	2b00      	cmp	r3, #0
  404516:	d0fb      	beq.n	404510 <_isatty_r+0x14>
  404518:	602b      	str	r3, [r5, #0]
  40451a:	bd38      	pop	{r3, r4, r5, pc}
  40451c:	204009ec 	.word	0x204009ec

00404520 <_lseek_r>:
  404520:	b570      	push	{r4, r5, r6, lr}
  404522:	460d      	mov	r5, r1
  404524:	4c08      	ldr	r4, [pc, #32]	; (404548 <_lseek_r+0x28>)
  404526:	4611      	mov	r1, r2
  404528:	4606      	mov	r6, r0
  40452a:	461a      	mov	r2, r3
  40452c:	4628      	mov	r0, r5
  40452e:	2300      	movs	r3, #0
  404530:	6023      	str	r3, [r4, #0]
  404532:	f7fc feff 	bl	401334 <_lseek>
  404536:	1c43      	adds	r3, r0, #1
  404538:	d000      	beq.n	40453c <_lseek_r+0x1c>
  40453a:	bd70      	pop	{r4, r5, r6, pc}
  40453c:	6823      	ldr	r3, [r4, #0]
  40453e:	2b00      	cmp	r3, #0
  404540:	d0fb      	beq.n	40453a <_lseek_r+0x1a>
  404542:	6033      	str	r3, [r6, #0]
  404544:	bd70      	pop	{r4, r5, r6, pc}
  404546:	bf00      	nop
  404548:	204009ec 	.word	0x204009ec

0040454c <_read_r>:
  40454c:	b570      	push	{r4, r5, r6, lr}
  40454e:	460d      	mov	r5, r1
  404550:	4c08      	ldr	r4, [pc, #32]	; (404574 <_read_r+0x28>)
  404552:	4611      	mov	r1, r2
  404554:	4606      	mov	r6, r0
  404556:	461a      	mov	r2, r3
  404558:	4628      	mov	r0, r5
  40455a:	2300      	movs	r3, #0
  40455c:	6023      	str	r3, [r4, #0]
  40455e:	f7fc f943 	bl	4007e8 <_read>
  404562:	1c43      	adds	r3, r0, #1
  404564:	d000      	beq.n	404568 <_read_r+0x1c>
  404566:	bd70      	pop	{r4, r5, r6, pc}
  404568:	6823      	ldr	r3, [r4, #0]
  40456a:	2b00      	cmp	r3, #0
  40456c:	d0fb      	beq.n	404566 <_read_r+0x1a>
  40456e:	6033      	str	r3, [r6, #0]
  404570:	bd70      	pop	{r4, r5, r6, pc}
  404572:	bf00      	nop
  404574:	204009ec 	.word	0x204009ec

00404578 <__aeabi_uldivmod>:
  404578:	b953      	cbnz	r3, 404590 <__aeabi_uldivmod+0x18>
  40457a:	b94a      	cbnz	r2, 404590 <__aeabi_uldivmod+0x18>
  40457c:	2900      	cmp	r1, #0
  40457e:	bf08      	it	eq
  404580:	2800      	cmpeq	r0, #0
  404582:	bf1c      	itt	ne
  404584:	f04f 31ff 	movne.w	r1, #4294967295
  404588:	f04f 30ff 	movne.w	r0, #4294967295
  40458c:	f000 b97e 	b.w	40488c <__aeabi_idiv0>
  404590:	f1ad 0c08 	sub.w	ip, sp, #8
  404594:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404598:	f000 f806 	bl	4045a8 <__udivmoddi4>
  40459c:	f8dd e004 	ldr.w	lr, [sp, #4]
  4045a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4045a4:	b004      	add	sp, #16
  4045a6:	4770      	bx	lr

004045a8 <__udivmoddi4>:
  4045a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4045ac:	468c      	mov	ip, r1
  4045ae:	460e      	mov	r6, r1
  4045b0:	4604      	mov	r4, r0
  4045b2:	9d08      	ldr	r5, [sp, #32]
  4045b4:	2b00      	cmp	r3, #0
  4045b6:	d150      	bne.n	40465a <__udivmoddi4+0xb2>
  4045b8:	428a      	cmp	r2, r1
  4045ba:	4617      	mov	r7, r2
  4045bc:	d96c      	bls.n	404698 <__udivmoddi4+0xf0>
  4045be:	fab2 fe82 	clz	lr, r2
  4045c2:	f1be 0f00 	cmp.w	lr, #0
  4045c6:	d00b      	beq.n	4045e0 <__udivmoddi4+0x38>
  4045c8:	f1ce 0420 	rsb	r4, lr, #32
  4045cc:	fa20 f404 	lsr.w	r4, r0, r4
  4045d0:	fa01 f60e 	lsl.w	r6, r1, lr
  4045d4:	ea44 0c06 	orr.w	ip, r4, r6
  4045d8:	fa02 f70e 	lsl.w	r7, r2, lr
  4045dc:	fa00 f40e 	lsl.w	r4, r0, lr
  4045e0:	ea4f 4917 	mov.w	r9, r7, lsr #16
  4045e4:	0c22      	lsrs	r2, r4, #16
  4045e6:	fbbc f0f9 	udiv	r0, ip, r9
  4045ea:	fa1f f887 	uxth.w	r8, r7
  4045ee:	fb09 c610 	mls	r6, r9, r0, ip
  4045f2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4045f6:	fb00 f308 	mul.w	r3, r0, r8
  4045fa:	42b3      	cmp	r3, r6
  4045fc:	d909      	bls.n	404612 <__udivmoddi4+0x6a>
  4045fe:	19f6      	adds	r6, r6, r7
  404600:	f100 32ff 	add.w	r2, r0, #4294967295
  404604:	f080 8122 	bcs.w	40484c <__udivmoddi4+0x2a4>
  404608:	42b3      	cmp	r3, r6
  40460a:	f240 811f 	bls.w	40484c <__udivmoddi4+0x2a4>
  40460e:	3802      	subs	r0, #2
  404610:	443e      	add	r6, r7
  404612:	1af6      	subs	r6, r6, r3
  404614:	b2a2      	uxth	r2, r4
  404616:	fbb6 f3f9 	udiv	r3, r6, r9
  40461a:	fb09 6613 	mls	r6, r9, r3, r6
  40461e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  404622:	fb03 f808 	mul.w	r8, r3, r8
  404626:	45a0      	cmp	r8, r4
  404628:	d909      	bls.n	40463e <__udivmoddi4+0x96>
  40462a:	19e4      	adds	r4, r4, r7
  40462c:	f103 32ff 	add.w	r2, r3, #4294967295
  404630:	f080 810a 	bcs.w	404848 <__udivmoddi4+0x2a0>
  404634:	45a0      	cmp	r8, r4
  404636:	f240 8107 	bls.w	404848 <__udivmoddi4+0x2a0>
  40463a:	3b02      	subs	r3, #2
  40463c:	443c      	add	r4, r7
  40463e:	ebc8 0404 	rsb	r4, r8, r4
  404642:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  404646:	2100      	movs	r1, #0
  404648:	2d00      	cmp	r5, #0
  40464a:	d062      	beq.n	404712 <__udivmoddi4+0x16a>
  40464c:	fa24 f40e 	lsr.w	r4, r4, lr
  404650:	2300      	movs	r3, #0
  404652:	602c      	str	r4, [r5, #0]
  404654:	606b      	str	r3, [r5, #4]
  404656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40465a:	428b      	cmp	r3, r1
  40465c:	d907      	bls.n	40466e <__udivmoddi4+0xc6>
  40465e:	2d00      	cmp	r5, #0
  404660:	d055      	beq.n	40470e <__udivmoddi4+0x166>
  404662:	2100      	movs	r1, #0
  404664:	e885 0041 	stmia.w	r5, {r0, r6}
  404668:	4608      	mov	r0, r1
  40466a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40466e:	fab3 f183 	clz	r1, r3
  404672:	2900      	cmp	r1, #0
  404674:	f040 8090 	bne.w	404798 <__udivmoddi4+0x1f0>
  404678:	42b3      	cmp	r3, r6
  40467a:	d302      	bcc.n	404682 <__udivmoddi4+0xda>
  40467c:	4282      	cmp	r2, r0
  40467e:	f200 80f8 	bhi.w	404872 <__udivmoddi4+0x2ca>
  404682:	1a84      	subs	r4, r0, r2
  404684:	eb66 0603 	sbc.w	r6, r6, r3
  404688:	2001      	movs	r0, #1
  40468a:	46b4      	mov	ip, r6
  40468c:	2d00      	cmp	r5, #0
  40468e:	d040      	beq.n	404712 <__udivmoddi4+0x16a>
  404690:	e885 1010 	stmia.w	r5, {r4, ip}
  404694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404698:	b912      	cbnz	r2, 4046a0 <__udivmoddi4+0xf8>
  40469a:	2701      	movs	r7, #1
  40469c:	fbb7 f7f2 	udiv	r7, r7, r2
  4046a0:	fab7 fe87 	clz	lr, r7
  4046a4:	f1be 0f00 	cmp.w	lr, #0
  4046a8:	d135      	bne.n	404716 <__udivmoddi4+0x16e>
  4046aa:	1bf3      	subs	r3, r6, r7
  4046ac:	ea4f 4817 	mov.w	r8, r7, lsr #16
  4046b0:	fa1f fc87 	uxth.w	ip, r7
  4046b4:	2101      	movs	r1, #1
  4046b6:	fbb3 f0f8 	udiv	r0, r3, r8
  4046ba:	0c22      	lsrs	r2, r4, #16
  4046bc:	fb08 3610 	mls	r6, r8, r0, r3
  4046c0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4046c4:	fb0c f300 	mul.w	r3, ip, r0
  4046c8:	42b3      	cmp	r3, r6
  4046ca:	d907      	bls.n	4046dc <__udivmoddi4+0x134>
  4046cc:	19f6      	adds	r6, r6, r7
  4046ce:	f100 32ff 	add.w	r2, r0, #4294967295
  4046d2:	d202      	bcs.n	4046da <__udivmoddi4+0x132>
  4046d4:	42b3      	cmp	r3, r6
  4046d6:	f200 80ce 	bhi.w	404876 <__udivmoddi4+0x2ce>
  4046da:	4610      	mov	r0, r2
  4046dc:	1af6      	subs	r6, r6, r3
  4046de:	b2a2      	uxth	r2, r4
  4046e0:	fbb6 f3f8 	udiv	r3, r6, r8
  4046e4:	fb08 6613 	mls	r6, r8, r3, r6
  4046e8:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4046ec:	fb0c fc03 	mul.w	ip, ip, r3
  4046f0:	45a4      	cmp	ip, r4
  4046f2:	d907      	bls.n	404704 <__udivmoddi4+0x15c>
  4046f4:	19e4      	adds	r4, r4, r7
  4046f6:	f103 32ff 	add.w	r2, r3, #4294967295
  4046fa:	d202      	bcs.n	404702 <__udivmoddi4+0x15a>
  4046fc:	45a4      	cmp	ip, r4
  4046fe:	f200 80b5 	bhi.w	40486c <__udivmoddi4+0x2c4>
  404702:	4613      	mov	r3, r2
  404704:	ebcc 0404 	rsb	r4, ip, r4
  404708:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40470c:	e79c      	b.n	404648 <__udivmoddi4+0xa0>
  40470e:	4629      	mov	r1, r5
  404710:	4628      	mov	r0, r5
  404712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404716:	f1ce 0120 	rsb	r1, lr, #32
  40471a:	fa06 f30e 	lsl.w	r3, r6, lr
  40471e:	fa07 f70e 	lsl.w	r7, r7, lr
  404722:	fa20 f901 	lsr.w	r9, r0, r1
  404726:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40472a:	40ce      	lsrs	r6, r1
  40472c:	ea49 0903 	orr.w	r9, r9, r3
  404730:	fbb6 faf8 	udiv	sl, r6, r8
  404734:	ea4f 4419 	mov.w	r4, r9, lsr #16
  404738:	fb08 661a 	mls	r6, r8, sl, r6
  40473c:	fa1f fc87 	uxth.w	ip, r7
  404740:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  404744:	fb0a f20c 	mul.w	r2, sl, ip
  404748:	429a      	cmp	r2, r3
  40474a:	fa00 f40e 	lsl.w	r4, r0, lr
  40474e:	d90a      	bls.n	404766 <__udivmoddi4+0x1be>
  404750:	19db      	adds	r3, r3, r7
  404752:	f10a 31ff 	add.w	r1, sl, #4294967295
  404756:	f080 8087 	bcs.w	404868 <__udivmoddi4+0x2c0>
  40475a:	429a      	cmp	r2, r3
  40475c:	f240 8084 	bls.w	404868 <__udivmoddi4+0x2c0>
  404760:	f1aa 0a02 	sub.w	sl, sl, #2
  404764:	443b      	add	r3, r7
  404766:	1a9b      	subs	r3, r3, r2
  404768:	fa1f f989 	uxth.w	r9, r9
  40476c:	fbb3 f1f8 	udiv	r1, r3, r8
  404770:	fb08 3311 	mls	r3, r8, r1, r3
  404774:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  404778:	fb01 f60c 	mul.w	r6, r1, ip
  40477c:	429e      	cmp	r6, r3
  40477e:	d907      	bls.n	404790 <__udivmoddi4+0x1e8>
  404780:	19db      	adds	r3, r3, r7
  404782:	f101 32ff 	add.w	r2, r1, #4294967295
  404786:	d26b      	bcs.n	404860 <__udivmoddi4+0x2b8>
  404788:	429e      	cmp	r6, r3
  40478a:	d969      	bls.n	404860 <__udivmoddi4+0x2b8>
  40478c:	3902      	subs	r1, #2
  40478e:	443b      	add	r3, r7
  404790:	1b9b      	subs	r3, r3, r6
  404792:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  404796:	e78e      	b.n	4046b6 <__udivmoddi4+0x10e>
  404798:	f1c1 0e20 	rsb	lr, r1, #32
  40479c:	fa22 f40e 	lsr.w	r4, r2, lr
  4047a0:	408b      	lsls	r3, r1
  4047a2:	4323      	orrs	r3, r4
  4047a4:	fa20 f70e 	lsr.w	r7, r0, lr
  4047a8:	fa06 f401 	lsl.w	r4, r6, r1
  4047ac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4047b0:	fa26 f60e 	lsr.w	r6, r6, lr
  4047b4:	433c      	orrs	r4, r7
  4047b6:	fbb6 f9fc 	udiv	r9, r6, ip
  4047ba:	0c27      	lsrs	r7, r4, #16
  4047bc:	fb0c 6619 	mls	r6, ip, r9, r6
  4047c0:	fa1f f883 	uxth.w	r8, r3
  4047c4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  4047c8:	fb09 f708 	mul.w	r7, r9, r8
  4047cc:	42b7      	cmp	r7, r6
  4047ce:	fa02 f201 	lsl.w	r2, r2, r1
  4047d2:	fa00 fa01 	lsl.w	sl, r0, r1
  4047d6:	d908      	bls.n	4047ea <__udivmoddi4+0x242>
  4047d8:	18f6      	adds	r6, r6, r3
  4047da:	f109 30ff 	add.w	r0, r9, #4294967295
  4047de:	d241      	bcs.n	404864 <__udivmoddi4+0x2bc>
  4047e0:	42b7      	cmp	r7, r6
  4047e2:	d93f      	bls.n	404864 <__udivmoddi4+0x2bc>
  4047e4:	f1a9 0902 	sub.w	r9, r9, #2
  4047e8:	441e      	add	r6, r3
  4047ea:	1bf6      	subs	r6, r6, r7
  4047ec:	b2a0      	uxth	r0, r4
  4047ee:	fbb6 f4fc 	udiv	r4, r6, ip
  4047f2:	fb0c 6614 	mls	r6, ip, r4, r6
  4047f6:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  4047fa:	fb04 f808 	mul.w	r8, r4, r8
  4047fe:	45b8      	cmp	r8, r7
  404800:	d907      	bls.n	404812 <__udivmoddi4+0x26a>
  404802:	18ff      	adds	r7, r7, r3
  404804:	f104 30ff 	add.w	r0, r4, #4294967295
  404808:	d228      	bcs.n	40485c <__udivmoddi4+0x2b4>
  40480a:	45b8      	cmp	r8, r7
  40480c:	d926      	bls.n	40485c <__udivmoddi4+0x2b4>
  40480e:	3c02      	subs	r4, #2
  404810:	441f      	add	r7, r3
  404812:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  404816:	ebc8 0707 	rsb	r7, r8, r7
  40481a:	fba0 8902 	umull	r8, r9, r0, r2
  40481e:	454f      	cmp	r7, r9
  404820:	4644      	mov	r4, r8
  404822:	464e      	mov	r6, r9
  404824:	d314      	bcc.n	404850 <__udivmoddi4+0x2a8>
  404826:	d029      	beq.n	40487c <__udivmoddi4+0x2d4>
  404828:	b365      	cbz	r5, 404884 <__udivmoddi4+0x2dc>
  40482a:	ebba 0304 	subs.w	r3, sl, r4
  40482e:	eb67 0706 	sbc.w	r7, r7, r6
  404832:	fa07 fe0e 	lsl.w	lr, r7, lr
  404836:	40cb      	lsrs	r3, r1
  404838:	40cf      	lsrs	r7, r1
  40483a:	ea4e 0303 	orr.w	r3, lr, r3
  40483e:	e885 0088 	stmia.w	r5, {r3, r7}
  404842:	2100      	movs	r1, #0
  404844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404848:	4613      	mov	r3, r2
  40484a:	e6f8      	b.n	40463e <__udivmoddi4+0x96>
  40484c:	4610      	mov	r0, r2
  40484e:	e6e0      	b.n	404612 <__udivmoddi4+0x6a>
  404850:	ebb8 0402 	subs.w	r4, r8, r2
  404854:	eb69 0603 	sbc.w	r6, r9, r3
  404858:	3801      	subs	r0, #1
  40485a:	e7e5      	b.n	404828 <__udivmoddi4+0x280>
  40485c:	4604      	mov	r4, r0
  40485e:	e7d8      	b.n	404812 <__udivmoddi4+0x26a>
  404860:	4611      	mov	r1, r2
  404862:	e795      	b.n	404790 <__udivmoddi4+0x1e8>
  404864:	4681      	mov	r9, r0
  404866:	e7c0      	b.n	4047ea <__udivmoddi4+0x242>
  404868:	468a      	mov	sl, r1
  40486a:	e77c      	b.n	404766 <__udivmoddi4+0x1be>
  40486c:	3b02      	subs	r3, #2
  40486e:	443c      	add	r4, r7
  404870:	e748      	b.n	404704 <__udivmoddi4+0x15c>
  404872:	4608      	mov	r0, r1
  404874:	e70a      	b.n	40468c <__udivmoddi4+0xe4>
  404876:	3802      	subs	r0, #2
  404878:	443e      	add	r6, r7
  40487a:	e72f      	b.n	4046dc <__udivmoddi4+0x134>
  40487c:	45c2      	cmp	sl, r8
  40487e:	d3e7      	bcc.n	404850 <__udivmoddi4+0x2a8>
  404880:	463e      	mov	r6, r7
  404882:	e7d1      	b.n	404828 <__udivmoddi4+0x280>
  404884:	4629      	mov	r1, r5
  404886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40488a:	bf00      	nop

0040488c <__aeabi_idiv0>:
  40488c:	4770      	bx	lr
  40488e:	bf00      	nop
  404890:	252f6425 	.word	0x252f6425
  404894:	64252f64 	.word	0x64252f64
  404898:	3a642520 	.word	0x3a642520
  40489c:	253a6425 	.word	0x253a6425
  4048a0:	202d2064 	.word	0x202d2064
  4048a4:	706d6554 	.word	0x706d6554
  4048a8:	25203a20 	.word	0x25203a20
  4048ac:	200a2064 	.word	0x200a2064
  4048b0:	00000a0d 	.word	0x00000a0d
  4048b4:	41202d2d 	.word	0x41202d2d
  4048b8:	20434546 	.word	0x20434546
  4048bc:	706d6554 	.word	0x706d6554
  4048c0:	74617265 	.word	0x74617265
  4048c4:	20657275 	.word	0x20657275
  4048c8:	736e6553 	.word	0x736e6553
  4048cc:	4520726f 	.word	0x4520726f
  4048d0:	706d6178 	.word	0x706d6178
  4048d4:	2d20656c 	.word	0x2d20656c
  4048d8:	2d0a0d2d 	.word	0x2d0a0d2d
  4048dc:	4153202d 	.word	0x4153202d
  4048e0:	3037454d 	.word	0x3037454d
  4048e4:	4c50582d 	.word	0x4c50582d
  4048e8:	2d2d2044 	.word	0x2d2d2044
  4048ec:	2d2d0a0d 	.word	0x2d2d0a0d
  4048f0:	6d6f4320 	.word	0x6d6f4320
  4048f4:	656c6970 	.word	0x656c6970
  4048f8:	44203a64 	.word	0x44203a64
  4048fc:	20206365 	.word	0x20206365
  404900:	30322038 	.word	0x30322038
  404904:	31203731 	.word	0x31203731
  404908:	32323a36 	.word	0x32323a36
  40490c:	2030353a 	.word	0x2030353a
  404910:	000d2d2d 	.word	0x000d2d2d
  404914:	504d4554 	.word	0x504d4554
  404918:	54415245 	.word	0x54415245
  40491c:	20415255 	.word	0x20415255
  404920:	6425203a 	.word	0x6425203a
  404924:	0a0d2020 	.word	0x0a0d2020
  404928:	00000000 	.word	0x00000000
  40492c:	0a203120 	.word	0x0a203120
  404930:	00000000 	.word	0x00000000
  404934:	0a203220 	.word	0x0a203220
  404938:	00000000 	.word	0x00000000
  40493c:	0a203320 	.word	0x0a203320
  404940:	00000000 	.word	0x00000000
  404944:	00000043 	.word	0x00000043

00404948 <_global_impure_ptr>:
  404948:	20400020 0000000a                        .@ ....

00404950 <zeroes.6993>:
  404950:	30303030 30303030 30303030 30303030     0000000000000000
  404960:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  404970:	00000000 33323130 37363534 62613938     ....0123456789ab
  404980:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00404990 <blanks.6992>:
  404990:	20202020 20202020 20202020 20202020                     

004049a0 <_init>:
  4049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4049a2:	bf00      	nop
  4049a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4049a6:	bc08      	pop	{r3}
  4049a8:	469e      	mov	lr, r3
  4049aa:	4770      	bx	lr

004049ac <__init_array_start>:
  4049ac:	00402b45 	.word	0x00402b45

004049b0 <__frame_dummy_init_array_entry>:
  4049b0:	00400165                                e.@.

004049b4 <_fini>:
  4049b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4049b6:	bf00      	nop
  4049b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4049ba:	bc08      	pop	{r3}
  4049bc:	469e      	mov	lr, r3
  4049be:	4770      	bx	lr

004049c0 <__fini_array_start>:
  4049c0:	00400141 	.word	0x00400141
